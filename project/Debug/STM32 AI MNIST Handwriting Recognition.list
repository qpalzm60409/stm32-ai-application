
STM32 AI MNIST Handwriting Recognition.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016aa0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0006680c  08016c50  08016c50  00026c50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0807d45c  0807d45c  00090e04  2**0
                  CONTENTS
  4 .ARM          00000008  0807d45c  0807d45c  0008d45c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0807d464  0807d464  00090e04  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0807d464  0807d464  0008d464  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0807d468  0807d468  0008d468  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000e04  20000000  0807d46c  00090000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00019018  20000e04  0807e270  00090e04  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20019e1c  0807e270  00099e1c  2**0
                  ALLOC
 11 .ARM.attributes 00000034  00000000  00000000  00090e04  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002226c  00000000  00000000  00090e38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000058ae  00000000  00000000  000b30a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e40  00000000  00000000  000b8958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001b50  00000000  00000000  000ba798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c737  00000000  00000000  000bc2e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025e4b  00000000  00000000  000e8a1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f59a4  00000000  00000000  0010e86a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00006176  00000000  00000000  0020420e  2**0
                  CONTENTS, READONLY
 20 .iar.rtmodel  000001e7  00000000  00000000  0020a384  2**0
                  CONTENTS, READONLY
 21 .iar_vfe_header 00000024  00000000  00000000  0020a56c  2**2
                  CONTENTS, READONLY
 22 .debug_frame  0000da5c  00000000  00000000  0020a590  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000e04 	.word	0x20000e04
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08016c38 	.word	0x08016c38

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000e08 	.word	0x20000e08
 80001ec:	08016c38 	.word	0x08016c38

080001f0 <_ai_platform_get_io_buffers_info>:
 80001f0:	e92d 4ff2 	stmdb	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80001f4:	2500      	movs	r5, #0
 80001f6:	46aa      	mov	sl, r5
 80001f8:	b082      	sub	sp, #8
 80001fa:	4607      	mov	r7, r0
 80001fc:	46ab      	mov	fp, r5
 80001fe:	46d0      	mov	r8, sl
 8000200:	46d1      	mov	r9, sl
 8000202:	e028      	b.n	8000256 <_ai_platform_get_io_buffers_info+0x66>
 8000204:	2000      	movs	r0, #0
 8000206:	e01c      	b.n	8000242 <_ai_platform_get_io_buffers_info+0x52>
 8000208:	f850 400a 	ldr.w	r4, [r0, sl]
 800020c:	b364      	cbz	r4, 8000268 <_ai_platform_get_io_buffers_info+0x78>
 800020e:	68b8      	ldr	r0, [r7, #8]
 8000210:	6841      	ldr	r1, [r0, #4]
 8000212:	6880      	ldr	r0, [r0, #8]
 8000214:	4440      	add	r0, r8
 8000216:	eb01 0609 	add.w	r6, r1, r9
 800021a:	9000      	str	r0, [sp, #0]
 800021c:	69a1      	ldr	r1, [r4, #24]
 800021e:	6808      	ldr	r0, [r1, #0]
 8000220:	f005 fd58 	bl	8005cd4 <ai_array_to_buffer_fmt>
 8000224:	6030      	str	r0, [r6, #0]
 8000226:	2101      	movs	r1, #1
 8000228:	80b1      	strh	r1, [r6, #4]
 800022a:	68e0      	ldr	r0, [r4, #12]
 800022c:	68c1      	ldr	r1, [r0, #12]
 800022e:	80f1      	strh	r1, [r6, #6]
 8000230:	6882      	ldr	r2, [r0, #8]
 8000232:	8132      	strh	r2, [r6, #8]
 8000234:	6840      	ldr	r0, [r0, #4]
 8000236:	60f0      	str	r0, [r6, #12]
 8000238:	69a1      	ldr	r1, [r4, #24]
 800023a:	688a      	ldr	r2, [r1, #8]
 800023c:	6132      	str	r2, [r6, #16]
 800023e:	9800      	ldr	r0, [sp, #0]
 8000240:	b9e0      	cbnz	r0, 800027c <_ai_platform_get_io_buffers_info+0x8c>
 8000242:	6170      	str	r0, [r6, #20]
 8000244:	1c6d      	adds	r5, r5, #1
 8000246:	f10b 0b01 	add.w	fp, fp, #1
 800024a:	f109 0918 	add.w	r9, r9, #24
 800024e:	f108 0808 	add.w	r8, r8, #8
 8000252:	f10a 0a04 	add.w	sl, sl, #4
 8000256:	2f00      	cmp	r7, #0
 8000258:	bf14      	ite	ne
 800025a:	8838      	ldrhne	r0, [r7, #0]
 800025c:	2000      	moveq	r0, #0
 800025e:	4583      	cmp	fp, r0
 8000260:	d202      	bcs.n	8000268 <_ai_platform_get_io_buffers_info+0x78>
 8000262:	6878      	ldr	r0, [r7, #4]
 8000264:	2800      	cmp	r0, #0
 8000266:	d1cf      	bne.n	8000208 <_ai_platform_get_io_buffers_info+0x18>
 8000268:	b2a8      	uxth	r0, r5
 800026a:	b118      	cbz	r0, 8000274 <_ai_platform_get_io_buffers_info+0x84>
 800026c:	68b9      	ldr	r1, [r7, #8]
 800026e:	9802      	ldr	r0, [sp, #8]
 8000270:	684a      	ldr	r2, [r1, #4]
 8000272:	6002      	str	r2, [r0, #0]
 8000274:	b2a8      	uxth	r0, r5
 8000276:	b003      	add	sp, #12
 8000278:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800027c:	9900      	ldr	r1, [sp, #0]
 800027e:	2000      	movs	r0, #0
 8000280:	6008      	str	r0, [r1, #0]
 8000282:	9a00      	ldr	r2, [sp, #0]
 8000284:	6820      	ldr	r0, [r4, #0]
 8000286:	6050      	str	r0, [r2, #4]
 8000288:	2800      	cmp	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	8840      	ldrhne	r0, [r0, #2]
 800028e:	2800      	cmpne	r0, #0
 8000290:	d0b8      	beq.n	8000204 <_ai_platform_get_io_buffers_info+0x14>
 8000292:	9800      	ldr	r0, [sp, #0]
 8000294:	2101      	movs	r1, #1
 8000296:	6001      	str	r1, [r0, #0]
 8000298:	9800      	ldr	r0, [sp, #0]
 800029a:	e7d2      	b.n	8000242 <_ai_platform_get_io_buffers_info+0x52>

0800029c <_platform_network_state_setup>:
 800029c:	b430      	push	{r4, r5}
 800029e:	68d3      	ldr	r3, [r2, #12]
 80002a0:	6955      	ldr	r5, [r2, #20]
 80002a2:	68dc      	ldr	r4, [r3, #12]
 80002a4:	68eb      	ldr	r3, [r5, #12]
 80002a6:	435c      	muls	r4, r3
 80002a8:	6084      	str	r4, [r0, #8]
 80002aa:	888d      	ldrh	r5, [r1, #4]
 80002ac:	436c      	muls	r4, r5
 80002ae:	60c4      	str	r4, [r0, #12]
 80002b0:	6909      	ldr	r1, [r1, #16]
 80002b2:	68c3      	ldr	r3, [r0, #12]
 80002b4:	6041      	str	r1, [r0, #4]
 80002b6:	4419      	add	r1, r3
 80002b8:	6001      	str	r1, [r0, #0]
 80002ba:	6992      	ldr	r2, [r2, #24]
 80002bc:	6814      	ldr	r4, [r2, #0]
 80002be:	00a1      	lsls	r1, r4, #2
 80002c0:	d407      	bmi.n	80002d2 <_platform_network_state_setup+0x36>
 80002c2:	6894      	ldr	r4, [r2, #8]
 80002c4:	68d1      	ldr	r1, [r2, #12]
 80002c6:	6843      	ldr	r3, [r0, #4]
 80002c8:	1a64      	subs	r4, r4, r1
 80002ca:	1919      	adds	r1, r3, r4
 80002cc:	6091      	str	r1, [r2, #8]
 80002ce:	6840      	ldr	r0, [r0, #4]
 80002d0:	60d0      	str	r0, [r2, #12]
 80002d2:	bc30      	pop	{r4, r5}
 80002d4:	4770      	bx	lr

080002d6 <ai_platform_runtime_get_revision>:
 80002d6:	f8df 0814 	ldr.w	r0, [pc, #2068]	; 8000aec <.text_18>
 80002da:	6801      	ldr	r1, [r0, #0]
 80002dc:	0849      	lsrs	r1, r1, #1
 80002de:	0049      	lsls	r1, r1, #1
 80002e0:	6001      	str	r1, [r0, #0]
 80002e2:	2001      	movs	r0, #1
 80002e4:	f8df 1808 	ldr.w	r1, [pc, #2056]	; 8000af0 <.text_19>
 80002e8:	6088      	str	r0, [r1, #8]
 80002ea:	6888      	ldr	r0, [r1, #8]
 80002ec:	2800      	cmp	r0, #0
 80002ee:	d1fc      	bne.n	80002ea <ai_platform_runtime_get_revision+0x14>
 80002f0:	f8df 2800 	ldr.w	r2, [pc, #2048]	; 8000af4 <.text_20>
 80002f4:	600a      	str	r2, [r1, #0]
 80002f6:	6808      	ldr	r0, [r1, #0]
 80002f8:	f8df 17fc 	ldr.w	r1, [pc, #2044]	; 8000af8 <.text_21>
 80002fc:	4288      	cmp	r0, r1
 80002fe:	d000      	beq.n	8000302 <ai_platform_runtime_get_revision+0x2c>
 8000300:	e7fe      	b.n	8000300 <ai_platform_runtime_get_revision+0x2a>
 8000302:	a0ad      	add	r0, pc, #692	; (adr r0, 80005b8 <.text_13>)
 8000304:	4770      	bx	lr

08000306 <ai_platform_runtime_get_version>:
 8000306:	f8df 07e4 	ldr.w	r0, [pc, #2020]	; 8000aec <.text_18>
 800030a:	6801      	ldr	r1, [r0, #0]
 800030c:	0849      	lsrs	r1, r1, #1
 800030e:	0049      	lsls	r1, r1, #1
 8000310:	6001      	str	r1, [r0, #0]
 8000312:	2001      	movs	r0, #1
 8000314:	f8df 17d8 	ldr.w	r1, [pc, #2008]	; 8000af0 <.text_19>
 8000318:	6088      	str	r0, [r1, #8]
 800031a:	6888      	ldr	r0, [r1, #8]
 800031c:	2800      	cmp	r0, #0
 800031e:	d1fc      	bne.n	800031a <ai_platform_runtime_get_version+0x14>
 8000320:	f8df 27d0 	ldr.w	r2, [pc, #2000]	; 8000af4 <.text_20>
 8000324:	600a      	str	r2, [r1, #0]
 8000326:	6808      	ldr	r0, [r1, #0]
 8000328:	f8df 17cc 	ldr.w	r1, [pc, #1996]	; 8000af8 <.text_21>
 800032c:	4288      	cmp	r0, r1
 800032e:	d000      	beq.n	8000332 <ai_platform_runtime_get_version+0x2c>
 8000330:	e7fe      	b.n	8000330 <ai_platform_runtime_get_version+0x2a>
 8000332:	f20f 72d0 	addw	r2, pc, #2000	; 0x7d0
 8000336:	6810      	ldr	r0, [r2, #0]
 8000338:	4770      	bx	lr

0800033a <ai_platform_api_get_version>:
 800033a:	f8df 07b0 	ldr.w	r0, [pc, #1968]	; 8000aec <.text_18>
 800033e:	6801      	ldr	r1, [r0, #0]
 8000340:	0849      	lsrs	r1, r1, #1
 8000342:	0049      	lsls	r1, r1, #1
 8000344:	6001      	str	r1, [r0, #0]
 8000346:	2001      	movs	r0, #1
 8000348:	f8df 17a4 	ldr.w	r1, [pc, #1956]	; 8000af0 <.text_19>
 800034c:	6088      	str	r0, [r1, #8]
 800034e:	6888      	ldr	r0, [r1, #8]
 8000350:	2800      	cmp	r0, #0
 8000352:	d1fc      	bne.n	800034e <ai_platform_api_get_version+0x14>
 8000354:	f8df 279c 	ldr.w	r2, [pc, #1948]	; 8000af4 <.text_20>
 8000358:	600a      	str	r2, [r1, #0]
 800035a:	6808      	ldr	r0, [r1, #0]
 800035c:	f8df 1798 	ldr.w	r1, [pc, #1944]	; 8000af8 <.text_21>
 8000360:	4288      	cmp	r0, r1
 8000362:	d000      	beq.n	8000366 <ai_platform_api_get_version+0x2c>
 8000364:	e7fe      	b.n	8000364 <ai_platform_api_get_version+0x2a>
 8000366:	f20f 72a0 	addw	r2, pc, #1952	; 0x7a0
 800036a:	6810      	ldr	r0, [r2, #0]
 800036c:	4770      	bx	lr

0800036e <ai_platform_interface_api_get_version>:
 800036e:	f8df 077c 	ldr.w	r0, [pc, #1916]	; 8000aec <.text_18>
 8000372:	6801      	ldr	r1, [r0, #0]
 8000374:	0849      	lsrs	r1, r1, #1
 8000376:	0049      	lsls	r1, r1, #1
 8000378:	6001      	str	r1, [r0, #0]
 800037a:	2001      	movs	r0, #1
 800037c:	f8df 1770 	ldr.w	r1, [pc, #1904]	; 8000af0 <.text_19>
 8000380:	6088      	str	r0, [r1, #8]
 8000382:	6888      	ldr	r0, [r1, #8]
 8000384:	2800      	cmp	r0, #0
 8000386:	d1fc      	bne.n	8000382 <ai_platform_interface_api_get_version+0x14>
 8000388:	f8df 2768 	ldr.w	r2, [pc, #1896]	; 8000af4 <.text_20>
 800038c:	600a      	str	r2, [r1, #0]
 800038e:	6808      	ldr	r0, [r1, #0]
 8000390:	f8df 1764 	ldr.w	r1, [pc, #1892]	; 8000af8 <.text_21>
 8000394:	4288      	cmp	r0, r1
 8000396:	d000      	beq.n	800039a <ai_platform_interface_api_get_version+0x2c>
 8000398:	e7fe      	b.n	8000398 <ai_platform_interface_api_get_version+0x2a>
 800039a:	f20f 7270 	addw	r2, pc, #1904	; 0x770
 800039e:	6810      	ldr	r0, [r2, #0]
 80003a0:	4770      	bx	lr

080003a2 <ai_platform_context_acquire>:
 80003a2:	b120      	cbz	r0, 80003ae <ai_platform_context_acquire+0xc>
 80003a4:	6801      	ldr	r1, [r0, #0]
 80003a6:	f8df 2754 	ldr.w	r2, [pc, #1876]	; 8000afc <.text_22>
 80003aa:	4291      	cmp	r1, r2
 80003ac:	d000      	beq.n	80003b0 <ai_platform_context_acquire+0xe>
 80003ae:	2000      	movs	r0, #0
 80003b0:	f8df 1738 	ldr.w	r1, [pc, #1848]	; 8000aec <.text_18>
 80003b4:	680a      	ldr	r2, [r1, #0]
 80003b6:	0852      	lsrs	r2, r2, #1
 80003b8:	0052      	lsls	r2, r2, #1
 80003ba:	600a      	str	r2, [r1, #0]
 80003bc:	2101      	movs	r1, #1
 80003be:	f8df 2730 	ldr.w	r2, [pc, #1840]	; 8000af0 <.text_19>
 80003c2:	6091      	str	r1, [r2, #8]
 80003c4:	6891      	ldr	r1, [r2, #8]
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d1fc      	bne.n	80003c4 <ai_platform_context_acquire+0x22>
 80003ca:	f8df 3728 	ldr.w	r3, [pc, #1832]	; 8000af4 <.text_20>
 80003ce:	6013      	str	r3, [r2, #0]
 80003d0:	6811      	ldr	r1, [r2, #0]
 80003d2:	f8df 2724 	ldr.w	r2, [pc, #1828]	; 8000af8 <.text_21>
 80003d6:	4291      	cmp	r1, r2
 80003d8:	d000      	beq.n	80003dc <ai_platform_context_acquire+0x3a>
 80003da:	e7fe      	b.n	80003da <ai_platform_context_acquire+0x38>
 80003dc:	4770      	bx	lr

080003de <ai_platform_context_release>:
 80003de:	f8df 171c 	ldr.w	r1, [pc, #1820]	; 8000afc <.text_22>
 80003e2:	6001      	str	r1, [r0, #0]
 80003e4:	4770      	bx	lr

080003e6 <ai_platform_network_get_error>:
 80003e6:	b120      	cbz	r0, 80003f2 <ai_platform_network_get_error+0xc>
 80003e8:	6801      	ldr	r1, [r0, #0]
 80003ea:	f8df 2710 	ldr.w	r2, [pc, #1808]	; 8000afc <.text_22>
 80003ee:	4291      	cmp	r1, r2
 80003f0:	d000      	beq.n	80003f4 <ai_platform_network_get_error+0xe>
 80003f2:	2000      	movs	r0, #0
 80003f4:	f8df 16f4 	ldr.w	r1, [pc, #1780]	; 8000aec <.text_18>
 80003f8:	680a      	ldr	r2, [r1, #0]
 80003fa:	0852      	lsrs	r2, r2, #1
 80003fc:	0052      	lsls	r2, r2, #1
 80003fe:	600a      	str	r2, [r1, #0]
 8000400:	2101      	movs	r1, #1
 8000402:	f8df 26ec 	ldr.w	r2, [pc, #1772]	; 8000af0 <.text_19>
 8000406:	6091      	str	r1, [r2, #8]
 8000408:	6891      	ldr	r1, [r2, #8]
 800040a:	2900      	cmp	r1, #0
 800040c:	d1fc      	bne.n	8000408 <ai_platform_network_get_error+0x22>
 800040e:	f8df 36e4 	ldr.w	r3, [pc, #1764]	; 8000af4 <.text_20>
 8000412:	6013      	str	r3, [r2, #0]
 8000414:	6811      	ldr	r1, [r2, #0]
 8000416:	f8df 26e0 	ldr.w	r2, [pc, #1760]	; 8000af8 <.text_21>
 800041a:	4291      	cmp	r1, r2
 800041c:	d000      	beq.n	8000420 <ai_platform_network_get_error+0x3a>
 800041e:	e7fe      	b.n	800041e <ai_platform_network_get_error+0x38>
 8000420:	2800      	cmp	r0, #0
 8000422:	bf1c      	itt	ne
 8000424:	3010      	addne	r0, #16
 8000426:	f000 bb83 	bne.w	8000b30 <core_get_error>
 800042a:	f20f 60f4 	addw	r0, pc, #1780	; 0x6f4
 800042e:	6800      	ldr	r0, [r0, #0]
 8000430:	4770      	bx	lr

08000432 <ai_platform_network_set_error>:
 8000432:	2800      	cmp	r0, #0
 8000434:	bf1c      	itt	ne
 8000436:	3010      	addne	r0, #16
 8000438:	f000 bb7f 	bne.w	8000b3a <core_set_error>
 800043c:	4770      	bx	lr

0800043e <ai_platform_api_get_network_report>:
 800043e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000442:	ea5f 0900 	movs.w	r9, r0
 8000446:	b081      	sub	sp, #4
 8000448:	460c      	mov	r4, r1
 800044a:	d005      	beq.n	8000458 <ai_platform_api_get_network_report+0x1a>
 800044c:	f8d9 0000 	ldr.w	r0, [r9]
 8000450:	f8df 16a8 	ldr.w	r1, [pc, #1704]	; 8000afc <.text_22>
 8000454:	4288      	cmp	r0, r1
 8000456:	d001      	beq.n	800045c <ai_platform_api_get_network_report+0x1e>
 8000458:	f04f 0900 	mov.w	r9, #0
 800045c:	f8df 568c 	ldr.w	r5, [pc, #1676]	; 8000aec <.text_18>
 8000460:	f8df 668c 	ldr.w	r6, [pc, #1676]	; 8000af0 <.text_19>
 8000464:	6828      	ldr	r0, [r5, #0]
 8000466:	0840      	lsrs	r0, r0, #1
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	6028      	str	r0, [r5, #0]
 800046c:	2101      	movs	r1, #1
 800046e:	60b1      	str	r1, [r6, #8]
 8000470:	68b0      	ldr	r0, [r6, #8]
 8000472:	2800      	cmp	r0, #0
 8000474:	d1fc      	bne.n	8000470 <ai_platform_api_get_network_report+0x32>
 8000476:	f8df 767c 	ldr.w	r7, [pc, #1660]	; 8000af4 <.text_20>
 800047a:	f8df 867c 	ldr.w	r8, [pc, #1660]	; 8000af8 <.text_21>
 800047e:	6037      	str	r7, [r6, #0]
 8000480:	6830      	ldr	r0, [r6, #0]
 8000482:	4540      	cmp	r0, r8
 8000484:	d000      	beq.n	8000488 <ai_platform_api_get_network_report+0x4a>
 8000486:	e7fe      	b.n	8000486 <ai_platform_api_get_network_report+0x48>
 8000488:	f1b9 0f00 	cmp.w	r9, #0
 800048c:	bf18      	it	ne
 800048e:	2c00      	cmpne	r4, #0
 8000490:	d034      	beq.n	80004fc <ai_platform_api_get_network_report+0xbe>
 8000492:	2000      	movs	r0, #0
 8000494:	66e0      	str	r0, [r4, #108]	; 0x6c
 8000496:	f8d9 2050 	ldr.w	r2, [r9, #80]	; 0x50
 800049a:	b152      	cbz	r2, 80004b2 <ai_platform_api_get_network_report+0x74>
 800049c:	e000      	b.n	80004a0 <ai_platform_api_get_network_report+0x62>
 800049e:	4602      	mov	r2, r0
 80004a0:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 80004a2:	1c49      	adds	r1, r1, #1
 80004a4:	66e1      	str	r1, [r4, #108]	; 0x6c
 80004a6:	68d0      	ldr	r0, [r2, #12]
 80004a8:	4282      	cmp	r2, r0
 80004aa:	bf18      	it	ne
 80004ac:	2800      	cmpne	r0, #0
 80004ae:	d1f6      	bne.n	800049e <ai_platform_api_get_network_report+0x60>
 80004b0:	b911      	cbnz	r1, 80004b8 <ai_platform_api_get_network_report+0x7a>
 80004b2:	2218      	movs	r2, #24
 80004b4:	2111      	movs	r1, #17
 80004b6:	e01d      	b.n	80004f4 <ai_platform_api_get_network_report+0xb6>
 80004b8:	f8b9 0048 	ldrh.w	r0, [r9, #72]	; 0x48
 80004bc:	b108      	cbz	r0, 80004c2 <ai_platform_api_get_network_report+0x84>
 80004be:	f8d9 004c 	ldr.w	r0, [r9, #76]	; 0x4c
 80004c2:	f104 0134 	add.w	r1, r4, #52	; 0x34
 80004c6:	f7ff fe93 	bl	80001f0 <_ai_platform_get_io_buffers_info>
 80004ca:	8620      	strh	r0, [r4, #48]	; 0x30
 80004cc:	b910      	cbnz	r0, 80004d4 <ai_platform_api_get_network_report+0x96>
 80004ce:	2218      	movs	r2, #24
 80004d0:	2112      	movs	r1, #18
 80004d2:	e00f      	b.n	80004f4 <ai_platform_api_get_network_report+0xb6>
 80004d4:	f8b9 0048 	ldrh.w	r0, [r9, #72]	; 0x48
 80004d8:	2802      	cmp	r0, #2
 80004da:	bfa6      	itte	ge
 80004dc:	f8d9 004c 	ldrge.w	r0, [r9, #76]	; 0x4c
 80004e0:	300c      	addge	r0, #12
 80004e2:	2000      	movlt	r0, #0
 80004e4:	f104 0138 	add.w	r1, r4, #56	; 0x38
 80004e8:	f7ff fe82 	bl	80001f0 <_ai_platform_get_io_buffers_info>
 80004ec:	8660      	strh	r0, [r4, #50]	; 0x32
 80004ee:	b948      	cbnz	r0, 8000504 <ai_platform_api_get_network_report+0xc6>
 80004f0:	2218      	movs	r2, #24
 80004f2:	2113      	movs	r1, #19
 80004f4:	f109 0010 	add.w	r0, r9, #16
 80004f8:	f000 fb1f 	bl	8000b3a <core_set_error>
 80004fc:	2000      	movs	r0, #0
 80004fe:	b001      	add	sp, #4
 8000500:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000504:	f8d9 0004 	ldr.w	r0, [r9, #4]
 8000508:	6720      	str	r0, [r4, #112]	; 0x70
 800050a:	f109 0230 	add.w	r2, r9, #48	; 0x30
 800050e:	e892 5c09 	ldmia.w	r2, {r0, r3, sl, fp, ip, lr}
 8000512:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 8000516:	f109 0918 	add.w	r9, r9, #24
 800051a:	e881 5c09 	stmia.w	r1, {r0, r3, sl, fp, ip, lr}
 800051e:	e899 540e 	ldmia.w	r9, {r1, r2, r3, sl, ip, lr}
 8000522:	f104 0054 	add.w	r0, r4, #84	; 0x54
 8000526:	e880 540e 	stmia.w	r0, {r1, r2, r3, sl, ip, lr}
 800052a:	6828      	ldr	r0, [r5, #0]
 800052c:	0840      	lsrs	r0, r0, #1
 800052e:	0040      	lsls	r0, r0, #1
 8000530:	6028      	str	r0, [r5, #0]
 8000532:	2301      	movs	r3, #1
 8000534:	60b3      	str	r3, [r6, #8]
 8000536:	68b0      	ldr	r0, [r6, #8]
 8000538:	2800      	cmp	r0, #0
 800053a:	d1fc      	bne.n	8000536 <ai_platform_api_get_network_report+0xf8>
 800053c:	6037      	str	r7, [r6, #0]
 800053e:	6831      	ldr	r1, [r6, #0]
 8000540:	4541      	cmp	r1, r8
 8000542:	d000      	beq.n	8000546 <ai_platform_api_get_network_report+0x108>
 8000544:	e7fe      	b.n	8000544 <ai_platform_api_get_network_report+0x106>
 8000546:	a01c      	add	r0, pc, #112	; (adr r0, 80005b8 <.text_13>)
 8000548:	6120      	str	r0, [r4, #16]
 800054a:	6829      	ldr	r1, [r5, #0]
 800054c:	0849      	lsrs	r1, r1, #1
 800054e:	0049      	lsls	r1, r1, #1
 8000550:	6029      	str	r1, [r5, #0]
 8000552:	60b3      	str	r3, [r6, #8]
 8000554:	68b0      	ldr	r0, [r6, #8]
 8000556:	2800      	cmp	r0, #0
 8000558:	d1fc      	bne.n	8000554 <ai_platform_api_get_network_report+0x116>
 800055a:	6037      	str	r7, [r6, #0]
 800055c:	6831      	ldr	r1, [r6, #0]
 800055e:	4541      	cmp	r1, r8
 8000560:	d000      	beq.n	8000564 <ai_platform_api_get_network_report+0x126>
 8000562:	e7fe      	b.n	8000562 <ai_platform_api_get_network_report+0x124>
 8000564:	f20f 509c 	addw	r0, pc, #1436	; 0x59c
 8000568:	6802      	ldr	r2, [r0, #0]
 800056a:	6162      	str	r2, [r4, #20]
 800056c:	6829      	ldr	r1, [r5, #0]
 800056e:	0849      	lsrs	r1, r1, #1
 8000570:	0049      	lsls	r1, r1, #1
 8000572:	6029      	str	r1, [r5, #0]
 8000574:	60b3      	str	r3, [r6, #8]
 8000576:	68b0      	ldr	r0, [r6, #8]
 8000578:	2800      	cmp	r0, #0
 800057a:	d1fc      	bne.n	8000576 <ai_platform_api_get_network_report+0x138>
 800057c:	6037      	str	r7, [r6, #0]
 800057e:	6831      	ldr	r1, [r6, #0]
 8000580:	4541      	cmp	r1, r8
 8000582:	d000      	beq.n	8000586 <ai_platform_api_get_network_report+0x148>
 8000584:	e7fe      	b.n	8000584 <ai_platform_api_get_network_report+0x146>
 8000586:	f20f 5080 	addw	r0, pc, #1408	; 0x580
 800058a:	6802      	ldr	r2, [r0, #0]
 800058c:	6262      	str	r2, [r4, #36]	; 0x24
 800058e:	6829      	ldr	r1, [r5, #0]
 8000590:	0849      	lsrs	r1, r1, #1
 8000592:	0049      	lsls	r1, r1, #1
 8000594:	6029      	str	r1, [r5, #0]
 8000596:	60b3      	str	r3, [r6, #8]
 8000598:	68b0      	ldr	r0, [r6, #8]
 800059a:	2800      	cmp	r0, #0
 800059c:	d1fc      	bne.n	8000598 <ai_platform_api_get_network_report+0x15a>
 800059e:	6037      	str	r7, [r6, #0]
 80005a0:	6831      	ldr	r1, [r6, #0]
 80005a2:	4541      	cmp	r1, r8
 80005a4:	d000      	beq.n	80005a8 <ai_platform_api_get_network_report+0x16a>
 80005a6:	e7fe      	b.n	80005a6 <ai_platform_api_get_network_report+0x168>
 80005a8:	f20f 5060 	addw	r0, pc, #1376	; 0x560
 80005ac:	6802      	ldr	r2, [r0, #0]
 80005ae:	62a2      	str	r2, [r4, #40]	; 0x28
 80005b0:	2001      	movs	r0, #1
 80005b2:	b001      	add	sp, #4
 80005b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080005b8 <.text_13>:
 80005b8:	00000000 	.word	0x00000000

080005bc <ai_platform_network_create>:
 80005bc:	b570      	push	{r4, r5, r6, lr}
 80005be:	9d04      	ldr	r5, [sp, #16]
 80005c0:	4604      	mov	r4, r0
 80005c2:	9805      	ldr	r0, [sp, #20]
 80005c4:	b2db      	uxtb	r3, r3
 80005c6:	042d      	lsls	r5, r5, #16
 80005c8:	ea45 6503 	orr.w	r5, r5, r3, lsl #24
 80005cc:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
 80005d0:	f20f 5050 	addw	r0, pc, #1360	; 0x550
 80005d4:	6806      	ldr	r6, [r0, #0]
 80005d6:	f8df 0514 	ldr.w	r0, [pc, #1300]	; 8000aec <.text_18>
 80005da:	6801      	ldr	r1, [r0, #0]
 80005dc:	0849      	lsrs	r1, r1, #1
 80005de:	0049      	lsls	r1, r1, #1
 80005e0:	6001      	str	r1, [r0, #0]
 80005e2:	2001      	movs	r0, #1
 80005e4:	f8df 1508 	ldr.w	r1, [pc, #1288]	; 8000af0 <.text_19>
 80005e8:	6088      	str	r0, [r1, #8]
 80005ea:	6888      	ldr	r0, [r1, #8]
 80005ec:	2800      	cmp	r0, #0
 80005ee:	d1fc      	bne.n	80005ea <ai_platform_network_create+0x2e>
 80005f0:	f8df 3500 	ldr.w	r3, [pc, #1280]	; 8000af4 <.text_20>
 80005f4:	600b      	str	r3, [r1, #0]
 80005f6:	6808      	ldr	r0, [r1, #0]
 80005f8:	f8df 14fc 	ldr.w	r1, [pc, #1276]	; 8000af8 <.text_21>
 80005fc:	4288      	cmp	r0, r1
 80005fe:	d000      	beq.n	8000602 <ai_platform_network_create+0x46>
 8000600:	e7fe      	b.n	8000600 <ai_platform_network_create+0x44>
 8000602:	b91c      	cbnz	r4, 800060c <ai_platform_network_create+0x50>
 8000604:	f20f 5020 	addw	r0, pc, #1312	; 0x520
 8000608:	6800      	ldr	r0, [r0, #0]
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f8df 14ec 	ldr.w	r1, [pc, #1260]	; 8000afc <.text_22>
 8000610:	6011      	str	r1, [r2, #0]
 8000612:	6022      	str	r2, [r4, #0]
 8000614:	f000 fa8a 	bl	8000b2c <core_init>
 8000618:	b910      	cbnz	r0, 8000620 <ai_platform_network_create+0x64>
 800061a:	f20f 40f4 	addw	r0, pc, #1268	; 0x4f4
 800061e:	e00d      	b.n	800063c <ai_platform_network_create+0x80>
 8000620:	f8df 14dc 	ldr.w	r1, [pc, #1244]	; 8000b00 <.text_23>
 8000624:	428d      	cmp	r5, r1
 8000626:	bf28      	it	cs
 8000628:	f20f 40e8 	addwcs	r0, pc, #1256	; 0x4e8
 800062c:	d206      	bcs.n	800063c <ai_platform_network_create+0x80>
 800062e:	f20f 40e8 	addw	r0, pc, #1256	; 0x4e8
 8000632:	f000 fa97 	bl	8000b64 <ai_check_custom_types>
 8000636:	b920      	cbnz	r0, 8000642 <ai_platform_network_create+0x86>
 8000638:	f20f 40e0 	addw	r0, pc, #1248	; 0x4e0
 800063c:	6806      	ldr	r6, [r0, #0]
 800063e:	2100      	movs	r1, #0
 8000640:	6021      	str	r1, [r4, #0]
 8000642:	4630      	mov	r0, r6
 8000644:	bd70      	pop	{r4, r5, r6, pc}

08000646 <ai_platform_network_destroy>:
 8000646:	b130      	cbz	r0, 8000656 <ai_platform_network_destroy+0x10>
 8000648:	6801      	ldr	r1, [r0, #0]
 800064a:	f8df 24b0 	ldr.w	r2, [pc, #1200]	; 8000afc <.text_22>
 800064e:	4291      	cmp	r1, r2
 8000650:	bf08      	it	eq
 8000652:	4602      	moveq	r2, r0
 8000654:	d000      	beq.n	8000658 <ai_platform_network_destroy+0x12>
 8000656:	2200      	movs	r2, #0
 8000658:	f8df 1490 	ldr.w	r1, [pc, #1168]	; 8000aec <.text_18>
 800065c:	680b      	ldr	r3, [r1, #0]
 800065e:	085b      	lsrs	r3, r3, #1
 8000660:	005b      	lsls	r3, r3, #1
 8000662:	600b      	str	r3, [r1, #0]
 8000664:	2101      	movs	r1, #1
 8000666:	f8df 3488 	ldr.w	r3, [pc, #1160]	; 8000af0 <.text_19>
 800066a:	6099      	str	r1, [r3, #8]
 800066c:	6899      	ldr	r1, [r3, #8]
 800066e:	2900      	cmp	r1, #0
 8000670:	d1fc      	bne.n	800066c <ai_platform_network_destroy+0x26>
 8000672:	f8df c480 	ldr.w	ip, [pc, #1152]	; 8000af4 <.text_20>
 8000676:	f8c3 c000 	str.w	ip, [r3]
 800067a:	6819      	ldr	r1, [r3, #0]
 800067c:	f8df 3478 	ldr.w	r3, [pc, #1144]	; 8000af8 <.text_21>
 8000680:	4299      	cmp	r1, r3
 8000682:	d000      	beq.n	8000686 <ai_platform_network_destroy+0x40>
 8000684:	e7fe      	b.n	8000684 <ai_platform_network_destroy+0x3e>
 8000686:	b102      	cbz	r2, 800068a <ai_platform_network_destroy+0x44>
 8000688:	2000      	movs	r0, #0
 800068a:	4770      	bx	lr

0800068c <ai_platform_network_init>:
 800068c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000690:	b081      	sub	sp, #4
 8000692:	460a      	mov	r2, r1
 8000694:	b120      	cbz	r0, 80006a0 <ai_platform_network_init+0x14>
 8000696:	6801      	ldr	r1, [r0, #0]
 8000698:	f8df 3460 	ldr.w	r3, [pc, #1120]	; 8000afc <.text_22>
 800069c:	4299      	cmp	r1, r3
 800069e:	d000      	beq.n	80006a2 <ai_platform_network_init+0x16>
 80006a0:	2000      	movs	r0, #0
 80006a2:	f8df 1448 	ldr.w	r1, [pc, #1096]	; 8000aec <.text_18>
 80006a6:	680b      	ldr	r3, [r1, #0]
 80006a8:	085b      	lsrs	r3, r3, #1
 80006aa:	005b      	lsls	r3, r3, #1
 80006ac:	600b      	str	r3, [r1, #0]
 80006ae:	2101      	movs	r1, #1
 80006b0:	f8df 343c 	ldr.w	r3, [pc, #1084]	; 8000af0 <.text_19>
 80006b4:	6099      	str	r1, [r3, #8]
 80006b6:	6899      	ldr	r1, [r3, #8]
 80006b8:	2900      	cmp	r1, #0
 80006ba:	d1fc      	bne.n	80006b6 <ai_platform_network_init+0x2a>
 80006bc:	f8df 4434 	ldr.w	r4, [pc, #1076]	; 8000af4 <.text_20>
 80006c0:	601c      	str	r4, [r3, #0]
 80006c2:	6819      	ldr	r1, [r3, #0]
 80006c4:	f8df 3430 	ldr.w	r3, [pc, #1072]	; 8000af8 <.text_21>
 80006c8:	4299      	cmp	r1, r3
 80006ca:	d000      	beq.n	80006ce <ai_platform_network_init+0x42>
 80006cc:	e7fe      	b.n	80006cc <ai_platform_network_init+0x40>
 80006ce:	2800      	cmp	r0, #0
 80006d0:	d035      	beq.n	800073e <ai_platform_network_init+0xb2>
 80006d2:	b90a      	cbnz	r2, 80006d8 <ai_platform_network_init+0x4c>
 80006d4:	2211      	movs	r2, #17
 80006d6:	e012      	b.n	80006fe <ai_platform_network_init+0x72>
 80006d8:	6913      	ldr	r3, [r2, #16]
 80006da:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80006dc:	b939      	cbnz	r1, 80006ee <ai_platform_network_init+0x62>
 80006de:	8c11      	ldrh	r1, [r2, #32]
 80006e0:	8bd5      	ldrh	r5, [r2, #30]
 80006e2:	6a54      	ldr	r4, [r2, #36]	; 0x24
 80006e4:	4369      	muls	r1, r5
 80006e6:	4361      	muls	r1, r4
 80006e8:	bf18      	it	ne
 80006ea:	2213      	movne	r2, #19
 80006ec:	d107      	bne.n	80006fe <ai_platform_network_init+0x72>
 80006ee:	b973      	cbnz	r3, 800070e <ai_platform_network_init+0x82>
 80006f0:	8911      	ldrh	r1, [r2, #8]
 80006f2:	88d4      	ldrh	r4, [r2, #6]
 80006f4:	68d3      	ldr	r3, [r2, #12]
 80006f6:	4361      	muls	r1, r4
 80006f8:	4359      	muls	r1, r3
 80006fa:	d008      	beq.n	800070e <ai_platform_network_init+0x82>
 80006fc:	2212      	movs	r2, #18
 80006fe:	2110      	movs	r1, #16
 8000700:	3010      	adds	r0, #16
 8000702:	f000 fa1a 	bl	8000b3a <core_set_error>
 8000706:	2000      	movs	r0, #0
 8000708:	b001      	add	sp, #4
 800070a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800070e:	e8b2 10f8 	ldmia.w	r2!, {r3, r4, r5, r6, r7, ip}
 8000712:	f100 0118 	add.w	r1, r0, #24
 8000716:	f100 0e30 	add.w	lr, r0, #48	; 0x30
 800071a:	e881 10f8 	stmia.w	r1, {r3, r4, r5, r6, r7, ip}
 800071e:	e892 0f0a 	ldmia.w	r2, {r1, r3, r8, r9, sl, fp}
 8000722:	e88e 0f0a 	stmia.w	lr, {r1, r3, r8, r9, sl, fp}
 8000726:	2103      	movs	r1, #3
 8000728:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800072a:	60c1      	str	r1, [r0, #12]
 800072c:	b13a      	cbz	r2, 800073e <ai_platform_network_init+0xb2>
 800072e:	e000      	b.n	8000732 <ai_platform_network_init+0xa6>
 8000730:	460a      	mov	r2, r1
 8000732:	68d1      	ldr	r1, [r2, #12]
 8000734:	6090      	str	r0, [r2, #8]
 8000736:	428a      	cmp	r2, r1
 8000738:	bf18      	it	ne
 800073a:	2900      	cmpne	r1, #0
 800073c:	d1f8      	bne.n	8000730 <ai_platform_network_init+0xa4>
 800073e:	b001      	add	sp, #4
 8000740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000744 <ai_platform_network_process>:
 8000744:	e92d 4ff4 	stmdb	sp!, {r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000748:	b082      	sub	sp, #8
 800074a:	460a      	mov	r2, r1
 800074c:	b120      	cbz	r0, 8000758 <ai_platform_network_process+0x14>
 800074e:	6801      	ldr	r1, [r0, #0]
 8000750:	f8df 33a8 	ldr.w	r3, [pc, #936]	; 8000afc <.text_22>
 8000754:	4299      	cmp	r1, r3
 8000756:	d000      	beq.n	800075a <ai_platform_network_process+0x16>
 8000758:	2000      	movs	r0, #0
 800075a:	f8df 1390 	ldr.w	r1, [pc, #912]	; 8000aec <.text_18>
 800075e:	680b      	ldr	r3, [r1, #0]
 8000760:	085b      	lsrs	r3, r3, #1
 8000762:	005b      	lsls	r3, r3, #1
 8000764:	600b      	str	r3, [r1, #0]
 8000766:	2101      	movs	r1, #1
 8000768:	f8df 3384 	ldr.w	r3, [pc, #900]	; 8000af0 <.text_19>
 800076c:	6099      	str	r1, [r3, #8]
 800076e:	6899      	ldr	r1, [r3, #8]
 8000770:	2900      	cmp	r1, #0
 8000772:	d1fc      	bne.n	800076e <ai_platform_network_process+0x2a>
 8000774:	f8df 437c 	ldr.w	r4, [pc, #892]	; 8000af4 <.text_20>
 8000778:	601c      	str	r4, [r3, #0]
 800077a:	6819      	ldr	r1, [r3, #0]
 800077c:	f8df 3378 	ldr.w	r3, [pc, #888]	; 8000af8 <.text_21>
 8000780:	4299      	cmp	r1, r3
 8000782:	d000      	beq.n	8000786 <ai_platform_network_process+0x42>
 8000784:	e7fe      	b.n	8000784 <ai_platform_network_process+0x40>
 8000786:	2800      	cmp	r0, #0
 8000788:	f000 8113 	beq.w	80009b2 <ai_platform_network_process+0x26e>
 800078c:	f8b0 1048 	ldrh.w	r1, [r0, #72]	; 0x48
 8000790:	b101      	cbz	r1, 8000794 <ai_platform_network_process+0x50>
 8000792:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8000794:	2300      	movs	r3, #0
 8000796:	82c3      	strh	r3, [r0, #22]
 8000798:	2400      	movs	r4, #0
 800079a:	7b03      	ldrb	r3, [r0, #12]
 800079c:	8284      	strh	r4, [r0, #20]
 800079e:	f003 0303 	and.w	r3, r3, #3
 80007a2:	2b03      	cmp	r3, #3
 80007a4:	d002      	beq.n	80007ac <ai_platform_network_process+0x68>
 80007a6:	2230      	movs	r2, #48	; 0x30
 80007a8:	2111      	movs	r1, #17
 80007aa:	e0ff      	b.n	80009ac <ai_platform_network_process+0x268>
 80007ac:	2a00      	cmp	r2, #0
 80007ae:	bf1e      	ittt	ne
 80007b0:	2900      	cmpne	r1, #0
 80007b2:	880b      	ldrhne	r3, [r1, #0]
 80007b4:	2b00      	cmpne	r3, #0
 80007b6:	f000 80f7 	beq.w	80009a8 <ai_platform_network_process+0x264>
 80007ba:	f8b2 b004 	ldrh.w	fp, [r2, #4]
 80007be:	9100      	str	r1, [sp, #0]
 80007c0:	46a0      	mov	r8, r4
 80007c2:	46a1      	mov	r9, r4
 80007c4:	2600      	movs	r6, #0
 80007c6:	1d17      	adds	r7, r2, #4
 80007c8:	4682      	mov	sl, r0
 80007ca:	e014      	b.n	80007f6 <ai_platform_network_process+0xb2>
 80007cc:	68f8      	ldr	r0, [r7, #12]
 80007ce:	2800      	cmp	r0, #0
 80007d0:	f000 80e9 	beq.w	80009a6 <ai_platform_network_process+0x262>
 80007d4:	8838      	ldrh	r0, [r7, #0]
 80007d6:	2800      	cmp	r0, #0
 80007d8:	d052      	beq.n	8000880 <ai_platform_network_process+0x13c>
 80007da:	4558      	cmp	r0, fp
 80007dc:	bf28      	it	cs
 80007de:	4683      	movcs	fp, r0
 80007e0:	4622      	mov	r2, r4
 80007e2:	1f39      	subs	r1, r7, #4
 80007e4:	4628      	mov	r0, r5
 80007e6:	f7ff fd59 	bl	800029c <_platform_network_state_setup>
 80007ea:	f108 0801 	add.w	r8, r8, #1
 80007ee:	3718      	adds	r7, #24
 80007f0:	3610      	adds	r6, #16
 80007f2:	f109 0904 	add.w	r9, r9, #4
 80007f6:	9800      	ldr	r0, [sp, #0]
 80007f8:	8801      	ldrh	r1, [r0, #0]
 80007fa:	4588      	cmp	r8, r1
 80007fc:	d24a      	bcs.n	8000894 <ai_platform_network_process+0x150>
 80007fe:	6840      	ldr	r0, [r0, #4]
 8000800:	2800      	cmp	r0, #0
 8000802:	bf1c      	itt	ne
 8000804:	f850 4009 	ldrne.w	r4, [r0, r9]
 8000808:	2c00      	cmpne	r4, #0
 800080a:	d043      	beq.n	8000894 <ai_platform_network_process+0x150>
 800080c:	9800      	ldr	r0, [sp, #0]
 800080e:	6881      	ldr	r1, [r0, #8]
 8000810:	680a      	ldr	r2, [r1, #0]
 8000812:	1995      	adds	r5, r2, r6
 8000814:	f000 80c7 	beq.w	80009a6 <ai_platform_network_process+0x262>
 8000818:	69a0      	ldr	r0, [r4, #24]
 800081a:	6841      	ldr	r1, [r0, #4]
 800081c:	887b      	ldrh	r3, [r7, #2]
 800081e:	88ba      	ldrh	r2, [r7, #4]
 8000820:	68b8      	ldr	r0, [r7, #8]
 8000822:	fb03 fc02 	mul.w	ip, r3, r2
 8000826:	fb00 fc0c 	mul.w	ip, r0, ip
 800082a:	4561      	cmp	r1, ip
 800082c:	d32d      	bcc.n	800088a <ai_platform_network_process+0x146>
 800082e:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8000832:	f8dc e00c 	ldr.w	lr, [ip, #12]
 8000836:	459e      	cmp	lr, r3
 8000838:	bf01      	itttt	eq
 800083a:	f8dc 3008 	ldreq.w	r3, [ip, #8]
 800083e:	4293      	cmpeq	r3, r2
 8000840:	f8dc 2004 	ldreq.w	r2, [ip, #4]
 8000844:	4282      	cmpeq	r2, r0
 8000846:	d120      	bne.n	800088a <ai_platform_network_process+0x146>
 8000848:	69a0      	ldr	r0, [r4, #24]
 800084a:	6800      	ldr	r0, [r0, #0]
 800084c:	f005 fb1a 	bl	8005e84 <ai_array_get_byte_size>
 8000850:	68e1      	ldr	r1, [r4, #12]
 8000852:	68ca      	ldr	r2, [r1, #12]
 8000854:	6961      	ldr	r1, [r4, #20]
 8000856:	68cb      	ldr	r3, [r1, #12]
 8000858:	435a      	muls	r2, r3
 800085a:	4290      	cmp	r0, r2
 800085c:	d315      	bcc.n	800088a <ai_platform_network_process+0x146>
 800085e:	69a0      	ldr	r0, [r4, #24]
 8000860:	6800      	ldr	r0, [r0, #0]
 8000862:	f005 fa37 	bl	8005cd4 <ai_array_to_buffer_fmt>
 8000866:	f857 1c04 	ldr.w	r1, [r7, #-4]
 800086a:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 800086e:	f021 417e 	bic.w	r1, r1, #4261412864	; 0xfe000000
 8000872:	4288      	cmp	r0, r1
 8000874:	d0aa      	beq.n	80007cc <ai_platform_network_process+0x88>
 8000876:	2219      	movs	r2, #25
 8000878:	2112      	movs	r1, #18
 800087a:	f10a 0010 	add.w	r0, sl, #16
 800087e:	e096      	b.n	80009ae <ai_platform_network_process+0x26a>
 8000880:	2221      	movs	r2, #33	; 0x21
 8000882:	2112      	movs	r1, #18
 8000884:	f10a 0010 	add.w	r0, sl, #16
 8000888:	e091      	b.n	80009ae <ai_platform_network_process+0x26a>
 800088a:	2218      	movs	r2, #24
 800088c:	2112      	movs	r1, #18
 800088e:	f10a 0010 	add.w	r0, sl, #16
 8000892:	e08c      	b.n	80009ae <ai_platform_network_process+0x26a>
 8000894:	9902      	ldr	r1, [sp, #8]
 8000896:	2900      	cmp	r1, #0
 8000898:	4655      	mov	r5, sl
 800089a:	d075      	beq.n	8000988 <ai_platform_network_process+0x244>
 800089c:	f8b5 0048 	ldrh.w	r0, [r5, #72]	; 0x48
 80008a0:	2802      	cmp	r0, #2
 80008a2:	db7b      	blt.n	800099c <ai_platform_network_process+0x258>
 80008a4:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 80008a6:	300c      	adds	r0, #12
 80008a8:	bf1c      	itt	ne
 80008aa:	8802      	ldrhne	r2, [r0, #0]
 80008ac:	2a00      	cmpne	r2, #0
 80008ae:	d075      	beq.n	800099c <ai_platform_network_process+0x258>
 80008b0:	f04f 0800 	mov.w	r8, #0
 80008b4:	46c1      	mov	r9, r8
 80008b6:	2600      	movs	r6, #0
 80008b8:	1d0f      	adds	r7, r1, #4
 80008ba:	9000      	str	r0, [sp, #0]
 80008bc:	e013      	b.n	80008e6 <ai_platform_network_process+0x1a2>
 80008be:	68f8      	ldr	r0, [r7, #12]
 80008c0:	2800      	cmp	r0, #0
 80008c2:	d059      	beq.n	8000978 <ai_platform_network_process+0x234>
 80008c4:	8838      	ldrh	r0, [r7, #0]
 80008c6:	2800      	cmp	r0, #0
 80008c8:	d051      	beq.n	800096e <ai_platform_network_process+0x22a>
 80008ca:	4558      	cmp	r0, fp
 80008cc:	bf28      	it	cs
 80008ce:	4683      	movcs	fp, r0
 80008d0:	4622      	mov	r2, r4
 80008d2:	1f39      	subs	r1, r7, #4
 80008d4:	4628      	mov	r0, r5
 80008d6:	f7ff fce1 	bl	800029c <_platform_network_state_setup>
 80008da:	f108 0801 	add.w	r8, r8, #1
 80008de:	3718      	adds	r7, #24
 80008e0:	3610      	adds	r6, #16
 80008e2:	f109 0904 	add.w	r9, r9, #4
 80008e6:	9800      	ldr	r0, [sp, #0]
 80008e8:	8801      	ldrh	r1, [r0, #0]
 80008ea:	4588      	cmp	r8, r1
 80008ec:	d249      	bcs.n	8000982 <ai_platform_network_process+0x23e>
 80008ee:	6840      	ldr	r0, [r0, #4]
 80008f0:	2800      	cmp	r0, #0
 80008f2:	bf1c      	itt	ne
 80008f4:	f850 4009 	ldrne.w	r4, [r0, r9]
 80008f8:	2c00      	cmpne	r4, #0
 80008fa:	d042      	beq.n	8000982 <ai_platform_network_process+0x23e>
 80008fc:	9800      	ldr	r0, [sp, #0]
 80008fe:	6881      	ldr	r1, [r0, #8]
 8000900:	680a      	ldr	r2, [r1, #0]
 8000902:	1995      	adds	r5, r2, r6
 8000904:	d038      	beq.n	8000978 <ai_platform_network_process+0x234>
 8000906:	69a0      	ldr	r0, [r4, #24]
 8000908:	6841      	ldr	r1, [r0, #4]
 800090a:	887b      	ldrh	r3, [r7, #2]
 800090c:	88ba      	ldrh	r2, [r7, #4]
 800090e:	68b8      	ldr	r0, [r7, #8]
 8000910:	fb03 fc02 	mul.w	ip, r3, r2
 8000914:	fb00 fc0c 	mul.w	ip, r0, ip
 8000918:	4561      	cmp	r1, ip
 800091a:	d33e      	bcc.n	800099a <ai_platform_network_process+0x256>
 800091c:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8000920:	f8dc e00c 	ldr.w	lr, [ip, #12]
 8000924:	459e      	cmp	lr, r3
 8000926:	bf01      	itttt	eq
 8000928:	f8dc 3008 	ldreq.w	r3, [ip, #8]
 800092c:	4293      	cmpeq	r3, r2
 800092e:	f8dc 2004 	ldreq.w	r2, [ip, #4]
 8000932:	4282      	cmpeq	r2, r0
 8000934:	d131      	bne.n	800099a <ai_platform_network_process+0x256>
 8000936:	69a0      	ldr	r0, [r4, #24]
 8000938:	6800      	ldr	r0, [r0, #0]
 800093a:	f005 faa3 	bl	8005e84 <ai_array_get_byte_size>
 800093e:	68e1      	ldr	r1, [r4, #12]
 8000940:	68ca      	ldr	r2, [r1, #12]
 8000942:	6961      	ldr	r1, [r4, #20]
 8000944:	68cb      	ldr	r3, [r1, #12]
 8000946:	435a      	muls	r2, r3
 8000948:	4290      	cmp	r0, r2
 800094a:	d326      	bcc.n	800099a <ai_platform_network_process+0x256>
 800094c:	69a0      	ldr	r0, [r4, #24]
 800094e:	6800      	ldr	r0, [r0, #0]
 8000950:	f005 f9c0 	bl	8005cd4 <ai_array_to_buffer_fmt>
 8000954:	f857 1c04 	ldr.w	r1, [r7, #-4]
 8000958:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 800095c:	f021 417e 	bic.w	r1, r1, #4261412864	; 0xfe000000
 8000960:	4288      	cmp	r0, r1
 8000962:	d0ac      	beq.n	80008be <ai_platform_network_process+0x17a>
 8000964:	2219      	movs	r2, #25
 8000966:	2113      	movs	r1, #19
 8000968:	f10a 0010 	add.w	r0, sl, #16
 800096c:	e01f      	b.n	80009ae <ai_platform_network_process+0x26a>
 800096e:	2221      	movs	r2, #33	; 0x21
 8000970:	2113      	movs	r1, #19
 8000972:	f10a 0010 	add.w	r0, sl, #16
 8000976:	e01a      	b.n	80009ae <ai_platform_network_process+0x26a>
 8000978:	2217      	movs	r2, #23
 800097a:	2113      	movs	r1, #19
 800097c:	f10a 0010 	add.w	r0, sl, #16
 8000980:	e015      	b.n	80009ae <ai_platform_network_process+0x26a>
 8000982:	4655      	mov	r5, sl
 8000984:	f8a5 b014 	strh.w	fp, [r5, #20]
 8000988:	f8b5 0048 	ldrh.w	r0, [r5, #72]	; 0x48
 800098c:	2800      	cmp	r0, #0
 800098e:	bf14      	ite	ne
 8000990:	f8d5 a04c 	ldrne.w	sl, [r5, #76]	; 0x4c
 8000994:	f04f 0a00 	moveq.w	sl, #0
 8000998:	e00f      	b.n	80009ba <ai_platform_network_process+0x276>
 800099a:	4655      	mov	r5, sl
 800099c:	2218      	movs	r2, #24
 800099e:	2113      	movs	r1, #19
 80009a0:	f105 0010 	add.w	r0, r5, #16
 80009a4:	e003      	b.n	80009ae <ai_platform_network_process+0x26a>
 80009a6:	4650      	mov	r0, sl
 80009a8:	2217      	movs	r2, #23
 80009aa:	2112      	movs	r1, #18
 80009ac:	3010      	adds	r0, #16
 80009ae:	f000 f8c4 	bl	8000b3a <core_set_error>
 80009b2:	2000      	movs	r0, #0
 80009b4:	b003      	add	sp, #12
 80009b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80009ba:	2802      	cmp	r0, #2
 80009bc:	bfa6      	itte	ge
 80009be:	6ce8      	ldrge	r0, [r5, #76]	; 0x4c
 80009c0:	f100 0b0c 	addge.w	fp, r0, #12
 80009c4:	f04f 0b00 	movlt.w	fp, #0
 80009c8:	8ae8      	ldrh	r0, [r5, #22]
 80009ca:	8aa9      	ldrh	r1, [r5, #20]
 80009cc:	ebb0 0f01 	cmp.w	r0, r1
 80009d0:	f080 8087 	bcs.w	8000ae2 <ai_platform_network_process+0x39e>
 80009d4:	f04f 0800 	mov.w	r8, #0
 80009d8:	4654      	mov	r4, sl
 80009da:	46c1      	mov	r9, r8
 80009dc:	46c2      	mov	sl, r8
 80009de:	e018      	b.n	8000a12 <ai_platform_network_process+0x2ce>
 80009e0:	6882      	ldr	r2, [r0, #8]
 80009e2:	68c3      	ldr	r3, [r0, #12]
 80009e4:	6871      	ldr	r1, [r6, #4]
 80009e6:	1ad2      	subs	r2, r2, r3
 80009e8:	4411      	add	r1, r2
 80009ea:	6081      	str	r1, [r0, #8]
 80009ec:	6872      	ldr	r2, [r6, #4]
 80009ee:	60c2      	str	r2, [r0, #12]
 80009f0:	6870      	ldr	r0, [r6, #4]
 80009f2:	68b1      	ldr	r1, [r6, #8]
 80009f4:	4408      	add	r0, r1
 80009f6:	6070      	str	r0, [r6, #4]
 80009f8:	6831      	ldr	r1, [r6, #0]
 80009fa:	4288      	cmp	r0, r1
 80009fc:	d302      	bcc.n	8000a04 <ai_platform_network_process+0x2c0>
 80009fe:	68f0      	ldr	r0, [r6, #12]
 8000a00:	4240      	negs	r0, r0
 8000a02:	4408      	add	r0, r1
 8000a04:	6070      	str	r0, [r6, #4]
 8000a06:	f10a 0a01 	add.w	sl, sl, #1
 8000a0a:	f109 0910 	add.w	r9, r9, #16
 8000a0e:	f108 0804 	add.w	r8, r8, #4
 8000a12:	2c00      	cmp	r4, #0
 8000a14:	bf14      	ite	ne
 8000a16:	8820      	ldrhne	r0, [r4, #0]
 8000a18:	2000      	moveq	r0, #0
 8000a1a:	4582      	cmp	sl, r0
 8000a1c:	d212      	bcs.n	8000a44 <ai_platform_network_process+0x300>
 8000a1e:	6860      	ldr	r0, [r4, #4]
 8000a20:	b180      	cbz	r0, 8000a44 <ai_platform_network_process+0x300>
 8000a22:	f850 0008 	ldr.w	r0, [r0, r8]
 8000a26:	b168      	cbz	r0, 8000a44 <ai_platform_network_process+0x300>
 8000a28:	68a1      	ldr	r1, [r4, #8]
 8000a2a:	6980      	ldr	r0, [r0, #24]
 8000a2c:	680a      	ldr	r2, [r1, #0]
 8000a2e:	6801      	ldr	r1, [r0, #0]
 8000a30:	eb02 0609 	add.w	r6, r2, r9
 8000a34:	008a      	lsls	r2, r1, #2
 8000a36:	d5d3      	bpl.n	80009e0 <ai_platform_network_process+0x29c>
 8000a38:	68b2      	ldr	r2, [r6, #8]
 8000a3a:	6871      	ldr	r1, [r6, #4]
 8000a3c:	6880      	ldr	r0, [r0, #8]
 8000a3e:	f010 fab8 	bl	8010fb2 <__aeabi_memcpy>
 8000a42:	e7d5      	b.n	80009f0 <ai_platform_network_process+0x2ac>
 8000a44:	46a2      	mov	sl, r4
 8000a46:	4628      	mov	r0, r5
 8000a48:	f000 f936 	bl	8000cb8 <ai_layers_forward_all>
 8000a4c:	f04f 0800 	mov.w	r8, #0
 8000a50:	465c      	mov	r4, fp
 8000a52:	46c1      	mov	r9, r8
 8000a54:	46c3      	mov	fp, r8
 8000a56:	e017      	b.n	8000a88 <ai_platform_network_process+0x344>
 8000a58:	6871      	ldr	r1, [r6, #4]
 8000a5a:	68b2      	ldr	r2, [r6, #8]
 8000a5c:	4411      	add	r1, r2
 8000a5e:	6071      	str	r1, [r6, #4]
 8000a60:	6832      	ldr	r2, [r6, #0]
 8000a62:	4291      	cmp	r1, r2
 8000a64:	d302      	bcc.n	8000a6c <ai_platform_network_process+0x328>
 8000a66:	68f1      	ldr	r1, [r6, #12]
 8000a68:	4249      	negs	r1, r1
 8000a6a:	4411      	add	r1, r2
 8000a6c:	6071      	str	r1, [r6, #4]
 8000a6e:	6882      	ldr	r2, [r0, #8]
 8000a70:	68c3      	ldr	r3, [r0, #12]
 8000a72:	1ad2      	subs	r2, r2, r3
 8000a74:	4411      	add	r1, r2
 8000a76:	6081      	str	r1, [r0, #8]
 8000a78:	6872      	ldr	r2, [r6, #4]
 8000a7a:	60c2      	str	r2, [r0, #12]
 8000a7c:	f10b 0b01 	add.w	fp, fp, #1
 8000a80:	f109 0910 	add.w	r9, r9, #16
 8000a84:	f108 0804 	add.w	r8, r8, #4
 8000a88:	2c00      	cmp	r4, #0
 8000a8a:	bf14      	ite	ne
 8000a8c:	8820      	ldrhne	r0, [r4, #0]
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4583      	cmp	fp, r0
 8000a92:	d21d      	bcs.n	8000ad0 <ai_platform_network_process+0x38c>
 8000a94:	6860      	ldr	r0, [r4, #4]
 8000a96:	b1d8      	cbz	r0, 8000ad0 <ai_platform_network_process+0x38c>
 8000a98:	f850 0008 	ldr.w	r0, [r0, r8]
 8000a9c:	b1c0      	cbz	r0, 8000ad0 <ai_platform_network_process+0x38c>
 8000a9e:	68a1      	ldr	r1, [r4, #8]
 8000aa0:	6980      	ldr	r0, [r0, #24]
 8000aa2:	680a      	ldr	r2, [r1, #0]
 8000aa4:	6801      	ldr	r1, [r0, #0]
 8000aa6:	eb02 0609 	add.w	r6, r2, r9
 8000aaa:	008a      	lsls	r2, r1, #2
 8000aac:	d5d4      	bpl.n	8000a58 <ai_platform_network_process+0x314>
 8000aae:	6881      	ldr	r1, [r0, #8]
 8000ab0:	68b2      	ldr	r2, [r6, #8]
 8000ab2:	6870      	ldr	r0, [r6, #4]
 8000ab4:	f010 fa7d 	bl	8010fb2 <__aeabi_memcpy>
 8000ab8:	6870      	ldr	r0, [r6, #4]
 8000aba:	68b1      	ldr	r1, [r6, #8]
 8000abc:	4408      	add	r0, r1
 8000abe:	6070      	str	r0, [r6, #4]
 8000ac0:	6831      	ldr	r1, [r6, #0]
 8000ac2:	4288      	cmp	r0, r1
 8000ac4:	d302      	bcc.n	8000acc <ai_platform_network_process+0x388>
 8000ac6:	68f0      	ldr	r0, [r6, #12]
 8000ac8:	4240      	negs	r0, r0
 8000aca:	4408      	add	r0, r1
 8000acc:	6070      	str	r0, [r6, #4]
 8000ace:	e7d5      	b.n	8000a7c <ai_platform_network_process+0x338>
 8000ad0:	8ae8      	ldrh	r0, [r5, #22]
 8000ad2:	8aa9      	ldrh	r1, [r5, #20]
 8000ad4:	1c40      	adds	r0, r0, #1
 8000ad6:	82e8      	strh	r0, [r5, #22]
 8000ad8:	46a3      	mov	fp, r4
 8000ada:	b280      	uxth	r0, r0
 8000adc:	4288      	cmp	r0, r1
 8000ade:	f4ff af79 	bcc.w	80009d4 <ai_platform_network_process+0x290>
 8000ae2:	8ae8      	ldrh	r0, [r5, #22]
 8000ae4:	b003      	add	sp, #12
 8000ae6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08000aec <.text_18>:
 8000aec:	e0002000 	.word	0xe0002000

08000af0 <.text_19>:
 8000af0:	40023000 	.word	0x40023000

08000af4 <.text_20>:
 8000af4:	f407a5c2 	.word	0xf407a5c2

08000af8 <.text_21>:
 8000af8:	b5e8b5cd 	.word	0xb5e8b5cd

08000afc <.text_22>:
 8000afc:	a1c00100 	.word	0xa1c00100

08000b00 <.text_23>:
 8000b00:	01030001 	.word	0x01030001

08000b04 <.text_24>:
 8000b04:	00000104 	.word	0x00000104

08000b08 <.text_25>:
 8000b08:	00000101 	.word	0x00000101

08000b0c <.text_26>:
 8000b0c:	00000301 	.word	0x00000301

08000b10 <.text_27>:
 8000b10:	00001030 	.word	0x00001030

08000b14 <.text_28>:
 8000b14:	00001001 	.word	0x00001001

08000b18 <_platform_network_sanity_check{5}::signatures>:
 8000b18:	84048403                                ....

08000b1c <.text_30>:
 8000b1c:	00001002 	.word	0x00001002

08000b20 <.text_31>:
 8000b20:	00001010 	.word	0x00001010

08000b24 <.text_32>:
 8000b24:	00000000 	.word	0x00000000

08000b28 <.text_33>:
 8000b28:	00001010 	.word	0x00001010

08000b2c <core_init>:
 8000b2c:	2001      	movs	r0, #1
 8000b2e:	4770      	bx	lr

08000b30 <core_get_error>:
 8000b30:	4601      	mov	r1, r0
 8000b32:	2200      	movs	r2, #0
 8000b34:	6808      	ldr	r0, [r1, #0]
 8000b36:	600a      	str	r2, [r1, #0]
 8000b38:	4770      	bx	lr

08000b3a <core_set_error>:
 8000b3a:	7803      	ldrb	r3, [r0, #0]
 8000b3c:	ea5f 6c03 	movs.w	ip, r3, lsl #24
 8000b40:	d104      	bne.n	8000b4c <core_set_error+0x12>
 8000b42:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 8000b46:	6001      	str	r1, [r0, #0]
 8000b48:	2001      	movs	r0, #1
 8000b4a:	4770      	bx	lr
 8000b4c:	2000      	movs	r0, #0
 8000b4e:	4770      	bx	lr

08000b50 <ai_layers_forward_layer>:
 8000b50:	b510      	push	{r4, lr}
 8000b52:	4604      	mov	r4, r0
 8000b54:	6921      	ldr	r1, [r4, #16]
 8000b56:	4788      	blx	r1
 8000b58:	68e0      	ldr	r0, [r4, #12]
 8000b5a:	42a0      	cmp	r0, r4
 8000b5c:	bf08      	it	eq
 8000b5e:	2000      	moveq	r0, #0
 8000b60:	bd10      	pop	{r4, pc}
	...

08000b64 <ai_check_custom_types>:
 8000b64:	b500      	push	{lr}
 8000b66:	b081      	sub	sp, #4
 8000b68:	b160      	cbz	r0, 8000b84 <ai_check_custom_types+0x20>
 8000b6a:	7801      	ldrb	r1, [r0, #0]
 8000b6c:	2903      	cmp	r1, #3
 8000b6e:	d109      	bne.n	8000b84 <ai_check_custom_types+0x20>
 8000b70:	f05f 0204 	movs.w	r2, #4
 8000b74:	a18d      	add	r1, pc, #564	; (adr r1, 8000dac <ai_check_custom_types::ref_signatures>)
 8000b76:	f010 fa49 	bl	801100c <memcmp>
 8000b7a:	1e40      	subs	r0, r0, #1
 8000b7c:	4180      	sbcs	r0, r0
 8000b7e:	0fc0      	lsrs	r0, r0, #31
 8000b80:	b001      	add	sp, #4
 8000b82:	bd00      	pop	{pc}
 8000b84:	2000      	movs	r0, #0
 8000b86:	b001      	add	sp, #4
 8000b88:	bd00      	pop	{pc}
	...

08000b8c <ai_layer_type_name>:
 8000b8c:	f242 7211 	movw	r2, #10001	; 0x2711
 8000b90:	1a81      	subs	r1, r0, r2
 8000b92:	2901      	cmp	r1, #1
 8000b94:	bf81      	itttt	hi
 8000b96:	1ec9      	subhi	r1, r1, #3
 8000b98:	290d      	cmphi	r1, #13
 8000b9a:	390f      	subhi	r1, #15
 8000b9c:	2909      	cmphi	r1, #9
 8000b9e:	f200 806b 	bhi.w	8000c78 <ai_layer_type_name+0xec>
 8000ba2:	1a80      	subs	r0, r0, r2
 8000ba4:	d033      	beq.n	8000c0e <ai_layer_type_name+0x82>
 8000ba6:	1e40      	subs	r0, r0, #1
 8000ba8:	d033      	beq.n	8000c12 <ai_layer_type_name+0x86>
 8000baa:	1e80      	subs	r0, r0, #2
 8000bac:	d033      	beq.n	8000c16 <ai_layer_type_name+0x8a>
 8000bae:	1e40      	subs	r0, r0, #1
 8000bb0:	d034      	beq.n	8000c1c <ai_layer_type_name+0x90>
 8000bb2:	1e40      	subs	r0, r0, #1
 8000bb4:	d034      	beq.n	8000c20 <ai_layer_type_name+0x94>
 8000bb6:	1e40      	subs	r0, r0, #1
 8000bb8:	d034      	beq.n	8000c24 <ai_layer_type_name+0x98>
 8000bba:	1e40      	subs	r0, r0, #1
 8000bbc:	d034      	beq.n	8000c28 <ai_layer_type_name+0x9c>
 8000bbe:	1e40      	subs	r0, r0, #1
 8000bc0:	d034      	beq.n	8000c2c <ai_layer_type_name+0xa0>
 8000bc2:	1e40      	subs	r0, r0, #1
 8000bc4:	d034      	beq.n	8000c30 <ai_layer_type_name+0xa4>
 8000bc6:	1e40      	subs	r0, r0, #1
 8000bc8:	d034      	beq.n	8000c34 <ai_layer_type_name+0xa8>
 8000bca:	1e40      	subs	r0, r0, #1
 8000bcc:	d034      	beq.n	8000c38 <ai_layer_type_name+0xac>
 8000bce:	1e40      	subs	r0, r0, #1
 8000bd0:	d034      	beq.n	8000c3c <ai_layer_type_name+0xb0>
 8000bd2:	1e40      	subs	r0, r0, #1
 8000bd4:	d034      	beq.n	8000c40 <ai_layer_type_name+0xb4>
 8000bd6:	1e40      	subs	r0, r0, #1
 8000bd8:	d034      	beq.n	8000c44 <ai_layer_type_name+0xb8>
 8000bda:	1e40      	subs	r0, r0, #1
 8000bdc:	d034      	beq.n	8000c48 <ai_layer_type_name+0xbc>
 8000bde:	1e40      	subs	r0, r0, #1
 8000be0:	d034      	beq.n	8000c4c <ai_layer_type_name+0xc0>
 8000be2:	1e80      	subs	r0, r0, #2
 8000be4:	d034      	beq.n	8000c50 <ai_layer_type_name+0xc4>
 8000be6:	1e40      	subs	r0, r0, #1
 8000be8:	d034      	beq.n	8000c54 <ai_layer_type_name+0xc8>
 8000bea:	1e40      	subs	r0, r0, #1
 8000bec:	d034      	beq.n	8000c58 <ai_layer_type_name+0xcc>
 8000bee:	1e40      	subs	r0, r0, #1
 8000bf0:	d034      	beq.n	8000c5c <ai_layer_type_name+0xd0>
 8000bf2:	1e40      	subs	r0, r0, #1
 8000bf4:	d034      	beq.n	8000c60 <ai_layer_type_name+0xd4>
 8000bf6:	1e40      	subs	r0, r0, #1
 8000bf8:	d034      	beq.n	8000c64 <ai_layer_type_name+0xd8>
 8000bfa:	1e40      	subs	r0, r0, #1
 8000bfc:	d034      	beq.n	8000c68 <ai_layer_type_name+0xdc>
 8000bfe:	1e40      	subs	r0, r0, #1
 8000c00:	d034      	beq.n	8000c6c <ai_layer_type_name+0xe0>
 8000c02:	1e40      	subs	r0, r0, #1
 8000c04:	d034      	beq.n	8000c70 <ai_layer_type_name+0xe4>
 8000c06:	1e40      	subs	r0, r0, #1
 8000c08:	d034      	beq.n	8000c74 <ai_layer_type_name+0xe8>
 8000c0a:	a01c      	add	r0, pc, #112	; (adr r0, 8000c7c <.text_5>)
 8000c0c:	4770      	bx	lr
 8000c0e:	a01c      	add	r0, pc, #112	; (adr r0, 8000c80 <.text_6>)
 8000c10:	4770      	bx	lr
 8000c12:	a01c      	add	r0, pc, #112	; (adr r0, 8000c84 <.text_7>)
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	a031      	add	r0, pc, #196	; (adr r0, 8000ce0 <.text_15>)
 8000c1a:	4770      	bx	lr
 8000c1c:	a032      	add	r0, pc, #200	; (adr r0, 8000ce8 <.text_16>)
 8000c1e:	4770      	bx	lr
 8000c20:	a019      	add	r0, pc, #100	; (adr r0, 8000c88 <.text_8>)
 8000c22:	4770      	bx	lr
 8000c24:	a019      	add	r0, pc, #100	; (adr r0, 8000c8c <.text_9>)
 8000c26:	4770      	bx	lr
 8000c28:	a031      	add	r0, pc, #196	; (adr r0, 8000cf0 <.text_17>)
 8000c2a:	4770      	bx	lr
 8000c2c:	a018      	add	r0, pc, #96	; (adr r0, 8000c90 <.text_10>)
 8000c2e:	4770      	bx	lr
 8000c30:	a031      	add	r0, pc, #196	; (adr r0, 8000cf8 <.text_18>)
 8000c32:	4770      	bx	lr
 8000c34:	a032      	add	r0, pc, #200	; (adr r0, 8000d00 <.text_19>)
 8000c36:	4770      	bx	lr
 8000c38:	a036      	add	r0, pc, #216	; (adr r0, 8000d14 <.text_20>)
 8000c3a:	4770      	bx	lr
 8000c3c:	a038      	add	r0, pc, #224	; (adr r0, 8000d20 <.text_21>)
 8000c3e:	4770      	bx	lr
 8000c40:	a014      	add	r0, pc, #80	; (adr r0, 8000c94 <.text_11>)
 8000c42:	4770      	bx	lr
 8000c44:	a038      	add	r0, pc, #224	; (adr r0, 8000d28 <.text_22>)
 8000c46:	4770      	bx	lr
 8000c48:	a039      	add	r0, pc, #228	; (adr r0, 8000d30 <.text_23>)
 8000c4a:	4770      	bx	lr
 8000c4c:	a03b      	add	r0, pc, #236	; (adr r0, 8000d3c <.text_24>)
 8000c4e:	4770      	bx	lr
 8000c50:	a03f      	add	r0, pc, #252	; (adr r0, 8000d50 <.text_25>)
 8000c52:	4770      	bx	lr
 8000c54:	a040      	add	r0, pc, #256	; (adr r0, 8000d58 <.text_26>)
 8000c56:	4770      	bx	lr
 8000c58:	a041      	add	r0, pc, #260	; (adr r0, 8000d60 <.text_27>)
 8000c5a:	4770      	bx	lr
 8000c5c:	a043      	add	r0, pc, #268	; (adr r0, 8000d6c <.text_28>)
 8000c5e:	4770      	bx	lr
 8000c60:	a044      	add	r0, pc, #272	; (adr r0, 8000d74 <.text_29>)
 8000c62:	4770      	bx	lr
 8000c64:	a045      	add	r0, pc, #276	; (adr r0, 8000d7c <.text_30>)
 8000c66:	4770      	bx	lr
 8000c68:	a00b      	add	r0, pc, #44	; (adr r0, 8000c98 <.text_12>)
 8000c6a:	4770      	bx	lr
 8000c6c:	a049      	add	r0, pc, #292	; (adr r0, 8000d94 <.text_31>)
 8000c6e:	4770      	bx	lr
 8000c70:	a04a      	add	r0, pc, #296	; (adr r0, 8000d9c <.text_32>)
 8000c72:	4770      	bx	lr
 8000c74:	a04b      	add	r0, pc, #300	; (adr r0, 8000da4 <.text_33>)
 8000c76:	4770      	bx	lr
 8000c78:	a000      	add	r0, pc, #0	; (adr r0, 8000c7c <.text_5>)
 8000c7a:	4770      	bx	lr

08000c7c <.text_5>:
 8000c7c:	00000000 	.word	0x00000000

08000c80 <.text_6>:
 8000c80:	00444441 	.word	0x00444441

08000c84 <.text_7>:
 8000c84:	00004e42 	.word	0x00004e42

08000c88 <.text_8>:
 8000c88:	00555247 	.word	0x00555247

08000c8c <.text_9>:
 8000c8c:	004e524c 	.word	0x004e524c

08000c90 <.text_10>:
 8000c90:	00004c4e 	.word	0x00004c4e

08000c94 <.text_11>:
 8000c94:	00004d53 	.word	0x00004d53

08000c98 <.text_12>:
 8000c98:	00444150 	.word	0x00444150

08000c9c <ai_layer_type_is_valid>:
 8000c9c:	f242 7111 	movw	r1, #10001	; 0x2711
 8000ca0:	1a40      	subs	r0, r0, r1
 8000ca2:	2801      	cmp	r0, #1
 8000ca4:	bf81      	itttt	hi
 8000ca6:	1ec0      	subhi	r0, r0, #3
 8000ca8:	280d      	cmphi	r0, #13
 8000caa:	380f      	subhi	r0, #15
 8000cac:	2809      	cmphi	r0, #9
 8000cae:	d801      	bhi.n	8000cb4 <ai_layer_type_is_valid+0x18>
 8000cb0:	2001      	movs	r0, #1
 8000cb2:	4770      	bx	lr
 8000cb4:	2000      	movs	r0, #0
 8000cb6:	4770      	bx	lr

08000cb8 <ai_layers_forward_all>:
 8000cb8:	b530      	push	{r4, r5, lr}
 8000cba:	4604      	mov	r4, r0
 8000cbc:	b081      	sub	sp, #4
 8000cbe:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8000cc0:	b158      	cbz	r0, 8000cda <ai_layers_forward_all+0x22>
 8000cc2:	6560      	str	r0, [r4, #84]	; 0x54
 8000cc4:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8000cc6:	6929      	ldr	r1, [r5, #16]
 8000cc8:	4628      	mov	r0, r5
 8000cca:	4788      	blx	r1
 8000ccc:	68e8      	ldr	r0, [r5, #12]
 8000cce:	42a8      	cmp	r0, r5
 8000cd0:	bf08      	it	eq
 8000cd2:	2000      	moveq	r0, #0
 8000cd4:	2800      	cmp	r0, #0
 8000cd6:	6560      	str	r0, [r4, #84]	; 0x54
 8000cd8:	d1f4      	bne.n	8000cc4 <ai_layers_forward_all+0xc>
 8000cda:	b001      	add	sp, #4
 8000cdc:	bd30      	pop	{r4, r5, pc}
	...

08000ce0 <.text_15>:
 8000ce0:	564e4f43 	.word	0x564e4f43
 8000ce4:	00004432 	.word	0x00004432

08000ce8 <.text_16>:
 8000ce8:	534e4544 	.word	0x534e4544
 8000cec:	0045      	.short	0x0045
	...

08000cf0 <.text_17>:
 8000cf0:	4d54534c 	.word	0x4d54534c
 8000cf4:	00          	.byte	0x00
 8000cf5:	00          	.byte	0x00
	...

08000cf8 <.text_18>:
 8000cf8:	4d524f4e 	.word	0x4d524f4e
 8000cfc:	00          	.byte	0x00
 8000cfd:	00          	.byte	0x00
	...

08000d00 <.text_19>:
 8000d00:	4954504f 	.word	0x4954504f
 8000d04:	455a494d 	.word	0x455a494d
 8000d08:	4f435f44 	.word	0x4f435f44
 8000d0c:	4432564e 	.word	0x4432564e
 8000d10:	00          	.byte	0x00
 8000d11:	00          	.byte	0x00
	...

08000d14 <.text_20>:
 8000d14:	4e415254 	.word	0x4e415254
 8000d18:	534f5053 	.word	0x534f5053
 8000d1c:	0045      	.short	0x0045
	...

08000d20 <.text_21>:
 8000d20:	4c4f4f50 	.word	0x4c4f4f50
 8000d24:	00          	.byte	0x00
 8000d25:	00          	.byte	0x00
	...

08000d28 <.text_22>:
 8000d28:	494c5053 	.word	0x494c5053
 8000d2c:	0054      	.short	0x0054
	...

08000d30 <.text_23>:
 8000d30:	454d4954 	.word	0x454d4954
 8000d34:	4c45445f 	.word	0x4c45445f
 8000d38:	00005941 	.word	0x00005941

08000d3c <.text_24>:
 8000d3c:	454d4954 	.word	0x454d4954
 8000d40:	5349445f 	.word	0x5349445f
 8000d44:	42495254 	.word	0x42495254
 8000d48:	44455455 	.word	0x44455455
 8000d4c:	00          	.byte	0x00
 8000d4d:	00          	.byte	0x00
	...

08000d50 <.text_25>:
 8000d50:	434e4f43 	.word	0x434e4f43
 8000d54:	00005441 	.word	0x00005441

08000d58 <.text_26>:
 8000d58:	4d4d4547 	.word	0x4d4d4547
 8000d5c:	00          	.byte	0x00
 8000d5d:	00          	.byte	0x00
	...

08000d60 <.text_27>:
 8000d60:	41535055 	.word	0x41535055
 8000d64:	454c504d 	.word	0x454c504d
 8000d68:	00          	.byte	0x00
 8000d69:	00          	.byte	0x00
	...

08000d6c <.text_28>:
 8000d6c:	57544c45 	.word	0x57544c45
 8000d70:	00455349 	.word	0x00455349

08000d74 <.text_29>:
 8000d74:	454e4547 	.word	0x454e4547
 8000d78:	00434952 	.word	0x00434952

08000d7c <.text_30>:
 8000d7c:	54534e49 	.word	0x54534e49
 8000d80:	45434e41 	.word	0x45434e41
 8000d84:	4d524f4e 	.word	0x4d524f4e
 8000d88:	5a494c41 	.word	0x5a494c41
 8000d8c:	4f495441 	.word	0x4f495441
 8000d90:	004e      	.short	0x004e
	...

08000d94 <.text_31>:
 8000d94:	43494c53 	.word	0x43494c53
 8000d98:	0045      	.short	0x0045
	...

08000d9c <.text_32>:
 8000d9c:	454c4954 	.word	0x454c4954
 8000da0:	00          	.byte	0x00
 8000da1:	00          	.byte	0x00
	...

08000da4 <.text_33>:
 8000da4:	55444552 	.word	0x55444552
 8000da8:	00004543 	.word	0x00004543

08000dac <ai_check_custom_types::ref_signatures>:
 8000dac:	84048403                                ....

08000db0 <ai_conv2d_stripe_f32>:
 8000db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000db4:	b098      	sub	sp, #96	; 0x60
 8000db6:	9825      	ldr	r0, [sp, #148]	; 0x94
 8000db8:	2800      	cmp	r0, #0
 8000dba:	f000 82cb 	beq.w	8001354 <ai_conv2d_stripe_f32+0x5a4>
 8000dbe:	f9bd 40c0 	ldrsh.w	r4, [sp, #192]	; 0xc0
 8000dc2:	f8dd a0b4 	ldr.w	sl, [sp, #180]	; 0xb4
 8000dc6:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 8000dc8:	9f24      	ldr	r7, [sp, #144]	; 0x90
 8000dca:	9e2c      	ldr	r6, [sp, #176]	; 0xb0
 8000dcc:	9004      	str	r0, [sp, #16]
 8000dce:	fb07 6a0a 	mla	sl, r7, sl, r6
 8000dd2:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8000dd4:	f9bd 60c0 	ldrsh.w	r6, [sp, #192]	; 0xc0
 8000dd8:	f8cd a014 	str.w	sl, [sp, #20]
 8000ddc:	1904      	adds	r4, r0, r4
 8000dde:	1e64      	subs	r4, r4, #1
 8000de0:	9826      	ldr	r0, [sp, #152]	; 0x98
 8000de2:	9100      	str	r1, [sp, #0]
 8000de4:	fb94 f6f6 	sdiv	r6, r4, r6
 8000de8:	f9bd 40bc 	ldrsh.w	r4, [sp, #188]	; 0xbc
 8000dec:	9217      	str	r2, [sp, #92]	; 0x5c
 8000dee:	4346      	muls	r6, r0
 8000df0:	9616      	str	r6, [sp, #88]	; 0x58
 8000df2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000df6:	9e2a      	ldr	r6, [sp, #168]	; 0xa8
 8000df8:	9822      	ldr	r0, [sp, #136]	; 0x88
 8000dfa:	9306      	str	r3, [sp, #24]
 8000dfc:	4344      	muls	r4, r0
 8000dfe:	9415      	str	r4, [sp, #84]	; 0x54
 8000e00:	437e      	muls	r6, r7
 8000e02:	f9bd 40c0 	ldrsh.w	r4, [sp, #192]	; 0xc0
 8000e06:	437c      	muls	r4, r7
 8000e08:	9414      	str	r4, [sp, #80]	; 0x50
 8000e0a:	4346      	muls	r6, r0
 8000e0c:	f9bd 40c0 	ldrsh.w	r4, [sp, #192]	; 0xc0
 8000e10:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8000e12:	960b      	str	r6, [sp, #44]	; 0x2c
 8000e14:	1a24      	subs	r4, r4, r0
 8000e16:	9413      	str	r4, [sp, #76]	; 0x4c
 8000e18:	4604      	mov	r4, r0
 8000e1a:	9826      	ldr	r0, [sp, #152]	; 0x98
 8000e1c:	9e26      	ldr	r6, [sp, #152]	; 0x98
 8000e1e:	4344      	muls	r4, r0
 8000e20:	9412      	str	r4, [sp, #72]	; 0x48
 8000e22:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8000e24:	4344      	muls	r4, r0
 8000e26:	9411      	str	r4, [sp, #68]	; 0x44
 8000e28:	f9bd 00c0 	ldrsh.w	r0, [sp, #192]	; 0xc0
 8000e2c:	f9bd 40bc 	ldrsh.w	r4, [sp, #188]	; 0xbc
 8000e30:	fb14 f000 	smulbb	r0, r4, r0
 8000e34:	900a      	str	r0, [sp, #40]	; 0x28
 8000e36:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 8000e38:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8000e3a:	fbb4 f0f0 	udiv	r0, r4, r0
 8000e3e:	9010      	str	r0, [sp, #64]	; 0x40
 8000e40:	9c22      	ldr	r4, [sp, #136]	; 0x88
 8000e42:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8000e44:	fbb4 f0f0 	udiv	r0, r4, r0
 8000e48:	900f      	str	r0, [sp, #60]	; 0x3c
 8000e4a:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 8000e4c:	9822      	ldr	r0, [sp, #136]	; 0x88
 8000e4e:	fbb4 f0f0 	udiv	r0, r4, r0
 8000e52:	9c22      	ldr	r4, [sp, #136]	; 0x88
 8000e54:	900e      	str	r0, [sp, #56]	; 0x38
 8000e56:	4374      	muls	r4, r6
 8000e58:	940d      	str	r4, [sp, #52]	; 0x34
 8000e5a:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8000e5c:	1b2d      	subs	r5, r5, r4
 8000e5e:	950c      	str	r5, [sp, #48]	; 0x30
 8000e60:	9f2c      	ldr	r7, [sp, #176]	; 0xb0
 8000e62:	9924      	ldr	r1, [sp, #144]	; 0x90
 8000e64:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8000e66:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8000e68:	427f      	negs	r7, r7
 8000e6a:	bfd8      	it	le
 8000e6c:	2700      	movle	r7, #0
 8000e6e:	1a09      	subs	r1, r1, r0
 8000e70:	4291      	cmp	r1, r2
 8000e72:	bf3d      	ittte	cc
 8000e74:	9824      	ldrcc	r0, [sp, #144]	; 0x90
 8000e76:	9e2c      	ldrcc	r6, [sp, #176]	; 0xb0
 8000e78:	1b86      	subcc	r6, r0, r6
 8000e7a:	4616      	movcs	r6, r2
 8000e7c:	9a05      	ldr	r2, [sp, #20]
 8000e7e:	9922      	ldr	r1, [sp, #136]	; 0x88
 8000e80:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8000e82:	18ba      	adds	r2, r7, r2
 8000e84:	434a      	muls	r2, r1
 8000e86:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8000e8a:	9821      	ldr	r0, [sp, #132]	; 0x84
 8000e8c:	b900      	cbnz	r0, 8000e90 <ai_conv2d_stripe_f32+0xe0>
 8000e8e:	9800      	ldr	r0, [sp, #0]
 8000e90:	9001      	str	r0, [sp, #4]
 8000e92:	1bf6      	subs	r6, r6, r7
 8000e94:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8000e96:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8000e98:	2801      	cmp	r0, #1
 8000e9a:	bf04      	itt	eq
 8000e9c:	980a      	ldreq	r0, [sp, #40]	; 0x28
 8000e9e:	2801      	cmpeq	r0, #1
 8000ea0:	f040 80a9 	bne.w	8000ff6 <ai_conv2d_stripe_f32+0x246>
 8000ea4:	9c24      	ldr	r4, [sp, #144]	; 0x90
 8000ea6:	9826      	ldr	r0, [sp, #152]	; 0x98
 8000ea8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8000eaa:	1ba4      	subs	r4, r4, r6
 8000eac:	434c      	muls	r4, r1
 8000eae:	1b80      	subs	r0, r0, r6
 8000eb0:	4341      	muls	r1, r0
 8000eb2:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8000eb4:	1b40      	subs	r0, r0, r5
 8000eb6:	fb00 fc03 	mul.w	ip, r0, r3
 8000eba:	9811      	ldr	r0, [sp, #68]	; 0x44
 8000ebc:	9b06      	ldr	r3, [sp, #24]
 8000ebe:	4407      	add	r7, r0
 8000ec0:	9822      	ldr	r0, [sp, #136]	; 0x88
 8000ec2:	4347      	muls	r7, r0
 8000ec4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8000ec8:	4370      	muls	r0, r6
 8000eca:	9e01      	ldr	r6, [sp, #4]
 8000ecc:	9b00      	ldr	r3, [sp, #0]
 8000ece:	429e      	cmp	r6, r3
 8000ed0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8000ed2:	eb02 0983 	add.w	r9, r2, r3, lsl #2
 8000ed6:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8000ed8:	bf0c      	ite	eq
 8000eda:	eddf 0aaf 	vldreq	s1, [pc, #700]	; 8001198 <ai_conv2d_stripe_f32+0x3e8>
 8000ede:	eef0 0a40 	vmovne.f32	s1, s0
 8000ee2:	2a00      	cmp	r2, #0
 8000ee4:	f000 8222 	beq.w	800132c <ai_conv2d_stripe_f32+0x57c>
 8000ee8:	46b0      	mov	r8, r6
 8000eea:	462e      	mov	r6, r5
 8000eec:	4613      	mov	r3, r2
 8000eee:	f8cd c008 	str.w	ip, [sp, #8]
 8000ef2:	461d      	mov	r5, r3
 8000ef4:	f8dd e000 	ldr.w	lr, [sp]
 8000ef8:	9b00      	ldr	r3, [sp, #0]
 8000efa:	463a      	mov	r2, r7
 8000efc:	4682      	mov	sl, r0
 8000efe:	f8cd 9004 	str.w	r9, [sp, #4]
 8000f02:	46c4      	mov	ip, r8
 8000f04:	f02a 0703 	bic.w	r7, sl, #3
 8000f08:	ed9c 1a00 	vldr	s2, [ip]
 8000f0c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8000f10:	2e00      	cmp	r6, #0
 8000f12:	ee21 1a20 	vmul.f32	s2, s2, s1
 8000f16:	dd61      	ble.n	8000fdc <ai_conv2d_stripe_f32+0x22c>
 8000f18:	4630      	mov	r0, r6
 8000f1a:	2f00      	cmp	r7, #0
 8000f1c:	f04f 0900 	mov.w	r9, #0
 8000f20:	f340 801f 	ble.w	8000f62 <ai_conv2d_stripe_f32+0x1b2>
 8000f24:	edd2 4a00 	vldr	s9, [r2]
 8000f28:	ed98 5a00 	vldr	s10, [r8]
 8000f2c:	edd2 3a01 	vldr	s7, [r2, #4]
 8000f30:	ed98 4a01 	vldr	s8, [r8, #4]
 8000f34:	edd2 2a02 	vldr	s5, [r2, #8]
 8000f38:	ed98 3a02 	vldr	s6, [r8, #8]
 8000f3c:	edd2 1a03 	vldr	s3, [r2, #12]
 8000f40:	ed98 2a03 	vldr	s4, [r8, #12]
 8000f44:	ee04 1a85 	vmla.f32	s2, s9, s10
 8000f48:	ee03 1a84 	vmla.f32	s2, s7, s8
 8000f4c:	3210      	adds	r2, #16
 8000f4e:	f109 0904 	add.w	r9, r9, #4
 8000f52:	ee02 1a83 	vmla.f32	s2, s5, s6
 8000f56:	45b9      	cmp	r9, r7
 8000f58:	ee01 1a82 	vmla.f32	s2, s3, s4
 8000f5c:	f108 0810 	add.w	r8, r8, #16
 8000f60:	dbe0      	blt.n	8000f24 <ai_conv2d_stripe_f32+0x174>
 8000f62:	45d1      	cmp	r9, sl
 8000f64:	f280 8034 	bge.w	8000fd0 <ai_conv2d_stripe_f32+0x220>
 8000f68:	f109 0901 	add.w	r9, r9, #1
 8000f6c:	edd2 2a00 	vldr	s5, [r2]
 8000f70:	edd8 1a00 	vldr	s3, [r8]
 8000f74:	1d12      	adds	r2, r2, #4
 8000f76:	45d1      	cmp	r9, sl
 8000f78:	ee02 1aa1 	vmla.f32	s2, s5, s3
 8000f7c:	f108 0804 	add.w	r8, r8, #4
 8000f80:	da26      	bge.n	8000fd0 <ai_conv2d_stripe_f32+0x220>
 8000f82:	f109 0901 	add.w	r9, r9, #1
 8000f86:	ed92 3a00 	vldr	s6, [r2]
 8000f8a:	ed98 2a00 	vldr	s4, [r8]
 8000f8e:	1d12      	adds	r2, r2, #4
 8000f90:	45d1      	cmp	r9, sl
 8000f92:	ee03 1a02 	vmla.f32	s2, s6, s4
 8000f96:	f108 0804 	add.w	r8, r8, #4
 8000f9a:	da19      	bge.n	8000fd0 <ai_conv2d_stripe_f32+0x220>
 8000f9c:	f109 0901 	add.w	r9, r9, #1
 8000fa0:	edd2 2a00 	vldr	s5, [r2]
 8000fa4:	edd8 1a00 	vldr	s3, [r8]
 8000fa8:	1d12      	adds	r2, r2, #4
 8000faa:	45d1      	cmp	r9, sl
 8000fac:	ee02 1aa1 	vmla.f32	s2, s5, s3
 8000fb0:	f108 0804 	add.w	r8, r8, #4
 8000fb4:	da0c      	bge.n	8000fd0 <ai_conv2d_stripe_f32+0x220>
 8000fb6:	f109 0901 	add.w	r9, r9, #1
 8000fba:	ed92 2a00 	vldr	s4, [r2]
 8000fbe:	ed98 3a00 	vldr	s6, [r8]
 8000fc2:	1d12      	adds	r2, r2, #4
 8000fc4:	45d1      	cmp	r9, sl
 8000fc6:	ee02 1a03 	vmla.f32	s2, s4, s6
 8000fca:	f108 0804 	add.w	r8, r8, #4
 8000fce:	dbcb      	blt.n	8000f68 <ai_conv2d_stripe_f32+0x1b8>
 8000fd0:	1e40      	subs	r0, r0, #1
 8000fd2:	eb08 0884 	add.w	r8, r8, r4, lsl #2
 8000fd6:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8000fda:	d19e      	bne.n	8000f1a <ai_conv2d_stripe_f32+0x16a>
 8000fdc:	9802      	ldr	r0, [sp, #8]
 8000fde:	ed8e 1a00 	vstr	s2, [lr]
 8000fe2:	1e6d      	subs	r5, r5, #1
 8000fe4:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 8000fe8:	f10e 0e04 	add.w	lr, lr, #4
 8000fec:	f10c 0c04 	add.w	ip, ip, #4
 8000ff0:	d18a      	bne.n	8000f08 <ai_conv2d_stripe_f32+0x158>
 8000ff2:	9300      	str	r3, [sp, #0]
 8000ff4:	e19a      	b.n	800132c <ai_conv2d_stripe_f32+0x57c>
 8000ff6:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8000ff8:	4288      	cmp	r0, r1
 8000ffa:	bf04      	itt	eq
 8000ffc:	980a      	ldreq	r0, [sp, #40]	; 0x28
 8000ffe:	2801      	cmpeq	r0, #1
 8001000:	f040 80cc 	bne.w	800119c <ai_conv2d_stripe_f32+0x3ec>
 8001004:	980e      	ldr	r0, [sp, #56]	; 0x38
 8001006:	9b06      	ldr	r3, [sp, #24]
 8001008:	9c00      	ldr	r4, [sp, #0]
 800100a:	9002      	str	r0, [sp, #8]
 800100c:	9824      	ldr	r0, [sp, #144]	; 0x90
 800100e:	1b81      	subs	r1, r0, r6
 8001010:	9822      	ldr	r0, [sp, #136]	; 0x88
 8001012:	fb01 fa00 	mul.w	sl, r1, r0
 8001016:	9826      	ldr	r0, [sp, #152]	; 0x98
 8001018:	9926      	ldr	r1, [sp, #152]	; 0x98
 800101a:	eba0 0c06 	sub.w	ip, r0, r6
 800101e:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8001020:	1b40      	subs	r0, r0, r5
 8001022:	4341      	muls	r1, r0
 8001024:	9812      	ldr	r0, [sp, #72]	; 0x48
 8001026:	183f      	adds	r7, r7, r0
 8001028:	eb03 0087 	add.w	r0, r3, r7, lsl #2
 800102c:	9b01      	ldr	r3, [sp, #4]
 800102e:	42a3      	cmp	r3, r4
 8001030:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001032:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 8001036:	bf0c      	ite	eq
 8001038:	eddf 0a57 	vldreq	s1, [pc, #348]	; 8001198 <ai_conv2d_stripe_f32+0x3e8>
 800103c:	eef0 0a40 	vmovne.f32	s1, s0
 8001040:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8001042:	2400      	movs	r4, #0
 8001044:	eb0e 0283 	add.w	r2, lr, r3, lsl #2
 8001048:	4596      	cmp	lr, r2
 800104a:	9203      	str	r2, [sp, #12]
 800104c:	f080 816e 	bcs.w	800132c <ai_conv2d_stripe_f32+0x57c>
 8001050:	9b00      	ldr	r3, [sp, #0]
 8001052:	9a02      	ldr	r2, [sp, #8]
 8001054:	2a00      	cmp	r2, #0
 8001056:	f000 8097 	beq.w	8001188 <ai_conv2d_stripe_f32+0x3d8>
 800105a:	9a01      	ldr	r2, [sp, #4]
 800105c:	9500      	str	r5, [sp, #0]
 800105e:	eb02 0784 	add.w	r7, r2, r4, lsl #2
 8001062:	eb03 0284 	add.w	r2, r3, r4, lsl #2
 8001066:	f8dd b008 	ldr.w	fp, [sp, #8]
 800106a:	9108      	str	r1, [sp, #32]
 800106c:	f8cd e01c 	str.w	lr, [sp, #28]
 8001070:	4615      	mov	r5, r2
 8001072:	9a00      	ldr	r2, [sp, #0]
 8001074:	ed97 1a00 	vldr	s2, [r7]
 8001078:	9907      	ldr	r1, [sp, #28]
 800107a:	2a00      	cmp	r2, #0
 800107c:	ee21 1a20 	vmul.f32	s2, s2, s1
 8001080:	f340 8072 	ble.w	8001168 <ai_conv2d_stripe_f32+0x3b8>
 8001084:	f026 0e03 	bic.w	lr, r6, #3
 8001088:	f1be 0f00 	cmp.w	lr, #0
 800108c:	f04f 0900 	mov.w	r9, #0
 8001090:	f340 8029 	ble.w	80010e6 <ai_conv2d_stripe_f32+0x336>
 8001094:	f8dd 8088 	ldr.w	r8, [sp, #136]	; 0x88
 8001098:	edd0 1a00 	vldr	s3, [r0]
 800109c:	ed91 2a00 	vldr	s4, [r1]
 80010a0:	eb01 0188 	add.w	r1, r1, r8, lsl #2
 80010a4:	ee01 1a82 	vmla.f32	s2, s3, s4
 80010a8:	edd0 1a01 	vldr	s3, [r0, #4]
 80010ac:	ed91 2a00 	vldr	s4, [r1]
 80010b0:	eb01 0188 	add.w	r1, r1, r8, lsl #2
 80010b4:	ee01 1a82 	vmla.f32	s2, s3, s4
 80010b8:	edd0 1a02 	vldr	s3, [r0, #8]
 80010bc:	ed91 2a00 	vldr	s4, [r1]
 80010c0:	eb01 0188 	add.w	r1, r1, r8, lsl #2
 80010c4:	ee01 1a82 	vmla.f32	s2, s3, s4
 80010c8:	f109 0904 	add.w	r9, r9, #4
 80010cc:	edd0 1a03 	vldr	s3, [r0, #12]
 80010d0:	ed91 2a00 	vldr	s4, [r1]
 80010d4:	3010      	adds	r0, #16
 80010d6:	45f1      	cmp	r9, lr
 80010d8:	ee01 1a82 	vmla.f32	s2, s3, s4
 80010dc:	eb01 0188 	add.w	r1, r1, r8, lsl #2
 80010e0:	dbda      	blt.n	8001098 <ai_conv2d_stripe_f32+0x2e8>
 80010e2:	f8cd 8088 	str.w	r8, [sp, #136]	; 0x88
 80010e6:	45b1      	cmp	r9, r6
 80010e8:	f280 8038 	bge.w	800115c <ai_conv2d_stripe_f32+0x3ac>
 80010ec:	f8dd e088 	ldr.w	lr, [sp, #136]	; 0x88
 80010f0:	f109 0901 	add.w	r9, r9, #1
 80010f4:	edd0 1a00 	vldr	s3, [r0]
 80010f8:	ed91 2a00 	vldr	s4, [r1]
 80010fc:	1d00      	adds	r0, r0, #4
 80010fe:	45b1      	cmp	r9, r6
 8001100:	ee01 1a82 	vmla.f32	s2, s3, s4
 8001104:	eb01 018e 	add.w	r1, r1, lr, lsl #2
 8001108:	da26      	bge.n	8001158 <ai_conv2d_stripe_f32+0x3a8>
 800110a:	f109 0901 	add.w	r9, r9, #1
 800110e:	ed90 2a00 	vldr	s4, [r0]
 8001112:	edd1 1a00 	vldr	s3, [r1]
 8001116:	1d00      	adds	r0, r0, #4
 8001118:	45b1      	cmp	r9, r6
 800111a:	ee02 1a21 	vmla.f32	s2, s4, s3
 800111e:	eb01 018e 	add.w	r1, r1, lr, lsl #2
 8001122:	da19      	bge.n	8001158 <ai_conv2d_stripe_f32+0x3a8>
 8001124:	f109 0901 	add.w	r9, r9, #1
 8001128:	edd0 1a00 	vldr	s3, [r0]
 800112c:	ed91 2a00 	vldr	s4, [r1]
 8001130:	1d00      	adds	r0, r0, #4
 8001132:	45b1      	cmp	r9, r6
 8001134:	ee01 1a82 	vmla.f32	s2, s3, s4
 8001138:	eb01 018e 	add.w	r1, r1, lr, lsl #2
 800113c:	da0c      	bge.n	8001158 <ai_conv2d_stripe_f32+0x3a8>
 800113e:	f109 0901 	add.w	r9, r9, #1
 8001142:	ed90 2a00 	vldr	s4, [r0]
 8001146:	edd1 1a00 	vldr	s3, [r1]
 800114a:	1d00      	adds	r0, r0, #4
 800114c:	45b1      	cmp	r9, r6
 800114e:	ee02 1a21 	vmla.f32	s2, s4, s3
 8001152:	eb01 018e 	add.w	r1, r1, lr, lsl #2
 8001156:	dbcb      	blt.n	80010f0 <ai_conv2d_stripe_f32+0x340>
 8001158:	f8cd e088 	str.w	lr, [sp, #136]	; 0x88
 800115c:	1e52      	subs	r2, r2, #1
 800115e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8001162:	eb00 008c 	add.w	r0, r0, ip, lsl #2
 8001166:	d18d      	bne.n	8001084 <ai_conv2d_stripe_f32+0x2d4>
 8001168:	9908      	ldr	r1, [sp, #32]
 800116a:	ed85 1a00 	vstr	s2, [r5]
 800116e:	1c64      	adds	r4, r4, #1
 8001170:	1d2d      	adds	r5, r5, #4
 8001172:	1d3f      	adds	r7, r7, #4
 8001174:	f1bb 0b01 	subs.w	fp, fp, #1
 8001178:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800117c:	f47f af79 	bne.w	8001072 <ai_conv2d_stripe_f32+0x2c2>
 8001180:	9d00      	ldr	r5, [sp, #0]
 8001182:	9908      	ldr	r1, [sp, #32]
 8001184:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8001188:	9a03      	ldr	r2, [sp, #12]
 800118a:	f10e 0e04 	add.w	lr, lr, #4
 800118e:	4596      	cmp	lr, r2
 8001190:	f4bf af2f 	bcs.w	8000ff2 <ai_conv2d_stripe_f32+0x242>
 8001194:	e75d      	b.n	8001052 <ai_conv2d_stripe_f32+0x2a2>
 8001196:	bf00      	nop
 8001198:	00000000 	.word	0x00000000
 800119c:	f9bd 10bc 	ldrsh.w	r1, [sp, #188]	; 0xbc
 80011a0:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
 80011a4:	4608      	mov	r0, r1
 80011a6:	1bcb      	subs	r3, r1, r7
 80011a8:	fb97 f4f0 	sdiv	r4, r7, r0
 80011ac:	fb00 3004 	mla	r0, r0, r4, r3
 80011b0:	fb90 faf1 	sdiv	sl, r0, r1
 80011b4:	fb01 0a1a 	mls	sl, r1, sl, r0
 80011b8:	f9bd 30c0 	ldrsh.w	r3, [sp, #192]	; 0xc0
 80011bc:	982a      	ldr	r0, [sp, #168]	; 0xa8
 80011be:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80011c0:	fb90 f0f3 	sdiv	r0, r0, r3
 80011c4:	fb03 4000 	mla	r0, r3, r0, r4
 80011c8:	1876      	adds	r6, r6, r1
 80011ca:	fb90 fbf3 	sdiv	fp, r0, r3
 80011ce:	1e76      	subs	r6, r6, #1
 80011d0:	187f      	adds	r7, r7, r1
 80011d2:	fb03 0b1b 	mls	fp, r3, fp, r0
 80011d6:	eba6 060a 	sub.w	r6, r6, sl
 80011da:	eba5 050b 	sub.w	r5, r5, fp
 80011de:	1e7f      	subs	r7, r7, #1
 80011e0:	fb96 f0f1 	sdiv	r0, r6, r1
 80011e4:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 80011e6:	9c22      	ldr	r4, [sp, #136]	; 0x88
 80011e8:	195d      	adds	r5, r3, r5
 80011ea:	1e6d      	subs	r5, r5, #1
 80011ec:	fb00 9911 	mls	r9, r0, r1, r9
 80011f0:	fb97 f1f1 	sdiv	r1, r7, r1
 80011f4:	fb95 fcf3 	sdiv	ip, r5, r3
 80011f8:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80011fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80011fc:	9509      	str	r5, [sp, #36]	; 0x24
 80011fe:	eba6 060c 	sub.w	r6, r6, ip
 8001202:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8001204:	1a2d      	subs	r5, r5, r0
 8001206:	fb05 f803 	mul.w	r8, r5, r3
 800120a:	9d26      	ldr	r5, [sp, #152]	; 0x98
 800120c:	435d      	muls	r5, r3
 800120e:	fb06 fe05 	mul.w	lr, r6, r5
 8001212:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8001214:	9e06      	ldr	r6, [sp, #24]
 8001216:	194d      	adds	r5, r1, r5
 8001218:	fb04 f909 	mul.w	r9, r4, r9
 800121c:	435d      	muls	r5, r3
 800121e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8001220:	eb06 0185 	add.w	r1, r6, r5, lsl #2
 8001224:	9d01      	ldr	r5, [sp, #4]
 8001226:	9e00      	ldr	r6, [sp, #0]
 8001228:	1ae4      	subs	r4, r4, r3
 800122a:	42b5      	cmp	r5, r6
 800122c:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 800122e:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8001230:	445d      	add	r5, fp
 8001232:	fb06 aa05 	mla	sl, r6, r5, sl
 8001236:	9d22      	ldr	r5, [sp, #136]	; 0x88
 8001238:	fb0a f505 	mul.w	r5, sl, r5
 800123c:	bf0c      	ite	eq
 800123e:	eddf 0a9e 	vldreq	s1, [pc, #632]	; 80014b8 <.text_5>
 8001242:	eef0 0a40 	vmovne.f32	s1, s0
 8001246:	eb02 0785 	add.w	r7, r2, r5, lsl #2
 800124a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 800124c:	2500      	movs	r5, #0
 800124e:	2a00      	cmp	r2, #0
 8001250:	d06c      	beq.n	800132c <ai_conv2d_stripe_f32+0x57c>
 8001252:	9202      	str	r2, [sp, #8]
 8001254:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001256:	2a00      	cmp	r2, #0
 8001258:	d062      	beq.n	8001320 <ai_conv2d_stripe_f32+0x570>
 800125a:	9a01      	ldr	r2, [sp, #4]
 800125c:	eb02 0685 	add.w	r6, r2, r5, lsl #2
 8001260:	9a00      	ldr	r2, [sp, #0]
 8001262:	f8cd c00c 	str.w	ip, [sp, #12]
 8001266:	eb02 0a85 	add.w	sl, r2, r5, lsl #2
 800126a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800126c:	f8cd e020 	str.w	lr, [sp, #32]
 8001270:	f8cd 701c 	str.w	r7, [sp, #28]
 8001274:	f8dd e00c 	ldr.w	lr, [sp, #12]
 8001278:	ed96 1a00 	vldr	s2, [r6]
 800127c:	9f07      	ldr	r7, [sp, #28]
 800127e:	f1be 0f00 	cmp.w	lr, #0
 8001282:	ee21 1a20 	vmul.f32	s2, s2, s1
 8001286:	dd3b      	ble.n	8001300 <ai_conv2d_stripe_f32+0x550>
 8001288:	2800      	cmp	r0, #0
 800128a:	dd32      	ble.n	80012f2 <ai_conv2d_stripe_f32+0x542>
 800128c:	ea4f 0c00 	mov.w	ip, r0
 8001290:	eb07 0b83 	add.w	fp, r7, r3, lsl #2
 8001294:	455f      	cmp	r7, fp
 8001296:	d227      	bcs.n	80012e8 <ai_conv2d_stripe_f32+0x538>
 8001298:	edd1 2a00 	vldr	s5, [r1]
 800129c:	edd7 1a00 	vldr	s3, [r7]
 80012a0:	1d09      	adds	r1, r1, #4
 80012a2:	1d3f      	adds	r7, r7, #4
 80012a4:	455f      	cmp	r7, fp
 80012a6:	ee02 1aa1 	vmla.f32	s2, s5, s3
 80012aa:	d21d      	bcs.n	80012e8 <ai_conv2d_stripe_f32+0x538>
 80012ac:	ed91 3a00 	vldr	s6, [r1]
 80012b0:	ed97 2a00 	vldr	s4, [r7]
 80012b4:	1d09      	adds	r1, r1, #4
 80012b6:	1d3f      	adds	r7, r7, #4
 80012b8:	455f      	cmp	r7, fp
 80012ba:	ee03 1a02 	vmla.f32	s2, s6, s4
 80012be:	d213      	bcs.n	80012e8 <ai_conv2d_stripe_f32+0x538>
 80012c0:	edd1 2a00 	vldr	s5, [r1]
 80012c4:	edd7 1a00 	vldr	s3, [r7]
 80012c8:	1d09      	adds	r1, r1, #4
 80012ca:	1d3f      	adds	r7, r7, #4
 80012cc:	455f      	cmp	r7, fp
 80012ce:	ee02 1aa1 	vmla.f32	s2, s5, s3
 80012d2:	d209      	bcs.n	80012e8 <ai_conv2d_stripe_f32+0x538>
 80012d4:	ed91 2a00 	vldr	s4, [r1]
 80012d8:	ed97 3a00 	vldr	s6, [r7]
 80012dc:	1d09      	adds	r1, r1, #4
 80012de:	1d3f      	adds	r7, r7, #4
 80012e0:	455f      	cmp	r7, fp
 80012e2:	ee02 1a03 	vmla.f32	s2, s4, s6
 80012e6:	d3d7      	bcc.n	8001298 <ai_conv2d_stripe_f32+0x4e8>
 80012e8:	f1bc 0c01 	subs.w	ip, ip, #1
 80012ec:	eb07 0784 	add.w	r7, r7, r4, lsl #2
 80012f0:	d1ce      	bne.n	8001290 <ai_conv2d_stripe_f32+0x4e0>
 80012f2:	f1be 0e01 	subs.w	lr, lr, #1
 80012f6:	eb07 0789 	add.w	r7, r7, r9, lsl #2
 80012fa:	eb01 0188 	add.w	r1, r1, r8, lsl #2
 80012fe:	d1c3      	bne.n	8001288 <ai_conv2d_stripe_f32+0x4d8>
 8001300:	9f08      	ldr	r7, [sp, #32]
 8001302:	1c6d      	adds	r5, r5, #1
 8001304:	1d36      	adds	r6, r6, #4
 8001306:	ed8a 1a00 	vstr	s2, [sl]
 800130a:	1e52      	subs	r2, r2, #1
 800130c:	eb01 0187 	add.w	r1, r1, r7, lsl #2
 8001310:	f10a 0a04 	add.w	sl, sl, #4
 8001314:	d1ae      	bne.n	8001274 <ai_conv2d_stripe_f32+0x4c4>
 8001316:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800131a:	f8dd e020 	ldr.w	lr, [sp, #32]
 800131e:	9f07      	ldr	r7, [sp, #28]
 8001320:	9a02      	ldr	r2, [sp, #8]
 8001322:	1e52      	subs	r2, r2, #1
 8001324:	eb07 0783 	add.w	r7, r7, r3, lsl #2
 8001328:	9202      	str	r2, [sp, #8]
 800132a:	d193      	bne.n	8001254 <ai_conv2d_stripe_f32+0x4a4>
 800132c:	9800      	ldr	r0, [sp, #0]
 800132e:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8001330:	eb00 0281 	add.w	r2, r0, r1, lsl #2
 8001334:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8001336:	f8bd 10a0 	ldrh.w	r1, [sp, #160]	; 0xa0
 800133a:	9200      	str	r2, [sp, #0]
 800133c:	1841      	adds	r1, r0, r1
 800133e:	912c      	str	r1, [sp, #176]	; 0xb0
 8001340:	9805      	ldr	r0, [sp, #20]
 8001342:	f8bd 10a0 	ldrh.w	r1, [sp, #160]	; 0xa0
 8001346:	1841      	adds	r1, r0, r1
 8001348:	9804      	ldr	r0, [sp, #16]
 800134a:	9105      	str	r1, [sp, #20]
 800134c:	1e40      	subs	r0, r0, #1
 800134e:	9004      	str	r0, [sp, #16]
 8001350:	f47f ad86 	bne.w	8000e60 <ai_conv2d_stripe_f32+0xb0>
 8001354:	b018      	add	sp, #96	; 0x60
 8001356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800135a <func_dummy>:
 800135a:	4770      	bx	lr

0800135c <ai_dict8_dot_array_f32>:
 800135c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001360:	b081      	sub	sp, #4
 8001362:	4682      	mov	sl, r0
 8001364:	ed2d 8b02 	vpush	{d8}
 8001368:	4615      	mov	r5, r2
 800136a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800136c:	08e0      	lsrs	r0, r4, #3
 800136e:	460f      	mov	r7, r1
 8001370:	461a      	mov	r2, r3
 8001372:	ed9f 0a51 	vldr	s0, [pc, #324]	; 80014b8 <.text_5>
 8001376:	d052      	beq.n	800141e <ai_dict8_dot_array_f32+0xc2>
 8001378:	4629      	mov	r1, r5
 800137a:	783b      	ldrb	r3, [r7, #0]
 800137c:	787d      	ldrb	r5, [r7, #1]
 800137e:	78be      	ldrb	r6, [r7, #2]
 8001380:	f897 b003 	ldrb.w	fp, [r7, #3]
 8001384:	ed92 8a00 	vldr	s16, [r2]
 8001388:	ed92 7a01 	vldr	s14, [r2, #4]
 800138c:	f817 cf04 	ldrb.w	ip, [r7, #4]!
 8001390:	ed92 6a02 	vldr	s12, [r2, #8]
 8001394:	ed92 5a03 	vldr	s10, [r2, #12]
 8001398:	f897 e001 	ldrb.w	lr, [r7, #1]
 800139c:	f897 8002 	ldrb.w	r8, [r7, #2]
 80013a0:	f897 9003 	ldrb.w	r9, [r7, #3]
 80013a4:	ed92 4a04 	vldr	s8, [r2, #16]
 80013a8:	ed92 3a05 	vldr	s6, [r2, #20]
 80013ac:	ed92 2a06 	vldr	s4, [r2, #24]
 80013b0:	ed92 1a07 	vldr	s2, [r2, #28]
 80013b4:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80013b8:	eb01 0585 	add.w	r5, r1, r5, lsl #2
 80013bc:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 80013c0:	edd3 7a00 	vldr	s15, [r3]
 80013c4:	edd5 6a00 	vldr	s13, [r5]
 80013c8:	eb01 0b8b 	add.w	fp, r1, fp, lsl #2
 80013cc:	ee07 0a88 	vmla.f32	s0, s15, s16
 80013d0:	eb01 0c8c 	add.w	ip, r1, ip, lsl #2
 80013d4:	edd6 5a00 	vldr	s11, [r6]
 80013d8:	eddb 4a00 	vldr	s9, [fp]
 80013dc:	eddc 3a00 	vldr	s7, [ip]
 80013e0:	ee06 0a87 	vmla.f32	s0, s13, s14
 80013e4:	eb01 0e8e 	add.w	lr, r1, lr, lsl #2
 80013e8:	ee05 0a86 	vmla.f32	s0, s11, s12
 80013ec:	eb01 0888 	add.w	r8, r1, r8, lsl #2
 80013f0:	ee04 0a85 	vmla.f32	s0, s9, s10
 80013f4:	eb01 0989 	add.w	r9, r1, r9, lsl #2
 80013f8:	edde 2a00 	vldr	s5, [lr]
 80013fc:	edd8 1a00 	vldr	s3, [r8]
 8001400:	edd9 0a00 	vldr	s1, [r9]
 8001404:	ee03 0a84 	vmla.f32	s0, s7, s8
 8001408:	1d3f      	adds	r7, r7, #4
 800140a:	ee02 0a83 	vmla.f32	s0, s5, s6
 800140e:	3220      	adds	r2, #32
 8001410:	ee01 0a82 	vmla.f32	s0, s3, s4
 8001414:	1e40      	subs	r0, r0, #1
 8001416:	ee00 0a81 	vmla.f32	s0, s1, s2
 800141a:	d1ae      	bne.n	800137a <ai_dict8_dot_array_f32+0x1e>
 800141c:	460d      	mov	r5, r1
 800141e:	f014 0007 	ands.w	r0, r4, #7
 8001422:	d03e      	beq.n	80014a2 <ai_dict8_dot_array_f32+0x146>
 8001424:	f010 0103 	ands.w	r1, r0, #3
 8001428:	f000 800d 	beq.w	8001446 <ai_dict8_dot_array_f32+0xea>
 800142c:	f817 3b01 	ldrb.w	r3, [r7], #1
 8001430:	ed92 1a00 	vldr	s2, [r2]
 8001434:	eb05 0683 	add.w	r6, r5, r3, lsl #2
 8001438:	1d12      	adds	r2, r2, #4
 800143a:	edd6 0a00 	vldr	s1, [r6]
 800143e:	1e49      	subs	r1, r1, #1
 8001440:	ee00 0a81 	vmla.f32	s0, s1, s2
 8001444:	d1f2      	bne.n	800142c <ai_dict8_dot_array_f32+0xd0>
 8001446:	0880      	lsrs	r0, r0, #2
 8001448:	f000 802b 	beq.w	80014a2 <ai_dict8_dot_array_f32+0x146>
 800144c:	f817 3b01 	ldrb.w	r3, [r7], #1
 8001450:	f817 1b01 	ldrb.w	r1, [r7], #1
 8001454:	ed92 1a00 	vldr	s2, [r2]
 8001458:	edd2 0a01 	vldr	s1, [r2, #4]
 800145c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8001460:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 8001464:	ed93 2a00 	vldr	s4, [r3]
 8001468:	edd1 1a00 	vldr	s3, [r1]
 800146c:	f817 1b01 	ldrb.w	r1, [r7], #1
 8001470:	f817 3b01 	ldrb.w	r3, [r7], #1
 8001474:	ee02 0a01 	vmla.f32	s0, s4, s2
 8001478:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 800147c:	ee01 0aa0 	vmla.f32	s0, s3, s1
 8001480:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8001484:	edd2 0a02 	vldr	s1, [r2, #8]
 8001488:	ed91 2a00 	vldr	s4, [r1]
 800148c:	ed92 1a03 	vldr	s2, [r2, #12]
 8001490:	edd3 1a00 	vldr	s3, [r3]
 8001494:	3210      	adds	r2, #16
 8001496:	ee02 0a20 	vmla.f32	s0, s4, s1
 800149a:	1e40      	subs	r0, r0, #1
 800149c:	ee01 0a81 	vmla.f32	s0, s3, s2
 80014a0:	d1d4      	bne.n	800144c <ai_dict8_dot_array_f32+0xf0>
 80014a2:	edda 0a00 	vldr	s1, [sl]
 80014a6:	ee30 0a80 	vadd.f32	s0, s1, s0
 80014aa:	ed8a 0a00 	vstr	s0, [sl]
 80014ae:	ecbd 8b02 	vpop	{d8}
 80014b2:	b001      	add	sp, #4
 80014b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080014b8 <.text_5>:
 80014b8:	00000000 	.word	0x00000000

080014bc <ai_dict4_dot_array_f32>:
 80014bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80014c0:	ed2d 8b02 	vpush	{d8}
 80014c4:	4680      	mov	r8, r0
 80014c6:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 80014ca:	ea4f 005c 	mov.w	r0, ip, lsr #1
 80014ce:	461e      	mov	r6, r3
 80014d0:	0040      	lsls	r0, r0, #1
 80014d2:	ea5f 03dc 	movs.w	r3, ip, lsr #3
 80014d6:	460c      	mov	r4, r1
 80014d8:	4615      	mov	r5, r2
 80014da:	eb06 0e80 	add.w	lr, r6, r0, lsl #2
 80014de:	ed9f 0a50 	vldr	s0, [pc, #320]	; 8001620 <.text_7>
 80014e2:	d053      	beq.n	800158c <ai_dict4_dot_array_f32+0xd0>
 80014e4:	ed96 8a00 	vldr	s16, [r6]
 80014e8:	ed96 7a01 	vldr	s14, [r6, #4]
 80014ec:	ed96 6a02 	vldr	s12, [r6, #8]
 80014f0:	ed96 5a03 	vldr	s10, [r6, #12]
 80014f4:	7820      	ldrb	r0, [r4, #0]
 80014f6:	7861      	ldrb	r1, [r4, #1]
 80014f8:	78a2      	ldrb	r2, [r4, #2]
 80014fa:	78e7      	ldrb	r7, [r4, #3]
 80014fc:	ed96 4a04 	vldr	s8, [r6, #16]
 8001500:	ed96 3a05 	vldr	s6, [r6, #20]
 8001504:	ed96 2a06 	vldr	s4, [r6, #24]
 8001508:	ed96 1a07 	vldr	s2, [r6, #28]
 800150c:	f007 090f 	and.w	r9, r7, #15
 8001510:	093f      	lsrs	r7, r7, #4
 8001512:	eb05 0787 	add.w	r7, r5, r7, lsl #2
 8001516:	eb05 0a89 	add.w	sl, r5, r9, lsl #2
 800151a:	edd7 1a00 	vldr	s3, [r7]
 800151e:	edda 0a00 	vldr	s1, [sl]
 8001522:	f002 070f 	and.w	r7, r2, #15
 8001526:	0912      	lsrs	r2, r2, #4
 8001528:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 800152c:	eb05 0787 	add.w	r7, r5, r7, lsl #2
 8001530:	edd2 3a00 	vldr	s7, [r2]
 8001534:	edd7 2a00 	vldr	s5, [r7]
 8001538:	f001 020f 	and.w	r2, r1, #15
 800153c:	0909      	lsrs	r1, r1, #4
 800153e:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 8001542:	eb05 0782 	add.w	r7, r5, r2, lsl #2
 8001546:	edd1 5a00 	vldr	s11, [r1]
 800154a:	edd7 4a00 	vldr	s9, [r7]
 800154e:	f000 010f 	and.w	r1, r0, #15
 8001552:	0900      	lsrs	r0, r0, #4
 8001554:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 8001558:	eb05 0281 	add.w	r2, r5, r1, lsl #2
 800155c:	edd0 7a00 	vldr	s15, [r0]
 8001560:	edd2 6a00 	vldr	s13, [r2]
 8001564:	ee07 0a88 	vmla.f32	s0, s15, s16
 8001568:	ee06 0a87 	vmla.f32	s0, s13, s14
 800156c:	ee05 0a86 	vmla.f32	s0, s11, s12
 8001570:	ee04 0a85 	vmla.f32	s0, s9, s10
 8001574:	ee03 0a84 	vmla.f32	s0, s7, s8
 8001578:	1d24      	adds	r4, r4, #4
 800157a:	ee02 0a83 	vmla.f32	s0, s5, s6
 800157e:	3620      	adds	r6, #32
 8001580:	ee01 0a82 	vmla.f32	s0, s3, s4
 8001584:	1e5b      	subs	r3, r3, #1
 8001586:	ee00 0a81 	vmla.f32	s0, s1, s2
 800158a:	d1ab      	bne.n	80014e4 <ai_dict4_dot_array_f32+0x28>
 800158c:	4576      	cmp	r6, lr
 800158e:	d22f      	bcs.n	80015f0 <ai_dict4_dot_array_f32+0x134>
 8001590:	f814 0b01 	ldrb.w	r0, [r4], #1
 8001594:	edd6 1a00 	vldr	s3, [r6]
 8001598:	edd6 0a01 	vldr	s1, [r6, #4]
 800159c:	f000 010f 	and.w	r1, r0, #15
 80015a0:	0900      	lsrs	r0, r0, #4
 80015a2:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 80015a6:	eb05 0281 	add.w	r2, r5, r1, lsl #2
 80015aa:	ed90 2a00 	vldr	s4, [r0]
 80015ae:	ed92 1a00 	vldr	s2, [r2]
 80015b2:	3608      	adds	r6, #8
 80015b4:	ee02 0a21 	vmla.f32	s0, s4, s3
 80015b8:	4576      	cmp	r6, lr
 80015ba:	ee01 0a20 	vmla.f32	s0, s2, s1
 80015be:	d217      	bcs.n	80015f0 <ai_dict4_dot_array_f32+0x134>
 80015c0:	f814 0b01 	ldrb.w	r0, [r4], #1
 80015c4:	ed96 1a00 	vldr	s2, [r6]
 80015c8:	ed96 2a01 	vldr	s4, [r6, #4]
 80015cc:	f000 010f 	and.w	r1, r0, #15
 80015d0:	0900      	lsrs	r0, r0, #4
 80015d2:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 80015d6:	eb05 0281 	add.w	r2, r5, r1, lsl #2
 80015da:	edd0 1a00 	vldr	s3, [r0]
 80015de:	edd2 0a00 	vldr	s1, [r2]
 80015e2:	3608      	adds	r6, #8
 80015e4:	ee01 0a81 	vmla.f32	s0, s3, s2
 80015e8:	4576      	cmp	r6, lr
 80015ea:	ee00 0a82 	vmla.f32	s0, s1, s4
 80015ee:	d3cf      	bcc.n	8001590 <ai_dict4_dot_array_f32+0xd4>
 80015f0:	ea5f 70cc 	movs.w	r0, ip, lsl #31
 80015f4:	d509      	bpl.n	800160a <ai_dict4_dot_array_f32+0x14e>
 80015f6:	7821      	ldrb	r1, [r4, #0]
 80015f8:	ed96 1a00 	vldr	s2, [r6]
 80015fc:	0909      	lsrs	r1, r1, #4
 80015fe:	eb05 0081 	add.w	r0, r5, r1, lsl #2
 8001602:	edd0 0a00 	vldr	s1, [r0]
 8001606:	ee00 0a81 	vmla.f32	s0, s1, s2
 800160a:	edd8 1a00 	vldr	s3, [r8]
 800160e:	ee31 0a80 	vadd.f32	s0, s3, s0
 8001612:	ed88 0a00 	vstr	s0, [r8]
 8001616:	ecbd 8b02 	vpop	{d8}
 800161a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08001620 <.text_7>:
 8001620:	00000000 	.word	0x00000000

08001624 <ai_dict_decompress_f32>:
 8001624:	b4f0      	push	{r4, r5, r6, r7}
 8001626:	4604      	mov	r4, r0
 8001628:	9805      	ldr	r0, [sp, #20]
 800162a:	9e04      	ldr	r6, [sp, #16]
 800162c:	2b04      	cmp	r3, #4
 800162e:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 8001632:	d003      	beq.n	800163c <ai_dict_decompress_f32+0x18>
 8001634:	2b08      	cmp	r3, #8
 8001636:	d03e      	beq.n	80016b6 <ai_dict_decompress_f32+0x92>
 8001638:	bcf0      	pop	{r4, r5, r6, r7}
 800163a:	4770      	bx	lr
 800163c:	42ac      	cmp	r4, r5
 800163e:	d259      	bcs.n	80016f4 <ai_dict_decompress_f32+0xd0>
 8001640:	0870      	lsrs	r0, r6, #1
 8001642:	d02e      	beq.n	80016a2 <ai_dict_decompress_f32+0x7e>
 8001644:	07c3      	lsls	r3, r0, #31
 8001646:	d50c      	bpl.n	8001662 <ai_dict_decompress_f32+0x3e>
 8001648:	780f      	ldrb	r7, [r1, #0]
 800164a:	093f      	lsrs	r7, r7, #4
 800164c:	f852 3027 	ldr.w	r3, [r2, r7, lsl #2]
 8001650:	6023      	str	r3, [r4, #0]
 8001652:	f811 7b01 	ldrb.w	r7, [r1], #1
 8001656:	f007 070f 	and.w	r7, r7, #15
 800165a:	f852 3027 	ldr.w	r3, [r2, r7, lsl #2]
 800165e:	6063      	str	r3, [r4, #4]
 8001660:	3408      	adds	r4, #8
 8001662:	0840      	lsrs	r0, r0, #1
 8001664:	d01d      	beq.n	80016a2 <ai_dict_decompress_f32+0x7e>
 8001666:	780b      	ldrb	r3, [r1, #0]
 8001668:	091b      	lsrs	r3, r3, #4
 800166a:	f852 7023 	ldr.w	r7, [r2, r3, lsl #2]
 800166e:	6027      	str	r7, [r4, #0]
 8001670:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001674:	f003 030f 	and.w	r3, r3, #15
 8001678:	f852 7023 	ldr.w	r7, [r2, r3, lsl #2]
 800167c:	6067      	str	r7, [r4, #4]
 800167e:	f104 0308 	add.w	r3, r4, #8
 8001682:	780c      	ldrb	r4, [r1, #0]
 8001684:	0924      	lsrs	r4, r4, #4
 8001686:	f852 7024 	ldr.w	r7, [r2, r4, lsl #2]
 800168a:	601f      	str	r7, [r3, #0]
 800168c:	1e40      	subs	r0, r0, #1
 800168e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001692:	f004 040f 	and.w	r4, r4, #15
 8001696:	f852 7024 	ldr.w	r7, [r2, r4, lsl #2]
 800169a:	605f      	str	r7, [r3, #4]
 800169c:	f103 0408 	add.w	r4, r3, #8
 80016a0:	d1e1      	bne.n	8001666 <ai_dict_decompress_f32+0x42>
 80016a2:	07f0      	lsls	r0, r6, #31
 80016a4:	d5ca      	bpl.n	800163c <ai_dict_decompress_f32+0x18>
 80016a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80016aa:	091b      	lsrs	r3, r3, #4
 80016ac:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80016b0:	f844 0b04 	str.w	r0, [r4], #4
 80016b4:	e7c2      	b.n	800163c <ai_dict_decompress_f32+0x18>
 80016b6:	42ac      	cmp	r4, r5
 80016b8:	d21c      	bcs.n	80016f4 <ai_dict_decompress_f32+0xd0>
 80016ba:	7808      	ldrb	r0, [r1, #0]
 80016bc:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 80016c0:	6020      	str	r0, [r4, #0]
 80016c2:	1d20      	adds	r0, r4, #4
 80016c4:	42a8      	cmp	r0, r5
 80016c6:	bf3f      	itttt	cc
 80016c8:	784c      	ldrbcc	r4, [r1, #1]
 80016ca:	f852 3024 	ldrcc.w	r3, [r2, r4, lsl #2]
 80016ce:	f840 3b04 	strcc.w	r3, [r0], #4
 80016d2:	42a8      	cmpcc	r0, r5
 80016d4:	d20e      	bcs.n	80016f4 <ai_dict_decompress_f32+0xd0>
 80016d6:	788b      	ldrb	r3, [r1, #2]
 80016d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016dc:	f840 3b04 	str.w	r3, [r0], #4
 80016e0:	42a8      	cmp	r0, r5
 80016e2:	d207      	bcs.n	80016f4 <ai_dict_decompress_f32+0xd0>
 80016e4:	78cc      	ldrb	r4, [r1, #3]
 80016e6:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
 80016ea:	1d09      	adds	r1, r1, #4
 80016ec:	1d04      	adds	r4, r0, #4
 80016ee:	42ac      	cmp	r4, r5
 80016f0:	6003      	str	r3, [r0, #0]
 80016f2:	d3e2      	bcc.n	80016ba <ai_dict_decompress_f32+0x96>
 80016f4:	bcf0      	pop	{r4, r5, r6, r7}
 80016f6:	4770      	bx	lr

080016f8 <forward_conv2d>:
 80016f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80016fc:	4605      	mov	r5, r0
 80016fe:	b0a9      	sub	sp, #164	; 0xa4
 8001700:	696b      	ldr	r3, [r5, #20]
 8001702:	8819      	ldrh	r1, [r3, #0]
 8001704:	2900      	cmp	r1, #0
 8001706:	bf1a      	itte	ne
 8001708:	6858      	ldrne	r0, [r3, #4]
 800170a:	1d00      	addne	r0, r0, #4
 800170c:	2004      	moveq	r0, #4
 800170e:	6800      	ldr	r0, [r0, #0]
 8001710:	2800      	cmp	r0, #0
 8001712:	bf14      	ite	ne
 8001714:	6802      	ldrne	r2, [r0, #0]
 8001716:	2200      	moveq	r2, #0
 8001718:	2901      	cmp	r1, #1
 800171a:	bfc6      	itte	gt
 800171c:	6858      	ldrgt	r0, [r3, #4]
 800171e:	3010      	addgt	r0, #16
 8001720:	2004      	movle	r0, #4
 8001722:	6800      	ldr	r0, [r0, #0]
 8001724:	2800      	cmp	r0, #0
 8001726:	bf14      	ite	ne
 8001728:	f8d0 a000 	ldrne.w	sl, [r0]
 800172c:	f04f 0a00 	moveq.w	sl, #0
 8001730:	2902      	cmp	r1, #2
 8001732:	bfc6      	itte	gt
 8001734:	6858      	ldrgt	r0, [r3, #4]
 8001736:	f100 041c 	addgt.w	r4, r0, #28
 800173a:	2404      	movle	r4, #4
 800173c:	6820      	ldr	r0, [r4, #0]
 800173e:	2800      	cmp	r0, #0
 8001740:	bf14      	ite	ne
 8001742:	6806      	ldrne	r6, [r0, #0]
 8001744:	2600      	moveq	r6, #0
 8001746:	2902      	cmp	r1, #2
 8001748:	dd0a      	ble.n	8001760 <forward_conv2d+0x68>
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f113 0118 	adds.w	r1, r3, #24
 8001750:	d006      	beq.n	8001760 <forward_conv2d+0x68>
 8001752:	8b19      	ldrh	r1, [r3, #24]
 8001754:	2901      	cmp	r1, #1
 8001756:	dd03      	ble.n	8001760 <forward_conv2d+0x68>
 8001758:	69d9      	ldr	r1, [r3, #28]
 800175a:	b109      	cbz	r1, 8001760 <forward_conv2d+0x68>
 800175c:	6849      	ldr	r1, [r1, #4]
 800175e:	e000      	b.n	8001762 <forward_conv2d+0x6a>
 8001760:	2100      	movs	r1, #0
 8001762:	b100      	cbz	r0, 8001766 <forward_conv2d+0x6e>
 8001764:	6880      	ldr	r0, [r0, #8]
 8001766:	68d7      	ldr	r7, [r2, #12]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	931b      	str	r3, [sp, #108]	; 0x6c
 800176c:	f8da 300c 	ldr.w	r3, [sl, #12]
 8001770:	685c      	ldr	r4, [r3, #4]
 8001772:	9404      	str	r4, [sp, #16]
 8001774:	68dc      	ldr	r4, [r3, #12]
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	9314      	str	r3, [sp, #80]	; 0x50
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	931a      	str	r3, [sp, #104]	; 0x68
 800177e:	68bf      	ldr	r7, [r7, #8]
 8001780:	9720      	str	r7, [sp, #128]	; 0x80
 8001782:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001784:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8001788:	8d2f      	ldrh	r7, [r5, #40]	; 0x28
 800178a:	971f      	str	r7, [sp, #124]	; 0x7c
 800178c:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800178e:	681f      	ldr	r7, [r3, #0]
 8001790:	f8b3 8004 	ldrh.w	r8, [r3, #4]
 8001794:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001796:	9319      	str	r3, [sp, #100]	; 0x64
 8001798:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800179a:	9318      	str	r3, [sp, #96]	; 0x60
 800179c:	68f3      	ldr	r3, [r6, #12]
 800179e:	f8d3 e008 	ldr.w	lr, [r3, #8]
 80017a2:	f8cd e04c 	str.w	lr, [sp, #76]	; 0x4c
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	9312      	str	r3, [sp, #72]	; 0x48
 80017aa:	69ab      	ldr	r3, [r5, #24]
 80017ac:	931e      	str	r3, [sp, #120]	; 0x78
 80017ae:	6992      	ldr	r2, [r2, #24]
 80017b0:	6893      	ldr	r3, [r2, #8]
 80017b2:	931d      	str	r3, [sp, #116]	; 0x74
 80017b4:	69b2      	ldr	r2, [r6, #24]
 80017b6:	f8d2 9008 	ldr.w	r9, [r2, #8]
 80017ba:	b119      	cbz	r1, 80017c4 <forward_conv2d+0xcc>
 80017bc:	698a      	ldr	r2, [r1, #24]
 80017be:	6893      	ldr	r3, [r2, #8]
 80017c0:	9317      	str	r3, [sp, #92]	; 0x5c
 80017c2:	e001      	b.n	80017c8 <forward_conv2d+0xd0>
 80017c4:	2200      	movs	r2, #0
 80017c6:	9217      	str	r2, [sp, #92]	; 0x5c
 80017c8:	f8da 1018 	ldr.w	r1, [sl, #24]
 80017cc:	688a      	ldr	r2, [r1, #8]
 80017ce:	9203      	str	r2, [sp, #12]
 80017d0:	69e9      	ldr	r1, [r5, #28]
 80017d2:	b118      	cbz	r0, 80017dc <forward_conv2d+0xe4>
 80017d4:	6981      	ldr	r1, [r0, #24]
 80017d6:	688a      	ldr	r2, [r1, #8]
 80017d8:	9215      	str	r2, [sp, #84]	; 0x54
 80017da:	e005      	b.n	80017e8 <forward_conv2d+0xf0>
 80017dc:	b111      	cbz	r1, 80017e4 <forward_conv2d+0xec>
 80017de:	688a      	ldr	r2, [r1, #8]
 80017e0:	9215      	str	r2, [sp, #84]	; 0x54
 80017e2:	e001      	b.n	80017e8 <forward_conv2d+0xf0>
 80017e4:	2300      	movs	r3, #0
 80017e6:	9315      	str	r3, [sp, #84]	; 0x54
 80017e8:	9915      	ldr	r1, [sp, #84]	; 0x54
 80017ea:	9102      	str	r1, [sp, #8]
 80017ec:	b920      	cbnz	r0, 80017f8 <forward_conv2d+0x100>
 80017ee:	2100      	movs	r1, #0
 80017f0:	2201      	movs	r2, #1
 80017f2:	9124      	str	r1, [sp, #144]	; 0x90
 80017f4:	9223      	str	r2, [sp, #140]	; 0x8c
 80017f6:	e008      	b.n	800180a <forward_conv2d+0x112>
 80017f8:	6941      	ldr	r1, [r0, #20]
 80017fa:	688a      	ldr	r2, [r1, #8]
 80017fc:	9224      	str	r2, [sp, #144]	; 0x90
 80017fe:	6980      	ldr	r0, [r0, #24]
 8001800:	6841      	ldr	r1, [r0, #4]
 8001802:	6800      	ldr	r0, [r0, #0]
 8001804:	f004 fb3e 	bl	8005e84 <ai_array_get_byte_size>
 8001808:	9023      	str	r0, [sp, #140]	; 0x8c
 800180a:	aa18      	add	r2, sp, #96	; 0x60
 800180c:	6a28      	ldr	r0, [r5, #32]
 800180e:	2800      	cmp	r0, #0
 8001810:	bf12      	itee	ne
 8001812:	9022      	strne	r0, [sp, #136]	; 0x88
 8001814:	f8df 1d28 	ldreq.w	r1, [pc, #3368]	; 8002540 <.text_15>
 8001818:	9122      	streq	r1, [sp, #136]	; 0x88
 800181a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800181c:	8813      	ldrh	r3, [r2, #0]
 800181e:	1e48      	subs	r0, r1, #1
 8001820:	1e5b      	subs	r3, r3, #1
 8001822:	aa19      	add	r2, sp, #100	; 0x64
 8001824:	fb03 1100 	mla	r1, r3, r0, r1
 8001828:	9116      	str	r1, [sp, #88]	; 0x58
 800182a:	9812      	ldr	r0, [sp, #72]	; 0x48
 800182c:	8813      	ldrh	r3, [r2, #0]
 800182e:	1e41      	subs	r1, r0, #1
 8001830:	1e5b      	subs	r3, r3, #1
 8001832:	fb03 0001 	mla	r0, r3, r1, r0
 8001836:	901c      	str	r0, [sp, #112]	; 0x70
 8001838:	2200      	movs	r2, #0
 800183a:	69b6      	ldr	r6, [r6, #24]
 800183c:	6831      	ldr	r1, [r6, #0]
 800183e:	11cb      	asrs	r3, r1, #7
 8001840:	ea4f 5c61 	mov.w	ip, r1, asr #21
 8001844:	1449      	asrs	r1, r1, #17
 8001846:	f001 010f 	and.w	r1, r1, #15
 800184a:	2000      	movs	r0, #0
 800184c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001850:	f00c 0c03 	and.w	ip, ip, #3
 8001854:	2904      	cmp	r1, #4
 8001856:	4683      	mov	fp, r0
 8001858:	fa23 f30c 	lsr.w	r3, r3, ip
 800185c:	bf14      	ite	ne
 800185e:	2908      	cmpne	r1, #8
 8001860:	68f2      	ldreq	r2, [r6, #12]
 8001862:	b1da      	cbz	r2, 800189c <forward_conv2d+0x1a4>
 8001864:	6969      	ldr	r1, [r5, #20]
 8001866:	880d      	ldrh	r5, [r1, #0]
 8001868:	2d04      	cmp	r5, #4
 800186a:	bfa6      	itte	ge
 800186c:	6849      	ldrge	r1, [r1, #4]
 800186e:	3128      	addge	r1, #40	; 0x28
 8001870:	2104      	movlt	r1, #4
 8001872:	6809      	ldr	r1, [r1, #0]
 8001874:	2900      	cmp	r1, #0
 8001876:	bf1f      	itttt	ne
 8001878:	6808      	ldrne	r0, [r1, #0]
 800187a:	2800      	cmpne	r0, #0
 800187c:	6981      	ldrne	r1, [r0, #24]
 800187e:	f8d1 b008 	ldrne.w	fp, [r1, #8]
 8001882:	6980      	ldr	r0, [r0, #24]
 8001884:	6841      	ldr	r1, [r0, #4]
 8001886:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8001888:	9101      	str	r1, [sp, #4]
 800188a:	9000      	str	r0, [sp, #0]
 800188c:	4658      	mov	r0, fp
 800188e:	68b1      	ldr	r1, [r6, #8]
 8001890:	f7ff fec8 	bl	8001624 <ai_dict_decompress_f32>
 8001894:	f1bb 0f00 	cmp.w	fp, #0
 8001898:	bf18      	it	ne
 800189a:	46d9      	movne	r9, fp
 800189c:	b2bf      	uxth	r7, r7
 800189e:	427f      	negs	r7, r7
 80018a0:	2c00      	cmp	r4, #0
 80018a2:	d073      	beq.n	800198c <forward_conv2d+0x294>
 80018a4:	4622      	mov	r2, r4
 80018a6:	f1c8 0800 	rsb	r8, r8, #0
 80018aa:	9c04      	ldr	r4, [sp, #16]
 80018ac:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80018b0:	9e02      	ldr	r6, [sp, #8]
 80018b2:	f8cd 8098 	str.w	r8, [sp, #152]	; 0x98
 80018b6:	f8cd 909c 	str.w	r9, [sp, #156]	; 0x9c
 80018ba:	9711      	str	r7, [sp, #68]	; 0x44
 80018bc:	9221      	str	r2, [sp, #132]	; 0x84
 80018be:	9826      	ldr	r0, [sp, #152]	; 0x98
 80018c0:	991a      	ldr	r1, [sp, #104]	; 0x68
 80018c2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80018c4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80018c6:	9025      	str	r0, [sp, #148]	; 0x94
 80018c8:	9811      	ldr	r0, [sp, #68]	; 0x44
 80018ca:	4240      	negs	r0, r0
 80018cc:	bfd8      	it	le
 80018ce:	2000      	movle	r0, #0
 80018d0:	1a89      	subs	r1, r1, r2
 80018d2:	4299      	cmp	r1, r3
 80018d4:	bf3d      	ittte	cc
 80018d6:	9a1a      	ldrcc	r2, [sp, #104]	; 0x68
 80018d8:	9911      	ldrcc	r1, [sp, #68]	; 0x44
 80018da:	1a51      	subcc	r1, r2, r1
 80018dc:	4619      	movcs	r1, r3
 80018de:	910a      	str	r1, [sp, #40]	; 0x28
 80018e0:	9009      	str	r0, [sp, #36]	; 0x24
 80018e2:	9402      	str	r4, [sp, #8]
 80018e4:	981e      	ldr	r0, [sp, #120]	; 0x78
 80018e6:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
 80018ea:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80018ec:	9008      	str	r0, [sp, #32]
 80018ee:	9107      	str	r1, [sp, #28]
 80018f0:	b212      	sxth	r2, r2
 80018f2:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80018f4:	9912      	ldr	r1, [sp, #72]	; 0x48
 80018f6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80018f8:	920f      	str	r2, [sp, #60]	; 0x3c
 80018fa:	9006      	str	r0, [sp, #24]
 80018fc:	9105      	str	r1, [sp, #20]
 80018fe:	b21b      	sxth	r3, r3
 8001900:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8001902:	9814      	ldr	r0, [sp, #80]	; 0x50
 8001904:	9920      	ldr	r1, [sp, #128]	; 0x80
 8001906:	930e      	str	r3, [sp, #56]	; 0x38
 8001908:	920d      	str	r2, [sp, #52]	; 0x34
 800190a:	9004      	str	r0, [sp, #16]
 800190c:	9103      	str	r1, [sp, #12]
 800190e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8001910:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8001912:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8001914:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8001916:	930c      	str	r3, [sp, #48]	; 0x30
 8001918:	920b      	str	r2, [sp, #44]	; 0x2c
 800191a:	9001      	str	r0, [sp, #4]
 800191c:	9100      	str	r1, [sp, #0]
 800191e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8001920:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8001922:	4659      	mov	r1, fp
 8001924:	2000      	movs	r0, #0
 8001926:	f7ff fa43 	bl	8000db0 <ai_conv2d_stripe_f32>
 800192a:	9814      	ldr	r0, [sp, #80]	; 0x50
 800192c:	b310      	cbz	r0, 8001974 <forward_conv2d+0x27c>
 800192e:	f8cd a000 	str.w	sl, [sp]
 8001932:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8001934:	9f24      	ldr	r7, [sp, #144]	; 0x90
 8001936:	f8dd 808c 	ldr.w	r8, [sp, #140]	; 0x8c
 800193a:	f8dd 9088 	ldr.w	r9, [sp, #136]	; 0x88
 800193e:	4682      	mov	sl, r0
 8001940:	9800      	ldr	r0, [sp, #0]
 8001942:	6981      	ldr	r1, [r0, #24]
 8001944:	f8c1 b008 	str.w	fp, [r1, #8]
 8001948:	462b      	mov	r3, r5
 800194a:	4622      	mov	r2, r4
 800194c:	4608      	mov	r0, r1
 800194e:	47c8      	blx	r9
 8001950:	443d      	add	r5, r7
 8001952:	1ba8      	subs	r0, r5, r6
 8001954:	4540      	cmp	r0, r8
 8001956:	bfa8      	it	ge
 8001958:	4635      	movge	r5, r6
 800195a:	f1ba 0a01 	subs.w	sl, sl, #1
 800195e:	eb0b 0b84 	add.w	fp, fp, r4, lsl #2
 8001962:	d1ed      	bne.n	8001940 <forward_conv2d+0x248>
 8001964:	f8dd a000 	ldr.w	sl, [sp]
 8001968:	9515      	str	r5, [sp, #84]	; 0x54
 800196a:	9724      	str	r7, [sp, #144]	; 0x90
 800196c:	f8cd 808c 	str.w	r8, [sp, #140]	; 0x8c
 8001970:	f8cd 9088 	str.w	r9, [sp, #136]	; 0x88
 8001974:	f8da 0018 	ldr.w	r0, [sl, #24]
 8001978:	68c1      	ldr	r1, [r0, #12]
 800197a:	6081      	str	r1, [r0, #8]
 800197c:	9811      	ldr	r0, [sp, #68]	; 0x44
 800197e:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8001980:	1808      	adds	r0, r1, r0
 8001982:	9011      	str	r0, [sp, #68]	; 0x44
 8001984:	9821      	ldr	r0, [sp, #132]	; 0x84
 8001986:	1e40      	subs	r0, r0, #1
 8001988:	9021      	str	r0, [sp, #132]	; 0x84
 800198a:	d198      	bne.n	80018be <forward_conv2d+0x1c6>
 800198c:	b029      	add	sp, #164	; 0xa4
 800198e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08001994 <forward_conv2d_nl_pool>:
 8001994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001998:	4604      	mov	r4, r0
 800199a:	b0b9      	sub	sp, #228	; 0xe4
 800199c:	6963      	ldr	r3, [r4, #20]
 800199e:	8819      	ldrh	r1, [r3, #0]
 80019a0:	2900      	cmp	r1, #0
 80019a2:	bf1a      	itte	ne
 80019a4:	6858      	ldrne	r0, [r3, #4]
 80019a6:	1d00      	addne	r0, r0, #4
 80019a8:	2004      	moveq	r0, #4
 80019aa:	6800      	ldr	r0, [r0, #0]
 80019ac:	2800      	cmp	r0, #0
 80019ae:	bf14      	ite	ne
 80019b0:	6802      	ldrne	r2, [r0, #0]
 80019b2:	2200      	moveq	r2, #0
 80019b4:	2901      	cmp	r1, #1
 80019b6:	bfc6      	itte	gt
 80019b8:	6858      	ldrgt	r0, [r3, #4]
 80019ba:	3010      	addgt	r0, #16
 80019bc:	2004      	movle	r0, #4
 80019be:	6800      	ldr	r0, [r0, #0]
 80019c0:	2800      	cmp	r0, #0
 80019c2:	bf14      	ite	ne
 80019c4:	f8d0 9000 	ldrne.w	r9, [r0]
 80019c8:	f04f 0900 	moveq.w	r9, #0
 80019cc:	2902      	cmp	r1, #2
 80019ce:	bfc6      	itte	gt
 80019d0:	6858      	ldrgt	r0, [r3, #4]
 80019d2:	f100 071c 	addgt.w	r7, r0, #28
 80019d6:	2704      	movle	r7, #4
 80019d8:	6838      	ldr	r0, [r7, #0]
 80019da:	2800      	cmp	r0, #0
 80019dc:	bf14      	ite	ne
 80019de:	6806      	ldrne	r6, [r0, #0]
 80019e0:	2600      	moveq	r6, #0
 80019e2:	2902      	cmp	r1, #2
 80019e4:	dd0a      	ble.n	80019fc <forward_conv2d_nl_pool+0x68>
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f113 0118 	adds.w	r1, r3, #24
 80019ec:	d006      	beq.n	80019fc <forward_conv2d_nl_pool+0x68>
 80019ee:	8b19      	ldrh	r1, [r3, #24]
 80019f0:	2901      	cmp	r1, #1
 80019f2:	dd03      	ble.n	80019fc <forward_conv2d_nl_pool+0x68>
 80019f4:	69d9      	ldr	r1, [r3, #28]
 80019f6:	b109      	cbz	r1, 80019fc <forward_conv2d_nl_pool+0x68>
 80019f8:	6849      	ldr	r1, [r1, #4]
 80019fa:	e000      	b.n	80019fe <forward_conv2d_nl_pool+0x6a>
 80019fc:	2100      	movs	r1, #0
 80019fe:	b100      	cbz	r0, 8001a02 <forward_conv2d_nl_pool+0x6e>
 8001a00:	6880      	ldr	r0, [r0, #8]
 8001a02:	68d7      	ldr	r7, [r2, #12]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	9323      	str	r3, [sp, #140]	; 0x8c
 8001a08:	f8d9 500c 	ldr.w	r5, [r9, #12]
 8001a0c:	686b      	ldr	r3, [r5, #4]
 8001a0e:	9310      	str	r3, [sp, #64]	; 0x40
 8001a10:	68eb      	ldr	r3, [r5, #12]
 8001a12:	9322      	str	r3, [sp, #136]	; 0x88
 8001a14:	68ab      	ldr	r3, [r5, #8]
 8001a16:	9321      	str	r3, [sp, #132]	; 0x84
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	931b      	str	r3, [sp, #108]	; 0x6c
 8001a1c:	68bf      	ldr	r7, [r7, #8]
 8001a1e:	972d      	str	r7, [sp, #180]	; 0xb4
 8001a20:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001a22:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
 8001a26:	8d27      	ldrh	r7, [r4, #40]	; 0x28
 8001a28:	9720      	str	r7, [sp, #128]	; 0x80
 8001a2a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001a2c:	881f      	ldrh	r7, [r3, #0]
 8001a2e:	f8b3 8004 	ldrh.w	r8, [r3, #4]
 8001a32:	689d      	ldr	r5, [r3, #8]
 8001a34:	69a3      	ldr	r3, [r4, #24]
 8001a36:	932c      	str	r3, [sp, #176]	; 0xb0
 8001a38:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001a3a:	931f      	str	r3, [sp, #124]	; 0x7c
 8001a3c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001a3e:	931e      	str	r3, [sp, #120]	; 0x78
 8001a40:	68f3      	ldr	r3, [r6, #12]
 8001a42:	f8d3 e004 	ldr.w	lr, [r3, #4]
 8001a46:	f8cd e068 	str.w	lr, [sp, #104]	; 0x68
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	9319      	str	r3, [sp, #100]	; 0x64
 8001a4e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001a50:	932b      	str	r3, [sp, #172]	; 0xac
 8001a52:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001a54:	932a      	str	r3, [sp, #168]	; 0xa8
 8001a56:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001a58:	9311      	str	r3, [sp, #68]	; 0x44
 8001a5a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001a5c:	f8d3 a000 	ldr.w	sl, [r3]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	9329      	str	r3, [sp, #164]	; 0xa4
 8001a64:	6992      	ldr	r2, [r2, #24]
 8001a66:	6893      	ldr	r3, [r2, #8]
 8001a68:	9328      	str	r3, [sp, #160]	; 0xa0
 8001a6a:	69b2      	ldr	r2, [r6, #24]
 8001a6c:	f8d2 b008 	ldr.w	fp, [r2, #8]
 8001a70:	b119      	cbz	r1, 8001a7a <forward_conv2d_nl_pool+0xe6>
 8001a72:	698a      	ldr	r2, [r1, #24]
 8001a74:	6893      	ldr	r3, [r2, #8]
 8001a76:	931d      	str	r3, [sp, #116]	; 0x74
 8001a78:	e001      	b.n	8001a7e <forward_conv2d_nl_pool+0xea>
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	921d      	str	r2, [sp, #116]	; 0x74
 8001a7e:	69e1      	ldr	r1, [r4, #28]
 8001a80:	b118      	cbz	r0, 8001a8a <forward_conv2d_nl_pool+0xf6>
 8001a82:	6981      	ldr	r1, [r0, #24]
 8001a84:	688a      	ldr	r2, [r1, #8]
 8001a86:	921c      	str	r2, [sp, #112]	; 0x70
 8001a88:	e005      	b.n	8001a96 <forward_conv2d_nl_pool+0x102>
 8001a8a:	b111      	cbz	r1, 8001a92 <forward_conv2d_nl_pool+0xfe>
 8001a8c:	688a      	ldr	r2, [r1, #8]
 8001a8e:	921c      	str	r2, [sp, #112]	; 0x70
 8001a90:	e001      	b.n	8001a96 <forward_conv2d_nl_pool+0x102>
 8001a92:	2300      	movs	r3, #0
 8001a94:	931c      	str	r3, [sp, #112]	; 0x70
 8001a96:	991c      	ldr	r1, [sp, #112]	; 0x70
 8001a98:	9102      	str	r1, [sp, #8]
 8001a9a:	b920      	cbnz	r0, 8001aa6 <forward_conv2d_nl_pool+0x112>
 8001a9c:	2100      	movs	r1, #0
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	9116      	str	r1, [sp, #88]	; 0x58
 8001aa2:	9215      	str	r2, [sp, #84]	; 0x54
 8001aa4:	e008      	b.n	8001ab8 <forward_conv2d_nl_pool+0x124>
 8001aa6:	6941      	ldr	r1, [r0, #20]
 8001aa8:	688a      	ldr	r2, [r1, #8]
 8001aaa:	9216      	str	r2, [sp, #88]	; 0x58
 8001aac:	6980      	ldr	r0, [r0, #24]
 8001aae:	6841      	ldr	r1, [r0, #4]
 8001ab0:	6800      	ldr	r0, [r0, #0]
 8001ab2:	f004 f9e7 	bl	8005e84 <ai_array_get_byte_size>
 8001ab6:	9015      	str	r0, [sp, #84]	; 0x54
 8001ab8:	aa1e      	add	r2, sp, #120	; 0x78
 8001aba:	6a20      	ldr	r0, [r4, #32]
 8001abc:	2800      	cmp	r0, #0
 8001abe:	bf12      	itee	ne
 8001ac0:	9030      	strne	r0, [sp, #192]	; 0xc0
 8001ac2:	f8df 1a7c 	ldreq.w	r1, [pc, #2684]	; 8002540 <.text_15>
 8001ac6:	9130      	streq	r1, [sp, #192]	; 0xc0
 8001ac8:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8001aca:	9819      	ldr	r0, [sp, #100]	; 0x64
 8001acc:	8813      	ldrh	r3, [r2, #0]
 8001ace:	9127      	str	r1, [sp, #156]	; 0x9c
 8001ad0:	1e5b      	subs	r3, r3, #1
 8001ad2:	1e41      	subs	r1, r0, #1
 8001ad4:	aa1f      	add	r2, sp, #124	; 0x7c
 8001ad6:	fb03 0001 	mla	r0, r3, r1, r0
 8001ada:	9018      	str	r0, [sp, #96]	; 0x60
 8001adc:	991a      	ldr	r1, [sp, #104]	; 0x68
 8001ade:	8813      	ldrh	r3, [r2, #0]
 8001ae0:	1e48      	subs	r0, r1, #1
 8001ae2:	1e5b      	subs	r3, r3, #1
 8001ae4:	fb03 1100 	mla	r1, r3, r0, r1
 8001ae8:	9126      	str	r1, [sp, #152]	; 0x98
 8001aea:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001aec:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8001aee:	9818      	ldr	r0, [sp, #96]	; 0x60
 8001af0:	9112      	str	r1, [sp, #72]	; 0x48
 8001af2:	1a12      	subs	r2, r2, r0
 8001af4:	18ba      	adds	r2, r7, r2
 8001af6:	9920      	ldr	r1, [sp, #128]	; 0x80
 8001af8:	fa12 f085 	uxtah	r0, r2, r5
 8001afc:	fbb0 f1f1 	udiv	r1, r0, r1
 8001b00:	1c49      	adds	r1, r1, #1
 8001b02:	9114      	str	r1, [sp, #80]	; 0x50
 8001b04:	2000      	movs	r0, #0
 8001b06:	69b6      	ldr	r6, [r6, #24]
 8001b08:	6831      	ldr	r1, [r6, #0]
 8001b0a:	2500      	movs	r5, #0
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	11cb      	asrs	r3, r1, #7
 8001b10:	ea4f 5c61 	mov.w	ip, r1, asr #21
 8001b14:	1449      	asrs	r1, r1, #17
 8001b16:	f001 010f 	and.w	r1, r1, #15
 8001b1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001b1e:	f00c 0c03 	and.w	ip, ip, #3
 8001b22:	2904      	cmp	r1, #4
 8001b24:	fa23 f30c 	lsr.w	r3, r3, ip
 8001b28:	bf14      	ite	ne
 8001b2a:	2908      	cmpne	r1, #8
 8001b2c:	68f2      	ldreq	r2, [r6, #12]
 8001b2e:	b1da      	cbz	r2, 8001b68 <forward_conv2d_nl_pool+0x1d4>
 8001b30:	6961      	ldr	r1, [r4, #20]
 8001b32:	f8b1 c000 	ldrh.w	ip, [r1]
 8001b36:	f1bc 0f04 	cmp.w	ip, #4
 8001b3a:	bfa6      	itte	ge
 8001b3c:	6849      	ldrge	r1, [r1, #4]
 8001b3e:	3128      	addge	r1, #40	; 0x28
 8001b40:	2104      	movlt	r1, #4
 8001b42:	6809      	ldr	r1, [r1, #0]
 8001b44:	2900      	cmp	r1, #0
 8001b46:	bf1f      	itttt	ne
 8001b48:	6848      	ldrne	r0, [r1, #4]
 8001b4a:	2800      	cmpne	r0, #0
 8001b4c:	6981      	ldrne	r1, [r0, #24]
 8001b4e:	688d      	ldrne	r5, [r1, #8]
 8001b50:	6980      	ldr	r0, [r0, #24]
 8001b52:	6841      	ldr	r1, [r0, #4]
 8001b54:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8001b56:	9101      	str	r1, [sp, #4]
 8001b58:	9000      	str	r0, [sp, #0]
 8001b5a:	4628      	mov	r0, r5
 8001b5c:	68b1      	ldr	r1, [r6, #8]
 8001b5e:	f7ff fd61 	bl	8001624 <ai_dict_decompress_f32>
 8001b62:	b10d      	cbz	r5, 8001b68 <forward_conv2d_nl_pool+0x1d4>
 8001b64:	4628      	mov	r0, r5
 8001b66:	e000      	b.n	8001b6a <forward_conv2d_nl_pool+0x1d6>
 8001b68:	4658      	mov	r0, fp
 8001b6a:	6963      	ldr	r3, [r4, #20]
 8001b6c:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
 8001b70:	881c      	ldrh	r4, [r3, #0]
 8001b72:	f8d9 1018 	ldr.w	r1, [r9, #24]
 8001b76:	2600      	movs	r6, #0
 8001b78:	2c04      	cmp	r4, #4
 8001b7a:	bfa6      	itte	ge
 8001b7c:	685b      	ldrge	r3, [r3, #4]
 8001b7e:	3328      	addge	r3, #40	; 0x28
 8001b80:	2304      	movlt	r3, #4
 8001b82:	f10d 0e44 	add.w	lr, sp, #68	; 0x44
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	bf14      	ite	ne
 8001b8c:	681d      	ldrne	r5, [r3, #0]
 8001b8e:	2500      	moveq	r5, #0
 8001b90:	427f      	negs	r7, r7
 8001b92:	69ac      	ldr	r4, [r5, #24]
 8001b94:	68eb      	ldr	r3, [r5, #12]
 8001b96:	f8d4 b008 	ldr.w	fp, [r4, #8]
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8001b9e:	435c      	muls	r4, r3
 8001ba0:	fb0c f404 	mul.w	r4, ip, r4
 8001ba4:	9437      	str	r4, [sp, #220]	; 0xdc
 8001ba6:	fa0f f28a 	sxth.w	r2, sl
 8001baa:	f9be 4000 	ldrsh.w	r4, [lr]
 8001bae:	f8dd c084 	ldr.w	ip, [sp, #132]	; 0x84
 8001bb2:	9436      	str	r4, [sp, #216]	; 0xd8
 8001bb4:	f10d 0e48 	add.w	lr, sp, #72	; 0x48
 8001bb8:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8001bba:	fb0c f404 	mul.w	r4, ip, r4
 8001bbe:	9435      	str	r4, [sp, #212]	; 0xd4
 8001bc0:	f1c8 0800 	rsb	r8, r8, #0
 8001bc4:	f9be 4000 	ldrsh.w	r4, [lr]
 8001bc8:	9434      	str	r4, [sp, #208]	; 0xd0
 8001bca:	4691      	mov	r9, r2
 8001bcc:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8001bce:	f8cd 80c8 	str.w	r8, [sp, #200]	; 0xc8
 8001bd2:	435c      	muls	r4, r3
 8001bd4:	9433      	str	r4, [sp, #204]	; 0xcc
 8001bd6:	9c22      	ldr	r4, [sp, #136]	; 0x88
 8001bd8:	2c00      	cmp	r4, #0
 8001bda:	f000 812e 	beq.w	8001e3a <forward_conv2d_nl_pool+0x4a6>
 8001bde:	f8dd a008 	ldr.w	sl, [sp, #8]
 8001be2:	9038      	str	r0, [sp, #224]	; 0xe0
 8001be4:	9125      	str	r1, [sp, #148]	; 0x94
 8001be6:	4614      	mov	r4, r2
 8001be8:	962f      	str	r6, [sp, #188]	; 0xbc
 8001bea:	962e      	str	r6, [sp, #184]	; 0xb8
 8001bec:	9324      	str	r3, [sp, #144]	; 0x90
 8001bee:	9717      	str	r7, [sp, #92]	; 0x5c
 8001bf0:	9814      	ldr	r0, [sp, #80]	; 0x50
 8001bf2:	2800      	cmp	r0, #0
 8001bf4:	dd6a      	ble.n	8001ccc <forward_conv2d_nl_pool+0x338>
 8001bf6:	9832      	ldr	r0, [sp, #200]	; 0xc8
 8001bf8:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8001bfa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8001bfc:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8001bfe:	9031      	str	r0, [sp, #196]	; 0xc4
 8001c00:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8001c02:	4240      	negs	r0, r0
 8001c04:	bfd8      	it	le
 8001c06:	2000      	movle	r0, #0
 8001c08:	1a89      	subs	r1, r1, r2
 8001c0a:	4299      	cmp	r1, r3
 8001c0c:	bf3d      	ittte	cc
 8001c0e:	9a1b      	ldrcc	r2, [sp, #108]	; 0x6c
 8001c10:	9917      	ldrcc	r1, [sp, #92]	; 0x5c
 8001c12:	1a51      	subcc	r1, r2, r1
 8001c14:	4619      	movcs	r1, r3
 8001c16:	9009      	str	r0, [sp, #36]	; 0x24
 8001c18:	910a      	str	r1, [sp, #40]	; 0x28
 8001c1a:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8001c1c:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
 8001c20:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8001c22:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8001c24:	9008      	str	r0, [sp, #32]
 8001c26:	9107      	str	r1, [sp, #28]
 8001c28:	b212      	sxth	r2, r2
 8001c2a:	9819      	ldr	r0, [sp, #100]	; 0x64
 8001c2c:	991a      	ldr	r1, [sp, #104]	; 0x68
 8001c2e:	9006      	str	r0, [sp, #24]
 8001c30:	920f      	str	r2, [sp, #60]	; 0x3c
 8001c32:	9105      	str	r1, [sp, #20]
 8001c34:	b21b      	sxth	r3, r3
 8001c36:	9824      	ldr	r0, [sp, #144]	; 0x90
 8001c38:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8001c3a:	992d      	ldr	r1, [sp, #180]	; 0xb4
 8001c3c:	9004      	str	r0, [sp, #16]
 8001c3e:	930e      	str	r3, [sp, #56]	; 0x38
 8001c40:	920d      	str	r2, [sp, #52]	; 0x34
 8001c42:	9103      	str	r1, [sp, #12]
 8001c44:	9810      	ldr	r0, [sp, #64]	; 0x40
 8001c46:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8001c48:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8001c4a:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8001c4c:	9002      	str	r0, [sp, #8]
 8001c4e:	930c      	str	r3, [sp, #48]	; 0x30
 8001c50:	920b      	str	r2, [sp, #44]	; 0x2c
 8001c52:	9101      	str	r1, [sp, #4]
 8001c54:	4659      	mov	r1, fp
 8001c56:	981d      	ldr	r0, [sp, #116]	; 0x74
 8001c58:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8001c5a:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8001c5c:	9000      	str	r0, [sp, #0]
 8001c5e:	2000      	movs	r0, #0
 8001c60:	f7ff f8a6 	bl	8000db0 <ai_conv2d_stripe_f32>
 8001c64:	9824      	ldr	r0, [sp, #144]	; 0x90
 8001c66:	b350      	cbz	r0, 8001cbe <forward_conv2d_nl_pool+0x32a>
 8001c68:	f8cd a008 	str.w	sl, [sp, #8]
 8001c6c:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8001c6e:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 8001c70:	f8dd 80c0 	ldr.w	r8, [sp, #192]	; 0xc0
 8001c74:	4682      	mov	sl, r0
 8001c76:	69a9      	ldr	r1, [r5, #24]
 8001c78:	463b      	mov	r3, r7
 8001c7a:	f8c1 b008 	str.w	fp, [r1, #8]
 8001c7e:	4632      	mov	r2, r6
 8001c80:	4608      	mov	r0, r1
 8001c82:	47c0      	blx	r8
 8001c84:	9816      	ldr	r0, [sp, #88]	; 0x58
 8001c86:	9902      	ldr	r1, [sp, #8]
 8001c88:	4407      	add	r7, r0
 8001c8a:	9815      	ldr	r0, [sp, #84]	; 0x54
 8001c8c:	1a79      	subs	r1, r7, r1
 8001c8e:	4281      	cmp	r1, r0
 8001c90:	69a8      	ldr	r0, [r5, #24]
 8001c92:	6841      	ldr	r1, [r0, #4]
 8001c94:	68c0      	ldr	r0, [r0, #12]
 8001c96:	bfa8      	it	ge
 8001c98:	9f02      	ldrge	r7, [sp, #8]
 8001c9a:	eb0b 0b86 	add.w	fp, fp, r6, lsl #2
 8001c9e:	eb00 0281 	add.w	r2, r0, r1, lsl #2
 8001ca2:	4593      	cmp	fp, r2
 8001ca4:	d302      	bcc.n	8001cac <forward_conv2d_nl_pool+0x318>
 8001ca6:	0089      	lsls	r1, r1, #2
 8001ca8:	4249      	negs	r1, r1
 8001caa:	448b      	add	fp, r1
 8001cac:	f1ba 0a01 	subs.w	sl, sl, #1
 8001cb0:	d1e1      	bne.n	8001c76 <forward_conv2d_nl_pool+0x2e2>
 8001cb2:	f8dd a008 	ldr.w	sl, [sp, #8]
 8001cb6:	9610      	str	r6, [sp, #64]	; 0x40
 8001cb8:	971c      	str	r7, [sp, #112]	; 0x70
 8001cba:	f8cd 80c0 	str.w	r8, [sp, #192]	; 0xc0
 8001cbe:	69a8      	ldr	r0, [r5, #24]
 8001cc0:	68c1      	ldr	r1, [r0, #12]
 8001cc2:	6081      	str	r1, [r0, #8]
 8001cc4:	f109 0001 	add.w	r0, r9, #1
 8001cc8:	fa0f f980 	sxth.w	r9, r0
 8001ccc:	9814      	ldr	r0, [sp, #80]	; 0x50
 8001cce:	1e40      	subs	r0, r0, #1
 8001cd0:	9014      	str	r0, [sp, #80]	; 0x50
 8001cd2:	d56b      	bpl.n	8001dac <forward_conv2d_nl_pool+0x418>
 8001cd4:	9833      	ldr	r0, [sp, #204]	; 0xcc
 8001cd6:	fb00 f009 	mul.w	r0, r0, r9
 8001cda:	0080      	lsls	r0, r0, #2
 8001cdc:	4240      	negs	r0, r0
 8001cde:	eb0b 0200 	add.w	r2, fp, r0
 8001ce2:	69a8      	ldr	r0, [r5, #24]
 8001ce4:	68c3      	ldr	r3, [r0, #12]
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	bf3c      	itt	cc
 8001cea:	6847      	ldrcc	r7, [r0, #4]
 8001cec:	eb02 0287 	addcc.w	r2, r2, r7, lsl #2
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	4659      	mov	r1, fp
 8001cf4:	d236      	bcs.n	8001d64 <forward_conv2d_nl_pool+0x3d0>
 8001cf6:	9e34      	ldr	r6, [sp, #208]	; 0xd0
 8001cf8:	45b1      	cmp	r9, r6
 8001cfa:	d033      	beq.n	8001d64 <forward_conv2d_nl_pool+0x3d0>
 8001cfc:	6846      	ldr	r6, [r0, #4]
 8001cfe:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8001d02:	429a      	cmp	r2, r3
 8001d04:	f080 802e 	bcs.w	8001d64 <forward_conv2d_nl_pool+0x3d0>
 8001d08:	ed92 0a00 	vldr	s0, [r2]
 8001d0c:	ed8b 0a00 	vstr	s0, [fp]
 8001d10:	68c3      	ldr	r3, [r0, #12]
 8001d12:	6846      	ldr	r6, [r0, #4]
 8001d14:	1d12      	adds	r2, r2, #4
 8001d16:	eb03 0786 	add.w	r7, r3, r6, lsl #2
 8001d1a:	42ba      	cmp	r2, r7
 8001d1c:	d222      	bcs.n	8001d64 <forward_conv2d_nl_pool+0x3d0>
 8001d1e:	edd2 0a00 	vldr	s1, [r2]
 8001d22:	edcb 0a01 	vstr	s1, [fp, #4]
 8001d26:	68c3      	ldr	r3, [r0, #12]
 8001d28:	6846      	ldr	r6, [r0, #4]
 8001d2a:	1d12      	adds	r2, r2, #4
 8001d2c:	eb03 0786 	add.w	r7, r3, r6, lsl #2
 8001d30:	42ba      	cmp	r2, r7
 8001d32:	d217      	bcs.n	8001d64 <forward_conv2d_nl_pool+0x3d0>
 8001d34:	ed92 0a00 	vldr	s0, [r2]
 8001d38:	ed8b 0a02 	vstr	s0, [fp, #8]
 8001d3c:	68c3      	ldr	r3, [r0, #12]
 8001d3e:	6846      	ldr	r6, [r0, #4]
 8001d40:	1d12      	adds	r2, r2, #4
 8001d42:	eb03 0786 	add.w	r7, r3, r6, lsl #2
 8001d46:	42ba      	cmp	r2, r7
 8001d48:	d20c      	bcs.n	8001d64 <forward_conv2d_nl_pool+0x3d0>
 8001d4a:	edd2 0a00 	vldr	s1, [r2]
 8001d4e:	edcb 0a03 	vstr	s1, [fp, #12]
 8001d52:	68c3      	ldr	r3, [r0, #12]
 8001d54:	6846      	ldr	r6, [r0, #4]
 8001d56:	1d12      	adds	r2, r2, #4
 8001d58:	eb03 0786 	add.w	r7, r3, r6, lsl #2
 8001d5c:	42ba      	cmp	r2, r7
 8001d5e:	f10b 0b10 	add.w	fp, fp, #16
 8001d62:	d3d1      	bcc.n	8001d08 <forward_conv2d_nl_pool+0x374>
 8001d64:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8001d66:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8001d68:	189a      	adds	r2, r3, r2
 8001d6a:	eba2 0209 	sub.w	r2, r2, r9
 8001d6e:	922f      	str	r2, [sp, #188]	; 0xbc
 8001d70:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8001d72:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 8001d74:	444a      	add	r2, r9
 8001d76:	fa0f f982 	sxth.w	r9, r2
 8001d7a:	eb01 0b83 	add.w	fp, r1, r3, lsl #2
 8001d7e:	68c1      	ldr	r1, [r0, #12]
 8001d80:	6842      	ldr	r2, [r0, #4]
 8001d82:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8001d86:	459b      	cmp	fp, r3
 8001d88:	460b      	mov	r3, r1
 8001d8a:	d30f      	bcc.n	8001dac <forward_conv2d_nl_pool+0x418>
 8001d8c:	6841      	ldr	r1, [r0, #4]
 8001d8e:	008a      	lsls	r2, r1, #2
 8001d90:	4252      	negs	r2, r2
 8001d92:	4493      	add	fp, r2
 8001d94:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8001d98:	458b      	cmp	fp, r1
 8001d9a:	bf24      	itt	cs
 8001d9c:	4493      	addcs	fp, r2
 8001d9e:	458b      	cmpcs	fp, r1
 8001da0:	bf21      	itttt	cs
 8001da2:	4493      	addcs	fp, r2
 8001da4:	458b      	cmpcs	fp, r1
 8001da6:	4493      	addcs	fp, r2
 8001da8:	458b      	cmpcs	fp, r1
 8001daa:	d2ef      	bcs.n	8001d8c <forward_conv2d_nl_pool+0x3f8>
 8001dac:	9812      	ldr	r0, [sp, #72]	; 0x48
 8001dae:	4581      	cmp	r9, r0
 8001db0:	d339      	bcc.n	8001e26 <forward_conv2d_nl_pool+0x492>
 8001db2:	9911      	ldr	r1, [sp, #68]	; 0x44
 8001db4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8001db6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8001db8:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 8001dba:	eba9 0001 	sub.w	r0, r9, r1
 8001dbe:	fa0f f980 	sxth.w	r9, r0
 8001dc2:	982e      	ldr	r0, [sp, #184]	; 0xb8
 8001dc4:	1c40      	adds	r0, r0, #1
 8001dc6:	902e      	str	r0, [sp, #184]	; 0xb8
 8001dc8:	2101      	movs	r1, #1
 8001dca:	9825      	ldr	r0, [sp, #148]	; 0x94
 8001dcc:	9008      	str	r0, [sp, #32]
 8001dce:	9107      	str	r1, [sp, #28]
 8001dd0:	b292      	uxth	r2, r2
 8001dd2:	9811      	ldr	r0, [sp, #68]	; 0x44
 8001dd4:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8001dd6:	9206      	str	r2, [sp, #24]
 8001dd8:	b280      	uxth	r0, r0
 8001dda:	9005      	str	r0, [sp, #20]
 8001ddc:	b289      	uxth	r1, r1
 8001dde:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8001de0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8001de2:	9104      	str	r1, [sp, #16]
 8001de4:	b280      	uxth	r0, r0
 8001de6:	b2a1      	uxth	r1, r4
 8001de8:	9002      	str	r0, [sp, #8]
 8001dea:	9103      	str	r1, [sp, #12]
 8001dec:	b29b      	uxth	r3, r3
 8001dee:	982b      	ldr	r0, [sp, #172]	; 0xac
 8001df0:	9912      	ldr	r1, [sp, #72]	; 0x48
 8001df2:	b280      	uxth	r0, r0
 8001df4:	b289      	uxth	r1, r1
 8001df6:	9000      	str	r0, [sp, #0]
 8001df8:	9101      	str	r1, [sp, #4]
 8001dfa:	982f      	ldr	r0, [sp, #188]	; 0xbc
 8001dfc:	9924      	ldr	r1, [sp, #144]	; 0x90
 8001dfe:	1a12      	subs	r2, r2, r0
 8001e00:	69a8      	ldr	r0, [r5, #24]
 8001e02:	b292      	uxth	r2, r2
 8001e04:	b289      	uxth	r1, r1
 8001e06:	47b0      	blx	r6
 8001e08:	9825      	ldr	r0, [sp, #148]	; 0x94
 8001e0a:	6881      	ldr	r1, [r0, #8]
 8001e0c:	9835      	ldr	r0, [sp, #212]	; 0xd4
 8001e0e:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 8001e12:	9925      	ldr	r1, [sp, #148]	; 0x94
 8001e14:	608a      	str	r2, [r1, #8]
 8001e16:	9836      	ldr	r0, [sp, #216]	; 0xd8
 8001e18:	1a20      	subs	r0, r4, r0
 8001e1a:	2800      	cmp	r0, #0
 8001e1c:	bfc3      	ittte	gt
 8001e1e:	9811      	ldrgt	r0, [sp, #68]	; 0x44
 8001e20:	1a24      	subgt	r4, r4, r0
 8001e22:	b224      	sxthgt	r4, r4
 8001e24:	2400      	movle	r4, #0
 8001e26:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8001e28:	9920      	ldr	r1, [sp, #128]	; 0x80
 8001e2a:	1808      	adds	r0, r1, r0
 8001e2c:	9017      	str	r0, [sp, #92]	; 0x5c
 8001e2e:	9922      	ldr	r1, [sp, #136]	; 0x88
 8001e30:	982e      	ldr	r0, [sp, #184]	; 0xb8
 8001e32:	4288      	cmp	r0, r1
 8001e34:	f4ff aedc 	bcc.w	8001bf0 <forward_conv2d_nl_pool+0x25c>
 8001e38:	9925      	ldr	r1, [sp, #148]	; 0x94
 8001e3a:	69a8      	ldr	r0, [r5, #24]
 8001e3c:	68c2      	ldr	r2, [r0, #12]
 8001e3e:	6082      	str	r2, [r0, #8]
 8001e40:	68c8      	ldr	r0, [r1, #12]
 8001e42:	6088      	str	r0, [r1, #8]
 8001e44:	b039      	add	sp, #228	; 0xe4
 8001e46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08001e4c <forward_dense>:
 8001e4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e50:	b081      	sub	sp, #4
 8001e52:	ed2d 8b02 	vpush	{d8}
 8001e56:	b088      	sub	sp, #32
 8001e58:	6944      	ldr	r4, [r0, #20]
 8001e5a:	8820      	ldrh	r0, [r4, #0]
 8001e5c:	2800      	cmp	r0, #0
 8001e5e:	bf1a      	itte	ne
 8001e60:	6861      	ldrne	r1, [r4, #4]
 8001e62:	1d09      	addne	r1, r1, #4
 8001e64:	2104      	moveq	r1, #4
 8001e66:	6809      	ldr	r1, [r1, #0]
 8001e68:	2900      	cmp	r1, #0
 8001e6a:	bf14      	ite	ne
 8001e6c:	680a      	ldrne	r2, [r1, #0]
 8001e6e:	2200      	moveq	r2, #0
 8001e70:	2802      	cmp	r0, #2
 8001e72:	bfa6      	itte	ge
 8001e74:	6861      	ldrge	r1, [r4, #4]
 8001e76:	3110      	addge	r1, #16
 8001e78:	2104      	movlt	r1, #4
 8001e7a:	6809      	ldr	r1, [r1, #0]
 8001e7c:	2900      	cmp	r1, #0
 8001e7e:	bf14      	ite	ne
 8001e80:	680f      	ldrne	r7, [r1, #0]
 8001e82:	2700      	moveq	r7, #0
 8001e84:	2802      	cmp	r0, #2
 8001e86:	bfc6      	itte	gt
 8001e88:	6861      	ldrgt	r1, [r4, #4]
 8001e8a:	311c      	addgt	r1, #28
 8001e8c:	2104      	movle	r1, #4
 8001e8e:	6809      	ldr	r1, [r1, #0]
 8001e90:	2900      	cmp	r1, #0
 8001e92:	bf14      	ite	ne
 8001e94:	680b      	ldrne	r3, [r1, #0]
 8001e96:	2300      	moveq	r3, #0
 8001e98:	2802      	cmp	r0, #2
 8001e9a:	dd0b      	ble.n	8001eb4 <forward_dense+0x68>
 8001e9c:	6861      	ldr	r1, [r4, #4]
 8001e9e:	f111 0018 	adds.w	r0, r1, #24
 8001ea2:	d007      	beq.n	8001eb4 <forward_dense+0x68>
 8001ea4:	8b08      	ldrh	r0, [r1, #24]
 8001ea6:	2802      	cmp	r0, #2
 8001ea8:	db04      	blt.n	8001eb4 <forward_dense+0x68>
 8001eaa:	69c8      	ldr	r0, [r1, #28]
 8001eac:	b110      	cbz	r0, 8001eb4 <forward_dense+0x68>
 8001eae:	f8d0 a004 	ldr.w	sl, [r0, #4]
 8001eb2:	e001      	b.n	8001eb8 <forward_dense+0x6c>
 8001eb4:	f04f 0a00 	mov.w	sl, #0
 8001eb8:	68d0      	ldr	r0, [r2, #12]
 8001eba:	6844      	ldr	r4, [r0, #4]
 8001ebc:	68f8      	ldr	r0, [r7, #12]
 8001ebe:	6845      	ldr	r5, [r0, #4]
 8001ec0:	6881      	ldr	r1, [r0, #8]
 8001ec2:	68c0      	ldr	r0, [r0, #12]
 8001ec4:	699e      	ldr	r6, [r3, #24]
 8001ec6:	69bf      	ldr	r7, [r7, #24]
 8001ec8:	f8d6 e000 	ldr.w	lr, [r6]
 8001ecc:	6992      	ldr	r2, [r2, #24]
 8001ece:	68bf      	ldr	r7, [r7, #8]
 8001ed0:	4341      	muls	r1, r0
 8001ed2:	2000      	movs	r0, #0
 8001ed4:	ea4f 19ee 	mov.w	r9, lr, asr #7
 8001ed8:	ea4f 586e 	mov.w	r8, lr, asr #21
 8001edc:	ea4f 4e6e 	mov.w	lr, lr, asr #17
 8001ee0:	f00e 0e0f 	and.w	lr, lr, #15
 8001ee4:	f1be 0f04 	cmp.w	lr, #4
 8001ee8:	bf14      	ite	ne
 8001eea:	f1be 0f08 	cmpne.w	lr, #8
 8001eee:	68f0      	ldreq	r0, [r6, #12]
 8001ef0:	f009 097f 	and.w	r9, r9, #127	; 0x7f
 8001ef4:	f008 0803 	and.w	r8, r8, #3
 8001ef8:	695e      	ldr	r6, [r3, #20]
 8001efa:	6876      	ldr	r6, [r6, #4]
 8001efc:	fa29 f908 	lsr.w	r9, r9, r8
 8001f00:	f8d2 8008 	ldr.w	r8, [r2, #8]
 8001f04:	2900      	cmp	r1, #0
 8001f06:	eb07 0285 	add.w	r2, r7, r5, lsl #2
 8001f0a:	f000 80ea 	beq.w	80020e2 <forward_dense+0x296>
 8001f0e:	9307      	str	r3, [sp, #28]
 8001f10:	f8cd a014 	str.w	sl, [sp, #20]
 8001f14:	9506      	str	r5, [sp, #24]
 8001f16:	9201      	str	r2, [sp, #4]
 8001f18:	9104      	str	r1, [sp, #16]
 8001f1a:	9907      	ldr	r1, [sp, #28]
 8001f1c:	698a      	ldr	r2, [r1, #24]
 8001f1e:	9905      	ldr	r1, [sp, #20]
 8001f20:	f8d2 b008 	ldr.w	fp, [r2, #8]
 8001f24:	9b01      	ldr	r3, [sp, #4]
 8001f26:	2900      	cmp	r1, #0
 8001f28:	bf1a      	itte	ne
 8001f2a:	698a      	ldrne	r2, [r1, #24]
 8001f2c:	6892      	ldrne	r2, [r2, #8]
 8001f2e:	2200      	moveq	r2, #0
 8001f30:	2800      	cmp	r0, #0
 8001f32:	f040 80ab 	bne.w	800208c <forward_dense+0x240>
 8001f36:	429f      	cmp	r7, r3
 8001f38:	f080 80c7 	bcs.w	80020ca <forward_dense+0x27e>
 8001f3c:	9003      	str	r0, [sp, #12]
 8001f3e:	2a00      	cmp	r2, #0
 8001f40:	bf0e      	itee	eq
 8001f42:	ed9f 0a6b 	vldreq	s0, [pc, #428]	; 80020f0 <.text_12>
 8001f46:	ed92 0a00 	vldrne	s0, [r2]
 8001f4a:	1d12      	addne	r2, r2, #4
 8001f4c:	2c04      	cmp	r4, #4
 8001f4e:	4620      	mov	r0, r4
 8001f50:	46c6      	mov	lr, r8
 8001f52:	46dc      	mov	ip, fp
 8001f54:	eddf 0a66 	vldr	s1, [pc, #408]	; 80020f0 <.text_12>
 8001f58:	d35d      	bcc.n	8002016 <forward_dense+0x1ca>
 8001f5a:	08a1      	lsrs	r1, r4, #2
 8001f5c:	07cd      	lsls	r5, r1, #31
 8001f5e:	d51c      	bpl.n	8001f9a <forward_dense+0x14e>
 8001f60:	ed9c 4a00 	vldr	s8, [ip]
 8001f64:	edde 4a00 	vldr	s9, [lr]
 8001f68:	ed9c 3a01 	vldr	s6, [ip, #4]
 8001f6c:	edde 3a01 	vldr	s7, [lr, #4]
 8001f70:	ed9c 2a02 	vldr	s4, [ip, #8]
 8001f74:	edde 2a02 	vldr	s5, [lr, #8]
 8001f78:	ed9c 1a03 	vldr	s2, [ip, #12]
 8001f7c:	edde 1a03 	vldr	s3, [lr, #12]
 8001f80:	ee44 0a24 	vmla.f32	s1, s8, s9
 8001f84:	ee43 0a23 	vmla.f32	s1, s6, s7
 8001f88:	ee42 0a22 	vmla.f32	s1, s4, s5
 8001f8c:	ee41 0a21 	vmla.f32	s1, s2, s3
 8001f90:	f10e 0e10 	add.w	lr, lr, #16
 8001f94:	f10c 0c10 	add.w	ip, ip, #16
 8001f98:	1f00      	subs	r0, r0, #4
 8001f9a:	0849      	lsrs	r1, r1, #1
 8001f9c:	f000 803b 	beq.w	8002016 <forward_dense+0x1ca>
 8001fa0:	edde 4a00 	vldr	s9, [lr]
 8001fa4:	edde 3a01 	vldr	s7, [lr, #4]
 8001fa8:	edde 2a02 	vldr	s5, [lr, #8]
 8001fac:	edde 1a03 	vldr	s3, [lr, #12]
 8001fb0:	ed9c 1a03 	vldr	s2, [ip, #12]
 8001fb4:	ed9c 2a02 	vldr	s4, [ip, #8]
 8001fb8:	ed9c 3a01 	vldr	s6, [ip, #4]
 8001fbc:	ed9c 4a00 	vldr	s8, [ip]
 8001fc0:	ee44 0a24 	vmla.f32	s1, s8, s9
 8001fc4:	ee43 0a23 	vmla.f32	s1, s6, s7
 8001fc8:	ee42 0a22 	vmla.f32	s1, s4, s5
 8001fcc:	ee41 0a21 	vmla.f32	s1, s2, s3
 8001fd0:	f10e 0510 	add.w	r5, lr, #16
 8001fd4:	f10c 0c10 	add.w	ip, ip, #16
 8001fd8:	edd5 8a00 	vldr	s17, [r5]
 8001fdc:	ed9c 8a00 	vldr	s16, [ip]
 8001fe0:	ed9c 7a01 	vldr	s14, [ip, #4]
 8001fe4:	edd5 7a01 	vldr	s15, [r5, #4]
 8001fe8:	ed9c 6a02 	vldr	s12, [ip, #8]
 8001fec:	edd5 6a02 	vldr	s13, [r5, #8]
 8001ff0:	ed9c 5a03 	vldr	s10, [ip, #12]
 8001ff4:	edd5 5a03 	vldr	s11, [r5, #12]
 8001ff8:	ee48 0a28 	vmla.f32	s1, s16, s17
 8001ffc:	ee47 0a27 	vmla.f32	s1, s14, s15
 8002000:	3808      	subs	r0, #8
 8002002:	ee46 0a26 	vmla.f32	s1, s12, s13
 8002006:	1e49      	subs	r1, r1, #1
 8002008:	ee45 0a25 	vmla.f32	s1, s10, s11
 800200c:	f105 0e10 	add.w	lr, r5, #16
 8002010:	f10c 0c10 	add.w	ip, ip, #16
 8002014:	d1c4      	bne.n	8001fa0 <forward_dense+0x154>
 8002016:	b378      	cbz	r0, 8002078 <forward_dense+0x22c>
 8002018:	f010 0103 	ands.w	r1, r0, #3
 800201c:	f000 800c 	beq.w	8002038 <forward_dense+0x1ec>
 8002020:	ed9c 1a00 	vldr	s2, [ip]
 8002024:	edde 1a00 	vldr	s3, [lr]
 8002028:	1e49      	subs	r1, r1, #1
 800202a:	ee41 0a21 	vmla.f32	s1, s2, s3
 800202e:	f10e 0e04 	add.w	lr, lr, #4
 8002032:	f10c 0c04 	add.w	ip, ip, #4
 8002036:	d1f3      	bne.n	8002020 <forward_dense+0x1d4>
 8002038:	0880      	lsrs	r0, r0, #2
 800203a:	d01d      	beq.n	8002078 <forward_dense+0x22c>
 800203c:	ed9c 2a00 	vldr	s4, [ip]
 8002040:	ed9e 1a00 	vldr	s2, [lr]
 8002044:	eddc 1a01 	vldr	s3, [ip, #4]
 8002048:	edde 2a01 	vldr	s5, [lr, #4]
 800204c:	ee42 0a01 	vmla.f32	s1, s4, s2
 8002050:	ee41 0aa2 	vmla.f32	s1, s3, s5
 8002054:	ed9c 2a02 	vldr	s4, [ip, #8]
 8002058:	ed9e 1a02 	vldr	s2, [lr, #8]
 800205c:	eddc 1a03 	vldr	s3, [ip, #12]
 8002060:	edde 2a03 	vldr	s5, [lr, #12]
 8002064:	ee42 0a01 	vmla.f32	s1, s4, s2
 8002068:	1e40      	subs	r0, r0, #1
 800206a:	ee41 0aa2 	vmla.f32	s1, s3, s5
 800206e:	f10e 0e10 	add.w	lr, lr, #16
 8002072:	f10c 0c10 	add.w	ip, ip, #16
 8002076:	d1e1      	bne.n	800203c <forward_dense+0x1f0>
 8002078:	ee30 0a20 	vadd.f32	s0, s0, s1
 800207c:	ed87 0a00 	vstr	s0, [r7]
 8002080:	1d3f      	adds	r7, r7, #4
 8002082:	429f      	cmp	r7, r3
 8002084:	44b3      	add	fp, r6
 8002086:	f4ff af5a 	bcc.w	8001f3e <forward_dense+0xf2>
 800208a:	e01d      	b.n	80020c8 <forward_dense+0x27c>
 800208c:	429f      	cmp	r7, r3
 800208e:	d21c      	bcs.n	80020ca <forward_dense+0x27e>
 8002090:	469a      	mov	sl, r3
 8002092:	9003      	str	r0, [sp, #12]
 8002094:	4615      	mov	r5, r2
 8002096:	2d00      	cmp	r5, #0
 8002098:	bf14      	ite	ne
 800209a:	f855 0b04 	ldrne.w	r0, [r5], #4
 800209e:	2000      	moveq	r0, #0
 80020a0:	9002      	str	r0, [sp, #8]
 80020a2:	f1b9 0f04 	cmp.w	r9, #4
 80020a6:	9a03      	ldr	r2, [sp, #12]
 80020a8:	9400      	str	r4, [sp, #0]
 80020aa:	4643      	mov	r3, r8
 80020ac:	4659      	mov	r1, fp
 80020ae:	a802      	add	r0, sp, #8
 80020b0:	d102      	bne.n	80020b8 <forward_dense+0x26c>
 80020b2:	f7ff fa03 	bl	80014bc <ai_dict4_dot_array_f32>
 80020b6:	e001      	b.n	80020bc <forward_dense+0x270>
 80020b8:	f7ff f950 	bl	800135c <ai_dict8_dot_array_f32>
 80020bc:	9802      	ldr	r0, [sp, #8]
 80020be:	f847 0b04 	str.w	r0, [r7], #4
 80020c2:	4557      	cmp	r7, sl
 80020c4:	44b3      	add	fp, r6
 80020c6:	d3e6      	bcc.n	8002096 <forward_dense+0x24a>
 80020c8:	9803      	ldr	r0, [sp, #12]
 80020ca:	9901      	ldr	r1, [sp, #4]
 80020cc:	9a06      	ldr	r2, [sp, #24]
 80020ce:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 80020d2:	9904      	ldr	r1, [sp, #16]
 80020d4:	9301      	str	r3, [sp, #4]
 80020d6:	1e49      	subs	r1, r1, #1
 80020d8:	eb08 0884 	add.w	r8, r8, r4, lsl #2
 80020dc:	9104      	str	r1, [sp, #16]
 80020de:	f47f af1c 	bne.w	8001f1a <forward_dense+0xce>
 80020e2:	b008      	add	sp, #32
 80020e4:	ecbd 8b02 	vpop	{d8}
 80020e8:	b001      	add	sp, #4
 80020ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080020f0 <.text_12>:
 80020f0:	00000000 	.word	0x00000000

080020f4 <forward_gemm>:
 80020f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80020f8:	4604      	mov	r4, r0
 80020fa:	b091      	sub	sp, #68	; 0x44
 80020fc:	6961      	ldr	r1, [r4, #20]
 80020fe:	8808      	ldrh	r0, [r1, #0]
 8002100:	2800      	cmp	r0, #0
 8002102:	bf1a      	itte	ne
 8002104:	6848      	ldrne	r0, [r1, #4]
 8002106:	1d02      	addne	r2, r0, #4
 8002108:	2204      	moveq	r2, #4
 800210a:	460b      	mov	r3, r1
 800210c:	6810      	ldr	r0, [r2, #0]
 800210e:	8819      	ldrh	r1, [r3, #0]
 8002110:	2800      	cmp	r0, #0
 8002112:	bf14      	ite	ne
 8002114:	6805      	ldrne	r5, [r0, #0]
 8002116:	2500      	moveq	r5, #0
 8002118:	2900      	cmp	r1, #0
 800211a:	bf1d      	ittte	ne
 800211c:	6858      	ldrne	r0, [r3, #4]
 800211e:	2800      	cmpne	r0, #0
 8002120:	f8b0 c000 	ldrhne.w	ip, [r0]
 8002124:	f04f 0c00 	moveq.w	ip, #0
 8002128:	2902      	cmp	r1, #2
 800212a:	bfa6      	itte	ge
 800212c:	6858      	ldrge	r0, [r3, #4]
 800212e:	3010      	addge	r0, #16
 8002130:	2004      	movlt	r0, #4
 8002132:	6800      	ldr	r0, [r0, #0]
 8002134:	2800      	cmp	r0, #0
 8002136:	bf14      	ite	ne
 8002138:	6801      	ldrne	r1, [r0, #0]
 800213a:	2100      	moveq	r1, #0
 800213c:	2600      	movs	r6, #0
 800213e:	f1bc 0f03 	cmp.w	ip, #3
 8002142:	46b2      	mov	sl, r6
 8002144:	d107      	bne.n	8002156 <forward_gemm+0x62>
 8002146:	6810      	ldr	r0, [r2, #0]
 8002148:	2800      	cmp	r0, #0
 800214a:	d026      	beq.n	800219a <forward_gemm+0xa6>
 800214c:	6846      	ldr	r6, [r0, #4]
 800214e:	d024      	beq.n	800219a <forward_gemm+0xa6>
 8002150:	f8d0 a008 	ldr.w	sl, [r0, #8]
 8002154:	e021      	b.n	800219a <forward_gemm+0xa6>
 8002156:	f1bc 0f02 	cmp.w	ip, #2
 800215a:	d10d      	bne.n	8002178 <forward_gemm+0x84>
 800215c:	6810      	ldr	r0, [r2, #0]
 800215e:	b100      	cbz	r0, 8002162 <forward_gemm+0x6e>
 8002160:	6846      	ldr	r6, [r0, #4]
 8002162:	881a      	ldrh	r2, [r3, #0]
 8002164:	2a02      	cmp	r2, #2
 8002166:	bfc6      	itte	gt
 8002168:	6858      	ldrgt	r0, [r3, #4]
 800216a:	301c      	addgt	r0, #28
 800216c:	2004      	movle	r0, #4
 800216e:	6800      	ldr	r0, [r0, #0]
 8002170:	b198      	cbz	r0, 800219a <forward_gemm+0xa6>
 8002172:	f8d0 a000 	ldr.w	sl, [r0]
 8002176:	e010      	b.n	800219a <forward_gemm+0xa6>
 8002178:	f1bc 0f01 	cmp.w	ip, #1
 800217c:	d10d      	bne.n	800219a <forward_gemm+0xa6>
 800217e:	881a      	ldrh	r2, [r3, #0]
 8002180:	2a02      	cmp	r2, #2
 8002182:	bfc6      	itte	gt
 8002184:	6858      	ldrgt	r0, [r3, #4]
 8002186:	f100 021c 	addgt.w	r2, r0, #28
 800218a:	2204      	movle	r2, #4
 800218c:	6810      	ldr	r0, [r2, #0]
 800218e:	2800      	cmp	r0, #0
 8002190:	d003      	beq.n	800219a <forward_gemm+0xa6>
 8002192:	6806      	ldr	r6, [r0, #0]
 8002194:	bf18      	it	ne
 8002196:	f8d0 a004 	ldrne.w	sl, [r0, #4]
 800219a:	68c8      	ldr	r0, [r1, #12]
 800219c:	6989      	ldr	r1, [r1, #24]
 800219e:	688b      	ldr	r3, [r1, #8]
 80021a0:	6842      	ldr	r2, [r0, #4]
 80021a2:	68c1      	ldr	r1, [r0, #12]
 80021a4:	b292      	uxth	r2, r2
 80021a6:	b289      	uxth	r1, r1
 80021a8:	a806      	add	r0, sp, #24
 80021aa:	f004 f831 	bl	8006210 <arm_mat_init_f32>
 80021ae:	69a9      	ldr	r1, [r5, #24]
 80021b0:	68e8      	ldr	r0, [r5, #12]
 80021b2:	688b      	ldr	r3, [r1, #8]
 80021b4:	6842      	ldr	r2, [r0, #4]
 80021b6:	68c1      	ldr	r1, [r0, #12]
 80021b8:	b292      	uxth	r2, r2
 80021ba:	b289      	uxth	r1, r1
 80021bc:	a804      	add	r0, sp, #16
 80021be:	f004 f827 	bl	8006210 <arm_mat_init_f32>
 80021c2:	69b1      	ldr	r1, [r6, #24]
 80021c4:	68f0      	ldr	r0, [r6, #12]
 80021c6:	688b      	ldr	r3, [r1, #8]
 80021c8:	6842      	ldr	r2, [r0, #4]
 80021ca:	68c1      	ldr	r1, [r0, #12]
 80021cc:	b292      	uxth	r2, r2
 80021ce:	b289      	uxth	r1, r1
 80021d0:	a802      	add	r0, sp, #8
 80021d2:	f004 f81d 	bl	8006210 <arm_mat_init_f32>
 80021d6:	f8da 1018 	ldr.w	r1, [sl, #24]
 80021da:	f8da 000c 	ldr.w	r0, [sl, #12]
 80021de:	688b      	ldr	r3, [r1, #8]
 80021e0:	6842      	ldr	r2, [r0, #4]
 80021e2:	68c1      	ldr	r1, [r0, #12]
 80021e4:	b292      	uxth	r2, r2
 80021e6:	b289      	uxth	r1, r1
 80021e8:	4668      	mov	r0, sp
 80021ea:	f004 f811 	bl	8006210 <arm_mat_init_f32>
 80021ee:	f994 5021 	ldrsb.w	r5, [r4, #33]	; 0x21
 80021f2:	f994 0020 	ldrsb.w	r0, [r4, #32]
 80021f6:	9905      	ldr	r1, [sp, #20]
 80021f8:	9a03      	ldr	r2, [sp, #12]
 80021fa:	ed94 0a07 	vldr	s0, [r4, #28]
 80021fe:	edd4 0a06 	vldr	s1, [r4, #24]
 8002202:	910b      	str	r1, [sp, #44]	; 0x2c
 8002204:	920e      	str	r2, [sp, #56]	; 0x38
 8002206:	920d      	str	r2, [sp, #52]	; 0x34
 8002208:	2300      	movs	r3, #0
 800220a:	f8bd e010 	ldrh.w	lr, [sp, #16]
 800220e:	f8bd 8012 	ldrh.w	r8, [sp, #18]
 8002212:	9901      	ldr	r1, [sp, #4]
 8002214:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8002218:	f8bd c000 	ldrh.w	ip, [sp]
 800221c:	9c07      	ldr	r4, [sp, #28]
 800221e:	f8bd a008 	ldrh.w	sl, [sp, #8]
 8002222:	f8bd 6018 	ldrh.w	r6, [sp, #24]
 8002226:	f8bd b01a 	ldrh.w	fp, [sp, #26]
 800222a:	9108      	str	r1, [sp, #32]
 800222c:	0002      	movs	r2, r0
 800222e:	bf0c      	ite	eq
 8002230:	4672      	moveq	r2, lr
 8002232:	4642      	movne	r2, r8
 8002234:	2f01      	cmp	r7, #1
 8002236:	bf0c      	ite	eq
 8002238:	4699      	moveq	r9, r3
 800223a:	f04f 0904 	movne.w	r9, #4
 800223e:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 8002242:	f1bc 0f01 	cmp.w	ip, #1
 8002246:	d104      	bne.n	8002252 <forward_gemm+0x15e>
 8002248:	2f01      	cmp	r7, #1
 800224a:	d004      	beq.n	8002256 <forward_gemm+0x162>
 800224c:	f1cb 0700 	rsb	r7, fp, #0
 8002250:	e002      	b.n	8002258 <forward_gemm+0x164>
 8002252:	2f01      	cmp	r7, #1
 8002254:	d000      	beq.n	8002258 <forward_gemm+0x164>
 8002256:	2700      	movs	r7, #0
 8002258:	2800      	cmp	r0, #0
 800225a:	bf0c      	ite	eq
 800225c:	46f4      	moveq	ip, lr
 800225e:	46c4      	movne	ip, r8
 8002260:	b23f      	sxth	r7, r7
 8002262:	45b4      	cmp	ip, r6
 8002264:	970c      	str	r7, [sp, #48]	; 0x30
 8002266:	f040 808b 	bne.w	8002380 <forward_gemm+0x28c>
 800226a:	2d00      	cmp	r5, #0
 800226c:	bf0c      	ite	eq
 800226e:	9109      	streq	r1, [sp, #36]	; 0x24
 8002270:	f8cd a024 	strne.w	sl, [sp, #36]	; 0x24
 8002274:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8002276:	455f      	cmp	r7, fp
 8002278:	f040 8082 	bne.w	8002380 <forward_gemm+0x28c>
 800227c:	2800      	cmp	r0, #0
 800227e:	bf0c      	ite	eq
 8002280:	46c4      	moveq	ip, r8
 8002282:	46f4      	movne	ip, lr
 8002284:	2d00      	cmp	r5, #0
 8002286:	bf0c      	ite	eq
 8002288:	4657      	moveq	r7, sl
 800228a:	460f      	movne	r7, r1
 800228c:	45bc      	cmp	ip, r7
 800228e:	d177      	bne.n	8002380 <forward_gemm+0x28c>
 8002290:	9e08      	ldr	r6, [sp, #32]
 8002292:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
 8002296:	9410      	str	r4, [sp, #64]	; 0x40
 8002298:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 800229c:	f8ad 2020 	strh.w	r2, [sp, #32]
 80022a0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80022a2:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 80022a6:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 80022aa:	eb02 0783 	add.w	r7, r2, r3, lsl #2
 80022ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80022b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80022b2:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
 80022b6:	f8ad e028 	strh.w	lr, [sp, #40]	; 0x28
 80022ba:	ea4f 0488 	mov.w	r4, r8, lsl #2
 80022be:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
 80022c2:	2800      	cmp	r0, #0
 80022c4:	bf0c      	ite	eq
 80022c6:	f8dd 803c 	ldreq.w	r8, [sp, #60]	; 0x3c
 80022ca:	f8bd 8028 	ldrhne.w	r8, [sp, #40]	; 0x28
 80022ce:	fa1f fb88 	uxth.w	fp, r8
 80022d2:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
 80022d6:	f1bb 0f00 	cmp.w	fp, #0
 80022da:	ed9f 1a9a 	vldr	s2, [pc, #616]	; 8002544 <.text_16>
 80022de:	d019      	beq.n	8002314 <forward_gemm+0x220>
 80022e0:	2800      	cmp	r0, #0
 80022e2:	bf0c      	ite	eq
 80022e4:	f04f 0b04 	moveq.w	fp, #4
 80022e8:	46a3      	movne	fp, r4
 80022ea:	2d00      	cmp	r5, #0
 80022ec:	f1a8 0801 	sub.w	r8, r8, #1
 80022f0:	edde 1a00 	vldr	s3, [lr]
 80022f4:	ed93 2a00 	vldr	s4, [r3]
 80022f8:	44de      	add	lr, fp
 80022fa:	bf0c      	ite	eq
 80022fc:	ea4f 0b81 	moveq.w	fp, r1, lsl #2
 8002300:	f04f 0b04 	movne.w	fp, #4
 8002304:	445b      	add	r3, fp
 8002306:	fa1f fb88 	uxth.w	fp, r8
 800230a:	f1bb 0f00 	cmp.w	fp, #0
 800230e:	ee01 1a82 	vmla.f32	s2, s3, s4
 8002312:	d1e5      	bne.n	80022e0 <forward_gemm+0x1ec>
 8002314:	ee20 1a81 	vmul.f32	s2, s1, s2
 8002318:	edd6 1a00 	vldr	s3, [r6]
 800231c:	ee00 1a21 	vmla.f32	s2, s0, s3
 8002320:	ed87 1a00 	vstr	s2, [r7]
 8002324:	1d3f      	adds	r7, r7, #4
 8002326:	1e52      	subs	r2, r2, #1
 8002328:	b292      	uxth	r2, r2
 800232a:	002b      	movs	r3, r5
 800232c:	bf0e      	itee	eq
 800232e:	1a8b      	subeq	r3, r1, r2
 8002330:	ebaa 0302 	subne.w	r3, sl, r2
 8002334:	434b      	mulne	r3, r1
 8002336:	2a00      	cmp	r2, #0
 8002338:	444e      	add	r6, r9
 800233a:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 800233e:	d1c0      	bne.n	80022c2 <forward_gemm+0x1ce>
 8002340:	f8bd 7022 	ldrh.w	r7, [sp, #34]	; 0x22
 8002344:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002346:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002348:	f8bd e028 	ldrh.w	lr, [sp, #40]	; 0x28
 800234c:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 8002350:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
 8002354:	19df      	adds	r7, r3, r7
 8002356:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 800235a:	b100      	cbz	r0, 800235e <forward_gemm+0x26a>
 800235c:	2404      	movs	r4, #4
 800235e:	eb02 0c04 	add.w	ip, r2, r4
 8002362:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 8002366:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002368:	1e67      	subs	r7, r4, #1
 800236a:	eb06 0682 	add.w	r6, r6, r2, lsl #2
 800236e:	f8ad 7020 	strh.w	r7, [sp, #32]
 8002372:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8002376:	2a00      	cmp	r2, #0
 8002378:	d192      	bne.n	80022a0 <forward_gemm+0x1ac>
 800237a:	b011      	add	sp, #68	; 0x44
 800237c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002380:	fb0b f606 	mul.w	r6, fp, r6
 8002384:	2e00      	cmp	r6, #0
 8002386:	ddf8      	ble.n	800237a <forward_gemm+0x286>
 8002388:	f016 0003 	ands.w	r0, r6, #3
 800238c:	d003      	beq.n	8002396 <forward_gemm+0x2a2>
 800238e:	1e40      	subs	r0, r0, #1
 8002390:	f844 3b04 	str.w	r3, [r4], #4
 8002394:	d1fb      	bne.n	800238e <forward_gemm+0x29a>
 8002396:	08b1      	lsrs	r1, r6, #2
 8002398:	d0ef      	beq.n	800237a <forward_gemm+0x286>
 800239a:	6023      	str	r3, [r4, #0]
 800239c:	6063      	str	r3, [r4, #4]
 800239e:	60a3      	str	r3, [r4, #8]
 80023a0:	60e3      	str	r3, [r4, #12]
 80023a2:	3410      	adds	r4, #16
 80023a4:	1e49      	subs	r1, r1, #1
 80023a6:	d1f8      	bne.n	800239a <forward_gemm+0x2a6>
 80023a8:	b011      	add	sp, #68	; 0x44
 80023aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080023b0 <forward_matmul>:
 80023b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80023b4:	b08b      	sub	sp, #44	; 0x2c
 80023b6:	6944      	ldr	r4, [r0, #20]
 80023b8:	8822      	ldrh	r2, [r4, #0]
 80023ba:	2a00      	cmp	r2, #0
 80023bc:	bf1a      	itte	ne
 80023be:	6860      	ldrne	r0, [r4, #4]
 80023c0:	1d03      	addne	r3, r0, #4
 80023c2:	2304      	moveq	r3, #4
 80023c4:	6819      	ldr	r1, [r3, #0]
 80023c6:	2900      	cmp	r1, #0
 80023c8:	bf14      	ite	ne
 80023ca:	6808      	ldrne	r0, [r1, #0]
 80023cc:	2000      	moveq	r0, #0
 80023ce:	2900      	cmp	r1, #0
 80023d0:	bf14      	ite	ne
 80023d2:	f8d1 b004 	ldrne.w	fp, [r1, #4]
 80023d6:	f04f 0b00 	moveq.w	fp, #0
 80023da:	2a02      	cmp	r2, #2
 80023dc:	bfa6      	itte	ge
 80023de:	6861      	ldrge	r1, [r4, #4]
 80023e0:	3110      	addge	r1, #16
 80023e2:	2104      	movlt	r1, #4
 80023e4:	6809      	ldr	r1, [r1, #0]
 80023e6:	2900      	cmp	r1, #0
 80023e8:	bf14      	ite	ne
 80023ea:	680b      	ldrne	r3, [r1, #0]
 80023ec:	2300      	moveq	r3, #0
 80023ee:	f1bb 0f00 	cmp.w	fp, #0
 80023f2:	d108      	bne.n	8002406 <forward_matmul+0x56>
 80023f4:	2a02      	cmp	r2, #2
 80023f6:	bfc6      	itte	gt
 80023f8:	6861      	ldrgt	r1, [r4, #4]
 80023fa:	311c      	addgt	r1, #28
 80023fc:	2104      	movle	r1, #4
 80023fe:	6809      	ldr	r1, [r1, #0]
 8002400:	b109      	cbz	r1, 8002406 <forward_matmul+0x56>
 8002402:	f8d1 b000 	ldr.w	fp, [r1]
 8002406:	68dd      	ldr	r5, [r3, #12]
 8002408:	68c4      	ldr	r4, [r0, #12]
 800240a:	f8db 900c 	ldr.w	r9, [fp, #12]
 800240e:	686e      	ldr	r6, [r5, #4]
 8002410:	f8d4 e000 	ldr.w	lr, [r4]
 8002414:	f8d9 2000 	ldr.w	r2, [r9]
 8002418:	f8d5 a000 	ldr.w	sl, [r5]
 800241c:	68a1      	ldr	r1, [r4, #8]
 800241e:	f8d9 8008 	ldr.w	r8, [r9, #8]
 8002422:	f8d5 c008 	ldr.w	ip, [r5, #8]
 8002426:	68ef      	ldr	r7, [r5, #12]
 8002428:	9706      	str	r7, [sp, #24]
 800242a:	fb01 f50e 	mul.w	r5, r1, lr
 800242e:	699b      	ldr	r3, [r3, #24]
 8002430:	68e7      	ldr	r7, [r4, #12]
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	434f      	muls	r7, r1
 8002436:	fb0e f707 	mul.w	r7, lr, r7
 800243a:	970a      	str	r7, [sp, #40]	; 0x28
 800243c:	f8d9 400c 	ldr.w	r4, [r9, #12]
 8002440:	fb08 f404 	mul.w	r4, r8, r4
 8002444:	4354      	muls	r4, r2
 8002446:	2e00      	cmp	r6, #0
 8002448:	9409      	str	r4, [sp, #36]	; 0x24
 800244a:	fb08 f802 	mul.w	r8, r8, r2
 800244e:	d074      	beq.n	800253a <forward_matmul+0x18a>
 8002450:	2400      	movs	r4, #0
 8002452:	46a1      	mov	r9, r4
 8002454:	9602      	str	r6, [sp, #8]
 8002456:	9e06      	ldr	r6, [sp, #24]
 8002458:	2e00      	cmp	r6, #0
 800245a:	d064      	beq.n	8002526 <forward_matmul+0x176>
 800245c:	9f06      	ldr	r7, [sp, #24]
 800245e:	9701      	str	r7, [sp, #4]
 8002460:	f8cd c00c 	str.w	ip, [sp, #12]
 8002464:	2600      	movs	r6, #0
 8002466:	9505      	str	r5, [sp, #20]
 8002468:	9d03      	ldr	r5, [sp, #12]
 800246a:	2d00      	cmp	r5, #0
 800246c:	d051      	beq.n	8002512 <forward_matmul+0x162>
 800246e:	9500      	str	r5, [sp, #0]
 8002470:	f8cd a010 	str.w	sl, [sp, #16]
 8002474:	9207      	str	r2, [sp, #28]
 8002476:	f04f 0a00 	mov.w	sl, #0
 800247a:	9a04      	ldr	r2, [sp, #16]
 800247c:	2a00      	cmp	r2, #0
 800247e:	d03f      	beq.n	8002500 <forward_matmul+0x150>
 8002480:	f04f 0c00 	mov.w	ip, #0
 8002484:	9008      	str	r0, [sp, #32]
 8002486:	9808      	ldr	r0, [sp, #32]
 8002488:	6985      	ldr	r5, [r0, #24]
 800248a:	68a8      	ldr	r0, [r5, #8]
 800248c:	f8db 7018 	ldr.w	r7, [fp, #24]
 8002490:	4420      	add	r0, r4
 8002492:	4430      	add	r0, r6
 8002494:	eb00 050c 	add.w	r5, r0, ip
 8002498:	68b8      	ldr	r0, [r7, #8]
 800249a:	4448      	add	r0, r9
 800249c:	4450      	add	r0, sl
 800249e:	eb00 070c 	add.w	r7, r0, ip
 80024a2:	ed9f 0a28 	vldr	s0, [pc, #160]	; 8002544 <.text_16>
 80024a6:	b319      	cbz	r1, 80024f0 <forward_matmul+0x140>
 80024a8:	07c8      	lsls	r0, r1, #31
 80024aa:	d509      	bpl.n	80024c0 <forward_matmul+0x110>
 80024ac:	edd5 0a00 	vldr	s1, [r5]
 80024b0:	ed97 1a00 	vldr	s2, [r7]
 80024b4:	ee00 0a81 	vmla.f32	s0, s1, s2
 80024b8:	eb05 058e 	add.w	r5, r5, lr, lsl #2
 80024bc:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 80024c0:	0848      	lsrs	r0, r1, #1
 80024c2:	d015      	beq.n	80024f0 <forward_matmul+0x140>
 80024c4:	edd5 0a00 	vldr	s1, [r5]
 80024c8:	ed97 1a00 	vldr	s2, [r7]
 80024cc:	eb05 058e 	add.w	r5, r5, lr, lsl #2
 80024d0:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 80024d4:	ee00 0a81 	vmla.f32	s0, s1, s2
 80024d8:	edd5 0a00 	vldr	s1, [r5]
 80024dc:	ed97 1a00 	vldr	s2, [r7]
 80024e0:	1e40      	subs	r0, r0, #1
 80024e2:	ee00 0a81 	vmla.f32	s0, s1, s2
 80024e6:	eb05 058e 	add.w	r5, r5, lr, lsl #2
 80024ea:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 80024ee:	d1e9      	bne.n	80024c4 <forward_matmul+0x114>
 80024f0:	ed83 0a00 	vstr	s0, [r3]
 80024f4:	1d1b      	adds	r3, r3, #4
 80024f6:	1e52      	subs	r2, r2, #1
 80024f8:	f10c 0c04 	add.w	ip, ip, #4
 80024fc:	d1c3      	bne.n	8002486 <forward_matmul+0xd6>
 80024fe:	9808      	ldr	r0, [sp, #32]
 8002500:	9d00      	ldr	r5, [sp, #0]
 8002502:	9a07      	ldr	r2, [sp, #28]
 8002504:	1e6d      	subs	r5, r5, #1
 8002506:	eb0a 0a82 	add.w	sl, sl, r2, lsl #2
 800250a:	9500      	str	r5, [sp, #0]
 800250c:	d1b5      	bne.n	800247a <forward_matmul+0xca>
 800250e:	f8dd a010 	ldr.w	sl, [sp, #16]
 8002512:	9f01      	ldr	r7, [sp, #4]
 8002514:	9d05      	ldr	r5, [sp, #20]
 8002516:	1e7f      	subs	r7, r7, #1
 8002518:	eb06 0685 	add.w	r6, r6, r5, lsl #2
 800251c:	9701      	str	r7, [sp, #4]
 800251e:	d1a3      	bne.n	8002468 <forward_matmul+0xb8>
 8002520:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8002524:	9d05      	ldr	r5, [sp, #20]
 8002526:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8002528:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800252a:	eb09 0986 	add.w	r9, r9, r6, lsl #2
 800252e:	9e02      	ldr	r6, [sp, #8]
 8002530:	1e76      	subs	r6, r6, #1
 8002532:	eb04 0487 	add.w	r4, r4, r7, lsl #2
 8002536:	9602      	str	r6, [sp, #8]
 8002538:	d18d      	bne.n	8002456 <forward_matmul+0xa6>
 800253a:	b00b      	add	sp, #44	; 0x2c
 800253c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002540 <.text_15>:
 8002540:	0800135b 	.word	0x0800135b

08002544 <.text_16>:
 8002544:	00000000 	.word	0x00000000

08002548 <ai_shape_get_size>:
 8002548:	b470      	push	{r4, r5, r6}
 800254a:	4601      	mov	r1, r0
 800254c:	f04f 0201 	mov.w	r2, #1
 8002550:	680b      	ldr	r3, [r1, #0]
 8002552:	0a1b      	lsrs	r3, r3, #8
 8002554:	d01e      	beq.n	8002594 <ai_shape_get_size+0x4c>
 8002556:	684c      	ldr	r4, [r1, #4]
 8002558:	eb04 0183 	add.w	r1, r4, r3, lsl #2
 800255c:	4618      	mov	r0, r3
 800255e:	1f0d      	subs	r5, r1, #4
 8002560:	f010 0103 	ands.w	r1, r0, #3
 8002564:	f000 8006 	beq.w	8002574 <ai_shape_get_size+0x2c>
 8002568:	f855 6904 	ldr.w	r6, [r5], #-4
 800256c:	1e5b      	subs	r3, r3, #1
 800256e:	4372      	muls	r2, r6
 8002570:	1e49      	subs	r1, r1, #1
 8002572:	d1f9      	bne.n	8002568 <ai_shape_get_size+0x20>
 8002574:	0880      	lsrs	r0, r0, #2
 8002576:	d00d      	beq.n	8002594 <ai_shape_get_size+0x4c>
 8002578:	eb04 0183 	add.w	r1, r4, r3, lsl #2
 800257c:	3910      	subs	r1, #16
 800257e:	68cb      	ldr	r3, [r1, #12]
 8002580:	688c      	ldr	r4, [r1, #8]
 8002582:	684d      	ldr	r5, [r1, #4]
 8002584:	f851 6910 	ldr.w	r6, [r1], #-16
 8002588:	4363      	muls	r3, r4
 800258a:	436b      	muls	r3, r5
 800258c:	4373      	muls	r3, r6
 800258e:	435a      	muls	r2, r3
 8002590:	1e40      	subs	r0, r0, #1
 8002592:	d1f4      	bne.n	800257e <ai_shape_get_size+0x36>
 8002594:	bc70      	pop	{r4, r5, r6}
 8002596:	4610      	mov	r0, r2
 8002598:	4770      	bx	lr
	...

0800259c <nl_func_acos_array_f32>:
 800259c:	b570      	push	{r4, r5, r6, lr}
 800259e:	688c      	ldr	r4, [r1, #8]
 80025a0:	6880      	ldr	r0, [r0, #8]
 80025a2:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 80025a6:	1f0d      	subs	r5, r1, #4
 80025a8:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 80025ac:	1f0e      	subs	r6, r1, #4
 80025ae:	42a5      	cmp	r5, r4
 80025b0:	f0c0 800a 	bcc.w	80025c8 <nl_func_acos_array_f32+0x2c>
 80025b4:	ed95 0a00 	vldr	s0, [r5]
 80025b8:	f012 f9ee 	bl	8014998 <acosf>
 80025bc:	ed86 0a00 	vstr	s0, [r6]
 80025c0:	1f2d      	subs	r5, r5, #4
 80025c2:	1f36      	subs	r6, r6, #4
 80025c4:	42a5      	cmp	r5, r4
 80025c6:	d2f5      	bcs.n	80025b4 <nl_func_acos_array_f32+0x18>
 80025c8:	bd70      	pop	{r4, r5, r6, pc}
	...

080025cc <forward_acos>:
 80025cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025ce:	b081      	sub	sp, #4
 80025d0:	6942      	ldr	r2, [r0, #20]
 80025d2:	8811      	ldrh	r1, [r2, #0]
 80025d4:	2900      	cmp	r1, #0
 80025d6:	bf1a      	itte	ne
 80025d8:	6850      	ldrne	r0, [r2, #4]
 80025da:	1d00      	addne	r0, r0, #4
 80025dc:	2004      	moveq	r0, #4
 80025de:	f04f 0501 	mov.w	r5, #1
 80025e2:	6800      	ldr	r0, [r0, #0]
 80025e4:	2800      	cmp	r0, #0
 80025e6:	bf14      	ite	ne
 80025e8:	6803      	ldrne	r3, [r0, #0]
 80025ea:	2300      	moveq	r3, #0
 80025ec:	2902      	cmp	r1, #2
 80025ee:	bfa6      	itte	ge
 80025f0:	6850      	ldrge	r0, [r2, #4]
 80025f2:	3010      	addge	r0, #16
 80025f4:	2004      	movlt	r0, #4
 80025f6:	6800      	ldr	r0, [r0, #0]
 80025f8:	2800      	cmp	r0, #0
 80025fa:	bf19      	ittee	ne
 80025fc:	6800      	ldrne	r0, [r0, #0]
 80025fe:	f100 0418 	addne.w	r4, r0, #24
 8002602:	2100      	moveq	r1, #0
 8002604:	f101 0418 	addeq.w	r4, r1, #24
 8002608:	f103 0108 	add.w	r1, r3, #8
 800260c:	680a      	ldr	r2, [r1, #0]
 800260e:	0a12      	lsrs	r2, r2, #8
 8002610:	d01e      	beq.n	8002650 <forward_acos+0x84>
 8002612:	684e      	ldr	r6, [r1, #4]
 8002614:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002618:	4610      	mov	r0, r2
 800261a:	1f0f      	subs	r7, r1, #4
 800261c:	f010 0103 	ands.w	r1, r0, #3
 8002620:	d006      	beq.n	8002630 <forward_acos+0x64>
 8002622:	1e52      	subs	r2, r2, #1
 8002624:	f857 c904 	ldr.w	ip, [r7], #-4
 8002628:	1e49      	subs	r1, r1, #1
 800262a:	fb0c f505 	mul.w	r5, ip, r5
 800262e:	d1f8      	bne.n	8002622 <forward_acos+0x56>
 8002630:	0880      	lsrs	r0, r0, #2
 8002632:	d00d      	beq.n	8002650 <forward_acos+0x84>
 8002634:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002638:	3910      	subs	r1, #16
 800263a:	68ca      	ldr	r2, [r1, #12]
 800263c:	688e      	ldr	r6, [r1, #8]
 800263e:	684f      	ldr	r7, [r1, #4]
 8002640:	4372      	muls	r2, r6
 8002642:	f851 6910 	ldr.w	r6, [r1], #-16
 8002646:	437a      	muls	r2, r7
 8002648:	4372      	muls	r2, r6
 800264a:	4355      	muls	r5, r2
 800264c:	1e40      	subs	r0, r0, #1
 800264e:	d1f4      	bne.n	800263a <forward_acos+0x6e>
 8002650:	6998      	ldr	r0, [r3, #24]
 8002652:	6886      	ldr	r6, [r0, #8]
 8002654:	6821      	ldr	r1, [r4, #0]
 8002656:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 800265a:	1f07      	subs	r7, r0, #4
 800265c:	6888      	ldr	r0, [r1, #8]
 800265e:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8002662:	1f14      	subs	r4, r2, #4
 8002664:	42b7      	cmp	r7, r6
 8002666:	d309      	bcc.n	800267c <forward_acos+0xb0>
 8002668:	ed97 0a00 	vldr	s0, [r7]
 800266c:	f012 f994 	bl	8014998 <acosf>
 8002670:	ed84 0a00 	vstr	s0, [r4]
 8002674:	1f3f      	subs	r7, r7, #4
 8002676:	1f24      	subs	r4, r4, #4
 8002678:	42b7      	cmp	r7, r6
 800267a:	d2f5      	bcs.n	8002668 <forward_acos+0x9c>
 800267c:	b001      	add	sp, #4
 800267e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002680 <nl_func_acosh_array_f32>:
 8002680:	b570      	push	{r4, r5, r6, lr}
 8002682:	688c      	ldr	r4, [r1, #8]
 8002684:	6880      	ldr	r0, [r0, #8]
 8002686:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 800268a:	1f0d      	subs	r5, r1, #4
 800268c:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8002690:	1f0e      	subs	r6, r1, #4
 8002692:	42a5      	cmp	r5, r4
 8002694:	f0c0 800a 	bcc.w	80026ac <nl_func_acosh_array_f32+0x2c>
 8002698:	ed95 0a00 	vldr	s0, [r5]
 800269c:	f012 f9a8 	bl	80149f0 <acoshf>
 80026a0:	ed86 0a00 	vstr	s0, [r6]
 80026a4:	1f2d      	subs	r5, r5, #4
 80026a6:	1f36      	subs	r6, r6, #4
 80026a8:	42a5      	cmp	r5, r4
 80026aa:	d2f5      	bcs.n	8002698 <nl_func_acosh_array_f32+0x18>
 80026ac:	bd70      	pop	{r4, r5, r6, pc}
	...

080026b0 <forward_acosh>:
 80026b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026b2:	b081      	sub	sp, #4
 80026b4:	6942      	ldr	r2, [r0, #20]
 80026b6:	8811      	ldrh	r1, [r2, #0]
 80026b8:	2900      	cmp	r1, #0
 80026ba:	bf1a      	itte	ne
 80026bc:	6850      	ldrne	r0, [r2, #4]
 80026be:	1d00      	addne	r0, r0, #4
 80026c0:	2004      	moveq	r0, #4
 80026c2:	f04f 0501 	mov.w	r5, #1
 80026c6:	6800      	ldr	r0, [r0, #0]
 80026c8:	2800      	cmp	r0, #0
 80026ca:	bf14      	ite	ne
 80026cc:	6803      	ldrne	r3, [r0, #0]
 80026ce:	2300      	moveq	r3, #0
 80026d0:	2902      	cmp	r1, #2
 80026d2:	bfa6      	itte	ge
 80026d4:	6850      	ldrge	r0, [r2, #4]
 80026d6:	3010      	addge	r0, #16
 80026d8:	2004      	movlt	r0, #4
 80026da:	6800      	ldr	r0, [r0, #0]
 80026dc:	2800      	cmp	r0, #0
 80026de:	bf19      	ittee	ne
 80026e0:	6800      	ldrne	r0, [r0, #0]
 80026e2:	f100 0418 	addne.w	r4, r0, #24
 80026e6:	2100      	moveq	r1, #0
 80026e8:	f101 0418 	addeq.w	r4, r1, #24
 80026ec:	f103 0108 	add.w	r1, r3, #8
 80026f0:	680a      	ldr	r2, [r1, #0]
 80026f2:	0a12      	lsrs	r2, r2, #8
 80026f4:	d01e      	beq.n	8002734 <forward_acosh+0x84>
 80026f6:	684e      	ldr	r6, [r1, #4]
 80026f8:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80026fc:	4610      	mov	r0, r2
 80026fe:	1f0f      	subs	r7, r1, #4
 8002700:	f010 0103 	ands.w	r1, r0, #3
 8002704:	d006      	beq.n	8002714 <forward_acosh+0x64>
 8002706:	1e52      	subs	r2, r2, #1
 8002708:	f857 c904 	ldr.w	ip, [r7], #-4
 800270c:	1e49      	subs	r1, r1, #1
 800270e:	fb0c f505 	mul.w	r5, ip, r5
 8002712:	d1f8      	bne.n	8002706 <forward_acosh+0x56>
 8002714:	0880      	lsrs	r0, r0, #2
 8002716:	d00d      	beq.n	8002734 <forward_acosh+0x84>
 8002718:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 800271c:	3910      	subs	r1, #16
 800271e:	68ca      	ldr	r2, [r1, #12]
 8002720:	688e      	ldr	r6, [r1, #8]
 8002722:	684f      	ldr	r7, [r1, #4]
 8002724:	4372      	muls	r2, r6
 8002726:	f851 6910 	ldr.w	r6, [r1], #-16
 800272a:	437a      	muls	r2, r7
 800272c:	4372      	muls	r2, r6
 800272e:	4355      	muls	r5, r2
 8002730:	1e40      	subs	r0, r0, #1
 8002732:	d1f4      	bne.n	800271e <forward_acosh+0x6e>
 8002734:	6998      	ldr	r0, [r3, #24]
 8002736:	6886      	ldr	r6, [r0, #8]
 8002738:	6821      	ldr	r1, [r4, #0]
 800273a:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 800273e:	1f07      	subs	r7, r0, #4
 8002740:	6888      	ldr	r0, [r1, #8]
 8002742:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8002746:	1f14      	subs	r4, r2, #4
 8002748:	42b7      	cmp	r7, r6
 800274a:	d309      	bcc.n	8002760 <forward_acosh+0xb0>
 800274c:	ed97 0a00 	vldr	s0, [r7]
 8002750:	f012 f94e 	bl	80149f0 <acoshf>
 8002754:	ed84 0a00 	vstr	s0, [r4]
 8002758:	1f3f      	subs	r7, r7, #4
 800275a:	1f24      	subs	r4, r4, #4
 800275c:	42b7      	cmp	r7, r6
 800275e:	d2f5      	bcs.n	800274c <forward_acosh+0x9c>
 8002760:	b001      	add	sp, #4
 8002762:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002764 <nl_func_asin_array_f32>:
 8002764:	b570      	push	{r4, r5, r6, lr}
 8002766:	688c      	ldr	r4, [r1, #8]
 8002768:	6880      	ldr	r0, [r0, #8]
 800276a:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 800276e:	1f0d      	subs	r5, r1, #4
 8002770:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8002774:	1f0e      	subs	r6, r1, #4
 8002776:	42a5      	cmp	r5, r4
 8002778:	f0c0 800a 	bcc.w	8002790 <nl_func_asin_array_f32+0x2c>
 800277c:	ed95 0a00 	vldr	s0, [r5]
 8002780:	f012 f956 	bl	8014a30 <asinf>
 8002784:	ed86 0a00 	vstr	s0, [r6]
 8002788:	1f2d      	subs	r5, r5, #4
 800278a:	1f36      	subs	r6, r6, #4
 800278c:	42a5      	cmp	r5, r4
 800278e:	d2f5      	bcs.n	800277c <nl_func_asin_array_f32+0x18>
 8002790:	bd70      	pop	{r4, r5, r6, pc}
	...

08002794 <forward_asin>:
 8002794:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002796:	b081      	sub	sp, #4
 8002798:	6942      	ldr	r2, [r0, #20]
 800279a:	8811      	ldrh	r1, [r2, #0]
 800279c:	2900      	cmp	r1, #0
 800279e:	bf1a      	itte	ne
 80027a0:	6850      	ldrne	r0, [r2, #4]
 80027a2:	1d00      	addne	r0, r0, #4
 80027a4:	2004      	moveq	r0, #4
 80027a6:	f04f 0501 	mov.w	r5, #1
 80027aa:	6800      	ldr	r0, [r0, #0]
 80027ac:	2800      	cmp	r0, #0
 80027ae:	bf14      	ite	ne
 80027b0:	6803      	ldrne	r3, [r0, #0]
 80027b2:	2300      	moveq	r3, #0
 80027b4:	2902      	cmp	r1, #2
 80027b6:	bfa6      	itte	ge
 80027b8:	6850      	ldrge	r0, [r2, #4]
 80027ba:	3010      	addge	r0, #16
 80027bc:	2004      	movlt	r0, #4
 80027be:	6800      	ldr	r0, [r0, #0]
 80027c0:	2800      	cmp	r0, #0
 80027c2:	bf19      	ittee	ne
 80027c4:	6800      	ldrne	r0, [r0, #0]
 80027c6:	f100 0418 	addne.w	r4, r0, #24
 80027ca:	2100      	moveq	r1, #0
 80027cc:	f101 0418 	addeq.w	r4, r1, #24
 80027d0:	f103 0108 	add.w	r1, r3, #8
 80027d4:	680a      	ldr	r2, [r1, #0]
 80027d6:	0a12      	lsrs	r2, r2, #8
 80027d8:	d01e      	beq.n	8002818 <forward_asin+0x84>
 80027da:	684e      	ldr	r6, [r1, #4]
 80027dc:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80027e0:	4610      	mov	r0, r2
 80027e2:	1f0f      	subs	r7, r1, #4
 80027e4:	f010 0103 	ands.w	r1, r0, #3
 80027e8:	d006      	beq.n	80027f8 <forward_asin+0x64>
 80027ea:	1e52      	subs	r2, r2, #1
 80027ec:	f857 c904 	ldr.w	ip, [r7], #-4
 80027f0:	1e49      	subs	r1, r1, #1
 80027f2:	fb0c f505 	mul.w	r5, ip, r5
 80027f6:	d1f8      	bne.n	80027ea <forward_asin+0x56>
 80027f8:	0880      	lsrs	r0, r0, #2
 80027fa:	d00d      	beq.n	8002818 <forward_asin+0x84>
 80027fc:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002800:	3910      	subs	r1, #16
 8002802:	68ca      	ldr	r2, [r1, #12]
 8002804:	688e      	ldr	r6, [r1, #8]
 8002806:	684f      	ldr	r7, [r1, #4]
 8002808:	4372      	muls	r2, r6
 800280a:	f851 6910 	ldr.w	r6, [r1], #-16
 800280e:	437a      	muls	r2, r7
 8002810:	4372      	muls	r2, r6
 8002812:	4355      	muls	r5, r2
 8002814:	1e40      	subs	r0, r0, #1
 8002816:	d1f4      	bne.n	8002802 <forward_asin+0x6e>
 8002818:	6998      	ldr	r0, [r3, #24]
 800281a:	6886      	ldr	r6, [r0, #8]
 800281c:	6821      	ldr	r1, [r4, #0]
 800281e:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8002822:	1f07      	subs	r7, r0, #4
 8002824:	6888      	ldr	r0, [r1, #8]
 8002826:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 800282a:	1f14      	subs	r4, r2, #4
 800282c:	42b7      	cmp	r7, r6
 800282e:	d309      	bcc.n	8002844 <forward_asin+0xb0>
 8002830:	ed97 0a00 	vldr	s0, [r7]
 8002834:	f012 f8fc 	bl	8014a30 <asinf>
 8002838:	ed84 0a00 	vstr	s0, [r4]
 800283c:	1f3f      	subs	r7, r7, #4
 800283e:	1f24      	subs	r4, r4, #4
 8002840:	42b7      	cmp	r7, r6
 8002842:	d2f5      	bcs.n	8002830 <forward_asin+0x9c>
 8002844:	b001      	add	sp, #4
 8002846:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002848 <nl_func_asinh_array_f32>:
 8002848:	b570      	push	{r4, r5, r6, lr}
 800284a:	688c      	ldr	r4, [r1, #8]
 800284c:	6880      	ldr	r0, [r0, #8]
 800284e:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8002852:	1f0d      	subs	r5, r1, #4
 8002854:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8002858:	1f0e      	subs	r6, r1, #4
 800285a:	42a5      	cmp	r5, r4
 800285c:	f0c0 800a 	bcc.w	8002874 <nl_func_asinh_array_f32+0x2c>
 8002860:	ed95 0a00 	vldr	s0, [r5]
 8002864:	f011 facc 	bl	8013e00 <asinhf>
 8002868:	ed86 0a00 	vstr	s0, [r6]
 800286c:	1f2d      	subs	r5, r5, #4
 800286e:	1f36      	subs	r6, r6, #4
 8002870:	42a5      	cmp	r5, r4
 8002872:	d2f5      	bcs.n	8002860 <nl_func_asinh_array_f32+0x18>
 8002874:	bd70      	pop	{r4, r5, r6, pc}
	...

08002878 <forward_asinh>:
 8002878:	b5f0      	push	{r4, r5, r6, r7, lr}
 800287a:	b081      	sub	sp, #4
 800287c:	6942      	ldr	r2, [r0, #20]
 800287e:	8811      	ldrh	r1, [r2, #0]
 8002880:	2900      	cmp	r1, #0
 8002882:	bf1a      	itte	ne
 8002884:	6850      	ldrne	r0, [r2, #4]
 8002886:	1d00      	addne	r0, r0, #4
 8002888:	2004      	moveq	r0, #4
 800288a:	f04f 0501 	mov.w	r5, #1
 800288e:	6800      	ldr	r0, [r0, #0]
 8002890:	2800      	cmp	r0, #0
 8002892:	bf14      	ite	ne
 8002894:	6803      	ldrne	r3, [r0, #0]
 8002896:	2300      	moveq	r3, #0
 8002898:	2902      	cmp	r1, #2
 800289a:	bfa6      	itte	ge
 800289c:	6850      	ldrge	r0, [r2, #4]
 800289e:	3010      	addge	r0, #16
 80028a0:	2004      	movlt	r0, #4
 80028a2:	6800      	ldr	r0, [r0, #0]
 80028a4:	2800      	cmp	r0, #0
 80028a6:	bf19      	ittee	ne
 80028a8:	6800      	ldrne	r0, [r0, #0]
 80028aa:	f100 0418 	addne.w	r4, r0, #24
 80028ae:	2100      	moveq	r1, #0
 80028b0:	f101 0418 	addeq.w	r4, r1, #24
 80028b4:	f103 0108 	add.w	r1, r3, #8
 80028b8:	680a      	ldr	r2, [r1, #0]
 80028ba:	0a12      	lsrs	r2, r2, #8
 80028bc:	d01e      	beq.n	80028fc <forward_asinh+0x84>
 80028be:	684e      	ldr	r6, [r1, #4]
 80028c0:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80028c4:	4610      	mov	r0, r2
 80028c6:	1f0f      	subs	r7, r1, #4
 80028c8:	f010 0103 	ands.w	r1, r0, #3
 80028cc:	d006      	beq.n	80028dc <forward_asinh+0x64>
 80028ce:	1e52      	subs	r2, r2, #1
 80028d0:	f857 c904 	ldr.w	ip, [r7], #-4
 80028d4:	1e49      	subs	r1, r1, #1
 80028d6:	fb0c f505 	mul.w	r5, ip, r5
 80028da:	d1f8      	bne.n	80028ce <forward_asinh+0x56>
 80028dc:	0880      	lsrs	r0, r0, #2
 80028de:	d00d      	beq.n	80028fc <forward_asinh+0x84>
 80028e0:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80028e4:	3910      	subs	r1, #16
 80028e6:	68ca      	ldr	r2, [r1, #12]
 80028e8:	688e      	ldr	r6, [r1, #8]
 80028ea:	684f      	ldr	r7, [r1, #4]
 80028ec:	4372      	muls	r2, r6
 80028ee:	f851 6910 	ldr.w	r6, [r1], #-16
 80028f2:	437a      	muls	r2, r7
 80028f4:	4372      	muls	r2, r6
 80028f6:	4355      	muls	r5, r2
 80028f8:	1e40      	subs	r0, r0, #1
 80028fa:	d1f4      	bne.n	80028e6 <forward_asinh+0x6e>
 80028fc:	6998      	ldr	r0, [r3, #24]
 80028fe:	6886      	ldr	r6, [r0, #8]
 8002900:	6821      	ldr	r1, [r4, #0]
 8002902:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8002906:	1f07      	subs	r7, r0, #4
 8002908:	6888      	ldr	r0, [r1, #8]
 800290a:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 800290e:	1f14      	subs	r4, r2, #4
 8002910:	42b7      	cmp	r7, r6
 8002912:	d309      	bcc.n	8002928 <forward_asinh+0xb0>
 8002914:	ed97 0a00 	vldr	s0, [r7]
 8002918:	f011 fa72 	bl	8013e00 <asinhf>
 800291c:	ed84 0a00 	vstr	s0, [r4]
 8002920:	1f3f      	subs	r7, r7, #4
 8002922:	1f24      	subs	r4, r4, #4
 8002924:	42b7      	cmp	r7, r6
 8002926:	d2f5      	bcs.n	8002914 <forward_asinh+0x9c>
 8002928:	b001      	add	sp, #4
 800292a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800292c <nl_func_atan_array_f32>:
 800292c:	b570      	push	{r4, r5, r6, lr}
 800292e:	688c      	ldr	r4, [r1, #8]
 8002930:	6880      	ldr	r0, [r0, #8]
 8002932:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8002936:	1f0d      	subs	r5, r1, #4
 8002938:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 800293c:	1f0e      	subs	r6, r1, #4
 800293e:	42a5      	cmp	r5, r4
 8002940:	f0c0 800a 	bcc.w	8002958 <nl_func_atan_array_f32+0x2c>
 8002944:	ed95 0a00 	vldr	s0, [r5]
 8002948:	f011 fac2 	bl	8013ed0 <atanf>
 800294c:	ed86 0a00 	vstr	s0, [r6]
 8002950:	1f2d      	subs	r5, r5, #4
 8002952:	1f36      	subs	r6, r6, #4
 8002954:	42a5      	cmp	r5, r4
 8002956:	d2f5      	bcs.n	8002944 <nl_func_atan_array_f32+0x18>
 8002958:	bd70      	pop	{r4, r5, r6, pc}
	...

0800295c <forward_atan>:
 800295c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800295e:	b081      	sub	sp, #4
 8002960:	6942      	ldr	r2, [r0, #20]
 8002962:	8811      	ldrh	r1, [r2, #0]
 8002964:	2900      	cmp	r1, #0
 8002966:	bf1a      	itte	ne
 8002968:	6850      	ldrne	r0, [r2, #4]
 800296a:	1d00      	addne	r0, r0, #4
 800296c:	2004      	moveq	r0, #4
 800296e:	f04f 0501 	mov.w	r5, #1
 8002972:	6800      	ldr	r0, [r0, #0]
 8002974:	2800      	cmp	r0, #0
 8002976:	bf14      	ite	ne
 8002978:	6803      	ldrne	r3, [r0, #0]
 800297a:	2300      	moveq	r3, #0
 800297c:	2902      	cmp	r1, #2
 800297e:	bfa6      	itte	ge
 8002980:	6850      	ldrge	r0, [r2, #4]
 8002982:	3010      	addge	r0, #16
 8002984:	2004      	movlt	r0, #4
 8002986:	6800      	ldr	r0, [r0, #0]
 8002988:	2800      	cmp	r0, #0
 800298a:	bf19      	ittee	ne
 800298c:	6800      	ldrne	r0, [r0, #0]
 800298e:	f100 0418 	addne.w	r4, r0, #24
 8002992:	2100      	moveq	r1, #0
 8002994:	f101 0418 	addeq.w	r4, r1, #24
 8002998:	f103 0108 	add.w	r1, r3, #8
 800299c:	680a      	ldr	r2, [r1, #0]
 800299e:	0a12      	lsrs	r2, r2, #8
 80029a0:	d01e      	beq.n	80029e0 <forward_atan+0x84>
 80029a2:	684e      	ldr	r6, [r1, #4]
 80029a4:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80029a8:	4610      	mov	r0, r2
 80029aa:	1f0f      	subs	r7, r1, #4
 80029ac:	f010 0103 	ands.w	r1, r0, #3
 80029b0:	d006      	beq.n	80029c0 <forward_atan+0x64>
 80029b2:	1e52      	subs	r2, r2, #1
 80029b4:	f857 c904 	ldr.w	ip, [r7], #-4
 80029b8:	1e49      	subs	r1, r1, #1
 80029ba:	fb0c f505 	mul.w	r5, ip, r5
 80029be:	d1f8      	bne.n	80029b2 <forward_atan+0x56>
 80029c0:	0880      	lsrs	r0, r0, #2
 80029c2:	d00d      	beq.n	80029e0 <forward_atan+0x84>
 80029c4:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80029c8:	3910      	subs	r1, #16
 80029ca:	68ca      	ldr	r2, [r1, #12]
 80029cc:	688e      	ldr	r6, [r1, #8]
 80029ce:	684f      	ldr	r7, [r1, #4]
 80029d0:	4372      	muls	r2, r6
 80029d2:	f851 6910 	ldr.w	r6, [r1], #-16
 80029d6:	437a      	muls	r2, r7
 80029d8:	4372      	muls	r2, r6
 80029da:	4355      	muls	r5, r2
 80029dc:	1e40      	subs	r0, r0, #1
 80029de:	d1f4      	bne.n	80029ca <forward_atan+0x6e>
 80029e0:	6998      	ldr	r0, [r3, #24]
 80029e2:	6886      	ldr	r6, [r0, #8]
 80029e4:	6821      	ldr	r1, [r4, #0]
 80029e6:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 80029ea:	1f07      	subs	r7, r0, #4
 80029ec:	6888      	ldr	r0, [r1, #8]
 80029ee:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 80029f2:	1f14      	subs	r4, r2, #4
 80029f4:	42b7      	cmp	r7, r6
 80029f6:	d309      	bcc.n	8002a0c <forward_atan+0xb0>
 80029f8:	ed97 0a00 	vldr	s0, [r7]
 80029fc:	f011 fa68 	bl	8013ed0 <atanf>
 8002a00:	ed84 0a00 	vstr	s0, [r4]
 8002a04:	1f3f      	subs	r7, r7, #4
 8002a06:	1f24      	subs	r4, r4, #4
 8002a08:	42b7      	cmp	r7, r6
 8002a0a:	d2f5      	bcs.n	80029f8 <forward_atan+0x9c>
 8002a0c:	b001      	add	sp, #4
 8002a0e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002a10 <nl_func_atanh_array_f32>:
 8002a10:	b570      	push	{r4, r5, r6, lr}
 8002a12:	688c      	ldr	r4, [r1, #8]
 8002a14:	6880      	ldr	r0, [r0, #8]
 8002a16:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8002a1a:	1f0d      	subs	r5, r1, #4
 8002a1c:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8002a20:	1f0e      	subs	r6, r1, #4
 8002a22:	42a5      	cmp	r5, r4
 8002a24:	f0c0 800a 	bcc.w	8002a3c <nl_func_atanh_array_f32+0x2c>
 8002a28:	ed95 0a00 	vldr	s0, [r5]
 8002a2c:	f012 f82c 	bl	8014a88 <atanhf>
 8002a30:	ed86 0a00 	vstr	s0, [r6]
 8002a34:	1f2d      	subs	r5, r5, #4
 8002a36:	1f36      	subs	r6, r6, #4
 8002a38:	42a5      	cmp	r5, r4
 8002a3a:	d2f5      	bcs.n	8002a28 <nl_func_atanh_array_f32+0x18>
 8002a3c:	bd70      	pop	{r4, r5, r6, pc}
	...

08002a40 <forward_atanh>:
 8002a40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a42:	b081      	sub	sp, #4
 8002a44:	6942      	ldr	r2, [r0, #20]
 8002a46:	8811      	ldrh	r1, [r2, #0]
 8002a48:	2900      	cmp	r1, #0
 8002a4a:	bf1a      	itte	ne
 8002a4c:	6850      	ldrne	r0, [r2, #4]
 8002a4e:	1d00      	addne	r0, r0, #4
 8002a50:	2004      	moveq	r0, #4
 8002a52:	f04f 0501 	mov.w	r5, #1
 8002a56:	6800      	ldr	r0, [r0, #0]
 8002a58:	2800      	cmp	r0, #0
 8002a5a:	bf14      	ite	ne
 8002a5c:	6803      	ldrne	r3, [r0, #0]
 8002a5e:	2300      	moveq	r3, #0
 8002a60:	2902      	cmp	r1, #2
 8002a62:	bfa6      	itte	ge
 8002a64:	6850      	ldrge	r0, [r2, #4]
 8002a66:	3010      	addge	r0, #16
 8002a68:	2004      	movlt	r0, #4
 8002a6a:	6800      	ldr	r0, [r0, #0]
 8002a6c:	2800      	cmp	r0, #0
 8002a6e:	bf19      	ittee	ne
 8002a70:	6800      	ldrne	r0, [r0, #0]
 8002a72:	f100 0418 	addne.w	r4, r0, #24
 8002a76:	2100      	moveq	r1, #0
 8002a78:	f101 0418 	addeq.w	r4, r1, #24
 8002a7c:	f103 0108 	add.w	r1, r3, #8
 8002a80:	680a      	ldr	r2, [r1, #0]
 8002a82:	0a12      	lsrs	r2, r2, #8
 8002a84:	d01e      	beq.n	8002ac4 <forward_atanh+0x84>
 8002a86:	684e      	ldr	r6, [r1, #4]
 8002a88:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002a8c:	4610      	mov	r0, r2
 8002a8e:	1f0f      	subs	r7, r1, #4
 8002a90:	f010 0103 	ands.w	r1, r0, #3
 8002a94:	d006      	beq.n	8002aa4 <forward_atanh+0x64>
 8002a96:	1e52      	subs	r2, r2, #1
 8002a98:	f857 c904 	ldr.w	ip, [r7], #-4
 8002a9c:	1e49      	subs	r1, r1, #1
 8002a9e:	fb0c f505 	mul.w	r5, ip, r5
 8002aa2:	d1f8      	bne.n	8002a96 <forward_atanh+0x56>
 8002aa4:	0880      	lsrs	r0, r0, #2
 8002aa6:	d00d      	beq.n	8002ac4 <forward_atanh+0x84>
 8002aa8:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002aac:	3910      	subs	r1, #16
 8002aae:	68ca      	ldr	r2, [r1, #12]
 8002ab0:	688e      	ldr	r6, [r1, #8]
 8002ab2:	684f      	ldr	r7, [r1, #4]
 8002ab4:	4372      	muls	r2, r6
 8002ab6:	f851 6910 	ldr.w	r6, [r1], #-16
 8002aba:	437a      	muls	r2, r7
 8002abc:	4372      	muls	r2, r6
 8002abe:	4355      	muls	r5, r2
 8002ac0:	1e40      	subs	r0, r0, #1
 8002ac2:	d1f4      	bne.n	8002aae <forward_atanh+0x6e>
 8002ac4:	6998      	ldr	r0, [r3, #24]
 8002ac6:	6886      	ldr	r6, [r0, #8]
 8002ac8:	6821      	ldr	r1, [r4, #0]
 8002aca:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8002ace:	1f07      	subs	r7, r0, #4
 8002ad0:	6888      	ldr	r0, [r1, #8]
 8002ad2:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8002ad6:	1f14      	subs	r4, r2, #4
 8002ad8:	42b7      	cmp	r7, r6
 8002ada:	d309      	bcc.n	8002af0 <forward_atanh+0xb0>
 8002adc:	ed97 0a00 	vldr	s0, [r7]
 8002ae0:	f011 ffd2 	bl	8014a88 <atanhf>
 8002ae4:	ed84 0a00 	vstr	s0, [r4]
 8002ae8:	1f3f      	subs	r7, r7, #4
 8002aea:	1f24      	subs	r4, r4, #4
 8002aec:	42b7      	cmp	r7, r6
 8002aee:	d2f5      	bcs.n	8002adc <forward_atanh+0x9c>
 8002af0:	b001      	add	sp, #4
 8002af2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002af4 <nl_func_cos_array_f32>:
 8002af4:	b570      	push	{r4, r5, r6, lr}
 8002af6:	688c      	ldr	r4, [r1, #8]
 8002af8:	6880      	ldr	r0, [r0, #8]
 8002afa:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8002afe:	1f0d      	subs	r5, r1, #4
 8002b00:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8002b04:	1f0e      	subs	r6, r1, #4
 8002b06:	42a5      	cmp	r5, r4
 8002b08:	f0c0 800a 	bcc.w	8002b20 <nl_func_cos_array_f32+0x2c>
 8002b0c:	ed95 0a00 	vldr	s0, [r5]
 8002b10:	f011 faf4 	bl	80140fc <cosf>
 8002b14:	ed86 0a00 	vstr	s0, [r6]
 8002b18:	1f2d      	subs	r5, r5, #4
 8002b1a:	1f36      	subs	r6, r6, #4
 8002b1c:	42a5      	cmp	r5, r4
 8002b1e:	d2f5      	bcs.n	8002b0c <nl_func_cos_array_f32+0x18>
 8002b20:	bd70      	pop	{r4, r5, r6, pc}
	...

08002b24 <forward_cos>:
 8002b24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b26:	b081      	sub	sp, #4
 8002b28:	6942      	ldr	r2, [r0, #20]
 8002b2a:	8811      	ldrh	r1, [r2, #0]
 8002b2c:	2900      	cmp	r1, #0
 8002b2e:	bf1a      	itte	ne
 8002b30:	6850      	ldrne	r0, [r2, #4]
 8002b32:	1d00      	addne	r0, r0, #4
 8002b34:	2004      	moveq	r0, #4
 8002b36:	f04f 0501 	mov.w	r5, #1
 8002b3a:	6800      	ldr	r0, [r0, #0]
 8002b3c:	2800      	cmp	r0, #0
 8002b3e:	bf14      	ite	ne
 8002b40:	6803      	ldrne	r3, [r0, #0]
 8002b42:	2300      	moveq	r3, #0
 8002b44:	2902      	cmp	r1, #2
 8002b46:	bfa6      	itte	ge
 8002b48:	6850      	ldrge	r0, [r2, #4]
 8002b4a:	3010      	addge	r0, #16
 8002b4c:	2004      	movlt	r0, #4
 8002b4e:	6800      	ldr	r0, [r0, #0]
 8002b50:	2800      	cmp	r0, #0
 8002b52:	bf19      	ittee	ne
 8002b54:	6800      	ldrne	r0, [r0, #0]
 8002b56:	f100 0418 	addne.w	r4, r0, #24
 8002b5a:	2100      	moveq	r1, #0
 8002b5c:	f101 0418 	addeq.w	r4, r1, #24
 8002b60:	f103 0108 	add.w	r1, r3, #8
 8002b64:	680a      	ldr	r2, [r1, #0]
 8002b66:	0a12      	lsrs	r2, r2, #8
 8002b68:	d01e      	beq.n	8002ba8 <forward_cos+0x84>
 8002b6a:	684e      	ldr	r6, [r1, #4]
 8002b6c:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002b70:	4610      	mov	r0, r2
 8002b72:	1f0f      	subs	r7, r1, #4
 8002b74:	f010 0103 	ands.w	r1, r0, #3
 8002b78:	d006      	beq.n	8002b88 <forward_cos+0x64>
 8002b7a:	1e52      	subs	r2, r2, #1
 8002b7c:	f857 c904 	ldr.w	ip, [r7], #-4
 8002b80:	1e49      	subs	r1, r1, #1
 8002b82:	fb0c f505 	mul.w	r5, ip, r5
 8002b86:	d1f8      	bne.n	8002b7a <forward_cos+0x56>
 8002b88:	0880      	lsrs	r0, r0, #2
 8002b8a:	d00d      	beq.n	8002ba8 <forward_cos+0x84>
 8002b8c:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002b90:	3910      	subs	r1, #16
 8002b92:	68ca      	ldr	r2, [r1, #12]
 8002b94:	688e      	ldr	r6, [r1, #8]
 8002b96:	684f      	ldr	r7, [r1, #4]
 8002b98:	4372      	muls	r2, r6
 8002b9a:	f851 6910 	ldr.w	r6, [r1], #-16
 8002b9e:	437a      	muls	r2, r7
 8002ba0:	4372      	muls	r2, r6
 8002ba2:	4355      	muls	r5, r2
 8002ba4:	1e40      	subs	r0, r0, #1
 8002ba6:	d1f4      	bne.n	8002b92 <forward_cos+0x6e>
 8002ba8:	6998      	ldr	r0, [r3, #24]
 8002baa:	6886      	ldr	r6, [r0, #8]
 8002bac:	6821      	ldr	r1, [r4, #0]
 8002bae:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8002bb2:	1f07      	subs	r7, r0, #4
 8002bb4:	6888      	ldr	r0, [r1, #8]
 8002bb6:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8002bba:	1f14      	subs	r4, r2, #4
 8002bbc:	42b7      	cmp	r7, r6
 8002bbe:	d309      	bcc.n	8002bd4 <forward_cos+0xb0>
 8002bc0:	ed97 0a00 	vldr	s0, [r7]
 8002bc4:	f011 fa9a 	bl	80140fc <cosf>
 8002bc8:	ed84 0a00 	vstr	s0, [r4]
 8002bcc:	1f3f      	subs	r7, r7, #4
 8002bce:	1f24      	subs	r4, r4, #4
 8002bd0:	42b7      	cmp	r7, r6
 8002bd2:	d2f5      	bcs.n	8002bc0 <forward_cos+0x9c>
 8002bd4:	b001      	add	sp, #4
 8002bd6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002bd8 <nl_func_cosh_array_f32>:
 8002bd8:	b570      	push	{r4, r5, r6, lr}
 8002bda:	688c      	ldr	r4, [r1, #8]
 8002bdc:	6880      	ldr	r0, [r0, #8]
 8002bde:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8002be2:	1f0d      	subs	r5, r1, #4
 8002be4:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8002be8:	1f0e      	subs	r6, r1, #4
 8002bea:	42a5      	cmp	r5, r4
 8002bec:	f0c0 800a 	bcc.w	8002c04 <nl_func_cosh_array_f32+0x2c>
 8002bf0:	ed95 0a00 	vldr	s0, [r5]
 8002bf4:	f011 ff78 	bl	8014ae8 <coshf>
 8002bf8:	ed86 0a00 	vstr	s0, [r6]
 8002bfc:	1f2d      	subs	r5, r5, #4
 8002bfe:	1f36      	subs	r6, r6, #4
 8002c00:	42a5      	cmp	r5, r4
 8002c02:	d2f5      	bcs.n	8002bf0 <nl_func_cosh_array_f32+0x18>
 8002c04:	bd70      	pop	{r4, r5, r6, pc}
	...

08002c08 <forward_cosh>:
 8002c08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c0a:	b081      	sub	sp, #4
 8002c0c:	6942      	ldr	r2, [r0, #20]
 8002c0e:	8811      	ldrh	r1, [r2, #0]
 8002c10:	2900      	cmp	r1, #0
 8002c12:	bf1a      	itte	ne
 8002c14:	6850      	ldrne	r0, [r2, #4]
 8002c16:	1d00      	addne	r0, r0, #4
 8002c18:	2004      	moveq	r0, #4
 8002c1a:	f04f 0501 	mov.w	r5, #1
 8002c1e:	6800      	ldr	r0, [r0, #0]
 8002c20:	2800      	cmp	r0, #0
 8002c22:	bf14      	ite	ne
 8002c24:	6803      	ldrne	r3, [r0, #0]
 8002c26:	2300      	moveq	r3, #0
 8002c28:	2902      	cmp	r1, #2
 8002c2a:	bfa6      	itte	ge
 8002c2c:	6850      	ldrge	r0, [r2, #4]
 8002c2e:	3010      	addge	r0, #16
 8002c30:	2004      	movlt	r0, #4
 8002c32:	6800      	ldr	r0, [r0, #0]
 8002c34:	2800      	cmp	r0, #0
 8002c36:	bf19      	ittee	ne
 8002c38:	6800      	ldrne	r0, [r0, #0]
 8002c3a:	f100 0418 	addne.w	r4, r0, #24
 8002c3e:	2100      	moveq	r1, #0
 8002c40:	f101 0418 	addeq.w	r4, r1, #24
 8002c44:	f103 0108 	add.w	r1, r3, #8
 8002c48:	680a      	ldr	r2, [r1, #0]
 8002c4a:	0a12      	lsrs	r2, r2, #8
 8002c4c:	d01e      	beq.n	8002c8c <forward_cosh+0x84>
 8002c4e:	684e      	ldr	r6, [r1, #4]
 8002c50:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002c54:	4610      	mov	r0, r2
 8002c56:	1f0f      	subs	r7, r1, #4
 8002c58:	f010 0103 	ands.w	r1, r0, #3
 8002c5c:	d006      	beq.n	8002c6c <forward_cosh+0x64>
 8002c5e:	1e52      	subs	r2, r2, #1
 8002c60:	f857 c904 	ldr.w	ip, [r7], #-4
 8002c64:	1e49      	subs	r1, r1, #1
 8002c66:	fb0c f505 	mul.w	r5, ip, r5
 8002c6a:	d1f8      	bne.n	8002c5e <forward_cosh+0x56>
 8002c6c:	0880      	lsrs	r0, r0, #2
 8002c6e:	d00d      	beq.n	8002c8c <forward_cosh+0x84>
 8002c70:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002c74:	3910      	subs	r1, #16
 8002c76:	68ca      	ldr	r2, [r1, #12]
 8002c78:	688e      	ldr	r6, [r1, #8]
 8002c7a:	684f      	ldr	r7, [r1, #4]
 8002c7c:	4372      	muls	r2, r6
 8002c7e:	f851 6910 	ldr.w	r6, [r1], #-16
 8002c82:	437a      	muls	r2, r7
 8002c84:	4372      	muls	r2, r6
 8002c86:	4355      	muls	r5, r2
 8002c88:	1e40      	subs	r0, r0, #1
 8002c8a:	d1f4      	bne.n	8002c76 <forward_cosh+0x6e>
 8002c8c:	6998      	ldr	r0, [r3, #24]
 8002c8e:	6886      	ldr	r6, [r0, #8]
 8002c90:	6821      	ldr	r1, [r4, #0]
 8002c92:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8002c96:	1f07      	subs	r7, r0, #4
 8002c98:	6888      	ldr	r0, [r1, #8]
 8002c9a:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8002c9e:	1f14      	subs	r4, r2, #4
 8002ca0:	42b7      	cmp	r7, r6
 8002ca2:	d309      	bcc.n	8002cb8 <forward_cosh+0xb0>
 8002ca4:	ed97 0a00 	vldr	s0, [r7]
 8002ca8:	f011 ff1e 	bl	8014ae8 <coshf>
 8002cac:	ed84 0a00 	vstr	s0, [r4]
 8002cb0:	1f3f      	subs	r7, r7, #4
 8002cb2:	1f24      	subs	r4, r4, #4
 8002cb4:	42b7      	cmp	r7, r6
 8002cb6:	d2f5      	bcs.n	8002ca4 <forward_cosh+0x9c>
 8002cb8:	b001      	add	sp, #4
 8002cba:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002cbc <nl_func_erf_array_f32>:
 8002cbc:	b570      	push	{r4, r5, r6, lr}
 8002cbe:	688c      	ldr	r4, [r1, #8]
 8002cc0:	6880      	ldr	r0, [r0, #8]
 8002cc2:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8002cc6:	1f0d      	subs	r5, r1, #4
 8002cc8:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8002ccc:	1f0e      	subs	r6, r1, #4
 8002cce:	42a5      	cmp	r5, r4
 8002cd0:	f0c0 800a 	bcc.w	8002ce8 <nl_func_erf_array_f32+0x2c>
 8002cd4:	ed95 0a00 	vldr	s0, [r5]
 8002cd8:	f011 fa54 	bl	8014184 <erff>
 8002cdc:	ed86 0a00 	vstr	s0, [r6]
 8002ce0:	1f2d      	subs	r5, r5, #4
 8002ce2:	1f36      	subs	r6, r6, #4
 8002ce4:	42a5      	cmp	r5, r4
 8002ce6:	d2f5      	bcs.n	8002cd4 <nl_func_erf_array_f32+0x18>
 8002ce8:	bd70      	pop	{r4, r5, r6, pc}
	...

08002cec <forward_erf>:
 8002cec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cee:	b081      	sub	sp, #4
 8002cf0:	6942      	ldr	r2, [r0, #20]
 8002cf2:	8811      	ldrh	r1, [r2, #0]
 8002cf4:	2900      	cmp	r1, #0
 8002cf6:	bf1a      	itte	ne
 8002cf8:	6850      	ldrne	r0, [r2, #4]
 8002cfa:	1d00      	addne	r0, r0, #4
 8002cfc:	2004      	moveq	r0, #4
 8002cfe:	f04f 0501 	mov.w	r5, #1
 8002d02:	6800      	ldr	r0, [r0, #0]
 8002d04:	2800      	cmp	r0, #0
 8002d06:	bf14      	ite	ne
 8002d08:	6803      	ldrne	r3, [r0, #0]
 8002d0a:	2300      	moveq	r3, #0
 8002d0c:	2902      	cmp	r1, #2
 8002d0e:	bfa6      	itte	ge
 8002d10:	6850      	ldrge	r0, [r2, #4]
 8002d12:	3010      	addge	r0, #16
 8002d14:	2004      	movlt	r0, #4
 8002d16:	6800      	ldr	r0, [r0, #0]
 8002d18:	2800      	cmp	r0, #0
 8002d1a:	bf19      	ittee	ne
 8002d1c:	6800      	ldrne	r0, [r0, #0]
 8002d1e:	f100 0418 	addne.w	r4, r0, #24
 8002d22:	2100      	moveq	r1, #0
 8002d24:	f101 0418 	addeq.w	r4, r1, #24
 8002d28:	f103 0108 	add.w	r1, r3, #8
 8002d2c:	680a      	ldr	r2, [r1, #0]
 8002d2e:	0a12      	lsrs	r2, r2, #8
 8002d30:	d01e      	beq.n	8002d70 <forward_erf+0x84>
 8002d32:	684e      	ldr	r6, [r1, #4]
 8002d34:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002d38:	4610      	mov	r0, r2
 8002d3a:	1f0f      	subs	r7, r1, #4
 8002d3c:	f010 0103 	ands.w	r1, r0, #3
 8002d40:	d006      	beq.n	8002d50 <forward_erf+0x64>
 8002d42:	1e52      	subs	r2, r2, #1
 8002d44:	f857 c904 	ldr.w	ip, [r7], #-4
 8002d48:	1e49      	subs	r1, r1, #1
 8002d4a:	fb0c f505 	mul.w	r5, ip, r5
 8002d4e:	d1f8      	bne.n	8002d42 <forward_erf+0x56>
 8002d50:	0880      	lsrs	r0, r0, #2
 8002d52:	d00d      	beq.n	8002d70 <forward_erf+0x84>
 8002d54:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002d58:	3910      	subs	r1, #16
 8002d5a:	68ca      	ldr	r2, [r1, #12]
 8002d5c:	688e      	ldr	r6, [r1, #8]
 8002d5e:	684f      	ldr	r7, [r1, #4]
 8002d60:	4372      	muls	r2, r6
 8002d62:	f851 6910 	ldr.w	r6, [r1], #-16
 8002d66:	437a      	muls	r2, r7
 8002d68:	4372      	muls	r2, r6
 8002d6a:	4355      	muls	r5, r2
 8002d6c:	1e40      	subs	r0, r0, #1
 8002d6e:	d1f4      	bne.n	8002d5a <forward_erf+0x6e>
 8002d70:	6998      	ldr	r0, [r3, #24]
 8002d72:	6886      	ldr	r6, [r0, #8]
 8002d74:	6821      	ldr	r1, [r4, #0]
 8002d76:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8002d7a:	1f07      	subs	r7, r0, #4
 8002d7c:	6888      	ldr	r0, [r1, #8]
 8002d7e:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8002d82:	1f14      	subs	r4, r2, #4
 8002d84:	42b7      	cmp	r7, r6
 8002d86:	d309      	bcc.n	8002d9c <forward_erf+0xb0>
 8002d88:	ed97 0a00 	vldr	s0, [r7]
 8002d8c:	f011 f9fa 	bl	8014184 <erff>
 8002d90:	ed84 0a00 	vstr	s0, [r4]
 8002d94:	1f3f      	subs	r7, r7, #4
 8002d96:	1f24      	subs	r4, r4, #4
 8002d98:	42b7      	cmp	r7, r6
 8002d9a:	d2f5      	bcs.n	8002d88 <forward_erf+0x9c>
 8002d9c:	b001      	add	sp, #4
 8002d9e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002da0 <nl_func_log_array_f32>:
 8002da0:	b570      	push	{r4, r5, r6, lr}
 8002da2:	688c      	ldr	r4, [r1, #8]
 8002da4:	6880      	ldr	r0, [r0, #8]
 8002da6:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8002daa:	1f0d      	subs	r5, r1, #4
 8002dac:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8002db0:	1f0e      	subs	r6, r1, #4
 8002db2:	42a5      	cmp	r5, r4
 8002db4:	f0c0 800a 	bcc.w	8002dcc <nl_func_log_array_f32+0x2c>
 8002db8:	ed95 0a00 	vldr	s0, [r5]
 8002dbc:	f011 ff12 	bl	8014be4 <logf>
 8002dc0:	ed86 0a00 	vstr	s0, [r6]
 8002dc4:	1f2d      	subs	r5, r5, #4
 8002dc6:	1f36      	subs	r6, r6, #4
 8002dc8:	42a5      	cmp	r5, r4
 8002dca:	d2f5      	bcs.n	8002db8 <nl_func_log_array_f32+0x18>
 8002dcc:	bd70      	pop	{r4, r5, r6, pc}
	...

08002dd0 <forward_log>:
 8002dd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002dd2:	b081      	sub	sp, #4
 8002dd4:	6942      	ldr	r2, [r0, #20]
 8002dd6:	8811      	ldrh	r1, [r2, #0]
 8002dd8:	2900      	cmp	r1, #0
 8002dda:	bf1a      	itte	ne
 8002ddc:	6850      	ldrne	r0, [r2, #4]
 8002dde:	1d00      	addne	r0, r0, #4
 8002de0:	2004      	moveq	r0, #4
 8002de2:	f04f 0501 	mov.w	r5, #1
 8002de6:	6800      	ldr	r0, [r0, #0]
 8002de8:	2800      	cmp	r0, #0
 8002dea:	bf14      	ite	ne
 8002dec:	6803      	ldrne	r3, [r0, #0]
 8002dee:	2300      	moveq	r3, #0
 8002df0:	2902      	cmp	r1, #2
 8002df2:	bfa6      	itte	ge
 8002df4:	6850      	ldrge	r0, [r2, #4]
 8002df6:	3010      	addge	r0, #16
 8002df8:	2004      	movlt	r0, #4
 8002dfa:	6800      	ldr	r0, [r0, #0]
 8002dfc:	2800      	cmp	r0, #0
 8002dfe:	bf19      	ittee	ne
 8002e00:	6800      	ldrne	r0, [r0, #0]
 8002e02:	f100 0418 	addne.w	r4, r0, #24
 8002e06:	2100      	moveq	r1, #0
 8002e08:	f101 0418 	addeq.w	r4, r1, #24
 8002e0c:	f103 0108 	add.w	r1, r3, #8
 8002e10:	680a      	ldr	r2, [r1, #0]
 8002e12:	0a12      	lsrs	r2, r2, #8
 8002e14:	d01e      	beq.n	8002e54 <forward_log+0x84>
 8002e16:	684e      	ldr	r6, [r1, #4]
 8002e18:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002e1c:	4610      	mov	r0, r2
 8002e1e:	1f0f      	subs	r7, r1, #4
 8002e20:	f010 0103 	ands.w	r1, r0, #3
 8002e24:	d006      	beq.n	8002e34 <forward_log+0x64>
 8002e26:	1e52      	subs	r2, r2, #1
 8002e28:	f857 c904 	ldr.w	ip, [r7], #-4
 8002e2c:	1e49      	subs	r1, r1, #1
 8002e2e:	fb0c f505 	mul.w	r5, ip, r5
 8002e32:	d1f8      	bne.n	8002e26 <forward_log+0x56>
 8002e34:	0880      	lsrs	r0, r0, #2
 8002e36:	d00d      	beq.n	8002e54 <forward_log+0x84>
 8002e38:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002e3c:	3910      	subs	r1, #16
 8002e3e:	68ca      	ldr	r2, [r1, #12]
 8002e40:	688e      	ldr	r6, [r1, #8]
 8002e42:	684f      	ldr	r7, [r1, #4]
 8002e44:	4372      	muls	r2, r6
 8002e46:	f851 6910 	ldr.w	r6, [r1], #-16
 8002e4a:	437a      	muls	r2, r7
 8002e4c:	4372      	muls	r2, r6
 8002e4e:	4355      	muls	r5, r2
 8002e50:	1e40      	subs	r0, r0, #1
 8002e52:	d1f4      	bne.n	8002e3e <forward_log+0x6e>
 8002e54:	6998      	ldr	r0, [r3, #24]
 8002e56:	6886      	ldr	r6, [r0, #8]
 8002e58:	6821      	ldr	r1, [r4, #0]
 8002e5a:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8002e5e:	1f07      	subs	r7, r0, #4
 8002e60:	6888      	ldr	r0, [r1, #8]
 8002e62:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8002e66:	1f14      	subs	r4, r2, #4
 8002e68:	42b7      	cmp	r7, r6
 8002e6a:	d309      	bcc.n	8002e80 <forward_log+0xb0>
 8002e6c:	ed97 0a00 	vldr	s0, [r7]
 8002e70:	f011 feb8 	bl	8014be4 <logf>
 8002e74:	ed84 0a00 	vstr	s0, [r4]
 8002e78:	1f3f      	subs	r7, r7, #4
 8002e7a:	1f24      	subs	r4, r4, #4
 8002e7c:	42b7      	cmp	r7, r6
 8002e7e:	d2f5      	bcs.n	8002e6c <forward_log+0x9c>
 8002e80:	b001      	add	sp, #4
 8002e82:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002e84 <nl_func_rsqrt_array_f32>:
 8002e84:	b570      	push	{r4, r5, r6, lr}
 8002e86:	460c      	mov	r4, r1
 8002e88:	6880      	ldr	r0, [r0, #8]
 8002e8a:	68a1      	ldr	r1, [r4, #8]
 8002e8c:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8002e90:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8002e94:	1f1d      	subs	r5, r3, #4
 8002e96:	1f16      	subs	r6, r2, #4
 8002e98:	428d      	cmp	r5, r1
 8002e9a:	d30e      	bcc.n	8002eba <nl_func_rsqrt_array_f32+0x36>
 8002e9c:	ed95 0a00 	vldr	s0, [r5]
 8002ea0:	f003 f930 	bl	8006104 <ai_math_sqrt>
 8002ea4:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8002ea8:	eec0 0a80 	vdiv.f32	s1, s1, s0
 8002eac:	edc6 0a00 	vstr	s1, [r6]
 8002eb0:	1f2d      	subs	r5, r5, #4
 8002eb2:	68a0      	ldr	r0, [r4, #8]
 8002eb4:	1f36      	subs	r6, r6, #4
 8002eb6:	4285      	cmp	r5, r0
 8002eb8:	d2f0      	bcs.n	8002e9c <nl_func_rsqrt_array_f32+0x18>
 8002eba:	bd70      	pop	{r4, r5, r6, pc}

08002ebc <forward_rsqrt>:
 8002ebc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ebe:	b081      	sub	sp, #4
 8002ec0:	6942      	ldr	r2, [r0, #20]
 8002ec2:	8811      	ldrh	r1, [r2, #0]
 8002ec4:	2900      	cmp	r1, #0
 8002ec6:	bf1a      	itte	ne
 8002ec8:	6850      	ldrne	r0, [r2, #4]
 8002eca:	1d00      	addne	r0, r0, #4
 8002ecc:	2004      	moveq	r0, #4
 8002ece:	f04f 0501 	mov.w	r5, #1
 8002ed2:	6800      	ldr	r0, [r0, #0]
 8002ed4:	2800      	cmp	r0, #0
 8002ed6:	bf14      	ite	ne
 8002ed8:	6803      	ldrne	r3, [r0, #0]
 8002eda:	2300      	moveq	r3, #0
 8002edc:	2902      	cmp	r1, #2
 8002ede:	bfa6      	itte	ge
 8002ee0:	6850      	ldrge	r0, [r2, #4]
 8002ee2:	3010      	addge	r0, #16
 8002ee4:	2004      	movlt	r0, #4
 8002ee6:	6800      	ldr	r0, [r0, #0]
 8002ee8:	2800      	cmp	r0, #0
 8002eea:	bf19      	ittee	ne
 8002eec:	6800      	ldrne	r0, [r0, #0]
 8002eee:	f100 0418 	addne.w	r4, r0, #24
 8002ef2:	2100      	moveq	r1, #0
 8002ef4:	f101 0418 	addeq.w	r4, r1, #24
 8002ef8:	f103 0108 	add.w	r1, r3, #8
 8002efc:	680a      	ldr	r2, [r1, #0]
 8002efe:	0a12      	lsrs	r2, r2, #8
 8002f00:	d01e      	beq.n	8002f40 <forward_rsqrt+0x84>
 8002f02:	684e      	ldr	r6, [r1, #4]
 8002f04:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002f08:	4610      	mov	r0, r2
 8002f0a:	1f0f      	subs	r7, r1, #4
 8002f0c:	f010 0103 	ands.w	r1, r0, #3
 8002f10:	d006      	beq.n	8002f20 <forward_rsqrt+0x64>
 8002f12:	1e52      	subs	r2, r2, #1
 8002f14:	f857 c904 	ldr.w	ip, [r7], #-4
 8002f18:	1e49      	subs	r1, r1, #1
 8002f1a:	fb0c f505 	mul.w	r5, ip, r5
 8002f1e:	d1f8      	bne.n	8002f12 <forward_rsqrt+0x56>
 8002f20:	0880      	lsrs	r0, r0, #2
 8002f22:	d00d      	beq.n	8002f40 <forward_rsqrt+0x84>
 8002f24:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002f28:	3910      	subs	r1, #16
 8002f2a:	68ca      	ldr	r2, [r1, #12]
 8002f2c:	688e      	ldr	r6, [r1, #8]
 8002f2e:	684f      	ldr	r7, [r1, #4]
 8002f30:	4372      	muls	r2, r6
 8002f32:	f851 6910 	ldr.w	r6, [r1], #-16
 8002f36:	437a      	muls	r2, r7
 8002f38:	4372      	muls	r2, r6
 8002f3a:	4355      	muls	r5, r2
 8002f3c:	1e40      	subs	r0, r0, #1
 8002f3e:	d1f4      	bne.n	8002f2a <forward_rsqrt+0x6e>
 8002f40:	699e      	ldr	r6, [r3, #24]
 8002f42:	68b0      	ldr	r0, [r6, #8]
 8002f44:	6822      	ldr	r2, [r4, #0]
 8002f46:	eb00 0185 	add.w	r1, r0, r5, lsl #2
 8002f4a:	1f0f      	subs	r7, r1, #4
 8002f4c:	6891      	ldr	r1, [r2, #8]
 8002f4e:	eb01 0385 	add.w	r3, r1, r5, lsl #2
 8002f52:	1f1c      	subs	r4, r3, #4
 8002f54:	4287      	cmp	r7, r0
 8002f56:	d30e      	bcc.n	8002f76 <forward_rsqrt+0xba>
 8002f58:	ed97 0a00 	vldr	s0, [r7]
 8002f5c:	f003 f8d2 	bl	8006104 <ai_math_sqrt>
 8002f60:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8002f64:	eec0 0a80 	vdiv.f32	s1, s1, s0
 8002f68:	edc4 0a00 	vstr	s1, [r4]
 8002f6c:	1f3f      	subs	r7, r7, #4
 8002f6e:	68b0      	ldr	r0, [r6, #8]
 8002f70:	1f24      	subs	r4, r4, #4
 8002f72:	4287      	cmp	r7, r0
 8002f74:	d2f0      	bcs.n	8002f58 <forward_rsqrt+0x9c>
 8002f76:	b001      	add	sp, #4
 8002f78:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002f7c <nl_func_sin_array_f32>:
 8002f7c:	b570      	push	{r4, r5, r6, lr}
 8002f7e:	688c      	ldr	r4, [r1, #8]
 8002f80:	6880      	ldr	r0, [r0, #8]
 8002f82:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8002f86:	1f0d      	subs	r5, r1, #4
 8002f88:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8002f8c:	1f0e      	subs	r6, r1, #4
 8002f8e:	42a5      	cmp	r5, r4
 8002f90:	f0c0 800a 	bcc.w	8002fa8 <nl_func_sin_array_f32+0x2c>
 8002f94:	ed95 0a00 	vldr	s0, [r5]
 8002f98:	f011 fc3a 	bl	8014810 <sinf>
 8002f9c:	ed86 0a00 	vstr	s0, [r6]
 8002fa0:	1f2d      	subs	r5, r5, #4
 8002fa2:	1f36      	subs	r6, r6, #4
 8002fa4:	42a5      	cmp	r5, r4
 8002fa6:	d2f5      	bcs.n	8002f94 <nl_func_sin_array_f32+0x18>
 8002fa8:	bd70      	pop	{r4, r5, r6, pc}
	...

08002fac <forward_sin>:
 8002fac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fae:	b081      	sub	sp, #4
 8002fb0:	6942      	ldr	r2, [r0, #20]
 8002fb2:	8811      	ldrh	r1, [r2, #0]
 8002fb4:	2900      	cmp	r1, #0
 8002fb6:	bf1a      	itte	ne
 8002fb8:	6850      	ldrne	r0, [r2, #4]
 8002fba:	1d00      	addne	r0, r0, #4
 8002fbc:	2004      	moveq	r0, #4
 8002fbe:	f04f 0501 	mov.w	r5, #1
 8002fc2:	6800      	ldr	r0, [r0, #0]
 8002fc4:	2800      	cmp	r0, #0
 8002fc6:	bf14      	ite	ne
 8002fc8:	6803      	ldrne	r3, [r0, #0]
 8002fca:	2300      	moveq	r3, #0
 8002fcc:	2902      	cmp	r1, #2
 8002fce:	bfa6      	itte	ge
 8002fd0:	6850      	ldrge	r0, [r2, #4]
 8002fd2:	3010      	addge	r0, #16
 8002fd4:	2004      	movlt	r0, #4
 8002fd6:	6800      	ldr	r0, [r0, #0]
 8002fd8:	2800      	cmp	r0, #0
 8002fda:	bf19      	ittee	ne
 8002fdc:	6800      	ldrne	r0, [r0, #0]
 8002fde:	f100 0418 	addne.w	r4, r0, #24
 8002fe2:	2100      	moveq	r1, #0
 8002fe4:	f101 0418 	addeq.w	r4, r1, #24
 8002fe8:	f103 0108 	add.w	r1, r3, #8
 8002fec:	680a      	ldr	r2, [r1, #0]
 8002fee:	0a12      	lsrs	r2, r2, #8
 8002ff0:	d01e      	beq.n	8003030 <forward_sin+0x84>
 8002ff2:	684e      	ldr	r6, [r1, #4]
 8002ff4:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002ff8:	4610      	mov	r0, r2
 8002ffa:	1f0f      	subs	r7, r1, #4
 8002ffc:	f010 0103 	ands.w	r1, r0, #3
 8003000:	d006      	beq.n	8003010 <forward_sin+0x64>
 8003002:	1e52      	subs	r2, r2, #1
 8003004:	f857 c904 	ldr.w	ip, [r7], #-4
 8003008:	1e49      	subs	r1, r1, #1
 800300a:	fb0c f505 	mul.w	r5, ip, r5
 800300e:	d1f8      	bne.n	8003002 <forward_sin+0x56>
 8003010:	0880      	lsrs	r0, r0, #2
 8003012:	d00d      	beq.n	8003030 <forward_sin+0x84>
 8003014:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003018:	3910      	subs	r1, #16
 800301a:	68ca      	ldr	r2, [r1, #12]
 800301c:	688e      	ldr	r6, [r1, #8]
 800301e:	684f      	ldr	r7, [r1, #4]
 8003020:	4372      	muls	r2, r6
 8003022:	f851 6910 	ldr.w	r6, [r1], #-16
 8003026:	437a      	muls	r2, r7
 8003028:	4372      	muls	r2, r6
 800302a:	4355      	muls	r5, r2
 800302c:	1e40      	subs	r0, r0, #1
 800302e:	d1f4      	bne.n	800301a <forward_sin+0x6e>
 8003030:	6998      	ldr	r0, [r3, #24]
 8003032:	6886      	ldr	r6, [r0, #8]
 8003034:	6821      	ldr	r1, [r4, #0]
 8003036:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 800303a:	1f07      	subs	r7, r0, #4
 800303c:	6888      	ldr	r0, [r1, #8]
 800303e:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8003042:	1f14      	subs	r4, r2, #4
 8003044:	42b7      	cmp	r7, r6
 8003046:	d309      	bcc.n	800305c <forward_sin+0xb0>
 8003048:	ed97 0a00 	vldr	s0, [r7]
 800304c:	f011 fbe0 	bl	8014810 <sinf>
 8003050:	ed84 0a00 	vstr	s0, [r4]
 8003054:	1f3f      	subs	r7, r7, #4
 8003056:	1f24      	subs	r4, r4, #4
 8003058:	42b7      	cmp	r7, r6
 800305a:	d2f5      	bcs.n	8003048 <forward_sin+0x9c>
 800305c:	b001      	add	sp, #4
 800305e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003060 <nl_func_sinh_array_f32>:
 8003060:	b570      	push	{r4, r5, r6, lr}
 8003062:	688c      	ldr	r4, [r1, #8]
 8003064:	6880      	ldr	r0, [r0, #8]
 8003066:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 800306a:	1f0d      	subs	r5, r1, #4
 800306c:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8003070:	1f0e      	subs	r6, r1, #4
 8003072:	42a5      	cmp	r5, r4
 8003074:	f0c0 800a 	bcc.w	800308c <nl_func_sinh_array_f32+0x2c>
 8003078:	ed95 0a00 	vldr	s0, [r5]
 800307c:	f011 fe38 	bl	8014cf0 <sinhf>
 8003080:	ed86 0a00 	vstr	s0, [r6]
 8003084:	1f2d      	subs	r5, r5, #4
 8003086:	1f36      	subs	r6, r6, #4
 8003088:	42a5      	cmp	r5, r4
 800308a:	d2f5      	bcs.n	8003078 <nl_func_sinh_array_f32+0x18>
 800308c:	bd70      	pop	{r4, r5, r6, pc}
	...

08003090 <forward_sinh>:
 8003090:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003092:	b081      	sub	sp, #4
 8003094:	6942      	ldr	r2, [r0, #20]
 8003096:	8811      	ldrh	r1, [r2, #0]
 8003098:	2900      	cmp	r1, #0
 800309a:	bf1a      	itte	ne
 800309c:	6850      	ldrne	r0, [r2, #4]
 800309e:	1d00      	addne	r0, r0, #4
 80030a0:	2004      	moveq	r0, #4
 80030a2:	f04f 0501 	mov.w	r5, #1
 80030a6:	6800      	ldr	r0, [r0, #0]
 80030a8:	2800      	cmp	r0, #0
 80030aa:	bf14      	ite	ne
 80030ac:	6803      	ldrne	r3, [r0, #0]
 80030ae:	2300      	moveq	r3, #0
 80030b0:	2902      	cmp	r1, #2
 80030b2:	bfa6      	itte	ge
 80030b4:	6850      	ldrge	r0, [r2, #4]
 80030b6:	3010      	addge	r0, #16
 80030b8:	2004      	movlt	r0, #4
 80030ba:	6800      	ldr	r0, [r0, #0]
 80030bc:	2800      	cmp	r0, #0
 80030be:	bf19      	ittee	ne
 80030c0:	6800      	ldrne	r0, [r0, #0]
 80030c2:	f100 0418 	addne.w	r4, r0, #24
 80030c6:	2100      	moveq	r1, #0
 80030c8:	f101 0418 	addeq.w	r4, r1, #24
 80030cc:	f103 0108 	add.w	r1, r3, #8
 80030d0:	680a      	ldr	r2, [r1, #0]
 80030d2:	0a12      	lsrs	r2, r2, #8
 80030d4:	d01e      	beq.n	8003114 <forward_sinh+0x84>
 80030d6:	684e      	ldr	r6, [r1, #4]
 80030d8:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80030dc:	4610      	mov	r0, r2
 80030de:	1f0f      	subs	r7, r1, #4
 80030e0:	f010 0103 	ands.w	r1, r0, #3
 80030e4:	d006      	beq.n	80030f4 <forward_sinh+0x64>
 80030e6:	1e52      	subs	r2, r2, #1
 80030e8:	f857 c904 	ldr.w	ip, [r7], #-4
 80030ec:	1e49      	subs	r1, r1, #1
 80030ee:	fb0c f505 	mul.w	r5, ip, r5
 80030f2:	d1f8      	bne.n	80030e6 <forward_sinh+0x56>
 80030f4:	0880      	lsrs	r0, r0, #2
 80030f6:	d00d      	beq.n	8003114 <forward_sinh+0x84>
 80030f8:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80030fc:	3910      	subs	r1, #16
 80030fe:	68ca      	ldr	r2, [r1, #12]
 8003100:	688e      	ldr	r6, [r1, #8]
 8003102:	684f      	ldr	r7, [r1, #4]
 8003104:	4372      	muls	r2, r6
 8003106:	f851 6910 	ldr.w	r6, [r1], #-16
 800310a:	437a      	muls	r2, r7
 800310c:	4372      	muls	r2, r6
 800310e:	4355      	muls	r5, r2
 8003110:	1e40      	subs	r0, r0, #1
 8003112:	d1f4      	bne.n	80030fe <forward_sinh+0x6e>
 8003114:	6998      	ldr	r0, [r3, #24]
 8003116:	6886      	ldr	r6, [r0, #8]
 8003118:	6821      	ldr	r1, [r4, #0]
 800311a:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 800311e:	1f07      	subs	r7, r0, #4
 8003120:	6888      	ldr	r0, [r1, #8]
 8003122:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8003126:	1f14      	subs	r4, r2, #4
 8003128:	42b7      	cmp	r7, r6
 800312a:	d309      	bcc.n	8003140 <forward_sinh+0xb0>
 800312c:	ed97 0a00 	vldr	s0, [r7]
 8003130:	f011 fdde 	bl	8014cf0 <sinhf>
 8003134:	ed84 0a00 	vstr	s0, [r4]
 8003138:	1f3f      	subs	r7, r7, #4
 800313a:	1f24      	subs	r4, r4, #4
 800313c:	42b7      	cmp	r7, r6
 800313e:	d2f5      	bcs.n	800312c <forward_sinh+0x9c>
 8003140:	b001      	add	sp, #4
 8003142:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003144 <nl_func_tan_array_f32>:
 8003144:	b570      	push	{r4, r5, r6, lr}
 8003146:	688c      	ldr	r4, [r1, #8]
 8003148:	6880      	ldr	r0, [r0, #8]
 800314a:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 800314e:	1f0d      	subs	r5, r1, #4
 8003150:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8003154:	1f0e      	subs	r6, r1, #4
 8003156:	42a5      	cmp	r5, r4
 8003158:	f0c0 800a 	bcc.w	8003170 <nl_func_tan_array_f32+0x2c>
 800315c:	ed95 0a00 	vldr	s0, [r5]
 8003160:	f011 fb9c 	bl	801489c <tanf>
 8003164:	ed86 0a00 	vstr	s0, [r6]
 8003168:	1f2d      	subs	r5, r5, #4
 800316a:	1f36      	subs	r6, r6, #4
 800316c:	42a5      	cmp	r5, r4
 800316e:	d2f5      	bcs.n	800315c <nl_func_tan_array_f32+0x18>
 8003170:	bd70      	pop	{r4, r5, r6, pc}
	...

08003174 <forward_tan>:
 8003174:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003176:	b081      	sub	sp, #4
 8003178:	6942      	ldr	r2, [r0, #20]
 800317a:	8811      	ldrh	r1, [r2, #0]
 800317c:	2900      	cmp	r1, #0
 800317e:	bf1a      	itte	ne
 8003180:	6850      	ldrne	r0, [r2, #4]
 8003182:	1d00      	addne	r0, r0, #4
 8003184:	2004      	moveq	r0, #4
 8003186:	f04f 0501 	mov.w	r5, #1
 800318a:	6800      	ldr	r0, [r0, #0]
 800318c:	2800      	cmp	r0, #0
 800318e:	bf14      	ite	ne
 8003190:	6803      	ldrne	r3, [r0, #0]
 8003192:	2300      	moveq	r3, #0
 8003194:	2902      	cmp	r1, #2
 8003196:	bfa6      	itte	ge
 8003198:	6850      	ldrge	r0, [r2, #4]
 800319a:	3010      	addge	r0, #16
 800319c:	2004      	movlt	r0, #4
 800319e:	6800      	ldr	r0, [r0, #0]
 80031a0:	2800      	cmp	r0, #0
 80031a2:	bf19      	ittee	ne
 80031a4:	6800      	ldrne	r0, [r0, #0]
 80031a6:	f100 0418 	addne.w	r4, r0, #24
 80031aa:	2100      	moveq	r1, #0
 80031ac:	f101 0418 	addeq.w	r4, r1, #24
 80031b0:	f103 0108 	add.w	r1, r3, #8
 80031b4:	680a      	ldr	r2, [r1, #0]
 80031b6:	0a12      	lsrs	r2, r2, #8
 80031b8:	d01e      	beq.n	80031f8 <forward_tan+0x84>
 80031ba:	684e      	ldr	r6, [r1, #4]
 80031bc:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80031c0:	4610      	mov	r0, r2
 80031c2:	1f0f      	subs	r7, r1, #4
 80031c4:	f010 0103 	ands.w	r1, r0, #3
 80031c8:	d006      	beq.n	80031d8 <forward_tan+0x64>
 80031ca:	1e52      	subs	r2, r2, #1
 80031cc:	f857 c904 	ldr.w	ip, [r7], #-4
 80031d0:	1e49      	subs	r1, r1, #1
 80031d2:	fb0c f505 	mul.w	r5, ip, r5
 80031d6:	d1f8      	bne.n	80031ca <forward_tan+0x56>
 80031d8:	0880      	lsrs	r0, r0, #2
 80031da:	d00d      	beq.n	80031f8 <forward_tan+0x84>
 80031dc:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80031e0:	3910      	subs	r1, #16
 80031e2:	68ca      	ldr	r2, [r1, #12]
 80031e4:	688e      	ldr	r6, [r1, #8]
 80031e6:	684f      	ldr	r7, [r1, #4]
 80031e8:	4372      	muls	r2, r6
 80031ea:	f851 6910 	ldr.w	r6, [r1], #-16
 80031ee:	437a      	muls	r2, r7
 80031f0:	4372      	muls	r2, r6
 80031f2:	4355      	muls	r5, r2
 80031f4:	1e40      	subs	r0, r0, #1
 80031f6:	d1f4      	bne.n	80031e2 <forward_tan+0x6e>
 80031f8:	6998      	ldr	r0, [r3, #24]
 80031fa:	6886      	ldr	r6, [r0, #8]
 80031fc:	6821      	ldr	r1, [r4, #0]
 80031fe:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8003202:	1f07      	subs	r7, r0, #4
 8003204:	6888      	ldr	r0, [r1, #8]
 8003206:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 800320a:	1f14      	subs	r4, r2, #4
 800320c:	42b7      	cmp	r7, r6
 800320e:	d309      	bcc.n	8003224 <forward_tan+0xb0>
 8003210:	ed97 0a00 	vldr	s0, [r7]
 8003214:	f011 fb42 	bl	801489c <tanf>
 8003218:	ed84 0a00 	vstr	s0, [r4]
 800321c:	1f3f      	subs	r7, r7, #4
 800321e:	1f24      	subs	r4, r4, #4
 8003220:	42b7      	cmp	r7, r6
 8003222:	d2f5      	bcs.n	8003210 <forward_tan+0x9c>
 8003224:	b001      	add	sp, #4
 8003226:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003228 <nl_func_abs_array_f32>:
 8003228:	6889      	ldr	r1, [r1, #8]
 800322a:	6880      	ldr	r0, [r0, #8]
 800322c:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8003230:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8003234:	1f1b      	subs	r3, r3, #4
 8003236:	1f10      	subs	r0, r2, #4
 8003238:	428b      	cmp	r3, r1
 800323a:	d307      	bcc.n	800324c <nl_func_abs_array_f32+0x24>
 800323c:	f853 c904 	ldr.w	ip, [r3], #-4
 8003240:	f02c 4200 	bic.w	r2, ip, #2147483648	; 0x80000000
 8003244:	428b      	cmp	r3, r1
 8003246:	f840 2904 	str.w	r2, [r0], #-4
 800324a:	d2f7      	bcs.n	800323c <nl_func_abs_array_f32+0x14>
 800324c:	4770      	bx	lr
	...

08003250 <forward_abs>:
 8003250:	b4f0      	push	{r4, r5, r6, r7}
 8003252:	6942      	ldr	r2, [r0, #20]
 8003254:	8811      	ldrh	r1, [r2, #0]
 8003256:	2900      	cmp	r1, #0
 8003258:	bf1a      	itte	ne
 800325a:	6850      	ldrne	r0, [r2, #4]
 800325c:	1d00      	addne	r0, r0, #4
 800325e:	2004      	moveq	r0, #4
 8003260:	f04f 0501 	mov.w	r5, #1
 8003264:	6800      	ldr	r0, [r0, #0]
 8003266:	2800      	cmp	r0, #0
 8003268:	bf14      	ite	ne
 800326a:	6803      	ldrne	r3, [r0, #0]
 800326c:	2300      	moveq	r3, #0
 800326e:	2902      	cmp	r1, #2
 8003270:	bfa6      	itte	ge
 8003272:	6850      	ldrge	r0, [r2, #4]
 8003274:	3010      	addge	r0, #16
 8003276:	2004      	movlt	r0, #4
 8003278:	6800      	ldr	r0, [r0, #0]
 800327a:	2800      	cmp	r0, #0
 800327c:	bf19      	ittee	ne
 800327e:	6800      	ldrne	r0, [r0, #0]
 8003280:	f100 0418 	addne.w	r4, r0, #24
 8003284:	2100      	moveq	r1, #0
 8003286:	f101 0418 	addeq.w	r4, r1, #24
 800328a:	f103 0108 	add.w	r1, r3, #8
 800328e:	680a      	ldr	r2, [r1, #0]
 8003290:	0a12      	lsrs	r2, r2, #8
 8003292:	d01e      	beq.n	80032d2 <forward_abs+0x82>
 8003294:	684e      	ldr	r6, [r1, #4]
 8003296:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 800329a:	4610      	mov	r0, r2
 800329c:	1f0f      	subs	r7, r1, #4
 800329e:	f010 0103 	ands.w	r1, r0, #3
 80032a2:	d006      	beq.n	80032b2 <forward_abs+0x62>
 80032a4:	1e52      	subs	r2, r2, #1
 80032a6:	f857 c904 	ldr.w	ip, [r7], #-4
 80032aa:	1e49      	subs	r1, r1, #1
 80032ac:	fb0c f505 	mul.w	r5, ip, r5
 80032b0:	d1f8      	bne.n	80032a4 <forward_abs+0x54>
 80032b2:	0880      	lsrs	r0, r0, #2
 80032b4:	d00d      	beq.n	80032d2 <forward_abs+0x82>
 80032b6:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80032ba:	3910      	subs	r1, #16
 80032bc:	68ca      	ldr	r2, [r1, #12]
 80032be:	688e      	ldr	r6, [r1, #8]
 80032c0:	684f      	ldr	r7, [r1, #4]
 80032c2:	4372      	muls	r2, r6
 80032c4:	f851 6910 	ldr.w	r6, [r1], #-16
 80032c8:	437a      	muls	r2, r7
 80032ca:	4372      	muls	r2, r6
 80032cc:	4355      	muls	r5, r2
 80032ce:	1e40      	subs	r0, r0, #1
 80032d0:	d1f4      	bne.n	80032bc <forward_abs+0x6c>
 80032d2:	6998      	ldr	r0, [r3, #24]
 80032d4:	6822      	ldr	r2, [r4, #0]
 80032d6:	6880      	ldr	r0, [r0, #8]
 80032d8:	6893      	ldr	r3, [r2, #8]
 80032da:	eb00 0185 	add.w	r1, r0, r5, lsl #2
 80032de:	eb03 0485 	add.w	r4, r3, r5, lsl #2
 80032e2:	1f09      	subs	r1, r1, #4
 80032e4:	1f22      	subs	r2, r4, #4
 80032e6:	4281      	cmp	r1, r0
 80032e8:	f0c0 8008 	bcc.w	80032fc <forward_abs+0xac>
 80032ec:	f851 3904 	ldr.w	r3, [r1], #-4
 80032f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80032f4:	4281      	cmp	r1, r0
 80032f6:	f842 3904 	str.w	r3, [r2], #-4
 80032fa:	d2f7      	bcs.n	80032ec <forward_abs+0x9c>
 80032fc:	bcf0      	pop	{r4, r5, r6, r7}
 80032fe:	4770      	bx	lr

08003300 <nl_func_ceil_array_f32>:
 8003300:	b570      	push	{r4, r5, r6, lr}
 8003302:	688c      	ldr	r4, [r1, #8]
 8003304:	6880      	ldr	r0, [r0, #8]
 8003306:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 800330a:	1f0d      	subs	r5, r1, #4
 800330c:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8003310:	1f0e      	subs	r6, r1, #4
 8003312:	42a5      	cmp	r5, r4
 8003314:	f0c0 800a 	bcc.w	800332c <nl_func_ceil_array_f32+0x2c>
 8003318:	ed95 0a00 	vldr	s0, [r5]
 800331c:	f010 feac 	bl	8014078 <ceilf>
 8003320:	ed86 0a00 	vstr	s0, [r6]
 8003324:	1f2d      	subs	r5, r5, #4
 8003326:	1f36      	subs	r6, r6, #4
 8003328:	42a5      	cmp	r5, r4
 800332a:	d2f5      	bcs.n	8003318 <nl_func_ceil_array_f32+0x18>
 800332c:	bd70      	pop	{r4, r5, r6, pc}
	...

08003330 <forward_ceil>:
 8003330:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003332:	b081      	sub	sp, #4
 8003334:	6942      	ldr	r2, [r0, #20]
 8003336:	8811      	ldrh	r1, [r2, #0]
 8003338:	2900      	cmp	r1, #0
 800333a:	bf1a      	itte	ne
 800333c:	6850      	ldrne	r0, [r2, #4]
 800333e:	1d00      	addne	r0, r0, #4
 8003340:	2004      	moveq	r0, #4
 8003342:	f04f 0501 	mov.w	r5, #1
 8003346:	6800      	ldr	r0, [r0, #0]
 8003348:	2800      	cmp	r0, #0
 800334a:	bf14      	ite	ne
 800334c:	6803      	ldrne	r3, [r0, #0]
 800334e:	2300      	moveq	r3, #0
 8003350:	2902      	cmp	r1, #2
 8003352:	bfa6      	itte	ge
 8003354:	6850      	ldrge	r0, [r2, #4]
 8003356:	3010      	addge	r0, #16
 8003358:	2004      	movlt	r0, #4
 800335a:	6800      	ldr	r0, [r0, #0]
 800335c:	2800      	cmp	r0, #0
 800335e:	bf19      	ittee	ne
 8003360:	6800      	ldrne	r0, [r0, #0]
 8003362:	f100 0418 	addne.w	r4, r0, #24
 8003366:	2100      	moveq	r1, #0
 8003368:	f101 0418 	addeq.w	r4, r1, #24
 800336c:	f103 0108 	add.w	r1, r3, #8
 8003370:	680a      	ldr	r2, [r1, #0]
 8003372:	0a12      	lsrs	r2, r2, #8
 8003374:	d01e      	beq.n	80033b4 <forward_ceil+0x84>
 8003376:	684e      	ldr	r6, [r1, #4]
 8003378:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 800337c:	4610      	mov	r0, r2
 800337e:	1f0f      	subs	r7, r1, #4
 8003380:	f010 0103 	ands.w	r1, r0, #3
 8003384:	d006      	beq.n	8003394 <forward_ceil+0x64>
 8003386:	1e52      	subs	r2, r2, #1
 8003388:	f857 c904 	ldr.w	ip, [r7], #-4
 800338c:	1e49      	subs	r1, r1, #1
 800338e:	fb0c f505 	mul.w	r5, ip, r5
 8003392:	d1f8      	bne.n	8003386 <forward_ceil+0x56>
 8003394:	0880      	lsrs	r0, r0, #2
 8003396:	d00d      	beq.n	80033b4 <forward_ceil+0x84>
 8003398:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 800339c:	3910      	subs	r1, #16
 800339e:	68ca      	ldr	r2, [r1, #12]
 80033a0:	688e      	ldr	r6, [r1, #8]
 80033a2:	684f      	ldr	r7, [r1, #4]
 80033a4:	4372      	muls	r2, r6
 80033a6:	f851 6910 	ldr.w	r6, [r1], #-16
 80033aa:	437a      	muls	r2, r7
 80033ac:	4372      	muls	r2, r6
 80033ae:	4355      	muls	r5, r2
 80033b0:	1e40      	subs	r0, r0, #1
 80033b2:	d1f4      	bne.n	800339e <forward_ceil+0x6e>
 80033b4:	6998      	ldr	r0, [r3, #24]
 80033b6:	6886      	ldr	r6, [r0, #8]
 80033b8:	6821      	ldr	r1, [r4, #0]
 80033ba:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 80033be:	1f07      	subs	r7, r0, #4
 80033c0:	6888      	ldr	r0, [r1, #8]
 80033c2:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 80033c6:	1f14      	subs	r4, r2, #4
 80033c8:	42b7      	cmp	r7, r6
 80033ca:	d309      	bcc.n	80033e0 <forward_ceil+0xb0>
 80033cc:	ed97 0a00 	vldr	s0, [r7]
 80033d0:	f010 fe52 	bl	8014078 <ceilf>
 80033d4:	ed84 0a00 	vstr	s0, [r4]
 80033d8:	1f3f      	subs	r7, r7, #4
 80033da:	1f24      	subs	r4, r4, #4
 80033dc:	42b7      	cmp	r7, r6
 80033de:	d2f5      	bcs.n	80033cc <forward_ceil+0x9c>
 80033e0:	b001      	add	sp, #4
 80033e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080033e4 <nl_func_floor_array_f32>:
 80033e4:	b570      	push	{r4, r5, r6, lr}
 80033e6:	688c      	ldr	r4, [r1, #8]
 80033e8:	6880      	ldr	r0, [r0, #8]
 80033ea:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 80033ee:	1f0d      	subs	r5, r1, #4
 80033f0:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 80033f4:	1f0e      	subs	r6, r1, #4
 80033f6:	42a5      	cmp	r5, r4
 80033f8:	f0c0 800a 	bcc.w	8003410 <nl_func_floor_array_f32+0x2c>
 80033fc:	ed95 0a00 	vldr	s0, [r5]
 8003400:	f011 f8a2 	bl	8014548 <floorf>
 8003404:	ed86 0a00 	vstr	s0, [r6]
 8003408:	1f2d      	subs	r5, r5, #4
 800340a:	1f36      	subs	r6, r6, #4
 800340c:	42a5      	cmp	r5, r4
 800340e:	d2f5      	bcs.n	80033fc <nl_func_floor_array_f32+0x18>
 8003410:	bd70      	pop	{r4, r5, r6, pc}
	...

08003414 <forward_floor>:
 8003414:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003416:	b081      	sub	sp, #4
 8003418:	6942      	ldr	r2, [r0, #20]
 800341a:	8811      	ldrh	r1, [r2, #0]
 800341c:	2900      	cmp	r1, #0
 800341e:	bf1a      	itte	ne
 8003420:	6850      	ldrne	r0, [r2, #4]
 8003422:	1d00      	addne	r0, r0, #4
 8003424:	2004      	moveq	r0, #4
 8003426:	f04f 0501 	mov.w	r5, #1
 800342a:	6800      	ldr	r0, [r0, #0]
 800342c:	2800      	cmp	r0, #0
 800342e:	bf14      	ite	ne
 8003430:	6803      	ldrne	r3, [r0, #0]
 8003432:	2300      	moveq	r3, #0
 8003434:	2902      	cmp	r1, #2
 8003436:	bfa6      	itte	ge
 8003438:	6850      	ldrge	r0, [r2, #4]
 800343a:	3010      	addge	r0, #16
 800343c:	2004      	movlt	r0, #4
 800343e:	6800      	ldr	r0, [r0, #0]
 8003440:	2800      	cmp	r0, #0
 8003442:	bf19      	ittee	ne
 8003444:	6800      	ldrne	r0, [r0, #0]
 8003446:	f100 0418 	addne.w	r4, r0, #24
 800344a:	2100      	moveq	r1, #0
 800344c:	f101 0418 	addeq.w	r4, r1, #24
 8003450:	f103 0108 	add.w	r1, r3, #8
 8003454:	680a      	ldr	r2, [r1, #0]
 8003456:	0a12      	lsrs	r2, r2, #8
 8003458:	d01e      	beq.n	8003498 <forward_floor+0x84>
 800345a:	684e      	ldr	r6, [r1, #4]
 800345c:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003460:	4610      	mov	r0, r2
 8003462:	1f0f      	subs	r7, r1, #4
 8003464:	f010 0103 	ands.w	r1, r0, #3
 8003468:	d006      	beq.n	8003478 <forward_floor+0x64>
 800346a:	1e52      	subs	r2, r2, #1
 800346c:	f857 c904 	ldr.w	ip, [r7], #-4
 8003470:	1e49      	subs	r1, r1, #1
 8003472:	fb0c f505 	mul.w	r5, ip, r5
 8003476:	d1f8      	bne.n	800346a <forward_floor+0x56>
 8003478:	0880      	lsrs	r0, r0, #2
 800347a:	d00d      	beq.n	8003498 <forward_floor+0x84>
 800347c:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003480:	3910      	subs	r1, #16
 8003482:	68ca      	ldr	r2, [r1, #12]
 8003484:	688e      	ldr	r6, [r1, #8]
 8003486:	684f      	ldr	r7, [r1, #4]
 8003488:	4372      	muls	r2, r6
 800348a:	f851 6910 	ldr.w	r6, [r1], #-16
 800348e:	437a      	muls	r2, r7
 8003490:	4372      	muls	r2, r6
 8003492:	4355      	muls	r5, r2
 8003494:	1e40      	subs	r0, r0, #1
 8003496:	d1f4      	bne.n	8003482 <forward_floor+0x6e>
 8003498:	6998      	ldr	r0, [r3, #24]
 800349a:	6886      	ldr	r6, [r0, #8]
 800349c:	6821      	ldr	r1, [r4, #0]
 800349e:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 80034a2:	1f07      	subs	r7, r0, #4
 80034a4:	6888      	ldr	r0, [r1, #8]
 80034a6:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 80034aa:	1f14      	subs	r4, r2, #4
 80034ac:	42b7      	cmp	r7, r6
 80034ae:	d309      	bcc.n	80034c4 <forward_floor+0xb0>
 80034b0:	ed97 0a00 	vldr	s0, [r7]
 80034b4:	f011 f848 	bl	8014548 <floorf>
 80034b8:	ed84 0a00 	vstr	s0, [r4]
 80034bc:	1f3f      	subs	r7, r7, #4
 80034be:	1f24      	subs	r4, r4, #4
 80034c0:	42b7      	cmp	r7, r6
 80034c2:	d2f5      	bcs.n	80034b0 <forward_floor+0x9c>
 80034c4:	b001      	add	sp, #4
 80034c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080034c8 <nl_func_round_array_f32>:
 80034c8:	b570      	push	{r4, r5, r6, lr}
 80034ca:	688c      	ldr	r4, [r1, #8]
 80034cc:	6880      	ldr	r0, [r0, #8]
 80034ce:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 80034d2:	1f0d      	subs	r5, r1, #4
 80034d4:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 80034d8:	1f0e      	subs	r6, r1, #4
 80034da:	42a5      	cmp	r5, r4
 80034dc:	f0c0 800a 	bcc.w	80034f4 <nl_func_round_array_f32+0x2c>
 80034e0:	ed95 0a00 	vldr	s0, [r5]
 80034e4:	f011 f970 	bl	80147c8 <roundf>
 80034e8:	ed86 0a00 	vstr	s0, [r6]
 80034ec:	1f2d      	subs	r5, r5, #4
 80034ee:	1f36      	subs	r6, r6, #4
 80034f0:	42a5      	cmp	r5, r4
 80034f2:	d2f5      	bcs.n	80034e0 <nl_func_round_array_f32+0x18>
 80034f4:	bd70      	pop	{r4, r5, r6, pc}
	...

080034f8 <forward_round>:
 80034f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034fa:	b081      	sub	sp, #4
 80034fc:	6942      	ldr	r2, [r0, #20]
 80034fe:	8811      	ldrh	r1, [r2, #0]
 8003500:	2900      	cmp	r1, #0
 8003502:	bf1a      	itte	ne
 8003504:	6850      	ldrne	r0, [r2, #4]
 8003506:	1d00      	addne	r0, r0, #4
 8003508:	2004      	moveq	r0, #4
 800350a:	f04f 0501 	mov.w	r5, #1
 800350e:	6800      	ldr	r0, [r0, #0]
 8003510:	2800      	cmp	r0, #0
 8003512:	bf14      	ite	ne
 8003514:	6803      	ldrne	r3, [r0, #0]
 8003516:	2300      	moveq	r3, #0
 8003518:	2902      	cmp	r1, #2
 800351a:	bfa6      	itte	ge
 800351c:	6850      	ldrge	r0, [r2, #4]
 800351e:	3010      	addge	r0, #16
 8003520:	2004      	movlt	r0, #4
 8003522:	6800      	ldr	r0, [r0, #0]
 8003524:	2800      	cmp	r0, #0
 8003526:	bf19      	ittee	ne
 8003528:	6800      	ldrne	r0, [r0, #0]
 800352a:	f100 0418 	addne.w	r4, r0, #24
 800352e:	2100      	moveq	r1, #0
 8003530:	f101 0418 	addeq.w	r4, r1, #24
 8003534:	f103 0108 	add.w	r1, r3, #8
 8003538:	680a      	ldr	r2, [r1, #0]
 800353a:	0a12      	lsrs	r2, r2, #8
 800353c:	d01e      	beq.n	800357c <forward_round+0x84>
 800353e:	684e      	ldr	r6, [r1, #4]
 8003540:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003544:	4610      	mov	r0, r2
 8003546:	1f0f      	subs	r7, r1, #4
 8003548:	f010 0103 	ands.w	r1, r0, #3
 800354c:	d006      	beq.n	800355c <forward_round+0x64>
 800354e:	1e52      	subs	r2, r2, #1
 8003550:	f857 c904 	ldr.w	ip, [r7], #-4
 8003554:	1e49      	subs	r1, r1, #1
 8003556:	fb0c f505 	mul.w	r5, ip, r5
 800355a:	d1f8      	bne.n	800354e <forward_round+0x56>
 800355c:	0880      	lsrs	r0, r0, #2
 800355e:	d00d      	beq.n	800357c <forward_round+0x84>
 8003560:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003564:	3910      	subs	r1, #16
 8003566:	68ca      	ldr	r2, [r1, #12]
 8003568:	688e      	ldr	r6, [r1, #8]
 800356a:	684f      	ldr	r7, [r1, #4]
 800356c:	4372      	muls	r2, r6
 800356e:	f851 6910 	ldr.w	r6, [r1], #-16
 8003572:	437a      	muls	r2, r7
 8003574:	4372      	muls	r2, r6
 8003576:	4355      	muls	r5, r2
 8003578:	1e40      	subs	r0, r0, #1
 800357a:	d1f4      	bne.n	8003566 <forward_round+0x6e>
 800357c:	6998      	ldr	r0, [r3, #24]
 800357e:	6886      	ldr	r6, [r0, #8]
 8003580:	6821      	ldr	r1, [r4, #0]
 8003582:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8003586:	1f07      	subs	r7, r0, #4
 8003588:	6888      	ldr	r0, [r1, #8]
 800358a:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 800358e:	1f14      	subs	r4, r2, #4
 8003590:	42b7      	cmp	r7, r6
 8003592:	d309      	bcc.n	80035a8 <forward_round+0xb0>
 8003594:	ed97 0a00 	vldr	s0, [r7]
 8003598:	f011 f916 	bl	80147c8 <roundf>
 800359c:	ed84 0a00 	vstr	s0, [r4]
 80035a0:	1f3f      	subs	r7, r7, #4
 80035a2:	1f24      	subs	r4, r4, #4
 80035a4:	42b7      	cmp	r7, r6
 80035a6:	d2f5      	bcs.n	8003594 <forward_round+0x9c>
 80035a8:	b001      	add	sp, #4
 80035aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080035ac <nl_func_neg_array_f32>:
 80035ac:	6889      	ldr	r1, [r1, #8]
 80035ae:	6880      	ldr	r0, [r0, #8]
 80035b0:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 80035b4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80035b8:	1f1b      	subs	r3, r3, #4
 80035ba:	1f12      	subs	r2, r2, #4
 80035bc:	428b      	cmp	r3, r1
 80035be:	d32b      	bcc.n	8003618 <nl_func_neg_array_f32+0x6c>
 80035c0:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 80035c4:	edd3 0a00 	vldr	s1, [r3]
 80035c8:	1f18      	subs	r0, r3, #4
 80035ca:	ee60 0a80 	vmul.f32	s1, s1, s0
 80035ce:	4288      	cmp	r0, r1
 80035d0:	edc2 0a00 	vstr	s1, [r2]
 80035d4:	d320      	bcc.n	8003618 <nl_func_neg_array_f32+0x6c>
 80035d6:	ed90 1a00 	vldr	s2, [r0]
 80035da:	1f13      	subs	r3, r2, #4
 80035dc:	1f00      	subs	r0, r0, #4
 80035de:	ee21 1a00 	vmul.f32	s2, s2, s0
 80035e2:	4288      	cmp	r0, r1
 80035e4:	ed83 1a00 	vstr	s2, [r3]
 80035e8:	d316      	bcc.n	8003618 <nl_func_neg_array_f32+0x6c>
 80035ea:	edd0 0a00 	vldr	s1, [r0]
 80035ee:	f1a2 0308 	sub.w	r3, r2, #8
 80035f2:	1f00      	subs	r0, r0, #4
 80035f4:	ee60 0a80 	vmul.f32	s1, s1, s0
 80035f8:	4288      	cmp	r0, r1
 80035fa:	edc3 0a00 	vstr	s1, [r3]
 80035fe:	d30b      	bcc.n	8003618 <nl_func_neg_array_f32+0x6c>
 8003600:	ed90 1a00 	vldr	s2, [r0]
 8003604:	f1a2 030c 	sub.w	r3, r2, #12
 8003608:	ee61 0a00 	vmul.f32	s1, s2, s0
 800360c:	edc3 0a00 	vstr	s1, [r3]
 8003610:	1f03      	subs	r3, r0, #4
 8003612:	3a10      	subs	r2, #16
 8003614:	428b      	cmp	r3, r1
 8003616:	d2d5      	bcs.n	80035c4 <nl_func_neg_array_f32+0x18>
 8003618:	4770      	bx	lr
	...

0800361c <forward_neg>:
 800361c:	b4f0      	push	{r4, r5, r6, r7}
 800361e:	6942      	ldr	r2, [r0, #20]
 8003620:	8811      	ldrh	r1, [r2, #0]
 8003622:	2900      	cmp	r1, #0
 8003624:	bf1a      	itte	ne
 8003626:	6850      	ldrne	r0, [r2, #4]
 8003628:	1d00      	addne	r0, r0, #4
 800362a:	2004      	moveq	r0, #4
 800362c:	f04f 0501 	mov.w	r5, #1
 8003630:	6800      	ldr	r0, [r0, #0]
 8003632:	2800      	cmp	r0, #0
 8003634:	bf14      	ite	ne
 8003636:	6803      	ldrne	r3, [r0, #0]
 8003638:	2300      	moveq	r3, #0
 800363a:	2902      	cmp	r1, #2
 800363c:	bfa6      	itte	ge
 800363e:	6850      	ldrge	r0, [r2, #4]
 8003640:	3010      	addge	r0, #16
 8003642:	2004      	movlt	r0, #4
 8003644:	6800      	ldr	r0, [r0, #0]
 8003646:	2800      	cmp	r0, #0
 8003648:	bf19      	ittee	ne
 800364a:	6800      	ldrne	r0, [r0, #0]
 800364c:	f100 0418 	addne.w	r4, r0, #24
 8003650:	2100      	moveq	r1, #0
 8003652:	f101 0418 	addeq.w	r4, r1, #24
 8003656:	f103 0108 	add.w	r1, r3, #8
 800365a:	680a      	ldr	r2, [r1, #0]
 800365c:	0a12      	lsrs	r2, r2, #8
 800365e:	d01e      	beq.n	800369e <forward_neg+0x82>
 8003660:	684e      	ldr	r6, [r1, #4]
 8003662:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003666:	4610      	mov	r0, r2
 8003668:	1f0f      	subs	r7, r1, #4
 800366a:	f010 0103 	ands.w	r1, r0, #3
 800366e:	d006      	beq.n	800367e <forward_neg+0x62>
 8003670:	1e52      	subs	r2, r2, #1
 8003672:	f857 c904 	ldr.w	ip, [r7], #-4
 8003676:	1e49      	subs	r1, r1, #1
 8003678:	fb0c f505 	mul.w	r5, ip, r5
 800367c:	d1f8      	bne.n	8003670 <forward_neg+0x54>
 800367e:	0880      	lsrs	r0, r0, #2
 8003680:	d00d      	beq.n	800369e <forward_neg+0x82>
 8003682:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003686:	3910      	subs	r1, #16
 8003688:	68ca      	ldr	r2, [r1, #12]
 800368a:	688e      	ldr	r6, [r1, #8]
 800368c:	684f      	ldr	r7, [r1, #4]
 800368e:	4372      	muls	r2, r6
 8003690:	f851 6910 	ldr.w	r6, [r1], #-16
 8003694:	437a      	muls	r2, r7
 8003696:	4372      	muls	r2, r6
 8003698:	4355      	muls	r5, r2
 800369a:	1e40      	subs	r0, r0, #1
 800369c:	d1f4      	bne.n	8003688 <forward_neg+0x6c>
 800369e:	6998      	ldr	r0, [r3, #24]
 80036a0:	6822      	ldr	r2, [r4, #0]
 80036a2:	6880      	ldr	r0, [r0, #8]
 80036a4:	6893      	ldr	r3, [r2, #8]
 80036a6:	eb00 0185 	add.w	r1, r0, r5, lsl #2
 80036aa:	eb03 0485 	add.w	r4, r3, r5, lsl #2
 80036ae:	1f09      	subs	r1, r1, #4
 80036b0:	1f22      	subs	r2, r4, #4
 80036b2:	4281      	cmp	r1, r0
 80036b4:	f0c0 802c 	bcc.w	8003710 <forward_neg+0xf4>
 80036b8:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 80036bc:	edd1 0a00 	vldr	s1, [r1]
 80036c0:	1f09      	subs	r1, r1, #4
 80036c2:	ee60 0a80 	vmul.f32	s1, s1, s0
 80036c6:	4281      	cmp	r1, r0
 80036c8:	edc2 0a00 	vstr	s1, [r2]
 80036cc:	d320      	bcc.n	8003710 <forward_neg+0xf4>
 80036ce:	ed91 1a00 	vldr	s2, [r1]
 80036d2:	1f13      	subs	r3, r2, #4
 80036d4:	1f09      	subs	r1, r1, #4
 80036d6:	ee21 1a00 	vmul.f32	s2, s2, s0
 80036da:	4281      	cmp	r1, r0
 80036dc:	ed83 1a00 	vstr	s2, [r3]
 80036e0:	d316      	bcc.n	8003710 <forward_neg+0xf4>
 80036e2:	edd1 0a00 	vldr	s1, [r1]
 80036e6:	f1a2 0308 	sub.w	r3, r2, #8
 80036ea:	1f09      	subs	r1, r1, #4
 80036ec:	ee60 0a80 	vmul.f32	s1, s1, s0
 80036f0:	4281      	cmp	r1, r0
 80036f2:	edc3 0a00 	vstr	s1, [r3]
 80036f6:	d30b      	bcc.n	8003710 <forward_neg+0xf4>
 80036f8:	ed91 1a00 	vldr	s2, [r1]
 80036fc:	f1a2 030c 	sub.w	r3, r2, #12
 8003700:	1f09      	subs	r1, r1, #4
 8003702:	3a10      	subs	r2, #16
 8003704:	ee61 0a00 	vmul.f32	s1, s2, s0
 8003708:	4281      	cmp	r1, r0
 800370a:	edc3 0a00 	vstr	s1, [r3]
 800370e:	d2d5      	bcs.n	80036bc <forward_neg+0xa0>
 8003710:	bcf0      	pop	{r4, r5, r6, r7}
 8003712:	4770      	bx	lr

08003714 <nl_func_reciprocal_array_f32>:
 8003714:	6889      	ldr	r1, [r1, #8]
 8003716:	6880      	ldr	r0, [r0, #8]
 8003718:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 800371c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8003720:	1f1b      	subs	r3, r3, #4
 8003722:	1f12      	subs	r2, r2, #4
 8003724:	428b      	cmp	r3, r1
 8003726:	d331      	bcc.n	800378c <nl_func_reciprocal_array_f32+0x78>
 8003728:	ed93 0a00 	vldr	s0, [r3]
 800372c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003730:	1f18      	subs	r0, r3, #4
 8003732:	ee80 0a80 	vdiv.f32	s0, s1, s0
 8003736:	4288      	cmp	r0, r1
 8003738:	ed82 0a00 	vstr	s0, [r2]
 800373c:	d326      	bcc.n	800378c <nl_func_reciprocal_array_f32+0x78>
 800373e:	edd0 0a00 	vldr	s1, [r0]
 8003742:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003746:	1f13      	subs	r3, r2, #4
 8003748:	1f00      	subs	r0, r0, #4
 800374a:	ee80 0a20 	vdiv.f32	s0, s0, s1
 800374e:	4288      	cmp	r0, r1
 8003750:	ed83 0a00 	vstr	s0, [r3]
 8003754:	d31a      	bcc.n	800378c <nl_func_reciprocal_array_f32+0x78>
 8003756:	ed90 0a00 	vldr	s0, [r0]
 800375a:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800375e:	f1a2 0308 	sub.w	r3, r2, #8
 8003762:	1f00      	subs	r0, r0, #4
 8003764:	ee80 0a80 	vdiv.f32	s0, s1, s0
 8003768:	4288      	cmp	r0, r1
 800376a:	ed83 0a00 	vstr	s0, [r3]
 800376e:	d30d      	bcc.n	800378c <nl_func_reciprocal_array_f32+0x78>
 8003770:	edd0 0a00 	vldr	s1, [r0]
 8003774:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003778:	f1a2 030c 	sub.w	r3, r2, #12
 800377c:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8003780:	ed83 0a00 	vstr	s0, [r3]
 8003784:	1f03      	subs	r3, r0, #4
 8003786:	3a10      	subs	r2, #16
 8003788:	428b      	cmp	r3, r1
 800378a:	d2cd      	bcs.n	8003728 <nl_func_reciprocal_array_f32+0x14>
 800378c:	4770      	bx	lr
	...

08003790 <forward_reciprocal>:
 8003790:	b4f0      	push	{r4, r5, r6, r7}
 8003792:	6942      	ldr	r2, [r0, #20]
 8003794:	8811      	ldrh	r1, [r2, #0]
 8003796:	2900      	cmp	r1, #0
 8003798:	bf1a      	itte	ne
 800379a:	6850      	ldrne	r0, [r2, #4]
 800379c:	1d00      	addne	r0, r0, #4
 800379e:	2004      	moveq	r0, #4
 80037a0:	f04f 0501 	mov.w	r5, #1
 80037a4:	6800      	ldr	r0, [r0, #0]
 80037a6:	2800      	cmp	r0, #0
 80037a8:	bf14      	ite	ne
 80037aa:	6803      	ldrne	r3, [r0, #0]
 80037ac:	2300      	moveq	r3, #0
 80037ae:	2902      	cmp	r1, #2
 80037b0:	bfa6      	itte	ge
 80037b2:	6850      	ldrge	r0, [r2, #4]
 80037b4:	3010      	addge	r0, #16
 80037b6:	2004      	movlt	r0, #4
 80037b8:	6800      	ldr	r0, [r0, #0]
 80037ba:	2800      	cmp	r0, #0
 80037bc:	bf19      	ittee	ne
 80037be:	6800      	ldrne	r0, [r0, #0]
 80037c0:	f100 0418 	addne.w	r4, r0, #24
 80037c4:	2100      	moveq	r1, #0
 80037c6:	f101 0418 	addeq.w	r4, r1, #24
 80037ca:	f103 0108 	add.w	r1, r3, #8
 80037ce:	680a      	ldr	r2, [r1, #0]
 80037d0:	0a12      	lsrs	r2, r2, #8
 80037d2:	d01e      	beq.n	8003812 <forward_reciprocal+0x82>
 80037d4:	684e      	ldr	r6, [r1, #4]
 80037d6:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80037da:	4610      	mov	r0, r2
 80037dc:	1f0f      	subs	r7, r1, #4
 80037de:	f010 0103 	ands.w	r1, r0, #3
 80037e2:	d006      	beq.n	80037f2 <forward_reciprocal+0x62>
 80037e4:	1e52      	subs	r2, r2, #1
 80037e6:	f857 c904 	ldr.w	ip, [r7], #-4
 80037ea:	1e49      	subs	r1, r1, #1
 80037ec:	fb0c f505 	mul.w	r5, ip, r5
 80037f0:	d1f8      	bne.n	80037e4 <forward_reciprocal+0x54>
 80037f2:	0880      	lsrs	r0, r0, #2
 80037f4:	d00d      	beq.n	8003812 <forward_reciprocal+0x82>
 80037f6:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80037fa:	3910      	subs	r1, #16
 80037fc:	68ca      	ldr	r2, [r1, #12]
 80037fe:	688e      	ldr	r6, [r1, #8]
 8003800:	684f      	ldr	r7, [r1, #4]
 8003802:	4372      	muls	r2, r6
 8003804:	f851 6910 	ldr.w	r6, [r1], #-16
 8003808:	437a      	muls	r2, r7
 800380a:	4372      	muls	r2, r6
 800380c:	4355      	muls	r5, r2
 800380e:	1e40      	subs	r0, r0, #1
 8003810:	d1f4      	bne.n	80037fc <forward_reciprocal+0x6c>
 8003812:	6998      	ldr	r0, [r3, #24]
 8003814:	6822      	ldr	r2, [r4, #0]
 8003816:	6880      	ldr	r0, [r0, #8]
 8003818:	6893      	ldr	r3, [r2, #8]
 800381a:	eb00 0185 	add.w	r1, r0, r5, lsl #2
 800381e:	eb03 0485 	add.w	r4, r3, r5, lsl #2
 8003822:	1f09      	subs	r1, r1, #4
 8003824:	1f22      	subs	r2, r4, #4
 8003826:	4281      	cmp	r1, r0
 8003828:	f0c0 8032 	bcc.w	8003890 <forward_reciprocal+0x100>
 800382c:	ed91 0a00 	vldr	s0, [r1]
 8003830:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003834:	1f09      	subs	r1, r1, #4
 8003836:	ee80 0a80 	vdiv.f32	s0, s1, s0
 800383a:	4281      	cmp	r1, r0
 800383c:	ed82 0a00 	vstr	s0, [r2]
 8003840:	d326      	bcc.n	8003890 <forward_reciprocal+0x100>
 8003842:	edd1 0a00 	vldr	s1, [r1]
 8003846:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800384a:	1f13      	subs	r3, r2, #4
 800384c:	1f09      	subs	r1, r1, #4
 800384e:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8003852:	4281      	cmp	r1, r0
 8003854:	ed83 0a00 	vstr	s0, [r3]
 8003858:	d31a      	bcc.n	8003890 <forward_reciprocal+0x100>
 800385a:	ed91 0a00 	vldr	s0, [r1]
 800385e:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003862:	f1a2 0308 	sub.w	r3, r2, #8
 8003866:	1f09      	subs	r1, r1, #4
 8003868:	ee80 0a80 	vdiv.f32	s0, s1, s0
 800386c:	4281      	cmp	r1, r0
 800386e:	ed83 0a00 	vstr	s0, [r3]
 8003872:	d30d      	bcc.n	8003890 <forward_reciprocal+0x100>
 8003874:	edd1 0a00 	vldr	s1, [r1]
 8003878:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800387c:	f1a2 030c 	sub.w	r3, r2, #12
 8003880:	1f09      	subs	r1, r1, #4
 8003882:	3a10      	subs	r2, #16
 8003884:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8003888:	4281      	cmp	r1, r0
 800388a:	ed83 0a00 	vstr	s0, [r3]
 800388e:	d2cd      	bcs.n	800382c <forward_reciprocal+0x9c>
 8003890:	bcf0      	pop	{r4, r5, r6, r7}
 8003892:	4770      	bx	lr

08003894 <nl_func_exp_array_f32>:
 8003894:	b570      	push	{r4, r5, r6, lr}
 8003896:	688c      	ldr	r4, [r1, #8]
 8003898:	6880      	ldr	r0, [r0, #8]
 800389a:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 800389e:	1f0d      	subs	r5, r1, #4
 80038a0:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 80038a4:	1f0e      	subs	r6, r1, #4
 80038a6:	42a5      	cmp	r5, r4
 80038a8:	f0c0 800a 	bcc.w	80038c0 <nl_func_exp_array_f32+0x2c>
 80038ac:	ed95 0a00 	vldr	s0, [r5]
 80038b0:	f011 f942 	bl	8014b38 <expf>
 80038b4:	ed86 0a00 	vstr	s0, [r6]
 80038b8:	1f2d      	subs	r5, r5, #4
 80038ba:	1f36      	subs	r6, r6, #4
 80038bc:	42a5      	cmp	r5, r4
 80038be:	d2f5      	bcs.n	80038ac <nl_func_exp_array_f32+0x18>
 80038c0:	bd70      	pop	{r4, r5, r6, pc}
	...

080038c4 <forward_exp>:
 80038c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038c6:	b081      	sub	sp, #4
 80038c8:	6942      	ldr	r2, [r0, #20]
 80038ca:	8811      	ldrh	r1, [r2, #0]
 80038cc:	2900      	cmp	r1, #0
 80038ce:	bf1a      	itte	ne
 80038d0:	6850      	ldrne	r0, [r2, #4]
 80038d2:	1d00      	addne	r0, r0, #4
 80038d4:	2004      	moveq	r0, #4
 80038d6:	f04f 0501 	mov.w	r5, #1
 80038da:	6800      	ldr	r0, [r0, #0]
 80038dc:	2800      	cmp	r0, #0
 80038de:	bf14      	ite	ne
 80038e0:	6803      	ldrne	r3, [r0, #0]
 80038e2:	2300      	moveq	r3, #0
 80038e4:	2902      	cmp	r1, #2
 80038e6:	bfa6      	itte	ge
 80038e8:	6850      	ldrge	r0, [r2, #4]
 80038ea:	3010      	addge	r0, #16
 80038ec:	2004      	movlt	r0, #4
 80038ee:	6800      	ldr	r0, [r0, #0]
 80038f0:	2800      	cmp	r0, #0
 80038f2:	bf19      	ittee	ne
 80038f4:	6800      	ldrne	r0, [r0, #0]
 80038f6:	f100 0418 	addne.w	r4, r0, #24
 80038fa:	2100      	moveq	r1, #0
 80038fc:	f101 0418 	addeq.w	r4, r1, #24
 8003900:	f103 0108 	add.w	r1, r3, #8
 8003904:	680a      	ldr	r2, [r1, #0]
 8003906:	0a12      	lsrs	r2, r2, #8
 8003908:	d01e      	beq.n	8003948 <forward_exp+0x84>
 800390a:	684e      	ldr	r6, [r1, #4]
 800390c:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003910:	4610      	mov	r0, r2
 8003912:	1f0f      	subs	r7, r1, #4
 8003914:	f010 0103 	ands.w	r1, r0, #3
 8003918:	d006      	beq.n	8003928 <forward_exp+0x64>
 800391a:	1e52      	subs	r2, r2, #1
 800391c:	f857 c904 	ldr.w	ip, [r7], #-4
 8003920:	1e49      	subs	r1, r1, #1
 8003922:	fb0c f505 	mul.w	r5, ip, r5
 8003926:	d1f8      	bne.n	800391a <forward_exp+0x56>
 8003928:	0880      	lsrs	r0, r0, #2
 800392a:	d00d      	beq.n	8003948 <forward_exp+0x84>
 800392c:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003930:	3910      	subs	r1, #16
 8003932:	68ca      	ldr	r2, [r1, #12]
 8003934:	688e      	ldr	r6, [r1, #8]
 8003936:	684f      	ldr	r7, [r1, #4]
 8003938:	4372      	muls	r2, r6
 800393a:	f851 6910 	ldr.w	r6, [r1], #-16
 800393e:	437a      	muls	r2, r7
 8003940:	4372      	muls	r2, r6
 8003942:	4355      	muls	r5, r2
 8003944:	1e40      	subs	r0, r0, #1
 8003946:	d1f4      	bne.n	8003932 <forward_exp+0x6e>
 8003948:	6998      	ldr	r0, [r3, #24]
 800394a:	6886      	ldr	r6, [r0, #8]
 800394c:	6821      	ldr	r1, [r4, #0]
 800394e:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8003952:	1f07      	subs	r7, r0, #4
 8003954:	6888      	ldr	r0, [r1, #8]
 8003956:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 800395a:	1f14      	subs	r4, r2, #4
 800395c:	42b7      	cmp	r7, r6
 800395e:	d309      	bcc.n	8003974 <forward_exp+0xb0>
 8003960:	ed97 0a00 	vldr	s0, [r7]
 8003964:	f011 f8e8 	bl	8014b38 <expf>
 8003968:	ed84 0a00 	vstr	s0, [r4]
 800396c:	1f3f      	subs	r7, r7, #4
 800396e:	1f24      	subs	r4, r4, #4
 8003970:	42b7      	cmp	r7, r6
 8003972:	d2f5      	bcs.n	8003960 <forward_exp+0x9c>
 8003974:	b001      	add	sp, #4
 8003976:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003978 <nl_func_sigmoid_array_f32>:
 8003978:	b570      	push	{r4, r5, r6, lr}
 800397a:	688c      	ldr	r4, [r1, #8]
 800397c:	6880      	ldr	r0, [r0, #8]
 800397e:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8003982:	1f0d      	subs	r5, r1, #4
 8003984:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8003988:	1f0e      	subs	r6, r1, #4
 800398a:	42a5      	cmp	r5, r4
 800398c:	f0c0 8014 	bcc.w	80039b8 <nl_func_sigmoid_array_f32+0x40>
 8003990:	ed95 0a00 	vldr	s0, [r5]
 8003994:	eeb1 0a40 	vneg.f32	s0, s0
 8003998:	f011 f8ce 	bl	8014b38 <expf>
 800399c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80039a0:	ee70 0a20 	vadd.f32	s1, s0, s1
 80039a4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80039a8:	ee80 0a20 	vdiv.f32	s0, s0, s1
 80039ac:	ed86 0a00 	vstr	s0, [r6]
 80039b0:	1f2d      	subs	r5, r5, #4
 80039b2:	1f36      	subs	r6, r6, #4
 80039b4:	42a5      	cmp	r5, r4
 80039b6:	d2eb      	bcs.n	8003990 <nl_func_sigmoid_array_f32+0x18>
 80039b8:	bd70      	pop	{r4, r5, r6, pc}
	...

080039bc <forward_sigmoid>:
 80039bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039be:	b081      	sub	sp, #4
 80039c0:	6942      	ldr	r2, [r0, #20]
 80039c2:	8811      	ldrh	r1, [r2, #0]
 80039c4:	2900      	cmp	r1, #0
 80039c6:	bf1a      	itte	ne
 80039c8:	6850      	ldrne	r0, [r2, #4]
 80039ca:	1d00      	addne	r0, r0, #4
 80039cc:	2004      	moveq	r0, #4
 80039ce:	f04f 0501 	mov.w	r5, #1
 80039d2:	6800      	ldr	r0, [r0, #0]
 80039d4:	2800      	cmp	r0, #0
 80039d6:	bf14      	ite	ne
 80039d8:	6803      	ldrne	r3, [r0, #0]
 80039da:	2300      	moveq	r3, #0
 80039dc:	2902      	cmp	r1, #2
 80039de:	bfa6      	itte	ge
 80039e0:	6850      	ldrge	r0, [r2, #4]
 80039e2:	3010      	addge	r0, #16
 80039e4:	2004      	movlt	r0, #4
 80039e6:	6800      	ldr	r0, [r0, #0]
 80039e8:	2800      	cmp	r0, #0
 80039ea:	bf19      	ittee	ne
 80039ec:	6800      	ldrne	r0, [r0, #0]
 80039ee:	f100 0418 	addne.w	r4, r0, #24
 80039f2:	2100      	moveq	r1, #0
 80039f4:	f101 0418 	addeq.w	r4, r1, #24
 80039f8:	f103 0108 	add.w	r1, r3, #8
 80039fc:	680a      	ldr	r2, [r1, #0]
 80039fe:	0a12      	lsrs	r2, r2, #8
 8003a00:	d01e      	beq.n	8003a40 <forward_sigmoid+0x84>
 8003a02:	684e      	ldr	r6, [r1, #4]
 8003a04:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003a08:	4610      	mov	r0, r2
 8003a0a:	1f0f      	subs	r7, r1, #4
 8003a0c:	f010 0103 	ands.w	r1, r0, #3
 8003a10:	d006      	beq.n	8003a20 <forward_sigmoid+0x64>
 8003a12:	1e52      	subs	r2, r2, #1
 8003a14:	f857 c904 	ldr.w	ip, [r7], #-4
 8003a18:	1e49      	subs	r1, r1, #1
 8003a1a:	fb0c f505 	mul.w	r5, ip, r5
 8003a1e:	d1f8      	bne.n	8003a12 <forward_sigmoid+0x56>
 8003a20:	0880      	lsrs	r0, r0, #2
 8003a22:	d00d      	beq.n	8003a40 <forward_sigmoid+0x84>
 8003a24:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003a28:	3910      	subs	r1, #16
 8003a2a:	68ca      	ldr	r2, [r1, #12]
 8003a2c:	688e      	ldr	r6, [r1, #8]
 8003a2e:	684f      	ldr	r7, [r1, #4]
 8003a30:	4372      	muls	r2, r6
 8003a32:	f851 6910 	ldr.w	r6, [r1], #-16
 8003a36:	437a      	muls	r2, r7
 8003a38:	4372      	muls	r2, r6
 8003a3a:	4355      	muls	r5, r2
 8003a3c:	1e40      	subs	r0, r0, #1
 8003a3e:	d1f4      	bne.n	8003a2a <forward_sigmoid+0x6e>
 8003a40:	6998      	ldr	r0, [r3, #24]
 8003a42:	6886      	ldr	r6, [r0, #8]
 8003a44:	6821      	ldr	r1, [r4, #0]
 8003a46:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8003a4a:	1f07      	subs	r7, r0, #4
 8003a4c:	6888      	ldr	r0, [r1, #8]
 8003a4e:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8003a52:	1f14      	subs	r4, r2, #4
 8003a54:	42b7      	cmp	r7, r6
 8003a56:	d313      	bcc.n	8003a80 <forward_sigmoid+0xc4>
 8003a58:	ed97 0a00 	vldr	s0, [r7]
 8003a5c:	eeb1 0a40 	vneg.f32	s0, s0
 8003a60:	f011 f86a 	bl	8014b38 <expf>
 8003a64:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003a68:	ee70 0a20 	vadd.f32	s1, s0, s1
 8003a6c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003a70:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8003a74:	ed84 0a00 	vstr	s0, [r4]
 8003a78:	1f3f      	subs	r7, r7, #4
 8003a7a:	1f24      	subs	r4, r4, #4
 8003a7c:	42b7      	cmp	r7, r6
 8003a7e:	d2eb      	bcs.n	8003a58 <forward_sigmoid+0x9c>
 8003a80:	b001      	add	sp, #4
 8003a82:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003a84 <nl_func_sign_array_f32>:
 8003a84:	6889      	ldr	r1, [r1, #8]
 8003a86:	6880      	ldr	r0, [r0, #8]
 8003a88:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8003a8c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8003a90:	1f1b      	subs	r3, r3, #4
 8003a92:	1f10      	subs	r0, r2, #4
 8003a94:	428b      	cmp	r3, r1
 8003a96:	d314      	bcc.n	8003ac2 <nl_func_sign_array_f32+0x3e>
 8003a98:	f04f 32ff 	mov.w	r2, #4294967295
 8003a9c:	ed93 0a00 	vldr	s0, [r3]
 8003aa0:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8003aa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003aa8:	bfcc      	ite	gt
 8003aaa:	ed9f 0a39 	vldrgt	s0, [pc, #228]	; 8003b90 <.text_49>
 8003aae:	ee00 2a10 	vmovle	s0, r2
 8003ab2:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8003ab6:	ed80 0a00 	vstr	s0, [r0]
 8003aba:	1f1b      	subs	r3, r3, #4
 8003abc:	1f00      	subs	r0, r0, #4
 8003abe:	428b      	cmp	r3, r1
 8003ac0:	d2ec      	bcs.n	8003a9c <nl_func_sign_array_f32+0x18>
 8003ac2:	4770      	bx	lr

08003ac4 <forward_sign>:
 8003ac4:	b4f0      	push	{r4, r5, r6, r7}
 8003ac6:	6942      	ldr	r2, [r0, #20]
 8003ac8:	8811      	ldrh	r1, [r2, #0]
 8003aca:	2900      	cmp	r1, #0
 8003acc:	bf1a      	itte	ne
 8003ace:	6850      	ldrne	r0, [r2, #4]
 8003ad0:	1d00      	addne	r0, r0, #4
 8003ad2:	2004      	moveq	r0, #4
 8003ad4:	f04f 0501 	mov.w	r5, #1
 8003ad8:	6800      	ldr	r0, [r0, #0]
 8003ada:	2800      	cmp	r0, #0
 8003adc:	bf14      	ite	ne
 8003ade:	6803      	ldrne	r3, [r0, #0]
 8003ae0:	2300      	moveq	r3, #0
 8003ae2:	2901      	cmp	r1, #1
 8003ae4:	bfc6      	itte	gt
 8003ae6:	6850      	ldrgt	r0, [r2, #4]
 8003ae8:	3010      	addgt	r0, #16
 8003aea:	2004      	movle	r0, #4
 8003aec:	6800      	ldr	r0, [r0, #0]
 8003aee:	2800      	cmp	r0, #0
 8003af0:	bf19      	ittee	ne
 8003af2:	6800      	ldrne	r0, [r0, #0]
 8003af4:	f100 0418 	addne.w	r4, r0, #24
 8003af8:	2100      	moveq	r1, #0
 8003afa:	f101 0418 	addeq.w	r4, r1, #24
 8003afe:	f103 0108 	add.w	r1, r3, #8
 8003b02:	680a      	ldr	r2, [r1, #0]
 8003b04:	0a12      	lsrs	r2, r2, #8
 8003b06:	d01e      	beq.n	8003b46 <forward_sign+0x82>
 8003b08:	684e      	ldr	r6, [r1, #4]
 8003b0a:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003b0e:	4610      	mov	r0, r2
 8003b10:	1f0f      	subs	r7, r1, #4
 8003b12:	f010 0103 	ands.w	r1, r0, #3
 8003b16:	d006      	beq.n	8003b26 <forward_sign+0x62>
 8003b18:	1e52      	subs	r2, r2, #1
 8003b1a:	f857 c904 	ldr.w	ip, [r7], #-4
 8003b1e:	1e49      	subs	r1, r1, #1
 8003b20:	fb0c f505 	mul.w	r5, ip, r5
 8003b24:	d1f8      	bne.n	8003b18 <forward_sign+0x54>
 8003b26:	0880      	lsrs	r0, r0, #2
 8003b28:	d00d      	beq.n	8003b46 <forward_sign+0x82>
 8003b2a:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003b2e:	3910      	subs	r1, #16
 8003b30:	68ca      	ldr	r2, [r1, #12]
 8003b32:	688e      	ldr	r6, [r1, #8]
 8003b34:	684f      	ldr	r7, [r1, #4]
 8003b36:	4372      	muls	r2, r6
 8003b38:	f851 6910 	ldr.w	r6, [r1], #-16
 8003b3c:	437a      	muls	r2, r7
 8003b3e:	4372      	muls	r2, r6
 8003b40:	4355      	muls	r5, r2
 8003b42:	1e40      	subs	r0, r0, #1
 8003b44:	d1f4      	bne.n	8003b30 <forward_sign+0x6c>
 8003b46:	6998      	ldr	r0, [r3, #24]
 8003b48:	6822      	ldr	r2, [r4, #0]
 8003b4a:	6880      	ldr	r0, [r0, #8]
 8003b4c:	6893      	ldr	r3, [r2, #8]
 8003b4e:	eb00 0185 	add.w	r1, r0, r5, lsl #2
 8003b52:	eb03 0485 	add.w	r4, r3, r5, lsl #2
 8003b56:	1f09      	subs	r1, r1, #4
 8003b58:	1f22      	subs	r2, r4, #4
 8003b5a:	4281      	cmp	r1, r0
 8003b5c:	f0c0 8015 	bcc.w	8003b8a <forward_sign+0xc6>
 8003b60:	f04f 33ff 	mov.w	r3, #4294967295
 8003b64:	ed91 0a00 	vldr	s0, [r1]
 8003b68:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8003b6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b70:	bfcc      	ite	gt
 8003b72:	ed9f 0a07 	vldrgt	s0, [pc, #28]	; 8003b90 <.text_49>
 8003b76:	ee00 3a10 	vmovle	s0, r3
 8003b7a:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8003b7e:	ed82 0a00 	vstr	s0, [r2]
 8003b82:	1f09      	subs	r1, r1, #4
 8003b84:	1f12      	subs	r2, r2, #4
 8003b86:	4281      	cmp	r1, r0
 8003b88:	d2ec      	bcs.n	8003b64 <forward_sign+0xa0>
 8003b8a:	bcf0      	pop	{r4, r5, r6, r7}
 8003b8c:	4770      	bx	lr
	...

08003b90 <.text_49>:
 8003b90:	00000001 	.word	0x00000001

08003b94 <nl_func_sqrt_array_f32>:
 8003b94:	b570      	push	{r4, r5, r6, lr}
 8003b96:	460c      	mov	r4, r1
 8003b98:	6880      	ldr	r0, [r0, #8]
 8003b9a:	68a1      	ldr	r1, [r4, #8]
 8003b9c:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8003ba0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8003ba4:	1f1d      	subs	r5, r3, #4
 8003ba6:	1f16      	subs	r6, r2, #4
 8003ba8:	428d      	cmp	r5, r1
 8003baa:	d30a      	bcc.n	8003bc2 <nl_func_sqrt_array_f32+0x2e>
 8003bac:	ed95 0a00 	vldr	s0, [r5]
 8003bb0:	f002 faa8 	bl	8006104 <ai_math_sqrt>
 8003bb4:	ed86 0a00 	vstr	s0, [r6]
 8003bb8:	1f2d      	subs	r5, r5, #4
 8003bba:	68a0      	ldr	r0, [r4, #8]
 8003bbc:	1f36      	subs	r6, r6, #4
 8003bbe:	4285      	cmp	r5, r0
 8003bc0:	d2f4      	bcs.n	8003bac <nl_func_sqrt_array_f32+0x18>
 8003bc2:	bd70      	pop	{r4, r5, r6, pc}

08003bc4 <forward_sqrt>:
 8003bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bc6:	b081      	sub	sp, #4
 8003bc8:	6942      	ldr	r2, [r0, #20]
 8003bca:	8811      	ldrh	r1, [r2, #0]
 8003bcc:	2900      	cmp	r1, #0
 8003bce:	bf1a      	itte	ne
 8003bd0:	6850      	ldrne	r0, [r2, #4]
 8003bd2:	1d00      	addne	r0, r0, #4
 8003bd4:	2004      	moveq	r0, #4
 8003bd6:	f04f 0501 	mov.w	r5, #1
 8003bda:	6800      	ldr	r0, [r0, #0]
 8003bdc:	2800      	cmp	r0, #0
 8003bde:	bf14      	ite	ne
 8003be0:	6803      	ldrne	r3, [r0, #0]
 8003be2:	2300      	moveq	r3, #0
 8003be4:	2902      	cmp	r1, #2
 8003be6:	bfa6      	itte	ge
 8003be8:	6850      	ldrge	r0, [r2, #4]
 8003bea:	3010      	addge	r0, #16
 8003bec:	2004      	movlt	r0, #4
 8003bee:	6800      	ldr	r0, [r0, #0]
 8003bf0:	2800      	cmp	r0, #0
 8003bf2:	bf19      	ittee	ne
 8003bf4:	6800      	ldrne	r0, [r0, #0]
 8003bf6:	f100 0418 	addne.w	r4, r0, #24
 8003bfa:	2100      	moveq	r1, #0
 8003bfc:	f101 0418 	addeq.w	r4, r1, #24
 8003c00:	f103 0108 	add.w	r1, r3, #8
 8003c04:	680a      	ldr	r2, [r1, #0]
 8003c06:	0a12      	lsrs	r2, r2, #8
 8003c08:	d01e      	beq.n	8003c48 <forward_sqrt+0x84>
 8003c0a:	684e      	ldr	r6, [r1, #4]
 8003c0c:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003c10:	4610      	mov	r0, r2
 8003c12:	1f0f      	subs	r7, r1, #4
 8003c14:	f010 0103 	ands.w	r1, r0, #3
 8003c18:	d006      	beq.n	8003c28 <forward_sqrt+0x64>
 8003c1a:	1e52      	subs	r2, r2, #1
 8003c1c:	f857 c904 	ldr.w	ip, [r7], #-4
 8003c20:	1e49      	subs	r1, r1, #1
 8003c22:	fb0c f505 	mul.w	r5, ip, r5
 8003c26:	d1f8      	bne.n	8003c1a <forward_sqrt+0x56>
 8003c28:	0880      	lsrs	r0, r0, #2
 8003c2a:	d00d      	beq.n	8003c48 <forward_sqrt+0x84>
 8003c2c:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003c30:	3910      	subs	r1, #16
 8003c32:	68ca      	ldr	r2, [r1, #12]
 8003c34:	688e      	ldr	r6, [r1, #8]
 8003c36:	684f      	ldr	r7, [r1, #4]
 8003c38:	4372      	muls	r2, r6
 8003c3a:	f851 6910 	ldr.w	r6, [r1], #-16
 8003c3e:	437a      	muls	r2, r7
 8003c40:	4372      	muls	r2, r6
 8003c42:	4355      	muls	r5, r2
 8003c44:	1e40      	subs	r0, r0, #1
 8003c46:	d1f4      	bne.n	8003c32 <forward_sqrt+0x6e>
 8003c48:	699e      	ldr	r6, [r3, #24]
 8003c4a:	68b0      	ldr	r0, [r6, #8]
 8003c4c:	6822      	ldr	r2, [r4, #0]
 8003c4e:	eb00 0185 	add.w	r1, r0, r5, lsl #2
 8003c52:	1f0f      	subs	r7, r1, #4
 8003c54:	6891      	ldr	r1, [r2, #8]
 8003c56:	eb01 0385 	add.w	r3, r1, r5, lsl #2
 8003c5a:	1f1c      	subs	r4, r3, #4
 8003c5c:	4287      	cmp	r7, r0
 8003c5e:	d30a      	bcc.n	8003c76 <forward_sqrt+0xb2>
 8003c60:	ed97 0a00 	vldr	s0, [r7]
 8003c64:	f002 fa4e 	bl	8006104 <ai_math_sqrt>
 8003c68:	ed84 0a00 	vstr	s0, [r4]
 8003c6c:	1f3f      	subs	r7, r7, #4
 8003c6e:	68b0      	ldr	r0, [r6, #8]
 8003c70:	1f24      	subs	r4, r4, #4
 8003c72:	4287      	cmp	r7, r0
 8003c74:	d2f4      	bcs.n	8003c60 <forward_sqrt+0x9c>
 8003c76:	b001      	add	sp, #4
 8003c78:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003c7c <nl_func_soft_plus_array_f32>:
 8003c7c:	b570      	push	{r4, r5, r6, lr}
 8003c7e:	688c      	ldr	r4, [r1, #8]
 8003c80:	6880      	ldr	r0, [r0, #8]
 8003c82:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8003c86:	1f0d      	subs	r5, r1, #4
 8003c88:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8003c8c:	1f0e      	subs	r6, r1, #4
 8003c8e:	42a5      	cmp	r5, r4
 8003c90:	f0c0 8010 	bcc.w	8003cb4 <nl_func_soft_plus_array_f32+0x38>
 8003c94:	ed95 0a00 	vldr	s0, [r5]
 8003c98:	f010 ff4e 	bl	8014b38 <expf>
 8003c9c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003ca0:	ee30 0a20 	vadd.f32	s0, s0, s1
 8003ca4:	f010 ff9e 	bl	8014be4 <logf>
 8003ca8:	ed86 0a00 	vstr	s0, [r6]
 8003cac:	1f2d      	subs	r5, r5, #4
 8003cae:	1f36      	subs	r6, r6, #4
 8003cb0:	42a5      	cmp	r5, r4
 8003cb2:	d2ef      	bcs.n	8003c94 <nl_func_soft_plus_array_f32+0x18>
 8003cb4:	bd70      	pop	{r4, r5, r6, pc}
	...

08003cb8 <forward_soft_plus>:
 8003cb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cba:	b081      	sub	sp, #4
 8003cbc:	6942      	ldr	r2, [r0, #20]
 8003cbe:	8811      	ldrh	r1, [r2, #0]
 8003cc0:	2900      	cmp	r1, #0
 8003cc2:	bf1a      	itte	ne
 8003cc4:	6850      	ldrne	r0, [r2, #4]
 8003cc6:	1d00      	addne	r0, r0, #4
 8003cc8:	2004      	moveq	r0, #4
 8003cca:	f04f 0501 	mov.w	r5, #1
 8003cce:	6800      	ldr	r0, [r0, #0]
 8003cd0:	2800      	cmp	r0, #0
 8003cd2:	bf14      	ite	ne
 8003cd4:	6803      	ldrne	r3, [r0, #0]
 8003cd6:	2300      	moveq	r3, #0
 8003cd8:	2902      	cmp	r1, #2
 8003cda:	bfa6      	itte	ge
 8003cdc:	6850      	ldrge	r0, [r2, #4]
 8003cde:	3010      	addge	r0, #16
 8003ce0:	2004      	movlt	r0, #4
 8003ce2:	6800      	ldr	r0, [r0, #0]
 8003ce4:	2800      	cmp	r0, #0
 8003ce6:	bf19      	ittee	ne
 8003ce8:	6800      	ldrne	r0, [r0, #0]
 8003cea:	f100 0418 	addne.w	r4, r0, #24
 8003cee:	2100      	moveq	r1, #0
 8003cf0:	f101 0418 	addeq.w	r4, r1, #24
 8003cf4:	f103 0108 	add.w	r1, r3, #8
 8003cf8:	680a      	ldr	r2, [r1, #0]
 8003cfa:	0a12      	lsrs	r2, r2, #8
 8003cfc:	d01e      	beq.n	8003d3c <forward_soft_plus+0x84>
 8003cfe:	684e      	ldr	r6, [r1, #4]
 8003d00:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003d04:	4610      	mov	r0, r2
 8003d06:	1f0f      	subs	r7, r1, #4
 8003d08:	f010 0103 	ands.w	r1, r0, #3
 8003d0c:	d006      	beq.n	8003d1c <forward_soft_plus+0x64>
 8003d0e:	1e52      	subs	r2, r2, #1
 8003d10:	f857 c904 	ldr.w	ip, [r7], #-4
 8003d14:	1e49      	subs	r1, r1, #1
 8003d16:	fb0c f505 	mul.w	r5, ip, r5
 8003d1a:	d1f8      	bne.n	8003d0e <forward_soft_plus+0x56>
 8003d1c:	0880      	lsrs	r0, r0, #2
 8003d1e:	d00d      	beq.n	8003d3c <forward_soft_plus+0x84>
 8003d20:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003d24:	3910      	subs	r1, #16
 8003d26:	68ca      	ldr	r2, [r1, #12]
 8003d28:	688e      	ldr	r6, [r1, #8]
 8003d2a:	684f      	ldr	r7, [r1, #4]
 8003d2c:	4372      	muls	r2, r6
 8003d2e:	f851 6910 	ldr.w	r6, [r1], #-16
 8003d32:	437a      	muls	r2, r7
 8003d34:	4372      	muls	r2, r6
 8003d36:	4355      	muls	r5, r2
 8003d38:	1e40      	subs	r0, r0, #1
 8003d3a:	d1f4      	bne.n	8003d26 <forward_soft_plus+0x6e>
 8003d3c:	6998      	ldr	r0, [r3, #24]
 8003d3e:	6886      	ldr	r6, [r0, #8]
 8003d40:	6821      	ldr	r1, [r4, #0]
 8003d42:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8003d46:	1f07      	subs	r7, r0, #4
 8003d48:	6888      	ldr	r0, [r1, #8]
 8003d4a:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8003d4e:	1f14      	subs	r4, r2, #4
 8003d50:	42b7      	cmp	r7, r6
 8003d52:	d30f      	bcc.n	8003d74 <forward_soft_plus+0xbc>
 8003d54:	ed97 0a00 	vldr	s0, [r7]
 8003d58:	f010 feee 	bl	8014b38 <expf>
 8003d5c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003d60:	ee30 0a20 	vadd.f32	s0, s0, s1
 8003d64:	f010 ff3e 	bl	8014be4 <logf>
 8003d68:	ed84 0a00 	vstr	s0, [r4]
 8003d6c:	1f3f      	subs	r7, r7, #4
 8003d6e:	1f24      	subs	r4, r4, #4
 8003d70:	42b7      	cmp	r7, r6
 8003d72:	d2ef      	bcs.n	8003d54 <forward_soft_plus+0x9c>
 8003d74:	b001      	add	sp, #4
 8003d76:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003d78 <nl_func_soft_sign_array_f32>:
 8003d78:	6889      	ldr	r1, [r1, #8]
 8003d7a:	6880      	ldr	r0, [r0, #8]
 8003d7c:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8003d80:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8003d84:	1f1b      	subs	r3, r3, #4
 8003d86:	1f10      	subs	r0, r2, #4
 8003d88:	428b      	cmp	r3, r1
 8003d8a:	d30f      	bcc.n	8003dac <nl_func_soft_sign_array_f32+0x34>
 8003d8c:	ed93 0a00 	vldr	s0, [r3]
 8003d90:	eef0 0ac0 	vabs.f32	s1, s0
 8003d94:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8003d98:	ee70 0a81 	vadd.f32	s1, s1, s2
 8003d9c:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8003da0:	ed80 0a00 	vstr	s0, [r0]
 8003da4:	1f1b      	subs	r3, r3, #4
 8003da6:	1f00      	subs	r0, r0, #4
 8003da8:	428b      	cmp	r3, r1
 8003daa:	d2ef      	bcs.n	8003d8c <nl_func_soft_sign_array_f32+0x14>
 8003dac:	4770      	bx	lr
	...

08003db0 <forward_soft_sign>:
 8003db0:	b4f0      	push	{r4, r5, r6, r7}
 8003db2:	6942      	ldr	r2, [r0, #20]
 8003db4:	8811      	ldrh	r1, [r2, #0]
 8003db6:	2900      	cmp	r1, #0
 8003db8:	bf1a      	itte	ne
 8003dba:	6850      	ldrne	r0, [r2, #4]
 8003dbc:	1d00      	addne	r0, r0, #4
 8003dbe:	2004      	moveq	r0, #4
 8003dc0:	f04f 0501 	mov.w	r5, #1
 8003dc4:	6800      	ldr	r0, [r0, #0]
 8003dc6:	2800      	cmp	r0, #0
 8003dc8:	bf14      	ite	ne
 8003dca:	6803      	ldrne	r3, [r0, #0]
 8003dcc:	2300      	moveq	r3, #0
 8003dce:	2902      	cmp	r1, #2
 8003dd0:	bfa6      	itte	ge
 8003dd2:	6850      	ldrge	r0, [r2, #4]
 8003dd4:	3010      	addge	r0, #16
 8003dd6:	2004      	movlt	r0, #4
 8003dd8:	6800      	ldr	r0, [r0, #0]
 8003dda:	2800      	cmp	r0, #0
 8003ddc:	bf19      	ittee	ne
 8003dde:	6800      	ldrne	r0, [r0, #0]
 8003de0:	f100 0418 	addne.w	r4, r0, #24
 8003de4:	2100      	moveq	r1, #0
 8003de6:	f101 0418 	addeq.w	r4, r1, #24
 8003dea:	f103 0108 	add.w	r1, r3, #8
 8003dee:	680a      	ldr	r2, [r1, #0]
 8003df0:	0a12      	lsrs	r2, r2, #8
 8003df2:	d01e      	beq.n	8003e32 <forward_soft_sign+0x82>
 8003df4:	684e      	ldr	r6, [r1, #4]
 8003df6:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003dfa:	4610      	mov	r0, r2
 8003dfc:	1f0f      	subs	r7, r1, #4
 8003dfe:	f010 0103 	ands.w	r1, r0, #3
 8003e02:	d006      	beq.n	8003e12 <forward_soft_sign+0x62>
 8003e04:	1e52      	subs	r2, r2, #1
 8003e06:	f857 c904 	ldr.w	ip, [r7], #-4
 8003e0a:	1e49      	subs	r1, r1, #1
 8003e0c:	fb0c f505 	mul.w	r5, ip, r5
 8003e10:	d1f8      	bne.n	8003e04 <forward_soft_sign+0x54>
 8003e12:	0880      	lsrs	r0, r0, #2
 8003e14:	d00d      	beq.n	8003e32 <forward_soft_sign+0x82>
 8003e16:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003e1a:	3910      	subs	r1, #16
 8003e1c:	68ca      	ldr	r2, [r1, #12]
 8003e1e:	688e      	ldr	r6, [r1, #8]
 8003e20:	684f      	ldr	r7, [r1, #4]
 8003e22:	4372      	muls	r2, r6
 8003e24:	f851 6910 	ldr.w	r6, [r1], #-16
 8003e28:	437a      	muls	r2, r7
 8003e2a:	4372      	muls	r2, r6
 8003e2c:	4355      	muls	r5, r2
 8003e2e:	1e40      	subs	r0, r0, #1
 8003e30:	d1f4      	bne.n	8003e1c <forward_soft_sign+0x6c>
 8003e32:	6998      	ldr	r0, [r3, #24]
 8003e34:	6822      	ldr	r2, [r4, #0]
 8003e36:	6880      	ldr	r0, [r0, #8]
 8003e38:	6893      	ldr	r3, [r2, #8]
 8003e3a:	eb00 0185 	add.w	r1, r0, r5, lsl #2
 8003e3e:	eb03 0485 	add.w	r4, r3, r5, lsl #2
 8003e42:	1f09      	subs	r1, r1, #4
 8003e44:	1f22      	subs	r2, r4, #4
 8003e46:	4281      	cmp	r1, r0
 8003e48:	f0c0 8010 	bcc.w	8003e6c <forward_soft_sign+0xbc>
 8003e4c:	ed91 0a00 	vldr	s0, [r1]
 8003e50:	eef0 0ac0 	vabs.f32	s1, s0
 8003e54:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8003e58:	ee70 0a81 	vadd.f32	s1, s1, s2
 8003e5c:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8003e60:	ed82 0a00 	vstr	s0, [r2]
 8003e64:	1f09      	subs	r1, r1, #4
 8003e66:	1f12      	subs	r2, r2, #4
 8003e68:	4281      	cmp	r1, r0
 8003e6a:	d2ef      	bcs.n	8003e4c <forward_soft_sign+0x9c>
 8003e6c:	bcf0      	pop	{r4, r5, r6, r7}
 8003e6e:	4770      	bx	lr

08003e70 <nl_func_tanh_array_f32>:
 8003e70:	b570      	push	{r4, r5, r6, lr}
 8003e72:	688c      	ldr	r4, [r1, #8]
 8003e74:	6880      	ldr	r0, [r0, #8]
 8003e76:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8003e7a:	1f0d      	subs	r5, r1, #4
 8003e7c:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8003e80:	1f0e      	subs	r6, r1, #4
 8003e82:	42a5      	cmp	r5, r4
 8003e84:	f0c0 800a 	bcc.w	8003e9c <nl_func_tanh_array_f32+0x2c>
 8003e88:	ed95 0a00 	vldr	s0, [r5]
 8003e8c:	f010 fd32 	bl	80148f4 <tanhf>
 8003e90:	ed86 0a00 	vstr	s0, [r6]
 8003e94:	1f2d      	subs	r5, r5, #4
 8003e96:	1f36      	subs	r6, r6, #4
 8003e98:	42a5      	cmp	r5, r4
 8003e9a:	d2f5      	bcs.n	8003e88 <nl_func_tanh_array_f32+0x18>
 8003e9c:	bd70      	pop	{r4, r5, r6, pc}
	...

08003ea0 <forward_tanh>:
 8003ea0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ea2:	b081      	sub	sp, #4
 8003ea4:	6942      	ldr	r2, [r0, #20]
 8003ea6:	8811      	ldrh	r1, [r2, #0]
 8003ea8:	2900      	cmp	r1, #0
 8003eaa:	bf1a      	itte	ne
 8003eac:	6850      	ldrne	r0, [r2, #4]
 8003eae:	1d00      	addne	r0, r0, #4
 8003eb0:	2004      	moveq	r0, #4
 8003eb2:	f04f 0501 	mov.w	r5, #1
 8003eb6:	6800      	ldr	r0, [r0, #0]
 8003eb8:	2800      	cmp	r0, #0
 8003eba:	bf14      	ite	ne
 8003ebc:	6803      	ldrne	r3, [r0, #0]
 8003ebe:	2300      	moveq	r3, #0
 8003ec0:	2902      	cmp	r1, #2
 8003ec2:	bfa6      	itte	ge
 8003ec4:	6850      	ldrge	r0, [r2, #4]
 8003ec6:	3010      	addge	r0, #16
 8003ec8:	2004      	movlt	r0, #4
 8003eca:	6800      	ldr	r0, [r0, #0]
 8003ecc:	2800      	cmp	r0, #0
 8003ece:	bf19      	ittee	ne
 8003ed0:	6800      	ldrne	r0, [r0, #0]
 8003ed2:	f100 0418 	addne.w	r4, r0, #24
 8003ed6:	2100      	moveq	r1, #0
 8003ed8:	f101 0418 	addeq.w	r4, r1, #24
 8003edc:	f103 0108 	add.w	r1, r3, #8
 8003ee0:	680a      	ldr	r2, [r1, #0]
 8003ee2:	0a12      	lsrs	r2, r2, #8
 8003ee4:	d01e      	beq.n	8003f24 <forward_tanh+0x84>
 8003ee6:	684e      	ldr	r6, [r1, #4]
 8003ee8:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003eec:	4610      	mov	r0, r2
 8003eee:	1f0f      	subs	r7, r1, #4
 8003ef0:	f010 0103 	ands.w	r1, r0, #3
 8003ef4:	d006      	beq.n	8003f04 <forward_tanh+0x64>
 8003ef6:	1e52      	subs	r2, r2, #1
 8003ef8:	f857 c904 	ldr.w	ip, [r7], #-4
 8003efc:	1e49      	subs	r1, r1, #1
 8003efe:	fb0c f505 	mul.w	r5, ip, r5
 8003f02:	d1f8      	bne.n	8003ef6 <forward_tanh+0x56>
 8003f04:	0880      	lsrs	r0, r0, #2
 8003f06:	d00d      	beq.n	8003f24 <forward_tanh+0x84>
 8003f08:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003f0c:	3910      	subs	r1, #16
 8003f0e:	68ca      	ldr	r2, [r1, #12]
 8003f10:	688e      	ldr	r6, [r1, #8]
 8003f12:	684f      	ldr	r7, [r1, #4]
 8003f14:	4372      	muls	r2, r6
 8003f16:	f851 6910 	ldr.w	r6, [r1], #-16
 8003f1a:	437a      	muls	r2, r7
 8003f1c:	4372      	muls	r2, r6
 8003f1e:	4355      	muls	r5, r2
 8003f20:	1e40      	subs	r0, r0, #1
 8003f22:	d1f4      	bne.n	8003f0e <forward_tanh+0x6e>
 8003f24:	6998      	ldr	r0, [r3, #24]
 8003f26:	6886      	ldr	r6, [r0, #8]
 8003f28:	6821      	ldr	r1, [r4, #0]
 8003f2a:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8003f2e:	1f07      	subs	r7, r0, #4
 8003f30:	6888      	ldr	r0, [r1, #8]
 8003f32:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8003f36:	1f14      	subs	r4, r2, #4
 8003f38:	42b7      	cmp	r7, r6
 8003f3a:	d309      	bcc.n	8003f50 <forward_tanh+0xb0>
 8003f3c:	ed97 0a00 	vldr	s0, [r7]
 8003f40:	f010 fcd8 	bl	80148f4 <tanhf>
 8003f44:	ed84 0a00 	vstr	s0, [r4]
 8003f48:	1f3f      	subs	r7, r7, #4
 8003f4a:	1f24      	subs	r4, r4, #4
 8003f4c:	42b7      	cmp	r7, r6
 8003f4e:	d2f5      	bcs.n	8003f3c <forward_tanh+0x9c>
 8003f50:	b001      	add	sp, #4
 8003f52:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003f54 <nl_func_relu_array_f32>:
 8003f54:	6889      	ldr	r1, [r1, #8]
 8003f56:	6880      	ldr	r0, [r0, #8]
 8003f58:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8003f5c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8003f60:	1f1b      	subs	r3, r3, #4
 8003f62:	1f10      	subs	r0, r2, #4
 8003f64:	428b      	cmp	r3, r1
 8003f66:	d30e      	bcc.n	8003f86 <nl_func_relu_array_f32+0x32>
 8003f68:	ed93 0a00 	vldr	s0, [r3]
 8003f6c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8003f70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f74:	bf48      	it	mi
 8003f76:	ed9f 0a7b 	vldrmi	s0, [pc, #492]	; 8004164 <.text_62>
 8003f7a:	ed80 0a00 	vstr	s0, [r0]
 8003f7e:	1f1b      	subs	r3, r3, #4
 8003f80:	1f00      	subs	r0, r0, #4
 8003f82:	428b      	cmp	r3, r1
 8003f84:	d2f0      	bcs.n	8003f68 <nl_func_relu_array_f32+0x14>
 8003f86:	4770      	bx	lr

08003f88 <nl_func_sm_channel_f32>:
 8003f88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f8c:	ed2d 8b02 	vpush	{d8}
 8003f90:	688f      	ldr	r7, [r1, #8]
 8003f92:	6886      	ldr	r6, [r0, #8]
 8003f94:	ed97 8a00 	vldr	s16, [r7]
 8003f98:	4614      	mov	r4, r2
 8003f9a:	2c02      	cmp	r4, #2
 8003f9c:	eddf 8a71 	vldr	s17, [pc, #452]	; 8004164 <.text_62>
 8003fa0:	d33d      	bcc.n	800401e <nl_func_sm_channel_f32+0x96>
 8003fa2:	1e61      	subs	r1, r4, #1
 8003fa4:	1d3a      	adds	r2, r7, #4
 8003fa6:	f011 0003 	ands.w	r0, r1, #3
 8003faa:	d00c      	beq.n	8003fc6 <nl_func_sm_channel_f32+0x3e>
 8003fac:	ed92 0a00 	vldr	s0, [r2]
 8003fb0:	eeb4 0a48 	vcmp.f32	s0, s16
 8003fb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fb8:	bf58      	it	pl
 8003fba:	eeb0 8a40 	vmovpl.f32	s16, s0
 8003fbe:	1e40      	subs	r0, r0, #1
 8003fc0:	f102 0204 	add.w	r2, r2, #4
 8003fc4:	d1f2      	bne.n	8003fac <nl_func_sm_channel_f32+0x24>
 8003fc6:	0889      	lsrs	r1, r1, #2
 8003fc8:	f000 802b 	beq.w	8004022 <nl_func_sm_channel_f32+0x9a>
 8003fcc:	ed92 0a00 	vldr	s0, [r2]
 8003fd0:	eeb4 0a48 	vcmp.f32	s0, s16
 8003fd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fd8:	bf58      	it	pl
 8003fda:	eeb0 8a40 	vmovpl.f32	s16, s0
 8003fde:	ed92 0a01 	vldr	s0, [r2, #4]
 8003fe2:	eeb4 0a48 	vcmp.f32	s0, s16
 8003fe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fea:	bf58      	it	pl
 8003fec:	eeb0 8a40 	vmovpl.f32	s16, s0
 8003ff0:	ed92 0a02 	vldr	s0, [r2, #8]
 8003ff4:	eeb4 0a48 	vcmp.f32	s0, s16
 8003ff8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ffc:	bf58      	it	pl
 8003ffe:	eeb0 8a40 	vmovpl.f32	s16, s0
 8004002:	ed92 0a03 	vldr	s0, [r2, #12]
 8004006:	eeb4 0a48 	vcmp.f32	s0, s16
 800400a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800400e:	bf58      	it	pl
 8004010:	eeb0 8a40 	vmovpl.f32	s16, s0
 8004014:	1e49      	subs	r1, r1, #1
 8004016:	f102 0210 	add.w	r2, r2, #16
 800401a:	d1d7      	bne.n	8003fcc <nl_func_sm_channel_f32+0x44>
 800401c:	e001      	b.n	8004022 <nl_func_sm_channel_f32+0x9a>
 800401e:	2c00      	cmp	r4, #0
 8004020:	d040      	beq.n	80040a4 <nl_func_sm_channel_f32+0x11c>
 8004022:	46b0      	mov	r8, r6
 8004024:	ea4f 0504 	mov.w	r5, r4
 8004028:	ed97 0a00 	vldr	s0, [r7]
 800402c:	ee30 0a48 	vsub.f32	s0, s0, s16
 8004030:	f010 fd82 	bl	8014b38 <expf>
 8004034:	1d3f      	adds	r7, r7, #4
 8004036:	ed88 0a00 	vstr	s0, [r8]
 800403a:	1e6d      	subs	r5, r5, #1
 800403c:	ee78 8a80 	vadd.f32	s17, s17, s0
 8004040:	f108 0804 	add.w	r8, r8, #4
 8004044:	d1f0      	bne.n	8004028 <nl_func_sm_channel_f32+0xa0>
 8004046:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800404a:	f014 0003 	ands.w	r0, r4, #3
 800404e:	ee80 0a28 	vdiv.f32	s0, s0, s17
 8004052:	d009      	beq.n	8004068 <nl_func_sm_channel_f32+0xe0>
 8004054:	edd6 0a00 	vldr	s1, [r6]
 8004058:	ee60 0a80 	vmul.f32	s1, s1, s0
 800405c:	edc6 0a00 	vstr	s1, [r6]
 8004060:	1e40      	subs	r0, r0, #1
 8004062:	f106 0604 	add.w	r6, r6, #4
 8004066:	d1f5      	bne.n	8004054 <nl_func_sm_channel_f32+0xcc>
 8004068:	08a4      	lsrs	r4, r4, #2
 800406a:	d01b      	beq.n	80040a4 <nl_func_sm_channel_f32+0x11c>
 800406c:	edd6 0a00 	vldr	s1, [r6]
 8004070:	ee60 0a80 	vmul.f32	s1, s1, s0
 8004074:	edc6 0a00 	vstr	s1, [r6]
 8004078:	1e64      	subs	r4, r4, #1
 800407a:	ed96 1a01 	vldr	s2, [r6, #4]
 800407e:	edd6 0a02 	vldr	s1, [r6, #8]
 8004082:	ee21 1a00 	vmul.f32	s2, s2, s0
 8004086:	ed86 1a01 	vstr	s2, [r6, #4]
 800408a:	ee60 0a80 	vmul.f32	s1, s1, s0
 800408e:	ed96 1a03 	vldr	s2, [r6, #12]
 8004092:	edc6 0a02 	vstr	s1, [r6, #8]
 8004096:	ee21 1a00 	vmul.f32	s2, s2, s0
 800409a:	ed86 1a03 	vstr	s2, [r6, #12]
 800409e:	f106 0610 	add.w	r6, r6, #16
 80040a2:	d1e3      	bne.n	800406c <nl_func_sm_channel_f32+0xe4>
 80040a4:	ecbd 8b02 	vpop	{d8}
 80040a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080040ac <nl_func_sm_array_f32>:
 80040ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040b0:	460d      	mov	r5, r1
 80040b2:	4604      	mov	r4, r0
 80040b4:	9f08      	ldr	r7, [sp, #32]
 80040b6:	68a8      	ldr	r0, [r5, #8]
 80040b8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80040ba:	00bf      	lsls	r7, r7, #2
 80040bc:	427f      	negs	r7, r7
 80040be:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 80040c2:	68a0      	ldr	r0, [r4, #8]
 80040c4:	eb01 0a07 	add.w	sl, r1, r7
 80040c8:	00b6      	lsls	r6, r6, #2
 80040ca:	4276      	negs	r6, r6
 80040cc:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 80040d0:	68ea      	ldr	r2, [r5, #12]
 80040d2:	4592      	cmp	sl, r2
 80040d4:	eb01 0906 	add.w	r9, r1, r6
 80040d8:	d30f      	bcc.n	80040fa <nl_func_sm_array_f32+0x4e>
 80040da:	4698      	mov	r8, r3
 80040dc:	f8c5 a008 	str.w	sl, [r5, #8]
 80040e0:	f8c4 9008 	str.w	r9, [r4, #8]
 80040e4:	2300      	movs	r3, #0
 80040e6:	4642      	mov	r2, r8
 80040e8:	4629      	mov	r1, r5
 80040ea:	4620      	mov	r0, r4
 80040ec:	f7ff ff4c 	bl	8003f88 <nl_func_sm_channel_f32>
 80040f0:	68e8      	ldr	r0, [r5, #12]
 80040f2:	44ba      	add	sl, r7
 80040f4:	4582      	cmp	sl, r0
 80040f6:	44b1      	add	r9, r6
 80040f8:	d2f0      	bcs.n	80040dc <nl_func_sm_array_f32+0x30>
 80040fa:	68e9      	ldr	r1, [r5, #12]
 80040fc:	60a9      	str	r1, [r5, #8]
 80040fe:	68e0      	ldr	r0, [r4, #12]
 8004100:	60a0      	str	r0, [r4, #8]
 8004102:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08004108 <nl_func_hard_sigmoid_array_f32>:
 8004108:	6889      	ldr	r1, [r1, #8]
 800410a:	6880      	ldr	r0, [r0, #8]
 800410c:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8004110:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004114:	1f1b      	subs	r3, r3, #4
 8004116:	1f10      	subs	r0, r2, #4
 8004118:	428b      	cmp	r3, r1
 800411a:	d321      	bcc.n	8004160 <nl_func_hard_sigmoid_array_f32+0x58>
 800411c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8004120:	eddf 0ab8 	vldr	s1, [pc, #736]	; 8004404 <.text_68>
 8004124:	edd3 1a00 	vldr	s3, [r3]
 8004128:	ed9f 2ab7 	vldr	s4, [pc, #732]	; 8004408 <.text_69>
 800412c:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 8004130:	ee01 1a82 	vmla.f32	s2, s3, s4
 8004134:	eeb4 1a60 	vcmp.f32	s2, s1
 8004138:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800413c:	da08      	bge.n	8004150 <nl_func_hard_sigmoid_array_f32+0x48>
 800413e:	eeb5 1a40 	vcmp.f32	s2, #0.0
 8004142:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004146:	d505      	bpl.n	8004154 <nl_func_hard_sigmoid_array_f32+0x4c>
 8004148:	ed9f 1a06 	vldr	s2, [pc, #24]	; 8004164 <.text_62>
 800414c:	e002      	b.n	8004154 <nl_func_hard_sigmoid_array_f32+0x4c>
 800414e:	bf00      	nop
 8004150:	eeb0 1a40 	vmov.f32	s2, s0
 8004154:	ed80 1a00 	vstr	s2, [r0]
 8004158:	1f1b      	subs	r3, r3, #4
 800415a:	1f00      	subs	r0, r0, #4
 800415c:	428b      	cmp	r3, r1
 800415e:	d2e1      	bcs.n	8004124 <nl_func_hard_sigmoid_array_f32+0x1c>
 8004160:	4770      	bx	lr
	...

08004164 <.text_62>:
 8004164:	00000000 	.word	0x00000000

08004168 <nl_func_clip_array_f32>:
 8004168:	6889      	ldr	r1, [r1, #8]
 800416a:	6880      	ldr	r0, [r0, #8]
 800416c:	ed93 0a00 	vldr	s0, [r3]
 8004170:	edd3 0a01 	vldr	s1, [r3, #4]
 8004174:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8004178:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800417c:	1f1b      	subs	r3, r3, #4
 800417e:	1f10      	subs	r0, r2, #4
 8004180:	428b      	cmp	r3, r1
 8004182:	d315      	bcc.n	80041b0 <nl_func_clip_array_f32+0x48>
 8004184:	ed93 1a00 	vldr	s2, [r3]
 8004188:	eeb4 0a41 	vcmp.f32	s0, s2
 800418c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004190:	bf58      	it	pl
 8004192:	eeb0 1a40 	vmovpl.f32	s2, s0
 8004196:	eeb4 1a60 	vcmp.f32	s2, s1
 800419a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800419e:	bf58      	it	pl
 80041a0:	eeb0 1a60 	vmovpl.f32	s2, s1
 80041a4:	ed80 1a00 	vstr	s2, [r0]
 80041a8:	1f1b      	subs	r3, r3, #4
 80041aa:	1f00      	subs	r0, r0, #4
 80041ac:	428b      	cmp	r3, r1
 80041ae:	d2e9      	bcs.n	8004184 <nl_func_clip_array_f32+0x1c>
 80041b0:	4770      	bx	lr
	...

080041b4 <nl_func_hardmax_array_f32>:
 80041b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041b8:	6852      	ldr	r2, [r2, #4]
 80041ba:	6855      	ldr	r5, [r2, #4]
 80041bc:	68d4      	ldr	r4, [r2, #12]
 80041be:	688e      	ldr	r6, [r1, #8]
 80041c0:	f8d0 8008 	ldr.w	r8, [r0, #8]
 80041c4:	436c      	muls	r4, r5
 80041c6:	00a1      	lsls	r1, r4, #2
 80041c8:	4640      	mov	r0, r8
 80041ca:	f00c feef 	bl	8010fac <__aeabi_memclr>
 80041ce:	2200      	movs	r2, #0
 80041d0:	2c00      	cmp	r4, #0
 80041d2:	4633      	mov	r3, r6
 80041d4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80041d8:	f000 805b 	beq.w	8004292 <nl_func_hardmax_array_f32+0xde>
 80041dc:	f102 0c01 	add.w	ip, r2, #1
 80041e0:	eb05 0e02 	add.w	lr, r5, r2
 80041e4:	45f4      	cmp	ip, lr
 80041e6:	edd3 0a00 	vldr	s1, [r3]
 80041ea:	d249      	bcs.n	8004280 <nl_func_hardmax_array_f32+0xcc>
 80041ec:	1e69      	subs	r1, r5, #1
 80041ee:	f011 0003 	ands.w	r0, r1, #3
 80041f2:	eb06 078c 	add.w	r7, r6, ip, lsl #2
 80041f6:	d00f      	beq.n	8004218 <nl_func_hardmax_array_f32+0x64>
 80041f8:	ed97 1a00 	vldr	s2, [r7]
 80041fc:	eef4 0a41 	vcmp.f32	s1, s2
 8004200:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004204:	bf44      	itt	mi
 8004206:	eef0 0a41 	vmovmi.f32	s1, s2
 800420a:	4662      	movmi	r2, ip
 800420c:	1e40      	subs	r0, r0, #1
 800420e:	f10c 0c01 	add.w	ip, ip, #1
 8004212:	f107 0704 	add.w	r7, r7, #4
 8004216:	d1ef      	bne.n	80041f8 <nl_func_hardmax_array_f32+0x44>
 8004218:	0889      	lsrs	r1, r1, #2
 800421a:	d031      	beq.n	8004280 <nl_func_hardmax_array_f32+0xcc>
 800421c:	ed97 1a00 	vldr	s2, [r7]
 8004220:	eef4 0a41 	vcmp.f32	s1, s2
 8004224:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004228:	bf44      	itt	mi
 800422a:	eef0 0a41 	vmovmi.f32	s1, s2
 800422e:	4662      	movmi	r2, ip
 8004230:	ed97 1a01 	vldr	s2, [r7, #4]
 8004234:	eef4 0a41 	vcmp.f32	s1, s2
 8004238:	f10c 0001 	add.w	r0, ip, #1
 800423c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004240:	bf44      	itt	mi
 8004242:	eef0 0a41 	vmovmi.f32	s1, s2
 8004246:	4602      	movmi	r2, r0
 8004248:	ed97 1a02 	vldr	s2, [r7, #8]
 800424c:	1c40      	adds	r0, r0, #1
 800424e:	eef4 0a41 	vcmp.f32	s1, s2
 8004252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004256:	bf44      	itt	mi
 8004258:	eef0 0a41 	vmovmi.f32	s1, s2
 800425c:	4602      	movmi	r2, r0
 800425e:	ed97 1a03 	vldr	s2, [r7, #12]
 8004262:	1c40      	adds	r0, r0, #1
 8004264:	eef4 0a41 	vcmp.f32	s1, s2
 8004268:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800426c:	bf44      	itt	mi
 800426e:	eef0 0a41 	vmovmi.f32	s1, s2
 8004272:	4602      	movmi	r2, r0
 8004274:	1e49      	subs	r1, r1, #1
 8004276:	f100 0c01 	add.w	ip, r0, #1
 800427a:	f107 0710 	add.w	r7, r7, #16
 800427e:	d1cd      	bne.n	800421c <nl_func_hardmax_array_f32+0x68>
 8004280:	eb08 0082 	add.w	r0, r8, r2, lsl #2
 8004284:	4672      	mov	r2, lr
 8004286:	42a2      	cmp	r2, r4
 8004288:	ed80 0a00 	vstr	s0, [r0]
 800428c:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8004290:	d3a4      	bcc.n	80041dc <nl_func_hardmax_array_f32+0x28>
 8004292:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08004298 <nl_func_relu_generic_array_f32>:
 8004298:	6880      	ldr	r0, [r0, #8]
 800429a:	ed93 0a00 	vldr	s0, [r3]
 800429e:	edd3 0a01 	vldr	s1, [r3, #4]
 80042a2:	ed93 1a02 	vldr	s2, [r3, #8]
 80042a6:	6889      	ldr	r1, [r1, #8]
 80042a8:	1f03      	subs	r3, r0, #4
 80042aa:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 80042ae:	eeb5 1a40 	vcmp.f32	s2, #0.0
 80042b2:	1f0b      	subs	r3, r1, #4
 80042b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042b8:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 80042bc:	d52a      	bpl.n	8004314 <nl_func_relu_generic_array_f32+0x7c>
 80042be:	eef5 0a40 	vcmp.f32	s1, #0.0
 80042c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042c6:	d013      	beq.n	80042f0 <nl_func_relu_generic_array_f32+0x58>
 80042c8:	428a      	cmp	r2, r1
 80042ca:	d310      	bcc.n	80042ee <nl_func_relu_generic_array_f32+0x56>
 80042cc:	ed92 1a00 	vldr	s2, [r2]
 80042d0:	eeb4 1a40 	vcmp.f32	s2, s0
 80042d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042d8:	bf44      	itt	mi
 80042da:	ee31 1a40 	vsubmi.f32	s2, s2, s0
 80042de:	ee21 1a20 	vmulmi.f32	s2, s2, s1
 80042e2:	ed80 1a00 	vstr	s2, [r0]
 80042e6:	1f12      	subs	r2, r2, #4
 80042e8:	1f00      	subs	r0, r0, #4
 80042ea:	428a      	cmp	r2, r1
 80042ec:	d2ee      	bcs.n	80042cc <nl_func_relu_generic_array_f32+0x34>
 80042ee:	4770      	bx	lr
 80042f0:	428a      	cmp	r2, r1
 80042f2:	d3fc      	bcc.n	80042ee <nl_func_relu_generic_array_f32+0x56>
 80042f4:	edd2 0a00 	vldr	s1, [r2]
 80042f8:	eef4 0a40 	vcmp.f32	s1, s0
 80042fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004300:	bf48      	it	mi
 8004302:	eddf 0aa7 	vldrmi	s1, [pc, #668]	; 80045a0 <.text_73>
 8004306:	edc0 0a00 	vstr	s1, [r0]
 800430a:	1f12      	subs	r2, r2, #4
 800430c:	1f00      	subs	r0, r0, #4
 800430e:	428a      	cmp	r2, r1
 8004310:	d2f0      	bcs.n	80042f4 <nl_func_relu_generic_array_f32+0x5c>
 8004312:	4770      	bx	lr
 8004314:	428a      	cmp	r2, r1
 8004316:	d3ea      	bcc.n	80042ee <nl_func_relu_generic_array_f32+0x56>
 8004318:	edd2 1a00 	vldr	s3, [r2]
 800431c:	eef4 1a41 	vcmp.f32	s3, s2
 8004320:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004324:	d50a      	bpl.n	800433c <nl_func_relu_generic_array_f32+0xa4>
 8004326:	eef4 1a40 	vcmp.f32	s3, s0
 800432a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800432e:	d507      	bpl.n	8004340 <nl_func_relu_generic_array_f32+0xa8>
 8004330:	ee71 1ac0 	vsub.f32	s3, s3, s0
 8004334:	ee61 1aa0 	vmul.f32	s3, s3, s1
 8004338:	e002      	b.n	8004340 <nl_func_relu_generic_array_f32+0xa8>
 800433a:	bf00      	nop
 800433c:	eef0 1a41 	vmov.f32	s3, s2
 8004340:	edc0 1a00 	vstr	s3, [r0]
 8004344:	1f12      	subs	r2, r2, #4
 8004346:	1f00      	subs	r0, r0, #4
 8004348:	428a      	cmp	r2, r1
 800434a:	d2e5      	bcs.n	8004318 <nl_func_relu_generic_array_f32+0x80>
 800434c:	4770      	bx	lr
	...

08004350 <nl_func_relu_thresholded_array_f32>:
 8004350:	6889      	ldr	r1, [r1, #8]
 8004352:	6880      	ldr	r0, [r0, #8]
 8004354:	ed93 0a00 	vldr	s0, [r3]
 8004358:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 800435c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004360:	1f1b      	subs	r3, r3, #4
 8004362:	1f10      	subs	r0, r2, #4
 8004364:	428b      	cmp	r3, r1
 8004366:	d30e      	bcc.n	8004386 <nl_func_relu_thresholded_array_f32+0x36>
 8004368:	edd3 0a00 	vldr	s1, [r3]
 800436c:	eef4 0a40 	vcmp.f32	s1, s0
 8004370:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004374:	bf48      	it	mi
 8004376:	eddf 0a8a 	vldrmi	s1, [pc, #552]	; 80045a0 <.text_73>
 800437a:	edc0 0a00 	vstr	s1, [r0]
 800437e:	1f1b      	subs	r3, r3, #4
 8004380:	1f00      	subs	r0, r0, #4
 8004382:	428b      	cmp	r3, r1
 8004384:	d2f0      	bcs.n	8004368 <nl_func_relu_thresholded_array_f32+0x18>
 8004386:	4770      	bx	lr

08004388 <nl_func_elu_array_f32>:
 8004388:	b570      	push	{r4, r5, r6, lr}
 800438a:	ed2d 8b04 	vpush	{d8-d9}
 800438e:	688c      	ldr	r4, [r1, #8]
 8004390:	6880      	ldr	r0, [r0, #8]
 8004392:	ed93 8a00 	vldr	s16, [r3]
 8004396:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 800439a:	1f0d      	subs	r5, r1, #4
 800439c:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 80043a0:	1f0e      	subs	r6, r1, #4
 80043a2:	42a5      	cmp	r5, r4
 80043a4:	f0c0 802a 	bcc.w	80043fc <nl_func_elu_array_f32+0x74>
 80043a8:	edd5 8a00 	vldr	s17, [r5]
 80043ac:	eef5 8a40 	vcmp.f32	s17, #0.0
 80043b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043b4:	bf4c      	ite	mi
 80043b6:	ed9f 9a7a 	vldrmi	s18, [pc, #488]	; 80045a0 <.text_73>
 80043ba:	eeb0 9a68 	vmovpl.f32	s18, s17
 80043be:	eeb0 0a68 	vmov.f32	s0, s17
 80043c2:	f010 fbb9 	bl	8014b38 <expf>
 80043c6:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 80043ca:	ee30 0a20 	vadd.f32	s0, s0, s1
 80043ce:	ee20 0a08 	vmul.f32	s0, s0, s16
 80043d2:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80043d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043da:	dc09      	bgt.n	80043f0 <nl_func_elu_array_f32+0x68>
 80043dc:	eeb0 0a68 	vmov.f32	s0, s17
 80043e0:	f010 fbaa 	bl	8014b38 <expf>
 80043e4:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 80043e8:	ee30 0a20 	vadd.f32	s0, s0, s1
 80043ec:	ee00 9a08 	vmla.f32	s18, s0, s16
 80043f0:	ed86 9a00 	vstr	s18, [r6]
 80043f4:	1f2d      	subs	r5, r5, #4
 80043f6:	1f36      	subs	r6, r6, #4
 80043f8:	42a5      	cmp	r5, r4
 80043fa:	d2d5      	bcs.n	80043a8 <nl_func_elu_array_f32+0x20>
 80043fc:	ecbd 8b04 	vpop	{d8-d9}
 8004400:	bd70      	pop	{r4, r5, r6, pc}
	...

08004404 <.text_68>:
 8004404:	3f800001 	.word	0x3f800001

08004408 <.text_69>:
 8004408:	3e4ccccd 	.word	0x3e4ccccd

0800440c <nl_func_selu_array_f32>:
 800440c:	b570      	push	{r4, r5, r6, lr}
 800440e:	ed2d 8b04 	vpush	{d8-d9}
 8004412:	688c      	ldr	r4, [r1, #8]
 8004414:	6880      	ldr	r0, [r0, #8]
 8004416:	ed93 8a00 	vldr	s16, [r3]
 800441a:	edd3 8a01 	vldr	s17, [r3, #4]
 800441e:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8004422:	1f0d      	subs	r5, r1, #4
 8004424:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8004428:	1f0e      	subs	r6, r1, #4
 800442a:	42a5      	cmp	r5, r4
 800442c:	f0c0 802c 	bcc.w	8004488 <nl_func_selu_array_f32+0x7c>
 8004430:	ed95 9a00 	vldr	s18, [r5]
 8004434:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8004438:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800443c:	bf4c      	ite	mi
 800443e:	eddf 9a58 	vldrmi	s19, [pc, #352]	; 80045a0 <.text_73>
 8004442:	eef0 9a49 	vmovpl.f32	s19, s18
 8004446:	eeb0 0a49 	vmov.f32	s0, s18
 800444a:	f010 fb75 	bl	8014b38 <expf>
 800444e:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8004452:	ee30 0a20 	vadd.f32	s0, s0, s1
 8004456:	ee20 0a08 	vmul.f32	s0, s0, s16
 800445a:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800445e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004462:	dc09      	bgt.n	8004478 <nl_func_selu_array_f32+0x6c>
 8004464:	eeb0 0a49 	vmov.f32	s0, s18
 8004468:	f010 fb66 	bl	8014b38 <expf>
 800446c:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8004470:	ee30 0a20 	vadd.f32	s0, s0, s1
 8004474:	ee40 9a08 	vmla.f32	s19, s0, s16
 8004478:	ee28 0aa9 	vmul.f32	s0, s17, s19
 800447c:	ed86 0a00 	vstr	s0, [r6]
 8004480:	1f2d      	subs	r5, r5, #4
 8004482:	1f36      	subs	r6, r6, #4
 8004484:	42a5      	cmp	r5, r4
 8004486:	d2d3      	bcs.n	8004430 <nl_func_selu_array_f32+0x24>
 8004488:	ecbd 8b04 	vpop	{d8-d9}
 800448c:	bd70      	pop	{r4, r5, r6, pc}
	...

08004490 <nl_func_prelu_array_f32>:
 8004490:	6889      	ldr	r1, [r1, #8]
 8004492:	6880      	ldr	r0, [r0, #8]
 8004494:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8004498:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 800449c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80044a0:	1f1b      	subs	r3, r3, #4
 80044a2:	f1ac 0c04 	sub.w	ip, ip, #4
 80044a6:	1f10      	subs	r0, r2, #4
 80044a8:	458c      	cmp	ip, r1
 80044aa:	d320      	bcc.n	80044ee <nl_func_prelu_array_f32+0x5e>
 80044ac:	ed9c 0a00 	vldr	s0, [ip]
 80044b0:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80044b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044b8:	bf4c      	ite	mi
 80044ba:	eddf 0a39 	vldrmi	s1, [pc, #228]	; 80045a0 <.text_73>
 80044be:	eef0 0a40 	vmovpl.f32	s1, s0
 80044c2:	461a      	mov	r2, r3
 80044c4:	eeb1 0a40 	vneg.f32	s0, s0
 80044c8:	1f13      	subs	r3, r2, #4
 80044ca:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80044ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044d2:	bf48      	it	mi
 80044d4:	ed9f 0a32 	vldrmi	s0, [pc, #200]	; 80045a0 <.text_73>
 80044d8:	ed92 1a00 	vldr	s2, [r2]
 80044dc:	ee41 0a40 	vmls.f32	s1, s2, s0
 80044e0:	edc0 0a00 	vstr	s1, [r0]
 80044e4:	f1ac 0c04 	sub.w	ip, ip, #4
 80044e8:	1f00      	subs	r0, r0, #4
 80044ea:	458c      	cmp	ip, r1
 80044ec:	d2de      	bcs.n	80044ac <nl_func_prelu_array_f32+0x1c>
 80044ee:	4770      	bx	lr

080044f0 <forward_relu>:
 80044f0:	b570      	push	{r4, r5, r6, lr}
 80044f2:	4604      	mov	r4, r0
 80044f4:	6962      	ldr	r2, [r4, #20]
 80044f6:	8811      	ldrh	r1, [r2, #0]
 80044f8:	2900      	cmp	r1, #0
 80044fa:	bf1a      	itte	ne
 80044fc:	6850      	ldrne	r0, [r2, #4]
 80044fe:	1d00      	addne	r0, r0, #4
 8004500:	2004      	moveq	r0, #4
 8004502:	6800      	ldr	r0, [r0, #0]
 8004504:	2800      	cmp	r0, #0
 8004506:	bf14      	ite	ne
 8004508:	6805      	ldrne	r5, [r0, #0]
 800450a:	2500      	moveq	r5, #0
 800450c:	2902      	cmp	r1, #2
 800450e:	bfa6      	itte	ge
 8004510:	6850      	ldrge	r0, [r2, #4]
 8004512:	3010      	addge	r0, #16
 8004514:	2004      	movlt	r0, #4
 8004516:	6800      	ldr	r0, [r0, #0]
 8004518:	2800      	cmp	r0, #0
 800451a:	bf19      	ittee	ne
 800451c:	6800      	ldrne	r0, [r0, #0]
 800451e:	f100 0618 	addne.w	r6, r0, #24
 8004522:	2100      	moveq	r1, #0
 8004524:	f101 0618 	addeq.w	r6, r1, #24
 8004528:	69a0      	ldr	r0, [r4, #24]
 800452a:	b9f8      	cbnz	r0, 800456c <forward_relu+0x7c>
 800452c:	f105 0008 	add.w	r0, r5, #8
 8004530:	f7fe f80a 	bl	8002548 <ai_shape_get_size>
 8004534:	69a9      	ldr	r1, [r5, #24]
 8004536:	6833      	ldr	r3, [r6, #0]
 8004538:	6889      	ldr	r1, [r1, #8]
 800453a:	689c      	ldr	r4, [r3, #8]
 800453c:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 8004540:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8004544:	1f12      	subs	r2, r2, #4
 8004546:	1f00      	subs	r0, r0, #4
 8004548:	428a      	cmp	r2, r1
 800454a:	d328      	bcc.n	800459e <forward_relu+0xae>
 800454c:	ed92 0a00 	vldr	s0, [r2]
 8004550:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8004554:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004558:	bf48      	it	mi
 800455a:	ed9f 0a11 	vldrmi	s0, [pc, #68]	; 80045a0 <.text_73>
 800455e:	ed80 0a00 	vstr	s0, [r0]
 8004562:	1f12      	subs	r2, r2, #4
 8004564:	1f00      	subs	r0, r0, #4
 8004566:	428a      	cmp	r2, r1
 8004568:	d2f0      	bcs.n	800454c <forward_relu+0x5c>
 800456a:	bd70      	pop	{r4, r5, r6, pc}
 800456c:	6840      	ldr	r0, [r0, #4]
 800456e:	2801      	cmp	r0, #1
 8004570:	f105 0008 	add.w	r0, r5, #8
 8004574:	d109      	bne.n	800458a <forward_relu+0x9a>
 8004576:	f7fd ffe7 	bl	8002548 <ai_shape_get_size>
 800457a:	4602      	mov	r2, r0
 800457c:	69a0      	ldr	r0, [r4, #24]
 800457e:	6883      	ldr	r3, [r0, #8]
 8004580:	69a9      	ldr	r1, [r5, #24]
 8004582:	6830      	ldr	r0, [r6, #0]
 8004584:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004588:	e6e2      	b.n	8004350 <nl_func_relu_thresholded_array_f32>
 800458a:	f7fd ffdd 	bl	8002548 <ai_shape_get_size>
 800458e:	69a1      	ldr	r1, [r4, #24]
 8004590:	688b      	ldr	r3, [r1, #8]
 8004592:	69a9      	ldr	r1, [r5, #24]
 8004594:	4602      	mov	r2, r0
 8004596:	6830      	ldr	r0, [r6, #0]
 8004598:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800459c:	e67c      	b.n	8004298 <nl_func_relu_generic_array_f32>
 800459e:	bd70      	pop	{r4, r5, r6, pc}

080045a0 <.text_73>:
 80045a0:	00000000 	.word	0x00000000

080045a4 <forward_relu_thresholded>:
 80045a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045a6:	4602      	mov	r2, r0
 80045a8:	f04f 0601 	mov.w	r6, #1
 80045ac:	6953      	ldr	r3, [r2, #20]
 80045ae:	8819      	ldrh	r1, [r3, #0]
 80045b0:	2900      	cmp	r1, #0
 80045b2:	bf1a      	itte	ne
 80045b4:	6858      	ldrne	r0, [r3, #4]
 80045b6:	1d00      	addne	r0, r0, #4
 80045b8:	2004      	moveq	r0, #4
 80045ba:	6800      	ldr	r0, [r0, #0]
 80045bc:	2800      	cmp	r0, #0
 80045be:	bf14      	ite	ne
 80045c0:	6804      	ldrne	r4, [r0, #0]
 80045c2:	2400      	moveq	r4, #0
 80045c4:	2902      	cmp	r1, #2
 80045c6:	bfa6      	itte	ge
 80045c8:	6858      	ldrge	r0, [r3, #4]
 80045ca:	3010      	addge	r0, #16
 80045cc:	2004      	movlt	r0, #4
 80045ce:	6800      	ldr	r0, [r0, #0]
 80045d0:	2800      	cmp	r0, #0
 80045d2:	bf19      	ittee	ne
 80045d4:	6800      	ldrne	r0, [r0, #0]
 80045d6:	f100 0518 	addne.w	r5, r0, #24
 80045da:	2100      	moveq	r1, #0
 80045dc:	f101 0518 	addeq.w	r5, r1, #24
 80045e0:	f104 0108 	add.w	r1, r4, #8
 80045e4:	680b      	ldr	r3, [r1, #0]
 80045e6:	0a1b      	lsrs	r3, r3, #8
 80045e8:	d01f      	beq.n	800462a <forward_relu_thresholded+0x86>
 80045ea:	684f      	ldr	r7, [r1, #4]
 80045ec:	eb07 0183 	add.w	r1, r7, r3, lsl #2
 80045f0:	4618      	mov	r0, r3
 80045f2:	f1a1 0c04 	sub.w	ip, r1, #4
 80045f6:	f010 0103 	ands.w	r1, r0, #3
 80045fa:	d006      	beq.n	800460a <forward_relu_thresholded+0x66>
 80045fc:	1e5b      	subs	r3, r3, #1
 80045fe:	f85c e904 	ldr.w	lr, [ip], #-4
 8004602:	1e49      	subs	r1, r1, #1
 8004604:	fb0e f606 	mul.w	r6, lr, r6
 8004608:	d1f8      	bne.n	80045fc <forward_relu_thresholded+0x58>
 800460a:	0880      	lsrs	r0, r0, #2
 800460c:	d00d      	beq.n	800462a <forward_relu_thresholded+0x86>
 800460e:	eb07 0183 	add.w	r1, r7, r3, lsl #2
 8004612:	3910      	subs	r1, #16
 8004614:	68cb      	ldr	r3, [r1, #12]
 8004616:	688f      	ldr	r7, [r1, #8]
 8004618:	437b      	muls	r3, r7
 800461a:	684f      	ldr	r7, [r1, #4]
 800461c:	437b      	muls	r3, r7
 800461e:	f851 7910 	ldr.w	r7, [r1], #-16
 8004622:	437b      	muls	r3, r7
 8004624:	435e      	muls	r6, r3
 8004626:	1e40      	subs	r0, r0, #1
 8004628:	d1f4      	bne.n	8004614 <forward_relu_thresholded+0x70>
 800462a:	6990      	ldr	r0, [r2, #24]
 800462c:	6881      	ldr	r1, [r0, #8]
 800462e:	69a0      	ldr	r0, [r4, #24]
 8004630:	682a      	ldr	r2, [r5, #0]
 8004632:	6880      	ldr	r0, [r0, #8]
 8004634:	6893      	ldr	r3, [r2, #8]
 8004636:	ed91 0a00 	vldr	s0, [r1]
 800463a:	eb00 0186 	add.w	r1, r0, r6, lsl #2
 800463e:	eb03 0486 	add.w	r4, r3, r6, lsl #2
 8004642:	1f09      	subs	r1, r1, #4
 8004644:	1f22      	subs	r2, r4, #4
 8004646:	4281      	cmp	r1, r0
 8004648:	f0c0 800f 	bcc.w	800466a <forward_relu_thresholded+0xc6>
 800464c:	edd1 0a00 	vldr	s1, [r1]
 8004650:	eef4 0a40 	vcmp.f32	s1, s0
 8004654:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004658:	bf48      	it	mi
 800465a:	eddf 0ac2 	vldrmi	s1, [pc, #776]	; 8004964 <.text_80>
 800465e:	edc2 0a00 	vstr	s1, [r2]
 8004662:	1f09      	subs	r1, r1, #4
 8004664:	1f12      	subs	r2, r2, #4
 8004666:	4281      	cmp	r1, r0
 8004668:	d2f0      	bcs.n	800464c <forward_relu_thresholded+0xa8>
 800466a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800466c <forward_elu>:
 800466c:	b570      	push	{r4, r5, r6, lr}
 800466e:	4604      	mov	r4, r0
 8004670:	6962      	ldr	r2, [r4, #20]
 8004672:	8811      	ldrh	r1, [r2, #0]
 8004674:	2900      	cmp	r1, #0
 8004676:	bf1a      	itte	ne
 8004678:	6850      	ldrne	r0, [r2, #4]
 800467a:	1d00      	addne	r0, r0, #4
 800467c:	2004      	moveq	r0, #4
 800467e:	6800      	ldr	r0, [r0, #0]
 8004680:	2800      	cmp	r0, #0
 8004682:	bf14      	ite	ne
 8004684:	6805      	ldrne	r5, [r0, #0]
 8004686:	2500      	moveq	r5, #0
 8004688:	2902      	cmp	r1, #2
 800468a:	bfa6      	itte	ge
 800468c:	6850      	ldrge	r0, [r2, #4]
 800468e:	3010      	addge	r0, #16
 8004690:	2004      	movlt	r0, #4
 8004692:	6800      	ldr	r0, [r0, #0]
 8004694:	2800      	cmp	r0, #0
 8004696:	bf19      	ittee	ne
 8004698:	6800      	ldrne	r0, [r0, #0]
 800469a:	f100 0618 	addne.w	r6, r0, #24
 800469e:	2100      	moveq	r1, #0
 80046a0:	f101 0618 	addeq.w	r6, r1, #24
 80046a4:	f105 0008 	add.w	r0, r5, #8
 80046a8:	f7fd ff4e 	bl	8002548 <ai_shape_get_size>
 80046ac:	4602      	mov	r2, r0
 80046ae:	69a0      	ldr	r0, [r4, #24]
 80046b0:	6883      	ldr	r3, [r0, #8]
 80046b2:	69a9      	ldr	r1, [r5, #24]
 80046b4:	6830      	ldr	r0, [r6, #0]
 80046b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80046ba:	e665      	b.n	8004388 <nl_func_elu_array_f32>

080046bc <forward_selu>:
 80046bc:	b570      	push	{r4, r5, r6, lr}
 80046be:	4604      	mov	r4, r0
 80046c0:	6962      	ldr	r2, [r4, #20]
 80046c2:	8811      	ldrh	r1, [r2, #0]
 80046c4:	2900      	cmp	r1, #0
 80046c6:	bf1a      	itte	ne
 80046c8:	6850      	ldrne	r0, [r2, #4]
 80046ca:	1d00      	addne	r0, r0, #4
 80046cc:	2004      	moveq	r0, #4
 80046ce:	6800      	ldr	r0, [r0, #0]
 80046d0:	2800      	cmp	r0, #0
 80046d2:	bf14      	ite	ne
 80046d4:	6805      	ldrne	r5, [r0, #0]
 80046d6:	2500      	moveq	r5, #0
 80046d8:	2902      	cmp	r1, #2
 80046da:	bfa6      	itte	ge
 80046dc:	6850      	ldrge	r0, [r2, #4]
 80046de:	3010      	addge	r0, #16
 80046e0:	2004      	movlt	r0, #4
 80046e2:	6800      	ldr	r0, [r0, #0]
 80046e4:	2800      	cmp	r0, #0
 80046e6:	bf19      	ittee	ne
 80046e8:	6800      	ldrne	r0, [r0, #0]
 80046ea:	f100 0618 	addne.w	r6, r0, #24
 80046ee:	2100      	moveq	r1, #0
 80046f0:	f101 0618 	addeq.w	r6, r1, #24
 80046f4:	f105 0008 	add.w	r0, r5, #8
 80046f8:	f7fd ff26 	bl	8002548 <ai_shape_get_size>
 80046fc:	4602      	mov	r2, r0
 80046fe:	69a0      	ldr	r0, [r4, #24]
 8004700:	6883      	ldr	r3, [r0, #8]
 8004702:	69a9      	ldr	r1, [r5, #24]
 8004704:	6830      	ldr	r0, [r6, #0]
 8004706:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800470a:	e67f      	b.n	800440c <nl_func_selu_array_f32>

0800470c <forward_prelu>:
 800470c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004710:	b083      	sub	sp, #12
 8004712:	6942      	ldr	r2, [r0, #20]
 8004714:	8810      	ldrh	r0, [r2, #0]
 8004716:	2800      	cmp	r0, #0
 8004718:	bf1a      	itte	ne
 800471a:	6851      	ldrne	r1, [r2, #4]
 800471c:	1d09      	addne	r1, r1, #4
 800471e:	2104      	moveq	r1, #4
 8004720:	6809      	ldr	r1, [r1, #0]
 8004722:	2900      	cmp	r1, #0
 8004724:	bf19      	ittee	ne
 8004726:	6809      	ldrne	r1, [r1, #0]
 8004728:	f101 0518 	addne.w	r5, r1, #24
 800472c:	2300      	moveq	r3, #0
 800472e:	f103 0518 	addeq.w	r5, r3, #24
 8004732:	2801      	cmp	r0, #1
 8004734:	bfc6      	itte	gt
 8004736:	6851      	ldrgt	r1, [r2, #4]
 8004738:	3110      	addgt	r1, #16
 800473a:	2104      	movle	r1, #4
 800473c:	6809      	ldr	r1, [r1, #0]
 800473e:	2900      	cmp	r1, #0
 8004740:	bf19      	ittee	ne
 8004742:	6809      	ldrne	r1, [r1, #0]
 8004744:	f101 0618 	addne.w	r6, r1, #24
 8004748:	2300      	moveq	r3, #0
 800474a:	f103 0618 	addeq.w	r6, r3, #24
 800474e:	2802      	cmp	r0, #2
 8004750:	bfc6      	itte	gt
 8004752:	6850      	ldrgt	r0, [r2, #4]
 8004754:	301c      	addgt	r0, #28
 8004756:	2004      	movle	r0, #4
 8004758:	6800      	ldr	r0, [r0, #0]
 800475a:	2800      	cmp	r0, #0
 800475c:	bf14      	ite	ne
 800475e:	6804      	ldrne	r4, [r0, #0]
 8004760:	2400      	moveq	r4, #0
 8004762:	69a0      	ldr	r0, [r4, #24]
 8004764:	6887      	ldr	r7, [r0, #8]
 8004766:	b12c      	cbz	r4, 8004774 <forward_prelu+0x68>
 8004768:	6841      	ldr	r1, [r0, #4]
 800476a:	6800      	ldr	r0, [r0, #0]
 800476c:	f001 fb8a 	bl	8005e84 <ai_array_get_byte_size>
 8004770:	4680      	mov	r8, r0
 8004772:	e001      	b.n	8004778 <forward_prelu+0x6c>
 8004774:	f04f 0801 	mov.w	r8, #1
 8004778:	6828      	ldr	r0, [r5, #0]
 800477a:	6841      	ldr	r1, [r0, #4]
 800477c:	6800      	ldr	r0, [r0, #0]
 800477e:	f001 fb81 	bl	8005e84 <ai_array_get_byte_size>
 8004782:	4601      	mov	r1, r0
 8004784:	6828      	ldr	r0, [r5, #0]
 8004786:	6832      	ldr	r2, [r6, #0]
 8004788:	6880      	ldr	r0, [r0, #8]
 800478a:	f8d2 9008 	ldr.w	r9, [r2, #8]
 800478e:	4401      	add	r1, r0
 8004790:	f104 0308 	add.w	r3, r4, #8
 8004794:	4288      	cmp	r0, r1
 8004796:	9300      	str	r3, [sp, #0]
 8004798:	d241      	bcs.n	800481e <forward_prelu+0x112>
 800479a:	9702      	str	r7, [sp, #8]
 800479c:	9101      	str	r1, [sp, #4]
 800479e:	4607      	mov	r7, r0
 80047a0:	6829      	ldr	r1, [r5, #0]
 80047a2:	608f      	str	r7, [r1, #8]
 80047a4:	f04f 0201 	mov.w	r2, #1
 80047a8:	6834      	ldr	r4, [r6, #0]
 80047aa:	f8c4 9008 	str.w	r9, [r4, #8]
 80047ae:	9b00      	ldr	r3, [sp, #0]
 80047b0:	6818      	ldr	r0, [r3, #0]
 80047b2:	0a00      	lsrs	r0, r0, #8
 80047b4:	d02a      	beq.n	800480c <forward_prelu+0x100>
 80047b6:	f8d3 e004 	ldr.w	lr, [r3, #4]
 80047ba:	eb0e 0380 	add.w	r3, lr, r0, lsl #2
 80047be:	4684      	mov	ip, r0
 80047c0:	f1a3 0a04 	sub.w	sl, r3, #4
 80047c4:	f01c 0303 	ands.w	r3, ip, #3
 80047c8:	d006      	beq.n	80047d8 <forward_prelu+0xcc>
 80047ca:	1e40      	subs	r0, r0, #1
 80047cc:	f85a b904 	ldr.w	fp, [sl], #-4
 80047d0:	1e5b      	subs	r3, r3, #1
 80047d2:	fb0b f202 	mul.w	r2, fp, r2
 80047d6:	d1f8      	bne.n	80047ca <forward_prelu+0xbe>
 80047d8:	ea5f 0c9c 	movs.w	ip, ip, lsr #2
 80047dc:	4663      	mov	r3, ip
 80047de:	d015      	beq.n	800480c <forward_prelu+0x100>
 80047e0:	eb0e 0080 	add.w	r0, lr, r0, lsl #2
 80047e4:	f1b0 0010 	subs.w	r0, r0, #16
 80047e8:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 80047ec:	f8d0 e008 	ldr.w	lr, [r0, #8]
 80047f0:	f8d0 a004 	ldr.w	sl, [r0, #4]
 80047f4:	f850 b910 	ldr.w	fp, [r0], #-16
 80047f8:	fb0e fc0c 	mul.w	ip, lr, ip
 80047fc:	fb0a fc0c 	mul.w	ip, sl, ip
 8004800:	fb0b fc0c 	mul.w	ip, fp, ip
 8004804:	1e5b      	subs	r3, r3, #1
 8004806:	fb0c f202 	mul.w	r2, ip, r2
 800480a:	d1ed      	bne.n	80047e8 <forward_prelu+0xdc>
 800480c:	9b02      	ldr	r3, [sp, #8]
 800480e:	4620      	mov	r0, r4
 8004810:	f7ff fe3e 	bl	8004490 <nl_func_prelu_array_f32>
 8004814:	9801      	ldr	r0, [sp, #4]
 8004816:	4447      	add	r7, r8
 8004818:	4287      	cmp	r7, r0
 800481a:	44c1      	add	r9, r8
 800481c:	d3c0      	bcc.n	80047a0 <forward_prelu+0x94>
 800481e:	6828      	ldr	r0, [r5, #0]
 8004820:	68c1      	ldr	r1, [r0, #12]
 8004822:	6081      	str	r1, [r0, #8]
 8004824:	6830      	ldr	r0, [r6, #0]
 8004826:	68c1      	ldr	r1, [r0, #12]
 8004828:	6081      	str	r1, [r0, #8]
 800482a:	b003      	add	sp, #12
 800482c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004830 <forward_clip>:
 8004830:	b570      	push	{r4, r5, r6, lr}
 8004832:	4604      	mov	r4, r0
 8004834:	6962      	ldr	r2, [r4, #20]
 8004836:	8811      	ldrh	r1, [r2, #0]
 8004838:	2900      	cmp	r1, #0
 800483a:	bf1a      	itte	ne
 800483c:	6850      	ldrne	r0, [r2, #4]
 800483e:	1d00      	addne	r0, r0, #4
 8004840:	2004      	moveq	r0, #4
 8004842:	6800      	ldr	r0, [r0, #0]
 8004844:	2800      	cmp	r0, #0
 8004846:	bf14      	ite	ne
 8004848:	6805      	ldrne	r5, [r0, #0]
 800484a:	2500      	moveq	r5, #0
 800484c:	2902      	cmp	r1, #2
 800484e:	bfa6      	itte	ge
 8004850:	6850      	ldrge	r0, [r2, #4]
 8004852:	3010      	addge	r0, #16
 8004854:	2004      	movlt	r0, #4
 8004856:	6800      	ldr	r0, [r0, #0]
 8004858:	2800      	cmp	r0, #0
 800485a:	bf19      	ittee	ne
 800485c:	6800      	ldrne	r0, [r0, #0]
 800485e:	f100 0618 	addne.w	r6, r0, #24
 8004862:	2100      	moveq	r1, #0
 8004864:	f101 0618 	addeq.w	r6, r1, #24
 8004868:	f105 0008 	add.w	r0, r5, #8
 800486c:	f7fd fe6c 	bl	8002548 <ai_shape_get_size>
 8004870:	4602      	mov	r2, r0
 8004872:	69a0      	ldr	r0, [r4, #24]
 8004874:	6883      	ldr	r3, [r0, #8]
 8004876:	69a9      	ldr	r1, [r5, #24]
 8004878:	6830      	ldr	r0, [r6, #0]
 800487a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800487e:	e473      	b.n	8004168 <nl_func_clip_array_f32>

08004880 <forward_hard_sigmoid>:
 8004880:	b4f0      	push	{r4, r5, r6, r7}
 8004882:	6942      	ldr	r2, [r0, #20]
 8004884:	8811      	ldrh	r1, [r2, #0]
 8004886:	2900      	cmp	r1, #0
 8004888:	bf1a      	itte	ne
 800488a:	6850      	ldrne	r0, [r2, #4]
 800488c:	1d00      	addne	r0, r0, #4
 800488e:	2004      	moveq	r0, #4
 8004890:	f04f 0501 	mov.w	r5, #1
 8004894:	6800      	ldr	r0, [r0, #0]
 8004896:	2800      	cmp	r0, #0
 8004898:	bf14      	ite	ne
 800489a:	6803      	ldrne	r3, [r0, #0]
 800489c:	2300      	moveq	r3, #0
 800489e:	2902      	cmp	r1, #2
 80048a0:	bfa6      	itte	ge
 80048a2:	6850      	ldrge	r0, [r2, #4]
 80048a4:	3010      	addge	r0, #16
 80048a6:	2004      	movlt	r0, #4
 80048a8:	6800      	ldr	r0, [r0, #0]
 80048aa:	2800      	cmp	r0, #0
 80048ac:	bf19      	ittee	ne
 80048ae:	6800      	ldrne	r0, [r0, #0]
 80048b0:	f100 0418 	addne.w	r4, r0, #24
 80048b4:	2100      	moveq	r1, #0
 80048b6:	f101 0418 	addeq.w	r4, r1, #24
 80048ba:	f103 0108 	add.w	r1, r3, #8
 80048be:	680a      	ldr	r2, [r1, #0]
 80048c0:	0a12      	lsrs	r2, r2, #8
 80048c2:	d01e      	beq.n	8004902 <forward_hard_sigmoid+0x82>
 80048c4:	684e      	ldr	r6, [r1, #4]
 80048c6:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80048ca:	4610      	mov	r0, r2
 80048cc:	1f0f      	subs	r7, r1, #4
 80048ce:	f010 0103 	ands.w	r1, r0, #3
 80048d2:	d006      	beq.n	80048e2 <forward_hard_sigmoid+0x62>
 80048d4:	1e52      	subs	r2, r2, #1
 80048d6:	f857 c904 	ldr.w	ip, [r7], #-4
 80048da:	1e49      	subs	r1, r1, #1
 80048dc:	fb0c f505 	mul.w	r5, ip, r5
 80048e0:	d1f8      	bne.n	80048d4 <forward_hard_sigmoid+0x54>
 80048e2:	0880      	lsrs	r0, r0, #2
 80048e4:	d00d      	beq.n	8004902 <forward_hard_sigmoid+0x82>
 80048e6:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80048ea:	3910      	subs	r1, #16
 80048ec:	68ca      	ldr	r2, [r1, #12]
 80048ee:	688e      	ldr	r6, [r1, #8]
 80048f0:	684f      	ldr	r7, [r1, #4]
 80048f2:	4372      	muls	r2, r6
 80048f4:	f851 6910 	ldr.w	r6, [r1], #-16
 80048f8:	437a      	muls	r2, r7
 80048fa:	4372      	muls	r2, r6
 80048fc:	4355      	muls	r5, r2
 80048fe:	1e40      	subs	r0, r0, #1
 8004900:	d1f4      	bne.n	80048ec <forward_hard_sigmoid+0x6c>
 8004902:	6998      	ldr	r0, [r3, #24]
 8004904:	6822      	ldr	r2, [r4, #0]
 8004906:	6880      	ldr	r0, [r0, #8]
 8004908:	6893      	ldr	r3, [r2, #8]
 800490a:	eb00 0185 	add.w	r1, r0, r5, lsl #2
 800490e:	eb03 0485 	add.w	r4, r3, r5, lsl #2
 8004912:	1f09      	subs	r1, r1, #4
 8004914:	1f22      	subs	r2, r4, #4
 8004916:	4281      	cmp	r1, r0
 8004918:	f0c0 8022 	bcc.w	8004960 <forward_hard_sigmoid+0xe0>
 800491c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8004920:	eddf 0a11 	vldr	s1, [pc, #68]	; 8004968 <.text_81>
 8004924:	edd1 1a00 	vldr	s3, [r1]
 8004928:	ed9f 2a10 	vldr	s4, [pc, #64]	; 800496c <.text_82>
 800492c:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 8004930:	ee01 1a82 	vmla.f32	s2, s3, s4
 8004934:	eeb4 1a60 	vcmp.f32	s2, s1
 8004938:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800493c:	da08      	bge.n	8004950 <forward_hard_sigmoid+0xd0>
 800493e:	eeb5 1a40 	vcmp.f32	s2, #0.0
 8004942:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004946:	d505      	bpl.n	8004954 <forward_hard_sigmoid+0xd4>
 8004948:	ed9f 1a06 	vldr	s2, [pc, #24]	; 8004964 <.text_80>
 800494c:	e002      	b.n	8004954 <forward_hard_sigmoid+0xd4>
 800494e:	bf00      	nop
 8004950:	eeb0 1a40 	vmov.f32	s2, s0
 8004954:	ed82 1a00 	vstr	s2, [r2]
 8004958:	1f09      	subs	r1, r1, #4
 800495a:	1f12      	subs	r2, r2, #4
 800495c:	4281      	cmp	r1, r0
 800495e:	d2e1      	bcs.n	8004924 <forward_hard_sigmoid+0xa4>
 8004960:	bcf0      	pop	{r4, r5, r6, r7}
 8004962:	4770      	bx	lr

08004964 <.text_80>:
 8004964:	00000000 	.word	0x00000000

08004968 <.text_81>:
 8004968:	3f800001 	.word	0x3f800001

0800496c <.text_82>:
 800496c:	3e4ccccd 	.word	0x3e4ccccd

08004970 <forward_sm>:
 8004970:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004972:	b083      	sub	sp, #12
 8004974:	6942      	ldr	r2, [r0, #20]
 8004976:	8811      	ldrh	r1, [r2, #0]
 8004978:	2900      	cmp	r1, #0
 800497a:	bf1a      	itte	ne
 800497c:	6850      	ldrne	r0, [r2, #4]
 800497e:	1d00      	addne	r0, r0, #4
 8004980:	2004      	moveq	r0, #4
 8004982:	6800      	ldr	r0, [r0, #0]
 8004984:	2800      	cmp	r0, #0
 8004986:	bf14      	ite	ne
 8004988:	6804      	ldrne	r4, [r0, #0]
 800498a:	2400      	moveq	r4, #0
 800498c:	2902      	cmp	r1, #2
 800498e:	bfa6      	itte	ge
 8004990:	6850      	ldrge	r0, [r2, #4]
 8004992:	3010      	addge	r0, #16
 8004994:	2004      	movlt	r0, #4
 8004996:	6800      	ldr	r0, [r0, #0]
 8004998:	2800      	cmp	r0, #0
 800499a:	bf14      	ite	ne
 800499c:	6805      	ldrne	r5, [r0, #0]
 800499e:	2500      	moveq	r5, #0
 80049a0:	68e0      	ldr	r0, [r4, #12]
 80049a2:	68e9      	ldr	r1, [r5, #12]
 80049a4:	6846      	ldr	r6, [r0, #4]
 80049a6:	684f      	ldr	r7, [r1, #4]
 80049a8:	f104 0008 	add.w	r0, r4, #8
 80049ac:	f7fd fdcc 	bl	8002548 <ai_shape_get_size>
 80049b0:	4602      	mov	r2, r0
 80049b2:	9701      	str	r7, [sp, #4]
 80049b4:	9600      	str	r6, [sp, #0]
 80049b6:	69a1      	ldr	r1, [r4, #24]
 80049b8:	69a8      	ldr	r0, [r5, #24]
 80049ba:	4633      	mov	r3, r6
 80049bc:	f7ff fb76 	bl	80040ac <nl_func_sm_array_f32>
 80049c0:	b003      	add	sp, #12
 80049c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080049c4 <forward_hardmax>:
 80049c4:	b430      	push	{r4, r5}
 80049c6:	6943      	ldr	r3, [r0, #20]
 80049c8:	881a      	ldrh	r2, [r3, #0]
 80049ca:	6980      	ldr	r0, [r0, #24]
 80049cc:	2a00      	cmp	r2, #0
 80049ce:	bf1a      	itte	ne
 80049d0:	6859      	ldrne	r1, [r3, #4]
 80049d2:	1d09      	addne	r1, r1, #4
 80049d4:	2104      	moveq	r1, #4
 80049d6:	6809      	ldr	r1, [r1, #0]
 80049d8:	2900      	cmp	r1, #0
 80049da:	bf14      	ite	ne
 80049dc:	680c      	ldrne	r4, [r1, #0]
 80049de:	2400      	moveq	r4, #0
 80049e0:	2a02      	cmp	r2, #2
 80049e2:	bfa6      	itte	ge
 80049e4:	6859      	ldrge	r1, [r3, #4]
 80049e6:	3110      	addge	r1, #16
 80049e8:	2104      	movlt	r1, #4
 80049ea:	6809      	ldr	r1, [r1, #0]
 80049ec:	6883      	ldr	r3, [r0, #8]
 80049ee:	2900      	cmp	r1, #0
 80049f0:	bf19      	ittee	ne
 80049f2:	6809      	ldrne	r1, [r1, #0]
 80049f4:	f101 0518 	addne.w	r5, r1, #24
 80049f8:	2200      	moveq	r2, #0
 80049fa:	f102 0518 	addeq.w	r5, r2, #24
 80049fe:	69a1      	ldr	r1, [r4, #24]
 8004a00:	6828      	ldr	r0, [r5, #0]
 8004a02:	f104 0208 	add.w	r2, r4, #8
 8004a06:	bc30      	pop	{r4, r5}
 8004a08:	f7ff bbd4 	b.w	80041b4 <nl_func_hardmax_array_f32>

08004a0c <pool_func_mp_array_f32>:
 8004a0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a10:	4688      	mov	r8, r1
 8004a12:	b08b      	sub	sp, #44	; 0x2c
 8004a14:	f8d0 b008 	ldr.w	fp, [r0, #8]
 8004a18:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8004a1a:	f9bd e064 	ldrsh.w	lr, [sp, #100]	; 0x64
 8004a1e:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 8004a20:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8004a22:	1e48      	subs	r0, r1, #1
 8004a24:	fb10 fe0e 	smulbb	lr, r0, lr
 8004a28:	4615      	mov	r5, r2
 8004a2a:	ebae 0e07 	sub.w	lr, lr, r7
 8004a2e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8004a30:	f8bd 0058 	ldrh.w	r0, [sp, #88]	; 0x58
 8004a34:	6892      	ldr	r2, [r2, #8]
 8004a36:	44a6      	add	lr, r4
 8004a38:	f1ae 0601 	sub.w	r6, lr, #1
 8004a3c:	469c      	mov	ip, r3
 8004a3e:	1b76      	subs	r6, r6, r5
 8004a40:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8004a42:	4338      	orrs	r0, r7
 8004a44:	f040 80dd 	bne.w	8004c02 <pool_func_mp_array_f32+0x1f6>
 8004a48:	f9bd 0068 	ldrsh.w	r0, [sp, #104]	; 0x68
 8004a4c:	f1a0 0901 	sub.w	r9, r0, #1
 8004a50:	f9bd 0058 	ldrsh.w	r0, [sp, #88]	; 0x58
 8004a54:	fb19 f903 	smulbb	r9, r9, r3
 8004a58:	eba9 0900 	sub.w	r9, r9, r0
 8004a5c:	f9bd 0050 	ldrsh.w	r0, [sp, #80]	; 0x50
 8004a60:	4448      	add	r0, r9
 8004a62:	1e40      	subs	r0, r0, #1
 8004a64:	eba0 0008 	sub.w	r0, r0, r8
 8004a68:	b200      	sxth	r0, r0
 8004a6a:	2800      	cmp	r0, #0
 8004a6c:	bf44      	itt	mi
 8004a6e:	b236      	sxthmi	r6, r6
 8004a70:	2e00      	cmpmi	r6, #0
 8004a72:	f140 80c6 	bpl.w	8004c02 <pool_func_mp_array_f32+0x1f6>
 8004a76:	2000      	movs	r0, #0
 8004a78:	000d      	movs	r5, r1
 8004a7a:	9008      	str	r0, [sp, #32]
 8004a7c:	f000 8178 	beq.w	8004d70 <pool_func_mp_array_f32+0x364>
 8004a80:	b224      	sxth	r4, r4
 8004a82:	f8ad 4006 	strh.w	r4, [sp, #6]
 8004a86:	9002      	str	r0, [sp, #8]
 8004a88:	9007      	str	r0, [sp, #28]
 8004a8a:	9106      	str	r1, [sp, #24]
 8004a8c:	ea4f 040c 	mov.w	r4, ip
 8004a90:	ed9f 0ab9 	vldr	s0, [pc, #740]	; 8004d78 <.text_3>
 8004a94:	f8bd 0068 	ldrh.w	r0, [sp, #104]	; 0x68
 8004a98:	f9bd 7006 	ldrsh.w	r7, [sp, #6]
 8004a9c:	2800      	cmp	r0, #0
 8004a9e:	f000 8096 	beq.w	8004bce <pool_func_mp_array_f32+0x1c2>
 8004aa2:	9907      	ldr	r1, [sp, #28]
 8004aa4:	9808      	ldr	r0, [sp, #32]
 8004aa6:	f9bd 6050 	ldrsh.w	r6, [sp, #80]	; 0x50
 8004aaa:	f8bd 5068 	ldrh.w	r5, [sp, #104]	; 0x68
 8004aae:	9103      	str	r1, [sp, #12]
 8004ab0:	f04f 0a00 	mov.w	sl, #0
 8004ab4:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
 8004ab8:	f8ad c002 	strh.w	ip, [sp, #2]
 8004abc:	4348      	muls	r0, r1
 8004abe:	b200      	sxth	r0, r0
 8004ac0:	900a      	str	r0, [sp, #40]	; 0x28
 8004ac2:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
 8004ac6:	9204      	str	r2, [sp, #16]
 8004ac8:	f8ad 6000 	strh.w	r6, [sp]
 8004acc:	f8cd 5014 	str.w	r5, [sp, #20]
 8004ad0:	f8ad 8004 	strh.w	r8, [sp, #4]
 8004ad4:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 8004ad8:	f9bd e000 	ldrsh.w	lr, [sp]
 8004adc:	2100      	movs	r1, #0
 8004ade:	2800      	cmp	r0, #0
 8004ae0:	d05d      	beq.n	8004b9e <pool_func_mp_array_f32+0x192>
 8004ae2:	9a03      	ldr	r2, [sp, #12]
 8004ae4:	9804      	ldr	r0, [sp, #16]
 8004ae6:	4362      	muls	r2, r4
 8004ae8:	ab02      	add	r3, sp, #8
 8004aea:	eb00 0c82 	add.w	ip, r0, r2, lsl #2
 8004aee:	5e58      	ldrsh	r0, [r3, r1]
 8004af0:	9009      	str	r0, [sp, #36]	; 0x24
 8004af2:	fa0f f58a 	sxth.w	r5, sl
 8004af6:	f8bd 8004 	ldrh.w	r8, [sp, #4]
 8004afa:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004afc:	42b8      	cmp	r0, r7
 8004afe:	eef0 0a40 	vmov.f32	s1, s0
 8004b02:	da45      	bge.n	8004b90 <pool_func_mp_array_f32+0x184>
 8004b04:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004b06:	fb08 f900 	mul.w	r9, r8, r0
 8004b0a:	1aba      	subs	r2, r7, r2
 8004b0c:	4658      	mov	r0, fp
 8004b0e:	4575      	cmp	r5, lr
 8004b10:	462e      	mov	r6, r5
 8004b12:	da39      	bge.n	8004b88 <pool_func_mp_array_f32+0x17c>
 8004b14:	ebae 0305 	sub.w	r3, lr, r5
 8004b18:	ea5f 7bc3 	movs.w	fp, r3, lsl #31
 8004b1c:	d50f      	bpl.n	8004b3e <pool_func_mp_array_f32+0x132>
 8004b1e:	eb09 0b06 	add.w	fp, r9, r6
 8004b22:	fb0b 1b04 	mla	fp, fp, r4, r1
 8004b26:	eb00 0b8b 	add.w	fp, r0, fp, lsl #2
 8004b2a:	ed9b 1a00 	vldr	s2, [fp]
 8004b2e:	eeb4 1a60 	vcmp.f32	s2, s1
 8004b32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b36:	bf58      	it	pl
 8004b38:	eef0 0a41 	vmovpl.f32	s1, s2
 8004b3c:	1c76      	adds	r6, r6, #1
 8004b3e:	085b      	lsrs	r3, r3, #1
 8004b40:	f000 8022 	beq.w	8004b88 <pool_func_mp_array_f32+0x17c>
 8004b44:	eb09 0b06 	add.w	fp, r9, r6
 8004b48:	fb0b 1b04 	mla	fp, fp, r4, r1
 8004b4c:	eb00 0b8b 	add.w	fp, r0, fp, lsl #2
 8004b50:	ed9b 1a00 	vldr	s2, [fp]
 8004b54:	eeb4 1a60 	vcmp.f32	s2, s1
 8004b58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b5c:	bf58      	it	pl
 8004b5e:	eef0 0a41 	vmovpl.f32	s1, s2
 8004b62:	1c76      	adds	r6, r6, #1
 8004b64:	eb09 0b06 	add.w	fp, r9, r6
 8004b68:	fb0b 1b04 	mla	fp, fp, r4, r1
 8004b6c:	eb00 0b8b 	add.w	fp, r0, fp, lsl #2
 8004b70:	ed9b 1a00 	vldr	s2, [fp]
 8004b74:	eeb4 1a60 	vcmp.f32	s2, s1
 8004b78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b7c:	bf58      	it	pl
 8004b7e:	eef0 0a41 	vmovpl.f32	s1, s2
 8004b82:	1c76      	adds	r6, r6, #1
 8004b84:	1e5b      	subs	r3, r3, #1
 8004b86:	d1dd      	bne.n	8004b44 <pool_func_mp_array_f32+0x138>
 8004b88:	1e52      	subs	r2, r2, #1
 8004b8a:	44c1      	add	r9, r8
 8004b8c:	d1bf      	bne.n	8004b0e <pool_func_mp_array_f32+0x102>
 8004b8e:	4683      	mov	fp, r0
 8004b90:	1c49      	adds	r1, r1, #1
 8004b92:	edcc 0a00 	vstr	s1, [ip]
 8004b96:	42a1      	cmp	r1, r4
 8004b98:	f10c 0c04 	add.w	ip, ip, #4
 8004b9c:	dbad      	blt.n	8004afa <pool_func_mp_array_f32+0xee>
 8004b9e:	9803      	ldr	r0, [sp, #12]
 8004ba0:	f8bd 1000 	ldrh.w	r1, [sp]
 8004ba4:	1c40      	adds	r0, r0, #1
 8004ba6:	9003      	str	r0, [sp, #12]
 8004ba8:	f8bd 0060 	ldrh.w	r0, [sp, #96]	; 0x60
 8004bac:	4482      	add	sl, r0
 8004bae:	f9bd 0060 	ldrsh.w	r0, [sp, #96]	; 0x60
 8004bb2:	1841      	adds	r1, r0, r1
 8004bb4:	f8ad 1000 	strh.w	r1, [sp]
 8004bb8:	9905      	ldr	r1, [sp, #20]
 8004bba:	1e49      	subs	r1, r1, #1
 8004bbc:	9105      	str	r1, [sp, #20]
 8004bbe:	d189      	bne.n	8004ad4 <pool_func_mp_array_f32+0xc8>
 8004bc0:	f8bd c002 	ldrh.w	ip, [sp, #2]
 8004bc4:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 8004bc8:	9a04      	ldr	r2, [sp, #16]
 8004bca:	f8bd 8004 	ldrh.w	r8, [sp, #4]
 8004bce:	9908      	ldr	r1, [sp, #32]
 8004bd0:	f8bd 5068 	ldrh.w	r5, [sp, #104]	; 0x68
 8004bd4:	f8bd 7006 	ldrh.w	r7, [sp, #6]
 8004bd8:	1c49      	adds	r1, r1, #1
 8004bda:	9108      	str	r1, [sp, #32]
 8004bdc:	9907      	ldr	r1, [sp, #28]
 8004bde:	194d      	adds	r5, r1, r5
 8004be0:	9507      	str	r5, [sp, #28]
 8004be2:	9902      	ldr	r1, [sp, #8]
 8004be4:	f8bd 5064 	ldrh.w	r5, [sp, #100]	; 0x64
 8004be8:	194d      	adds	r5, r1, r5
 8004bea:	9502      	str	r5, [sp, #8]
 8004bec:	f9bd 1064 	ldrsh.w	r1, [sp, #100]	; 0x64
 8004bf0:	9d06      	ldr	r5, [sp, #24]
 8004bf2:	19cf      	adds	r7, r1, r7
 8004bf4:	1e6d      	subs	r5, r5, #1
 8004bf6:	f8ad 7006 	strh.w	r7, [sp, #6]
 8004bfa:	9506      	str	r5, [sp, #24]
 8004bfc:	f000 80b8 	beq.w	8004d70 <pool_func_mp_array_f32+0x364>
 8004c00:	e748      	b.n	8004a94 <pool_func_mp_array_f32+0x88>
 8004c02:	0008      	movs	r0, r1
 8004c04:	f000 80b4 	beq.w	8004d70 <pool_func_mp_array_f32+0x364>
 8004c08:	427f      	negs	r7, r7
 8004c0a:	19e4      	adds	r4, r4, r7
 8004c0c:	f8ad 7000 	strh.w	r7, [sp]
 8004c10:	f8ad 400a 	strh.w	r4, [sp, #10]
 8004c14:	2000      	movs	r0, #0
 8004c16:	9008      	str	r0, [sp, #32]
 8004c18:	f8cd 101c 	str.w	r1, [sp, #28]
 8004c1c:	ed9f 0a56 	vldr	s0, [pc, #344]	; 8004d78 <.text_3>
 8004c20:	f8bd 0068 	ldrh.w	r0, [sp, #104]	; 0x68
 8004c24:	f9bd a00a 	ldrsh.w	sl, [sp, #10]
 8004c28:	2800      	cmp	r0, #0
 8004c2a:	f000 8089 	beq.w	8004d40 <pool_func_mp_array_f32+0x334>
 8004c2e:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 8004c32:	f9bd 7050 	ldrsh.w	r7, [sp, #80]	; 0x50
 8004c36:	9908      	ldr	r1, [sp, #32]
 8004c38:	f8bd 4068 	ldrh.w	r4, [sp, #104]	; 0x68
 8004c3c:	9103      	str	r1, [sp, #12]
 8004c3e:	f1ce 0e00 	rsb	lr, lr, #0
 8004c42:	4477      	add	r7, lr
 8004c44:	f8ad c002 	strh.w	ip, [sp, #2]
 8004c48:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
 8004c4c:	9204      	str	r2, [sp, #16]
 8004c4e:	f8ad e006 	strh.w	lr, [sp, #6]
 8004c52:	f8ad 7008 	strh.w	r7, [sp, #8]
 8004c56:	9406      	str	r4, [sp, #24]
 8004c58:	f8ad 8004 	strh.w	r8, [sp, #4]
 8004c5c:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 8004c60:	f9bd 0008 	ldrsh.w	r0, [sp, #8]
 8004c64:	2600      	movs	r6, #0
 8004c66:	2900      	cmp	r1, #0
 8004c68:	d04e      	beq.n	8004d08 <pool_func_mp_array_f32+0x2fc>
 8004c6a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8004c6e:	9b03      	ldr	r3, [sp, #12]
 8004c70:	9904      	ldr	r1, [sp, #16]
 8004c72:	f9bd 4006 	ldrsh.w	r4, [sp, #6]
 8004c76:	435a      	muls	r2, r3
 8004c78:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8004c7c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8004c80:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8004c84:	f8cd 1014 	str.w	r1, [sp, #20]
 8004c88:	f9bd 1000 	ldrsh.w	r1, [sp]
 8004c8c:	4551      	cmp	r1, sl
 8004c8e:	eef0 0a40 	vmov.f32	s1, s0
 8004c92:	da2a      	bge.n	8004cea <pool_func_mp_array_f32+0x2de>
 8004c94:	fb03 f901 	mul.w	r9, r3, r1
 8004c98:	f8ad 5002 	strh.w	r5, [sp, #2]
 8004c9c:	4284      	cmp	r4, r0
 8004c9e:	4625      	mov	r5, r4
 8004ca0:	da1d      	bge.n	8004cde <pool_func_mp_array_f32+0x2d2>
 8004ca2:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8004ca6:	46de      	mov	lr, fp
 8004ca8:	2900      	cmp	r1, #0
 8004caa:	bf58      	it	pl
 8004cac:	2d00      	cmppl	r5, #0
 8004cae:	d412      	bmi.n	8004cd6 <pool_func_mp_array_f32+0x2ca>
 8004cb0:	42b9      	cmp	r1, r7
 8004cb2:	bfb8      	it	lt
 8004cb4:	429d      	cmplt	r5, r3
 8004cb6:	da0e      	bge.n	8004cd6 <pool_func_mp_array_f32+0x2ca>
 8004cb8:	eb09 0b05 	add.w	fp, r9, r5
 8004cbc:	fb0b 6b02 	mla	fp, fp, r2, r6
 8004cc0:	eb0e 0b8b 	add.w	fp, lr, fp, lsl #2
 8004cc4:	ed9b 1a00 	vldr	s2, [fp]
 8004cc8:	eeb4 1a60 	vcmp.f32	s2, s1
 8004ccc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cd0:	bf58      	it	pl
 8004cd2:	eef0 0a41 	vmovpl.f32	s1, s2
 8004cd6:	1c6d      	adds	r5, r5, #1
 8004cd8:	4285      	cmp	r5, r0
 8004cda:	dbe5      	blt.n	8004ca8 <pool_func_mp_array_f32+0x29c>
 8004cdc:	46f3      	mov	fp, lr
 8004cde:	1c49      	adds	r1, r1, #1
 8004ce0:	4551      	cmp	r1, sl
 8004ce2:	4499      	add	r9, r3
 8004ce4:	dbda      	blt.n	8004c9c <pool_func_mp_array_f32+0x290>
 8004ce6:	f8bd 5002 	ldrh.w	r5, [sp, #2]
 8004cea:	1c76      	adds	r6, r6, #1
 8004cec:	9905      	ldr	r1, [sp, #20]
 8004cee:	edc1 0a00 	vstr	s1, [r1]
 8004cf2:	9905      	ldr	r1, [sp, #20]
 8004cf4:	1d0f      	adds	r7, r1, #4
 8004cf6:	4296      	cmp	r6, r2
 8004cf8:	9705      	str	r7, [sp, #20]
 8004cfa:	dbc5      	blt.n	8004c88 <pool_func_mp_array_f32+0x27c>
 8004cfc:	f8ad 2002 	strh.w	r2, [sp, #2]
 8004d00:	f8ad 4006 	strh.w	r4, [sp, #6]
 8004d04:	f8ad 3004 	strh.w	r3, [sp, #4]
 8004d08:	9803      	ldr	r0, [sp, #12]
 8004d0a:	f9bd 1060 	ldrsh.w	r1, [sp, #96]	; 0x60
 8004d0e:	1c40      	adds	r0, r0, #1
 8004d10:	9003      	str	r0, [sp, #12]
 8004d12:	f8bd 0008 	ldrh.w	r0, [sp, #8]
 8004d16:	1808      	adds	r0, r1, r0
 8004d18:	f8ad 0008 	strh.w	r0, [sp, #8]
 8004d1c:	f9bd 1060 	ldrsh.w	r1, [sp, #96]	; 0x60
 8004d20:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8004d24:	1808      	adds	r0, r1, r0
 8004d26:	f8ad 0006 	strh.w	r0, [sp, #6]
 8004d2a:	9806      	ldr	r0, [sp, #24]
 8004d2c:	1e40      	subs	r0, r0, #1
 8004d2e:	9006      	str	r0, [sp, #24]
 8004d30:	d194      	bne.n	8004c5c <pool_func_mp_array_f32+0x250>
 8004d32:	f8bd c002 	ldrh.w	ip, [sp, #2]
 8004d36:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 8004d3a:	9a04      	ldr	r2, [sp, #16]
 8004d3c:	f8bd 8004 	ldrh.w	r8, [sp, #4]
 8004d40:	9908      	ldr	r1, [sp, #32]
 8004d42:	f8bd 4068 	ldrh.w	r4, [sp, #104]	; 0x68
 8004d46:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 8004d4a:	190c      	adds	r4, r1, r4
 8004d4c:	9408      	str	r4, [sp, #32]
 8004d4e:	f8bd 4000 	ldrh.w	r4, [sp]
 8004d52:	f9bd 1064 	ldrsh.w	r1, [sp, #100]	; 0x64
 8004d56:	19cf      	adds	r7, r1, r7
 8004d58:	f9bd 1064 	ldrsh.w	r1, [sp, #100]	; 0x64
 8004d5c:	f8ad 700a 	strh.w	r7, [sp, #10]
 8004d60:	190c      	adds	r4, r1, r4
 8004d62:	f8ad 4000 	strh.w	r4, [sp]
 8004d66:	9c07      	ldr	r4, [sp, #28]
 8004d68:	1e64      	subs	r4, r4, #1
 8004d6a:	9407      	str	r4, [sp, #28]
 8004d6c:	f47f af58 	bne.w	8004c20 <pool_func_mp_array_f32+0x214>
 8004d70:	b00b      	add	sp, #44	; 0x2c
 8004d72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08004d78 <.text_3>:
 8004d78:	cf000000 	.word	0xcf000000

08004d7c <pool_func_ap_array_f32>:
 8004d7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d80:	468b      	mov	fp, r1
 8004d82:	b08c      	sub	sp, #48	; 0x30
 8004d84:	4699      	mov	r9, r3
 8004d86:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004d88:	f9bd c068 	ldrsh.w	ip, [sp, #104]	; 0x68
 8004d8c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8004d8e:	4692      	mov	sl, r2
 8004d90:	1e4f      	subs	r7, r1, #1
 8004d92:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8004d94:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8004d96:	f8dd 8064 	ldr.w	r8, [sp, #100]	; 0x64
 8004d9a:	6880      	ldr	r0, [r0, #8]
 8004d9c:	68ad      	ldr	r5, [r5, #8]
 8004d9e:	fb17 fc0c 	smulbb	ip, r7, ip
 8004da2:	ebac 0c03 	sub.w	ip, ip, r3
 8004da6:	f8bd 705c 	ldrh.w	r7, [sp, #92]	; 0x5c
 8004daa:	4494      	add	ip, r2
 8004dac:	f1ac 0401 	sub.w	r4, ip, #1
 8004db0:	431f      	orrs	r7, r3
 8004db2:	eba4 060a 	sub.w	r6, r4, sl
 8004db6:	f040 80dc 	bne.w	8004f72 <pool_func_ap_array_f32+0x1f6>
 8004dba:	f9bd 706c 	ldrsh.w	r7, [sp, #108]	; 0x6c
 8004dbe:	1e7c      	subs	r4, r7, #1
 8004dc0:	f9bd 705c 	ldrsh.w	r7, [sp, #92]	; 0x5c
 8004dc4:	fb14 f408 	smulbb	r4, r4, r8
 8004dc8:	1be4      	subs	r4, r4, r7
 8004dca:	f9bd 7054 	ldrsh.w	r7, [sp, #84]	; 0x54
 8004dce:	193c      	adds	r4, r7, r4
 8004dd0:	1e64      	subs	r4, r4, #1
 8004dd2:	eba4 040b 	sub.w	r4, r4, fp
 8004dd6:	b224      	sxth	r4, r4
 8004dd8:	2c00      	cmp	r4, #0
 8004dda:	bf44      	itt	mi
 8004ddc:	b234      	sxthmi	r4, r6
 8004dde:	2c00      	cmpmi	r4, #0
 8004de0:	f140 80c7 	bpl.w	8004f72 <pool_func_ap_array_f32+0x1f6>
 8004de4:	2400      	movs	r4, #0
 8004de6:	000b      	movs	r3, r1
 8004de8:	9409      	str	r4, [sp, #36]	; 0x24
 8004dea:	f000 81af 	beq.w	800514c <pool_func_ap_array_f32+0x3d0>
 8004dee:	b212      	sxth	r2, r2
 8004df0:	f8ad 2004 	strh.w	r2, [sp, #4]
 8004df4:	9408      	str	r4, [sp, #32]
 8004df6:	9407      	str	r4, [sp, #28]
 8004df8:	f8cd 1018 	str.w	r1, [sp, #24]
 8004dfc:	f8bd 106c 	ldrh.w	r1, [sp, #108]	; 0x6c
 8004e00:	f9bd e004 	ldrsh.w	lr, [sp, #4]
 8004e04:	2900      	cmp	r1, #0
 8004e06:	f000 809a 	beq.w	8004f3e <pool_func_ap_array_f32+0x1c2>
 8004e0a:	9907      	ldr	r1, [sp, #28]
 8004e0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004e0e:	f9bd 4054 	ldrsh.w	r4, [sp, #84]	; 0x54
 8004e12:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
 8004e16:	9102      	str	r1, [sp, #8]
 8004e18:	2700      	movs	r7, #0
 8004e1a:	f8bd 1068 	ldrh.w	r1, [sp, #104]	; 0x68
 8004e1e:	434a      	muls	r2, r1
 8004e20:	b212      	sxth	r2, r2
 8004e22:	ae08      	add	r6, sp, #32
 8004e24:	920b      	str	r2, [sp, #44]	; 0x2c
 8004e26:	46ca      	mov	sl, r9
 8004e28:	5ff1      	ldrsh	r1, [r6, r7]
 8004e2a:	910a      	str	r1, [sp, #40]	; 0x28
 8004e2c:	f8ad 9002 	strh.w	r9, [sp, #2]
 8004e30:	f8ad 8064 	strh.w	r8, [sp, #100]	; 0x64
 8004e34:	9505      	str	r5, [sp, #20]
 8004e36:	f8ad 4000 	strh.w	r4, [sp]
 8004e3a:	9303      	str	r3, [sp, #12]
 8004e3c:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 8004e40:	f9bd c000 	ldrsh.w	ip, [sp]
 8004e44:	2200      	movs	r2, #0
 8004e46:	2900      	cmp	r1, #0
 8004e48:	d063      	beq.n	8004f12 <pool_func_ap_array_f32+0x196>
 8004e4a:	9d02      	ldr	r5, [sp, #8]
 8004e4c:	9905      	ldr	r1, [sp, #20]
 8004e4e:	f8cd e010 	str.w	lr, [sp, #16]
 8004e52:	fb05 f50a 	mul.w	r5, r5, sl
 8004e56:	eb01 0585 	add.w	r5, r1, r5, lsl #2
 8004e5a:	f8ad b006 	strh.w	fp, [sp, #6]
 8004e5e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004e60:	9b04      	ldr	r3, [sp, #16]
 8004e62:	4299      	cmp	r1, r3
 8004e64:	ed9f 0abb 	vldr	s0, [pc, #748]	; 8005154 <.text_5>
 8004e68:	eddf 0aba 	vldr	s1, [pc, #744]	; 8005154 <.text_5>
 8004e6c:	da43      	bge.n	8004ef6 <pool_func_ap_array_f32+0x17a>
 8004e6e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8004e70:	f8bd b006 	ldrh.w	fp, [sp, #6]
 8004e74:	eba3 0804 	sub.w	r8, r3, r4
 8004e78:	fb01 f10b 	mul.w	r1, r1, fp
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	ee10 ea90 	vmov	lr, s1
 8004e82:	b23c      	sxth	r4, r7
 8004e84:	4564      	cmp	r4, ip
 8004e86:	46b9      	mov	r9, r7
 8004e88:	da2e      	bge.n	8004ee8 <pool_func_ap_array_f32+0x16c>
 8004e8a:	ebac 0004 	sub.w	r0, ip, r4
 8004e8e:	44e6      	add	lr, ip
 8004e90:	07c6      	lsls	r6, r0, #31
 8004e92:	ebae 0e04 	sub.w	lr, lr, r4
 8004e96:	d50a      	bpl.n	8004eae <pool_func_ap_array_f32+0x132>
 8004e98:	190c      	adds	r4, r1, r4
 8004e9a:	fb04 240a 	mla	r4, r4, sl, r2
 8004e9e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8004ea2:	f109 0901 	add.w	r9, r9, #1
 8004ea6:	edd4 0a00 	vldr	s1, [r4]
 8004eaa:	ee30 0a20 	vadd.f32	s0, s0, s1
 8004eae:	0840      	lsrs	r0, r0, #1
 8004eb0:	f000 801a 	beq.w	8004ee8 <pool_func_ap_array_f32+0x16c>
 8004eb4:	fa01 f489 	sxtah	r4, r1, r9
 8004eb8:	f109 0901 	add.w	r9, r9, #1
 8004ebc:	fb04 240a 	mla	r4, r4, sl, r2
 8004ec0:	fa01 f689 	sxtah	r6, r1, r9
 8004ec4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8004ec8:	fb06 260a 	mla	r6, r6, sl, r2
 8004ecc:	edd4 0a00 	vldr	s1, [r4]
 8004ed0:	eb03 0486 	add.w	r4, r3, r6, lsl #2
 8004ed4:	ee30 0a20 	vadd.f32	s0, s0, s1
 8004ed8:	ed94 1a00 	vldr	s2, [r4]
 8004edc:	1e40      	subs	r0, r0, #1
 8004ede:	ee30 0a01 	vadd.f32	s0, s0, s2
 8004ee2:	f109 0901 	add.w	r9, r9, #1
 8004ee6:	d1e5      	bne.n	8004eb4 <pool_func_ap_array_f32+0x138>
 8004ee8:	f1b8 0801 	subs.w	r8, r8, #1
 8004eec:	4459      	add	r1, fp
 8004eee:	d1c8      	bne.n	8004e82 <pool_func_ap_array_f32+0x106>
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	ee00 ea90 	vmov	s1, lr
 8004ef6:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8004efa:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8004efe:	ed85 0a00 	vstr	s0, [r5]
 8004f02:	1c52      	adds	r2, r2, #1
 8004f04:	1d2d      	adds	r5, r5, #4
 8004f06:	4552      	cmp	r2, sl
 8004f08:	dba9      	blt.n	8004e5e <pool_func_ap_array_f32+0xe2>
 8004f0a:	f8dd e010 	ldr.w	lr, [sp, #16]
 8004f0e:	f8bd b006 	ldrh.w	fp, [sp, #6]
 8004f12:	9902      	ldr	r1, [sp, #8]
 8004f14:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 8004f18:	1c49      	adds	r1, r1, #1
 8004f1a:	9102      	str	r1, [sp, #8]
 8004f1c:	f8bd 1000 	ldrh.w	r1, [sp]
 8004f20:	1851      	adds	r1, r2, r1
 8004f22:	f8ad 1000 	strh.w	r1, [sp]
 8004f26:	f9bd 1064 	ldrsh.w	r1, [sp, #100]	; 0x64
 8004f2a:	9a03      	ldr	r2, [sp, #12]
 8004f2c:	19cf      	adds	r7, r1, r7
 8004f2e:	1e52      	subs	r2, r2, #1
 8004f30:	9203      	str	r2, [sp, #12]
 8004f32:	d183      	bne.n	8004e3c <pool_func_ap_array_f32+0xc0>
 8004f34:	f8bd 9002 	ldrh.w	r9, [sp, #2]
 8004f38:	f8bd 8064 	ldrh.w	r8, [sp, #100]	; 0x64
 8004f3c:	9d05      	ldr	r5, [sp, #20]
 8004f3e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004f40:	f8bd 206c 	ldrh.w	r2, [sp, #108]	; 0x6c
 8004f44:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8004f48:	1c49      	adds	r1, r1, #1
 8004f4a:	9109      	str	r1, [sp, #36]	; 0x24
 8004f4c:	9907      	ldr	r1, [sp, #28]
 8004f4e:	188a      	adds	r2, r1, r2
 8004f50:	9207      	str	r2, [sp, #28]
 8004f52:	9908      	ldr	r1, [sp, #32]
 8004f54:	f8bd 2068 	ldrh.w	r2, [sp, #104]	; 0x68
 8004f58:	188a      	adds	r2, r1, r2
 8004f5a:	9208      	str	r2, [sp, #32]
 8004f5c:	f9bd 1068 	ldrsh.w	r1, [sp, #104]	; 0x68
 8004f60:	9a06      	ldr	r2, [sp, #24]
 8004f62:	18cb      	adds	r3, r1, r3
 8004f64:	1e52      	subs	r2, r2, #1
 8004f66:	f8ad 3004 	strh.w	r3, [sp, #4]
 8004f6a:	9206      	str	r2, [sp, #24]
 8004f6c:	f000 80ee 	beq.w	800514c <pool_func_ap_array_f32+0x3d0>
 8004f70:	e744      	b.n	8004dfc <pool_func_ap_array_f32+0x80>
 8004f72:	000f      	movs	r7, r1
 8004f74:	f000 80ea 	beq.w	800514c <pool_func_ap_array_f32+0x3d0>
 8004f78:	425b      	negs	r3, r3
 8004f7a:	18d2      	adds	r2, r2, r3
 8004f7c:	2700      	movs	r7, #0
 8004f7e:	f8ad 3000 	strh.w	r3, [sp]
 8004f82:	f8ad 200a 	strh.w	r2, [sp, #10]
 8004f86:	9709      	str	r7, [sp, #36]	; 0x24
 8004f88:	f8cd 1020 	str.w	r1, [sp, #32]
 8004f8c:	f8bd 106c 	ldrh.w	r1, [sp, #108]	; 0x6c
 8004f90:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8004f94:	2900      	cmp	r1, #0
 8004f96:	f000 80c1 	beq.w	800511c <pool_func_ap_array_f32+0x3a0>
 8004f9a:	f9bd 605c 	ldrsh.w	r6, [sp, #92]	; 0x5c
 8004f9e:	f9bd 4054 	ldrsh.w	r4, [sp, #84]	; 0x54
 8004fa2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004fa4:	f8bd 106c 	ldrh.w	r1, [sp, #108]	; 0x6c
 8004fa8:	9204      	str	r2, [sp, #16]
 8004faa:	4276      	negs	r6, r6
 8004fac:	19a4      	adds	r4, r4, r6
 8004fae:	f8ad 9002 	strh.w	r9, [sp, #2]
 8004fb2:	f8ad 8064 	strh.w	r8, [sp, #100]	; 0x64
 8004fb6:	9505      	str	r5, [sp, #20]
 8004fb8:	f8ad 6004 	strh.w	r6, [sp, #4]
 8004fbc:	f8ad 4008 	strh.w	r4, [sp, #8]
 8004fc0:	f8cd 101c 	str.w	r1, [sp, #28]
 8004fc4:	f8ad b006 	strh.w	fp, [sp, #6]
 8004fc8:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8004fcc:	f9bd 8008 	ldrsh.w	r8, [sp, #8]
 8004fd0:	2100      	movs	r1, #0
 8004fd2:	2a00      	cmp	r2, #0
 8004fd4:	f000 8085 	beq.w	80050e2 <pool_func_ap_array_f32+0x366>
 8004fd8:	f8bd 5002 	ldrh.w	r5, [sp, #2]
 8004fdc:	9c04      	ldr	r4, [sp, #16]
 8004fde:	9a05      	ldr	r2, [sp, #20]
 8004fe0:	f8bd 9006 	ldrh.w	r9, [sp, #6]
 8004fe4:	f8ad a00c 	strh.w	sl, [sp, #12]
 8004fe8:	4365      	muls	r5, r4
 8004fea:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8004fee:	9506      	str	r5, [sp, #24]
 8004ff0:	f9bd 5000 	ldrsh.w	r5, [sp]
 8004ff4:	f8bd a002 	ldrh.w	sl, [sp, #2]
 8004ff8:	429d      	cmp	r5, r3
 8004ffa:	ed9f 0a56 	vldr	s0, [pc, #344]	; 8005154 <.text_5>
 8004ffe:	eddf 0a55 	vldr	s1, [pc, #340]	; 8005154 <.text_5>
 8005002:	da5d      	bge.n	80050c0 <pool_func_ap_array_f32+0x344>
 8005004:	930a      	str	r3, [sp, #40]	; 0x28
 8005006:	fb09 fe05 	mul.w	lr, r9, r5
 800500a:	462b      	mov	r3, r5
 800500c:	f9bd 5004 	ldrsh.w	r5, [sp, #4]
 8005010:	f8bd b00c 	ldrh.w	fp, [sp, #12]
 8005014:	ee10 2a90 	vmov	r2, s1
 8005018:	4545      	cmp	r5, r8
 800501a:	462f      	mov	r7, r5
 800501c:	da44      	bge.n	80050a8 <pool_func_ap_array_f32+0x32c>
 800501e:	eba8 0405 	sub.w	r4, r8, r5
 8005022:	07e6      	lsls	r6, r4, #31
 8005024:	d513      	bpl.n	800504e <pool_func_ap_array_f32+0x2d2>
 8005026:	2b00      	cmp	r3, #0
 8005028:	bf58      	it	pl
 800502a:	2f00      	cmppl	r7, #0
 800502c:	d40e      	bmi.n	800504c <pool_func_ap_array_f32+0x2d0>
 800502e:	455b      	cmp	r3, fp
 8005030:	bfb8      	it	lt
 8005032:	454f      	cmplt	r7, r9
 8005034:	da0a      	bge.n	800504c <pool_func_ap_array_f32+0x2d0>
 8005036:	eb0e 0607 	add.w	r6, lr, r7
 800503a:	fb06 160a 	mla	r6, r6, sl, r1
 800503e:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8005042:	1c52      	adds	r2, r2, #1
 8005044:	edd6 0a00 	vldr	s1, [r6]
 8005048:	ee30 0a20 	vadd.f32	s0, s0, s1
 800504c:	1c7f      	adds	r7, r7, #1
 800504e:	0864      	lsrs	r4, r4, #1
 8005050:	d02a      	beq.n	80050a8 <pool_func_ap_array_f32+0x32c>
 8005052:	2b00      	cmp	r3, #0
 8005054:	d405      	bmi.n	8005062 <pool_func_ap_array_f32+0x2e6>
 8005056:	2f00      	cmp	r7, #0
 8005058:	bf48      	it	mi
 800505a:	1c7e      	addmi	r6, r7, #1
 800505c:	d410      	bmi.n	8005080 <pool_func_ap_array_f32+0x304>
 800505e:	455b      	cmp	r3, fp
 8005060:	db01      	blt.n	8005066 <pool_func_ap_array_f32+0x2ea>
 8005062:	1c7e      	adds	r6, r7, #1
 8005064:	e01d      	b.n	80050a2 <pool_func_ap_array_f32+0x326>
 8005066:	1c7e      	adds	r6, r7, #1
 8005068:	454f      	cmp	r7, r9
 800506a:	da09      	bge.n	8005080 <pool_func_ap_array_f32+0x304>
 800506c:	4477      	add	r7, lr
 800506e:	fb07 170a 	mla	r7, r7, sl, r1
 8005072:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 8005076:	1c52      	adds	r2, r2, #1
 8005078:	edd7 0a00 	vldr	s1, [r7]
 800507c:	ee30 0a20 	vadd.f32	s0, s0, s1
 8005080:	2e00      	cmp	r6, #0
 8005082:	d40e      	bmi.n	80050a2 <pool_func_ap_array_f32+0x326>
 8005084:	455b      	cmp	r3, fp
 8005086:	bfb8      	it	lt
 8005088:	454e      	cmplt	r6, r9
 800508a:	da0a      	bge.n	80050a2 <pool_func_ap_array_f32+0x326>
 800508c:	eb0e 0706 	add.w	r7, lr, r6
 8005090:	fb07 170a 	mla	r7, r7, sl, r1
 8005094:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 8005098:	1c52      	adds	r2, r2, #1
 800509a:	edd7 0a00 	vldr	s1, [r7]
 800509e:	ee30 0a20 	vadd.f32	s0, s0, s1
 80050a2:	1c77      	adds	r7, r6, #1
 80050a4:	1e64      	subs	r4, r4, #1
 80050a6:	d1d4      	bne.n	8005052 <pool_func_ap_array_f32+0x2d6>
 80050a8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80050aa:	1c5b      	adds	r3, r3, #1
 80050ac:	42bb      	cmp	r3, r7
 80050ae:	44ce      	add	lr, r9
 80050b0:	dbb2      	blt.n	8005018 <pool_func_ap_array_f32+0x29c>
 80050b2:	463b      	mov	r3, r7
 80050b4:	ee00 2a90 	vmov	s1, r2
 80050b8:	f8ad 5004 	strh.w	r5, [sp, #4]
 80050bc:	f8ad b00c 	strh.w	fp, [sp, #12]
 80050c0:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 80050c4:	9d06      	ldr	r5, [sp, #24]
 80050c6:	ee80 0a20 	vdiv.f32	s0, s0, s1
 80050ca:	ed85 0a00 	vstr	s0, [r5]
 80050ce:	1c49      	adds	r1, r1, #1
 80050d0:	9a06      	ldr	r2, [sp, #24]
 80050d2:	1d15      	adds	r5, r2, #4
 80050d4:	4551      	cmp	r1, sl
 80050d6:	9506      	str	r5, [sp, #24]
 80050d8:	db8a      	blt.n	8004ff0 <pool_func_ap_array_f32+0x274>
 80050da:	f8ad 9006 	strh.w	r9, [sp, #6]
 80050de:	f8bd a00c 	ldrh.w	sl, [sp, #12]
 80050e2:	9904      	ldr	r1, [sp, #16]
 80050e4:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 80050e8:	1c49      	adds	r1, r1, #1
 80050ea:	9104      	str	r1, [sp, #16]
 80050ec:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 80050f0:	1851      	adds	r1, r2, r1
 80050f2:	f8ad 1008 	strh.w	r1, [sp, #8]
 80050f6:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 80050fa:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 80050fe:	1851      	adds	r1, r2, r1
 8005100:	f8ad 1004 	strh.w	r1, [sp, #4]
 8005104:	9907      	ldr	r1, [sp, #28]
 8005106:	1e49      	subs	r1, r1, #1
 8005108:	9107      	str	r1, [sp, #28]
 800510a:	f47f af5d 	bne.w	8004fc8 <pool_func_ap_array_f32+0x24c>
 800510e:	f8bd 9002 	ldrh.w	r9, [sp, #2]
 8005112:	f8bd 8064 	ldrh.w	r8, [sp, #100]	; 0x64
 8005116:	9d05      	ldr	r5, [sp, #20]
 8005118:	f8bd b006 	ldrh.w	fp, [sp, #6]
 800511c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800511e:	f8bd 206c 	ldrh.w	r2, [sp, #108]	; 0x6c
 8005122:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8005126:	188a      	adds	r2, r1, r2
 8005128:	9209      	str	r2, [sp, #36]	; 0x24
 800512a:	f8bd 2000 	ldrh.w	r2, [sp]
 800512e:	f9bd 1068 	ldrsh.w	r1, [sp, #104]	; 0x68
 8005132:	18cb      	adds	r3, r1, r3
 8005134:	f9bd 1068 	ldrsh.w	r1, [sp, #104]	; 0x68
 8005138:	f8ad 300a 	strh.w	r3, [sp, #10]
 800513c:	188a      	adds	r2, r1, r2
 800513e:	f8ad 2000 	strh.w	r2, [sp]
 8005142:	9a08      	ldr	r2, [sp, #32]
 8005144:	1e52      	subs	r2, r2, #1
 8005146:	9208      	str	r2, [sp, #32]
 8005148:	f47f af20 	bne.w	8004f8c <pool_func_ap_array_f32+0x210>
 800514c:	b00c      	add	sp, #48	; 0x30
 800514e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08005154 <.text_5>:
 8005154:	00000000 	.word	0x00000000

08005158 <pool_func_mp_kernel_array_f32>:
 8005158:	b470      	push	{r4, r5, r6}
 800515a:	eb01 0482 	add.w	r4, r1, r2, lsl #2
 800515e:	42a1      	cmp	r1, r4
 8005160:	d257      	bcs.n	8005212 <pool_func_mp_kernel_array_f32+0xba>
 8005162:	2b00      	cmp	r3, #0
 8005164:	d051      	beq.n	800520a <pool_func_mp_kernel_array_f32+0xb2>
 8005166:	f013 0203 	ands.w	r2, r3, #3
 800516a:	460d      	mov	r5, r1
 800516c:	4606      	mov	r6, r0
 800516e:	d011      	beq.n	8005194 <pool_func_mp_kernel_array_f32+0x3c>
 8005170:	ed96 0a00 	vldr	s0, [r6]
 8005174:	edd5 0a00 	vldr	s1, [r5]
 8005178:	eef4 0a40 	vcmp.f32	s1, s0
 800517c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005180:	bf58      	it	pl
 8005182:	eeb0 0a60 	vmovpl.f32	s0, s1
 8005186:	ed86 0a00 	vstr	s0, [r6]
 800518a:	1e52      	subs	r2, r2, #1
 800518c:	1d36      	adds	r6, r6, #4
 800518e:	1d2d      	adds	r5, r5, #4
 8005190:	2a00      	cmp	r2, #0
 8005192:	d1ed      	bne.n	8005170 <pool_func_mp_kernel_array_f32+0x18>
 8005194:	089a      	lsrs	r2, r3, #2
 8005196:	d038      	beq.n	800520a <pool_func_mp_kernel_array_f32+0xb2>
 8005198:	edd5 0a00 	vldr	s1, [r5]
 800519c:	edd6 1a00 	vldr	s3, [r6]
 80051a0:	eef4 0a61 	vcmp.f32	s1, s3
 80051a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051a8:	bf48      	it	mi
 80051aa:	eef0 0a61 	vmovmi.f32	s1, s3
 80051ae:	edc6 0a00 	vstr	s1, [r6]
 80051b2:	edd5 0a01 	vldr	s1, [r5, #4]
 80051b6:	edd6 1a01 	vldr	s3, [r6, #4]
 80051ba:	ed96 0a02 	vldr	s0, [r6, #8]
 80051be:	eef4 0a61 	vcmp.f32	s1, s3
 80051c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051c6:	bf48      	it	mi
 80051c8:	eef0 0a61 	vmovmi.f32	s1, s3
 80051cc:	edc6 0a01 	vstr	s1, [r6, #4]
 80051d0:	ed95 1a02 	vldr	s2, [r5, #8]
 80051d4:	edd6 1a03 	vldr	s3, [r6, #12]
 80051d8:	eeb4 1a40 	vcmp.f32	s2, s0
 80051dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051e0:	bf48      	it	mi
 80051e2:	eeb0 1a40 	vmovmi.f32	s2, s0
 80051e6:	ed86 1a02 	vstr	s2, [r6, #8]
 80051ea:	edd5 0a03 	vldr	s1, [r5, #12]
 80051ee:	eef4 0a61 	vcmp.f32	s1, s3
 80051f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051f6:	bf58      	it	pl
 80051f8:	eef0 1a60 	vmovpl.f32	s3, s1
 80051fc:	edc6 1a03 	vstr	s3, [r6, #12]
 8005200:	1e52      	subs	r2, r2, #1
 8005202:	3610      	adds	r6, #16
 8005204:	3510      	adds	r5, #16
 8005206:	2a00      	cmp	r2, #0
 8005208:	d1c6      	bne.n	8005198 <pool_func_mp_kernel_array_f32+0x40>
 800520a:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800520e:	42a1      	cmp	r1, r4
 8005210:	d3a7      	bcc.n	8005162 <pool_func_mp_kernel_array_f32+0xa>
 8005212:	bc70      	pop	{r4, r5, r6}
 8005214:	4770      	bx	lr
	...

08005218 <pool_func_ap_kernel_array_f32>:
 8005218:	b4f0      	push	{r4, r5, r6, r7}
 800521a:	eb01 0582 	add.w	r5, r1, r2, lsl #2
 800521e:	9c05      	ldr	r4, [sp, #20]
 8005220:	42a9      	cmp	r1, r5
 8005222:	d251      	bcs.n	80052c8 <pool_func_ap_kernel_array_f32+0xb0>
 8005224:	2b00      	cmp	r3, #0
 8005226:	d04a      	beq.n	80052be <pool_func_ap_kernel_array_f32+0xa6>
 8005228:	f013 0203 	ands.w	r2, r3, #3
 800522c:	460e      	mov	r6, r1
 800522e:	4607      	mov	r7, r0
 8005230:	f000 800f 	beq.w	8005252 <pool_func_ap_kernel_array_f32+0x3a>
 8005234:	ed96 0a00 	vldr	s0, [r6]
 8005238:	2c01      	cmp	r4, #1
 800523a:	bf1c      	itt	ne
 800523c:	edd7 0a00 	vldrne	s1, [r7]
 8005240:	ee30 0a80 	vaddne.f32	s0, s1, s0
 8005244:	ed87 0a00 	vstr	s0, [r7]
 8005248:	1e52      	subs	r2, r2, #1
 800524a:	1d3f      	adds	r7, r7, #4
 800524c:	1d36      	adds	r6, r6, #4
 800524e:	2a00      	cmp	r2, #0
 8005250:	d1f0      	bne.n	8005234 <pool_func_ap_kernel_array_f32+0x1c>
 8005252:	089a      	lsrs	r2, r3, #2
 8005254:	d033      	beq.n	80052be <pool_func_ap_kernel_array_f32+0xa6>
 8005256:	2c01      	cmp	r4, #1
 8005258:	edd6 1a00 	vldr	s3, [r6]
 800525c:	d10c      	bne.n	8005278 <pool_func_ap_kernel_array_f32+0x60>
 800525e:	edc7 1a00 	vstr	s3, [r7]
 8005262:	ed96 0a01 	vldr	s0, [r6, #4]
 8005266:	ed87 0a01 	vstr	s0, [r7, #4]
 800526a:	edd6 1a02 	vldr	s3, [r6, #8]
 800526e:	edc7 1a02 	vstr	s3, [r7, #8]
 8005272:	edd6 1a03 	vldr	s3, [r6, #12]
 8005276:	e01b      	b.n	80052b0 <pool_func_ap_kernel_array_f32+0x98>
 8005278:	edd7 0a00 	vldr	s1, [r7]
 800527c:	ee30 0aa1 	vadd.f32	s0, s1, s3
 8005280:	ed87 0a00 	vstr	s0, [r7]
 8005284:	ed97 1a01 	vldr	s2, [r7, #4]
 8005288:	ed96 0a01 	vldr	s0, [r6, #4]
 800528c:	edd7 1a02 	vldr	s3, [r7, #8]
 8005290:	ee31 0a00 	vadd.f32	s0, s2, s0
 8005294:	ed87 0a01 	vstr	s0, [r7, #4]
 8005298:	edd6 0a02 	vldr	s1, [r6, #8]
 800529c:	ee31 0aa0 	vadd.f32	s0, s3, s1
 80052a0:	ed87 0a02 	vstr	s0, [r7, #8]
 80052a4:	ed97 0a03 	vldr	s0, [r7, #12]
 80052a8:	ed96 1a03 	vldr	s2, [r6, #12]
 80052ac:	ee70 1a01 	vadd.f32	s3, s0, s2
 80052b0:	edc7 1a03 	vstr	s3, [r7, #12]
 80052b4:	1e52      	subs	r2, r2, #1
 80052b6:	3710      	adds	r7, #16
 80052b8:	3610      	adds	r6, #16
 80052ba:	2a00      	cmp	r2, #0
 80052bc:	d1cb      	bne.n	8005256 <pool_func_ap_kernel_array_f32+0x3e>
 80052be:	2400      	movs	r4, #0
 80052c0:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80052c4:	42a9      	cmp	r1, r5
 80052c6:	d3ad      	bcc.n	8005224 <pool_func_ap_kernel_array_f32+0xc>
 80052c8:	9904      	ldr	r1, [sp, #16]
 80052ca:	b399      	cbz	r1, 8005334 <pool_func_ap_kernel_array_f32+0x11c>
 80052cc:	ee00 1a10 	vmov	s0, r1
 80052d0:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 80052d4:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80052d8:	ee80 0a80 	vdiv.f32	s0, s1, s0
 80052dc:	b353      	cbz	r3, 8005334 <pool_func_ap_kernel_array_f32+0x11c>
 80052de:	f013 0103 	ands.w	r1, r3, #3
 80052e2:	d009      	beq.n	80052f8 <pool_func_ap_kernel_array_f32+0xe0>
 80052e4:	edd0 0a00 	vldr	s1, [r0]
 80052e8:	ee60 0a80 	vmul.f32	s1, s1, s0
 80052ec:	edc0 0a00 	vstr	s1, [r0]
 80052f0:	1e49      	subs	r1, r1, #1
 80052f2:	f100 0004 	add.w	r0, r0, #4
 80052f6:	d1f5      	bne.n	80052e4 <pool_func_ap_kernel_array_f32+0xcc>
 80052f8:	089b      	lsrs	r3, r3, #2
 80052fa:	d01b      	beq.n	8005334 <pool_func_ap_kernel_array_f32+0x11c>
 80052fc:	edd0 0a00 	vldr	s1, [r0]
 8005300:	ee60 0a80 	vmul.f32	s1, s1, s0
 8005304:	edc0 0a00 	vstr	s1, [r0]
 8005308:	1e5b      	subs	r3, r3, #1
 800530a:	ed90 1a01 	vldr	s2, [r0, #4]
 800530e:	edd0 0a02 	vldr	s1, [r0, #8]
 8005312:	ee21 1a00 	vmul.f32	s2, s2, s0
 8005316:	ed80 1a01 	vstr	s2, [r0, #4]
 800531a:	ee60 0a80 	vmul.f32	s1, s1, s0
 800531e:	ed90 1a03 	vldr	s2, [r0, #12]
 8005322:	edc0 0a02 	vstr	s1, [r0, #8]
 8005326:	ee21 1a00 	vmul.f32	s2, s2, s0
 800532a:	ed80 1a03 	vstr	s2, [r0, #12]
 800532e:	f100 0010 	add.w	r0, r0, #16
 8005332:	d1e3      	bne.n	80052fc <pool_func_ap_kernel_array_f32+0xe4>
 8005334:	bcf0      	pop	{r4, r5, r6, r7}
 8005336:	4770      	bx	lr

08005338 <forward_mp>:
 8005338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800533c:	4604      	mov	r4, r0
 800533e:	b08e      	sub	sp, #56	; 0x38
 8005340:	6962      	ldr	r2, [r4, #20]
 8005342:	8811      	ldrh	r1, [r2, #0]
 8005344:	2900      	cmp	r1, #0
 8005346:	bf1a      	itte	ne
 8005348:	6850      	ldrne	r0, [r2, #4]
 800534a:	1d00      	addne	r0, r0, #4
 800534c:	2004      	moveq	r0, #4
 800534e:	6800      	ldr	r0, [r0, #0]
 8005350:	2800      	cmp	r0, #0
 8005352:	bf14      	ite	ne
 8005354:	6805      	ldrne	r5, [r0, #0]
 8005356:	2500      	moveq	r5, #0
 8005358:	2901      	cmp	r1, #1
 800535a:	bfc6      	itte	gt
 800535c:	6850      	ldrgt	r0, [r2, #4]
 800535e:	3010      	addgt	r0, #16
 8005360:	2004      	movle	r0, #4
 8005362:	6800      	ldr	r0, [r0, #0]
 8005364:	68ea      	ldr	r2, [r5, #12]
 8005366:	2800      	cmp	r0, #0
 8005368:	bf14      	ite	ne
 800536a:	6807      	ldrne	r7, [r0, #0]
 800536c:	2700      	moveq	r7, #0
 800536e:	68f9      	ldr	r1, [r7, #12]
 8005370:	68d0      	ldr	r0, [r2, #12]
 8005372:	68cb      	ldr	r3, [r1, #12]
 8005374:	9009      	str	r0, [sp, #36]	; 0x24
 8005376:	6889      	ldr	r1, [r1, #8]
 8005378:	9108      	str	r1, [sp, #32]
 800537a:	f8d2 8008 	ldr.w	r8, [r2, #8]
 800537e:	6851      	ldr	r1, [r2, #4]
 8005380:	69a2      	ldr	r2, [r4, #24]
 8005382:	69e0      	ldr	r0, [r4, #28]
 8005384:	9007      	str	r0, [sp, #28]
 8005386:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005388:	6a20      	ldr	r0, [r4, #32]
 800538a:	960d      	str	r6, [sp, #52]	; 0x34
 800538c:	f8d4 c02c 	ldr.w	ip, [r4, #44]	; 0x2c
 8005390:	69ac      	ldr	r4, [r5, #24]
 8005392:	69bd      	ldr	r5, [r7, #24]
 8005394:	f8dc 7000 	ldr.w	r7, [ip]
 8005398:	f8dc 6004 	ldr.w	r6, [ip, #4]
 800539c:	68a4      	ldr	r4, [r4, #8]
 800539e:	f8d5 e008 	ldr.w	lr, [r5, #8]
 80053a2:	427f      	negs	r7, r7
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	9700      	str	r7, [sp, #0]
 80053a8:	f000 80d9 	beq.w	800555e <forward_mp+0x226>
 80053ac:	9301      	str	r3, [sp, #4]
 80053ae:	4276      	negs	r6, r6
 80053b0:	960c      	str	r6, [sp, #48]	; 0x30
 80053b2:	fb01 f508 	mul.w	r5, r1, r8
 80053b6:	950b      	str	r5, [sp, #44]	; 0x2c
 80053b8:	9d00      	ldr	r5, [sp, #0]
 80053ba:	9b00      	ldr	r3, [sp, #0]
 80053bc:	9f00      	ldr	r7, [sp, #0]
 80053be:	426d      	negs	r5, r5
 80053c0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80053c2:	bfcc      	ite	gt
 80053c4:	2600      	movgt	r6, #0
 80053c6:	9e00      	ldrle	r6, [sp, #0]
 80053c8:	1aeb      	subs	r3, r5, r3
 80053ca:	9d07      	ldr	r5, [sp, #28]
 80053cc:	42ab      	cmp	r3, r5
 80053ce:	bf88      	it	hi
 80053d0:	462b      	movhi	r3, r5
 80053d2:	19df      	adds	r7, r3, r7
 80053d4:	9b08      	ldr	r3, [sp, #32]
 80053d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80053d8:	2b00      	cmp	r3, #0
 80053da:	f000 80b7 	beq.w	800554c <forward_mp+0x214>
 80053de:	fb08 fa06 	mul.w	sl, r8, r6
 80053e2:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 80053e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80053ea:	9202      	str	r2, [sp, #8]
 80053ec:	9006      	str	r0, [sp, #24]
 80053ee:	9605      	str	r6, [sp, #20]
 80053f0:	9704      	str	r7, [sp, #16]
 80053f2:	4268      	negs	r0, r5
 80053f4:	9f03      	ldr	r7, [sp, #12]
 80053f6:	9a02      	ldr	r2, [sp, #8]
 80053f8:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 80053fc:	bfcc      	ite	gt
 80053fe:	2000      	movgt	r0, #0
 8005400:	4628      	movle	r0, r5
 8005402:	1b7f      	subs	r7, r7, r5
 8005404:	4297      	cmp	r7, r2
 8005406:	bf88      	it	hi
 8005408:	4617      	movhi	r7, r2
 800540a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800540c:	197f      	adds	r7, r7, r5
 800540e:	1a3f      	subs	r7, r7, r0
 8005410:	1880      	adds	r0, r0, r2
 8005412:	4348      	muls	r0, r1
 8005414:	434f      	muls	r7, r1
 8005416:	eb04 0c80 	add.w	ip, r4, r0, lsl #2
 800541a:	b311      	cbz	r1, 8005462 <forward_mp+0x12a>
 800541c:	f011 0003 	ands.w	r0, r1, #3
 8005420:	4672      	mov	r2, lr
 8005422:	4666      	mov	r6, ip
 8005424:	f000 8006 	beq.w	8005434 <forward_mp+0xfc>
 8005428:	f856 9b04 	ldr.w	r9, [r6], #4
 800542c:	f842 9b04 	str.w	r9, [r2], #4
 8005430:	1e40      	subs	r0, r0, #1
 8005432:	d1f9      	bne.n	8005428 <forward_mp+0xf0>
 8005434:	0888      	lsrs	r0, r1, #2
 8005436:	d014      	beq.n	8005462 <forward_mp+0x12a>
 8005438:	ed96 0a00 	vldr	s0, [r6]
 800543c:	ed82 0a00 	vstr	s0, [r2]
 8005440:	1e40      	subs	r0, r0, #1
 8005442:	edd6 0a01 	vldr	s1, [r6, #4]
 8005446:	edc2 0a01 	vstr	s1, [r2, #4]
 800544a:	ed96 0a02 	vldr	s0, [r6, #8]
 800544e:	ed82 0a02 	vstr	s0, [r2, #8]
 8005452:	edd6 0a03 	vldr	s1, [r6, #12]
 8005456:	edc2 0a03 	vstr	s1, [r2, #12]
 800545a:	3210      	adds	r2, #16
 800545c:	3610      	adds	r6, #16
 800545e:	2800      	cmp	r0, #0
 8005460:	d1ea      	bne.n	8005438 <forward_mp+0x100>
 8005462:	9805      	ldr	r0, [sp, #20]
 8005464:	9a04      	ldr	r2, [sp, #16]
 8005466:	4290      	cmp	r0, r2
 8005468:	da66      	bge.n	8005538 <forward_mp+0x200>
 800546a:	4610      	mov	r0, r2
 800546c:	9a05      	ldr	r2, [sp, #20]
 800546e:	1a82      	subs	r2, r0, r2
 8005470:	46e2      	mov	sl, ip
 8005472:	eb0a 0b87 	add.w	fp, sl, r7, lsl #2
 8005476:	45da      	cmp	sl, fp
 8005478:	d25a      	bcs.n	8005530 <forward_mp+0x1f8>
 800547a:	2900      	cmp	r1, #0
 800547c:	d054      	beq.n	8005528 <forward_mp+0x1f0>
 800547e:	f011 0003 	ands.w	r0, r1, #3
 8005482:	4656      	mov	r6, sl
 8005484:	46f1      	mov	r9, lr
 8005486:	d012      	beq.n	80054ae <forward_mp+0x176>
 8005488:	ed99 0a00 	vldr	s0, [r9]
 800548c:	edd6 0a00 	vldr	s1, [r6]
 8005490:	eef4 0a40 	vcmp.f32	s1, s0
 8005494:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005498:	bf58      	it	pl
 800549a:	eeb0 0a60 	vmovpl.f32	s0, s1
 800549e:	1e40      	subs	r0, r0, #1
 80054a0:	1d36      	adds	r6, r6, #4
 80054a2:	ed89 0a00 	vstr	s0, [r9]
 80054a6:	2800      	cmp	r0, #0
 80054a8:	f109 0904 	add.w	r9, r9, #4
 80054ac:	d1ec      	bne.n	8005488 <forward_mp+0x150>
 80054ae:	0888      	lsrs	r0, r1, #2
 80054b0:	f000 803a 	beq.w	8005528 <forward_mp+0x1f0>
 80054b4:	edd6 0a00 	vldr	s1, [r6]
 80054b8:	edd9 1a00 	vldr	s3, [r9]
 80054bc:	eef4 0a61 	vcmp.f32	s1, s3
 80054c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054c4:	bf48      	it	mi
 80054c6:	eef0 0a61 	vmovmi.f32	s1, s3
 80054ca:	edc9 0a00 	vstr	s1, [r9]
 80054ce:	edd6 0a01 	vldr	s1, [r6, #4]
 80054d2:	edd9 1a01 	vldr	s3, [r9, #4]
 80054d6:	ed99 0a02 	vldr	s0, [r9, #8]
 80054da:	eef4 0a61 	vcmp.f32	s1, s3
 80054de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054e2:	bf48      	it	mi
 80054e4:	eef0 0a61 	vmovmi.f32	s1, s3
 80054e8:	edc9 0a01 	vstr	s1, [r9, #4]
 80054ec:	ed96 1a02 	vldr	s2, [r6, #8]
 80054f0:	edd9 1a03 	vldr	s3, [r9, #12]
 80054f4:	eeb4 1a40 	vcmp.f32	s2, s0
 80054f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054fc:	bf48      	it	mi
 80054fe:	eeb0 1a40 	vmovmi.f32	s2, s0
 8005502:	ed89 1a02 	vstr	s2, [r9, #8]
 8005506:	edd6 0a03 	vldr	s1, [r6, #12]
 800550a:	eef4 0a61 	vcmp.f32	s1, s3
 800550e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005512:	bf58      	it	pl
 8005514:	eef0 1a60 	vmovpl.f32	s3, s1
 8005518:	1e40      	subs	r0, r0, #1
 800551a:	3610      	adds	r6, #16
 800551c:	edc9 1a03 	vstr	s3, [r9, #12]
 8005520:	2800      	cmp	r0, #0
 8005522:	f109 0910 	add.w	r9, r9, #16
 8005526:	d1c5      	bne.n	80054b4 <forward_mp+0x17c>
 8005528:	eb0a 0a81 	add.w	sl, sl, r1, lsl #2
 800552c:	45da      	cmp	sl, fp
 800552e:	d3a4      	bcc.n	800547a <forward_mp+0x142>
 8005530:	1e52      	subs	r2, r2, #1
 8005532:	eb0c 0c88 	add.w	ip, ip, r8, lsl #2
 8005536:	d19b      	bne.n	8005470 <forward_mp+0x138>
 8005538:	9806      	ldr	r0, [sp, #24]
 800553a:	1945      	adds	r5, r0, r5
 800553c:	1e5b      	subs	r3, r3, #1
 800553e:	eb0e 0e81 	add.w	lr, lr, r1, lsl #2
 8005542:	f47f af56 	bne.w	80053f2 <forward_mp+0xba>
 8005546:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800554a:	9a02      	ldr	r2, [sp, #8]
 800554c:	9d00      	ldr	r5, [sp, #0]
 800554e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005550:	195d      	adds	r5, r3, r5
 8005552:	9500      	str	r5, [sp, #0]
 8005554:	9d01      	ldr	r5, [sp, #4]
 8005556:	1e6d      	subs	r5, r5, #1
 8005558:	9501      	str	r5, [sp, #4]
 800555a:	f47f af2d 	bne.w	80053b8 <forward_mp+0x80>
 800555e:	b00e      	add	sp, #56	; 0x38
 8005560:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005564 <forward_ap>:
 8005564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005568:	4607      	mov	r7, r0
 800556a:	b097      	sub	sp, #92	; 0x5c
 800556c:	697a      	ldr	r2, [r7, #20]
 800556e:	8811      	ldrh	r1, [r2, #0]
 8005570:	2900      	cmp	r1, #0
 8005572:	bf1a      	itte	ne
 8005574:	6850      	ldrne	r0, [r2, #4]
 8005576:	1d00      	addne	r0, r0, #4
 8005578:	2004      	moveq	r0, #4
 800557a:	6800      	ldr	r0, [r0, #0]
 800557c:	2800      	cmp	r0, #0
 800557e:	bf14      	ite	ne
 8005580:	6804      	ldrne	r4, [r0, #0]
 8005582:	2400      	moveq	r4, #0
 8005584:	2901      	cmp	r1, #1
 8005586:	bfc6      	itte	gt
 8005588:	6850      	ldrgt	r0, [r2, #4]
 800558a:	3010      	addgt	r0, #16
 800558c:	2004      	movle	r0, #4
 800558e:	6800      	ldr	r0, [r0, #0]
 8005590:	68e3      	ldr	r3, [r4, #12]
 8005592:	68dd      	ldr	r5, [r3, #12]
 8005594:	2800      	cmp	r0, #0
 8005596:	bf14      	ite	ne
 8005598:	6806      	ldrne	r6, [r0, #0]
 800559a:	2600      	moveq	r6, #0
 800559c:	68f2      	ldr	r2, [r6, #12]
 800559e:	68d0      	ldr	r0, [r2, #12]
 80055a0:	950d      	str	r5, [sp, #52]	; 0x34
 80055a2:	6892      	ldr	r2, [r2, #8]
 80055a4:	920c      	str	r2, [sp, #48]	; 0x30
 80055a6:	f8d3 c008 	ldr.w	ip, [r3, #8]
 80055aa:	6859      	ldr	r1, [r3, #4]
 80055ac:	69bb      	ldr	r3, [r7, #24]
 80055ae:	69fd      	ldr	r5, [r7, #28]
 80055b0:	9505      	str	r5, [sp, #20]
 80055b2:	f8d7 8020 	ldr.w	r8, [r7, #32]
 80055b6:	6a7d      	ldr	r5, [r7, #36]	; 0x24
 80055b8:	9516      	str	r5, [sp, #88]	; 0x58
 80055ba:	69a4      	ldr	r4, [r4, #24]
 80055bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055be:	68a5      	ldr	r5, [r4, #8]
 80055c0:	f8d2 9004 	ldr.w	r9, [r2, #4]
 80055c4:	69b4      	ldr	r4, [r6, #24]
 80055c6:	6812      	ldr	r2, [r2, #0]
 80055c8:	f8d4 e008 	ldr.w	lr, [r4, #8]
 80055cc:	4252      	negs	r2, r2
 80055ce:	2800      	cmp	r0, #0
 80055d0:	9201      	str	r2, [sp, #4]
 80055d2:	f000 811c 	beq.w	800580e <forward_ap+0x2aa>
 80055d6:	9c05      	ldr	r4, [sp, #20]
 80055d8:	f1c9 0900 	rsb	r9, r9, #0
 80055dc:	435c      	muls	r4, r3
 80055de:	fb01 f20c 	mul.w	r2, r1, ip
 80055e2:	9004      	str	r0, [sp, #16]
 80055e4:	f8cd 9054 	str.w	r9, [sp, #84]	; 0x54
 80055e8:	9414      	str	r4, [sp, #80]	; 0x50
 80055ea:	9213      	str	r2, [sp, #76]	; 0x4c
 80055ec:	9a01      	ldr	r2, [sp, #4]
 80055ee:	9801      	ldr	r0, [sp, #4]
 80055f0:	9c01      	ldr	r4, [sp, #4]
 80055f2:	4252      	negs	r2, r2
 80055f4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80055f6:	bfcc      	ite	gt
 80055f8:	2600      	movgt	r6, #0
 80055fa:	9e01      	ldrle	r6, [sp, #4]
 80055fc:	1a10      	subs	r0, r2, r0
 80055fe:	9a05      	ldr	r2, [sp, #20]
 8005600:	4290      	cmp	r0, r2
 8005602:	bf88      	it	hi
 8005604:	4610      	movhi	r0, r2
 8005606:	1904      	adds	r4, r0, r4
 8005608:	9815      	ldr	r0, [sp, #84]	; 0x54
 800560a:	9000      	str	r0, [sp, #0]
 800560c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800560e:	2800      	cmp	r0, #0
 8005610:	f000 80f4 	beq.w	80057fc <forward_ap+0x298>
 8005614:	fb0c f006 	mul.w	r0, ip, r6
 8005618:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800561a:	9012      	str	r0, [sp, #72]	; 0x48
 800561c:	9202      	str	r2, [sp, #8]
 800561e:	1b30      	subs	r0, r6, r4
 8005620:	9011      	str	r0, [sp, #68]	; 0x44
 8005622:	970e      	str	r7, [sp, #56]	; 0x38
 8005624:	f8cd c01c 	str.w	ip, [sp, #28]
 8005628:	9306      	str	r3, [sp, #24]
 800562a:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 800562e:	950a      	str	r5, [sp, #40]	; 0x28
 8005630:	9609      	str	r6, [sp, #36]	; 0x24
 8005632:	9408      	str	r4, [sp, #32]
 8005634:	9800      	ldr	r0, [sp, #0]
 8005636:	9a07      	ldr	r2, [sp, #28]
 8005638:	f8dd a000 	ldr.w	sl, [sp]
 800563c:	4240      	negs	r0, r0
 800563e:	9800      	ldr	r0, [sp, #0]
 8005640:	bfcc      	ite	gt
 8005642:	f04f 0900 	movgt.w	r9, #0
 8005646:	f8dd 9000 	ldrle.w	r9, [sp]
 800564a:	1a10      	subs	r0, r2, r0
 800564c:	9a06      	ldr	r2, [sp, #24]
 800564e:	4290      	cmp	r0, r2
 8005650:	bf88      	it	hi
 8005652:	4610      	movhi	r0, r2
 8005654:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005656:	9203      	str	r2, [sp, #12]
 8005658:	4482      	add	sl, r0
 800565a:	9811      	ldr	r0, [sp, #68]	; 0x44
 800565c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800565e:	eba9 030a 	sub.w	r3, r9, sl
 8005662:	4343      	muls	r3, r0
 8005664:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005666:	444a      	add	r2, r9
 8005668:	434a      	muls	r2, r1
 800566a:	eb00 0582 	add.w	r5, r0, r2, lsl #2
 800566e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005670:	f892 0030 	ldrb.w	r0, [r2, #48]	; 0x30
 8005674:	9a08      	ldr	r2, [sp, #32]
 8005676:	ebaa 0409 	sub.w	r4, sl, r9
 800567a:	434c      	muls	r4, r1
 800567c:	2800      	cmp	r0, #0
 800567e:	bf14      	ite	ne
 8005680:	9e14      	ldrne	r6, [sp, #80]	; 0x50
 8005682:	461e      	moveq	r6, r3
 8005684:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005686:	2701      	movs	r7, #1
 8005688:	4290      	cmp	r0, r2
 800568a:	f04f 0800 	mov.w	r8, #0
 800568e:	f280 80a4 	bge.w	80057da <forward_ap+0x276>
 8005692:	1a12      	subs	r2, r2, r0
 8005694:	ebaa 0009 	sub.w	r0, sl, r9
 8005698:	900f      	str	r0, [sp, #60]	; 0x3c
 800569a:	9310      	str	r3, [sp, #64]	; 0x40
 800569c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800569e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80056a0:	4480      	add	r8, r0
 80056a2:	4543      	cmp	r3, r8
 80056a4:	46a9      	mov	r9, r5
 80056a6:	bf0c      	ite	eq
 80056a8:	4633      	moveq	r3, r6
 80056aa:	2300      	movne	r3, #0
 80056ac:	eb09 0c84 	add.w	ip, r9, r4, lsl #2
 80056b0:	45e1      	cmp	r9, ip
 80056b2:	d254      	bcs.n	800575e <forward_ap+0x1fa>
 80056b4:	2900      	cmp	r1, #0
 80056b6:	d04d      	beq.n	8005754 <forward_ap+0x1f0>
 80056b8:	f011 0003 	ands.w	r0, r1, #3
 80056bc:	46ca      	mov	sl, r9
 80056be:	46f3      	mov	fp, lr
 80056c0:	f000 8010 	beq.w	80056e4 <forward_ap+0x180>
 80056c4:	ed9a 0a00 	vldr	s0, [sl]
 80056c8:	2f01      	cmp	r7, #1
 80056ca:	bf1c      	itt	ne
 80056cc:	eddb 0a00 	vldrne	s1, [fp]
 80056d0:	ee30 0a80 	vaddne.f32	s0, s1, s0
 80056d4:	ed8b 0a00 	vstr	s0, [fp]
 80056d8:	1e40      	subs	r0, r0, #1
 80056da:	f10b 0b04 	add.w	fp, fp, #4
 80056de:	f10a 0a04 	add.w	sl, sl, #4
 80056e2:	d1ef      	bne.n	80056c4 <forward_ap+0x160>
 80056e4:	0888      	lsrs	r0, r1, #2
 80056e6:	d035      	beq.n	8005754 <forward_ap+0x1f0>
 80056e8:	2f01      	cmp	r7, #1
 80056ea:	edda 1a00 	vldr	s3, [sl]
 80056ee:	d10d      	bne.n	800570c <forward_ap+0x1a8>
 80056f0:	edcb 1a00 	vstr	s3, [fp]
 80056f4:	ed9a 0a01 	vldr	s0, [sl, #4]
 80056f8:	ed8b 0a01 	vstr	s0, [fp, #4]
 80056fc:	edda 1a02 	vldr	s3, [sl, #8]
 8005700:	edcb 1a02 	vstr	s3, [fp, #8]
 8005704:	edda 1a03 	vldr	s3, [sl, #12]
 8005708:	e01c      	b.n	8005744 <forward_ap+0x1e0>
 800570a:	bf00      	nop
 800570c:	eddb 0a00 	vldr	s1, [fp]
 8005710:	ee30 0aa1 	vadd.f32	s0, s1, s3
 8005714:	ed8b 0a00 	vstr	s0, [fp]
 8005718:	ed9b 1a01 	vldr	s2, [fp, #4]
 800571c:	ed9a 0a01 	vldr	s0, [sl, #4]
 8005720:	eddb 1a02 	vldr	s3, [fp, #8]
 8005724:	ee31 0a00 	vadd.f32	s0, s2, s0
 8005728:	ed8b 0a01 	vstr	s0, [fp, #4]
 800572c:	edda 0a02 	vldr	s1, [sl, #8]
 8005730:	ee31 0aa0 	vadd.f32	s0, s3, s1
 8005734:	ed8b 0a02 	vstr	s0, [fp, #8]
 8005738:	ed9b 0a03 	vldr	s0, [fp, #12]
 800573c:	ed9a 1a03 	vldr	s2, [sl, #12]
 8005740:	ee70 1a01 	vadd.f32	s3, s0, s2
 8005744:	edcb 1a03 	vstr	s3, [fp, #12]
 8005748:	1e40      	subs	r0, r0, #1
 800574a:	f10b 0b10 	add.w	fp, fp, #16
 800574e:	f10a 0a10 	add.w	sl, sl, #16
 8005752:	d1c9      	bne.n	80056e8 <forward_ap+0x184>
 8005754:	2700      	movs	r7, #0
 8005756:	eb09 0981 	add.w	r9, r9, r1, lsl #2
 800575a:	45e1      	cmp	r9, ip
 800575c:	d3aa      	bcc.n	80056b4 <forward_ap+0x150>
 800575e:	b3ab      	cbz	r3, 80057cc <forward_ap+0x268>
 8005760:	ee00 3a10 	vmov	s0, r3
 8005764:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 8005768:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800576c:	ee80 0a80 	vdiv.f32	s0, s1, s0
 8005770:	b361      	cbz	r1, 80057cc <forward_ap+0x268>
 8005772:	f011 0003 	ands.w	r0, r1, #3
 8005776:	4673      	mov	r3, lr
 8005778:	f000 800a 	beq.w	8005790 <forward_ap+0x22c>
 800577c:	edd3 0a00 	vldr	s1, [r3]
 8005780:	ee60 0a80 	vmul.f32	s1, s1, s0
 8005784:	edc3 0a00 	vstr	s1, [r3]
 8005788:	1e40      	subs	r0, r0, #1
 800578a:	f103 0304 	add.w	r3, r3, #4
 800578e:	d1f5      	bne.n	800577c <forward_ap+0x218>
 8005790:	0888      	lsrs	r0, r1, #2
 8005792:	d01b      	beq.n	80057cc <forward_ap+0x268>
 8005794:	edd3 0a00 	vldr	s1, [r3]
 8005798:	ee60 0a80 	vmul.f32	s1, s1, s0
 800579c:	edc3 0a00 	vstr	s1, [r3]
 80057a0:	1e40      	subs	r0, r0, #1
 80057a2:	ed93 1a01 	vldr	s2, [r3, #4]
 80057a6:	edd3 0a02 	vldr	s1, [r3, #8]
 80057aa:	ee21 1a00 	vmul.f32	s2, s2, s0
 80057ae:	ed83 1a01 	vstr	s2, [r3, #4]
 80057b2:	ee60 0a80 	vmul.f32	s1, s1, s0
 80057b6:	ed93 1a03 	vldr	s2, [r3, #12]
 80057ba:	edc3 0a02 	vstr	s1, [r3, #8]
 80057be:	ee21 1a00 	vmul.f32	s2, s2, s0
 80057c2:	ed83 1a03 	vstr	s2, [r3, #12]
 80057c6:	f103 0310 	add.w	r3, r3, #16
 80057ca:	d1e3      	bne.n	8005794 <forward_ap+0x230>
 80057cc:	9803      	ldr	r0, [sp, #12]
 80057ce:	2700      	movs	r7, #0
 80057d0:	1e52      	subs	r2, r2, #1
 80057d2:	eb05 0580 	add.w	r5, r5, r0, lsl #2
 80057d6:	f47f af61 	bne.w	800569c <forward_ap+0x138>
 80057da:	9800      	ldr	r0, [sp, #0]
 80057dc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80057de:	1810      	adds	r0, r2, r0
 80057e0:	9000      	str	r0, [sp, #0]
 80057e2:	eb0e 0e81 	add.w	lr, lr, r1, lsl #2
 80057e6:	9802      	ldr	r0, [sp, #8]
 80057e8:	1e40      	subs	r0, r0, #1
 80057ea:	9002      	str	r0, [sp, #8]
 80057ec:	f47f af22 	bne.w	8005634 <forward_ap+0xd0>
 80057f0:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80057f2:	f8dd c01c 	ldr.w	ip, [sp, #28]
 80057f6:	9b06      	ldr	r3, [sp, #24]
 80057f8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80057fa:	4690      	mov	r8, r2
 80057fc:	9c01      	ldr	r4, [sp, #4]
 80057fe:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8005800:	1914      	adds	r4, r2, r4
 8005802:	9401      	str	r4, [sp, #4]
 8005804:	9c04      	ldr	r4, [sp, #16]
 8005806:	1e64      	subs	r4, r4, #1
 8005808:	9404      	str	r4, [sp, #16]
 800580a:	f47f aeef 	bne.w	80055ec <forward_ap+0x88>
 800580e:	b017      	add	sp, #92	; 0x5c
 8005810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005814 <ai_array_fmt_name>:
 8005814:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 8005818:	f1b0 0140 	subs.w	r1, r0, #64	; 0x40
 800581c:	d062      	beq.n	80058e4 <ai_array_fmt_name+0xd0>
 800581e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8005822:	1a89      	subs	r1, r1, r2
 8005824:	f000 8094 	beq.w	8005950 <ai_array_fmt_name+0x13c>
 8005828:	f44f 7200 	mov.w	r2, #512	; 0x200
 800582c:	1a89      	subs	r1, r1, r2
 800582e:	d071      	beq.n	8005914 <ai_array_fmt_name+0x100>
 8005830:	1a89      	subs	r1, r1, r2
 8005832:	d063      	beq.n	80058fc <ai_array_fmt_name+0xe8>
 8005834:	1fc9      	subs	r1, r1, #7
 8005836:	f000 808e 	beq.w	8005956 <ai_array_fmt_name+0x142>
 800583a:	f240 32f9 	movw	r2, #1017	; 0x3f9
 800583e:	1a89      	subs	r1, r1, r2
 8005840:	d05f      	beq.n	8005902 <ai_array_fmt_name+0xee>
 8005842:	390f      	subs	r1, #15
 8005844:	f000 808a 	beq.w	800595c <ai_array_fmt_name+0x148>
 8005848:	f240 72f1 	movw	r2, #2033	; 0x7f1
 800584c:	1a89      	subs	r1, r1, r2
 800584e:	d05b      	beq.n	8005908 <ai_array_fmt_name+0xf4>
 8005850:	391f      	subs	r1, #31
 8005852:	f000 8086 	beq.w	8005962 <ai_array_fmt_name+0x14e>
 8005856:	f640 72e1 	movw	r2, #4065	; 0xfe1
 800585a:	1a89      	subs	r1, r1, r2
 800585c:	d057      	beq.n	800590e <ai_array_fmt_name+0xfa>
 800585e:	f8df 25d4 	ldr.w	r2, [pc, #1492]	; 8005e34 <.text_15>
 8005862:	1a89      	subs	r1, r1, r2
 8005864:	f000 808f 	beq.w	8005986 <ai_array_fmt_name+0x172>
 8005868:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 800586c:	1a89      	subs	r1, r1, r2
 800586e:	f000 8087 	beq.w	8005980 <ai_array_fmt_name+0x16c>
 8005872:	f8df 25c4 	ldr.w	r2, [pc, #1476]	; 8005e38 <.text_16>
 8005876:	1a89      	subs	r1, r1, r2
 8005878:	d05e      	beq.n	8005938 <ai_array_fmt_name+0x124>
 800587a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800587e:	1a89      	subs	r1, r1, r2
 8005880:	d057      	beq.n	8005932 <ai_array_fmt_name+0x11e>
 8005882:	1a89      	subs	r1, r1, r2
 8005884:	d049      	beq.n	800591a <ai_array_fmt_name+0x106>
 8005886:	1fc9      	subs	r1, r1, #7
 8005888:	d059      	beq.n	800593e <ai_array_fmt_name+0x12a>
 800588a:	f240 32f9 	movw	r2, #1017	; 0x3f9
 800588e:	1a89      	subs	r1, r1, r2
 8005890:	d046      	beq.n	8005920 <ai_array_fmt_name+0x10c>
 8005892:	390f      	subs	r1, #15
 8005894:	d056      	beq.n	8005944 <ai_array_fmt_name+0x130>
 8005896:	f240 72f1 	movw	r2, #2033	; 0x7f1
 800589a:	1a89      	subs	r1, r1, r2
 800589c:	d043      	beq.n	8005926 <ai_array_fmt_name+0x112>
 800589e:	391f      	subs	r1, #31
 80058a0:	d053      	beq.n	800594a <ai_array_fmt_name+0x136>
 80058a2:	f640 72e1 	movw	r2, #4065	; 0xfe1
 80058a6:	1a89      	subs	r1, r1, r2
 80058a8:	d040      	beq.n	800592c <ai_array_fmt_name+0x118>
 80058aa:	f8df 2588 	ldr.w	r2, [pc, #1416]	; 8005e34 <.text_15>
 80058ae:	1a89      	subs	r1, r1, r2
 80058b0:	d063      	beq.n	800597a <ai_array_fmt_name+0x166>
 80058b2:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 80058b6:	1a89      	subs	r1, r1, r2
 80058b8:	d05c      	beq.n	8005974 <ai_array_fmt_name+0x160>
 80058ba:	f8df 2580 	ldr.w	r2, [pc, #1408]	; 8005e3c <.text_17>
 80058be:	1a89      	subs	r1, r1, r2
 80058c0:	d019      	beq.n	80058f6 <ai_array_fmt_name+0xe2>
 80058c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80058c6:	1a89      	subs	r1, r1, r2
 80058c8:	d00f      	beq.n	80058ea <ai_array_fmt_name+0xd6>
 80058ca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80058ce:	1a89      	subs	r1, r1, r2
 80058d0:	d00e      	beq.n	80058f0 <ai_array_fmt_name+0xdc>
 80058d2:	f8df 256c 	ldr.w	r2, [pc, #1388]	; 8005e40 <.text_18>
 80058d6:	1a89      	subs	r1, r1, r2
 80058d8:	d049      	beq.n	800596e <ai_array_fmt_name+0x15a>
 80058da:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 80058de:	1a89      	subs	r1, r1, r2
 80058e0:	d042      	beq.n	8005968 <ai_array_fmt_name+0x154>
 80058e2:	e053      	b.n	800598c <ai_array_fmt_name+0x178>
 80058e4:	f20f 6074 	addw	r0, pc, #1652	; 0x674
 80058e8:	4770      	bx	lr
 80058ea:	f20f 607c 	addw	r0, pc, #1660	; 0x67c
 80058ee:	4770      	bx	lr
 80058f0:	f20f 6080 	addw	r0, pc, #1664	; 0x680
 80058f4:	4770      	bx	lr
 80058f6:	f20f 6088 	addw	r0, pc, #1672	; 0x688
 80058fa:	4770      	bx	lr
 80058fc:	f20f 608c 	addw	r0, pc, #1676	; 0x68c
 8005900:	4770      	bx	lr
 8005902:	f20f 6090 	addw	r0, pc, #1680	; 0x690
 8005906:	4770      	bx	lr
 8005908:	f20f 6090 	addw	r0, pc, #1680	; 0x690
 800590c:	4770      	bx	lr
 800590e:	f20f 6094 	addw	r0, pc, #1684	; 0x694
 8005912:	4770      	bx	lr
 8005914:	f20f 6094 	addw	r0, pc, #1684	; 0x694
 8005918:	4770      	bx	lr
 800591a:	f20f 6098 	addw	r0, pc, #1688	; 0x698
 800591e:	4770      	bx	lr
 8005920:	f20f 6098 	addw	r0, pc, #1688	; 0x698
 8005924:	4770      	bx	lr
 8005926:	f20f 609c 	addw	r0, pc, #1692	; 0x69c
 800592a:	4770      	bx	lr
 800592c:	f20f 609c 	addw	r0, pc, #1692	; 0x69c
 8005930:	4770      	bx	lr
 8005932:	f20f 60a0 	addw	r0, pc, #1696	; 0x6a0
 8005936:	4770      	bx	lr
 8005938:	f20f 60a0 	addw	r0, pc, #1696	; 0x6a0
 800593c:	4770      	bx	lr
 800593e:	f20f 60a4 	addw	r0, pc, #1700	; 0x6a4
 8005942:	4770      	bx	lr
 8005944:	f20f 60a4 	addw	r0, pc, #1700	; 0x6a4
 8005948:	4770      	bx	lr
 800594a:	f20f 60a8 	addw	r0, pc, #1704	; 0x6a8
 800594e:	4770      	bx	lr
 8005950:	f20f 60a8 	addw	r0, pc, #1704	; 0x6a8
 8005954:	4770      	bx	lr
 8005956:	f20f 60ac 	addw	r0, pc, #1708	; 0x6ac
 800595a:	4770      	bx	lr
 800595c:	f20f 60ac 	addw	r0, pc, #1708	; 0x6ac
 8005960:	4770      	bx	lr
 8005962:	f20f 60b4 	addw	r0, pc, #1716	; 0x6b4
 8005966:	4770      	bx	lr
 8005968:	f20f 60b8 	addw	r0, pc, #1720	; 0x6b8
 800596c:	4770      	bx	lr
 800596e:	f20f 60c4 	addw	r0, pc, #1732	; 0x6c4
 8005972:	4770      	bx	lr
 8005974:	f20f 60cc 	addw	r0, pc, #1740	; 0x6cc
 8005978:	4770      	bx	lr
 800597a:	f20f 60d8 	addw	r0, pc, #1752	; 0x6d8
 800597e:	4770      	bx	lr
 8005980:	f20f 60e0 	addw	r0, pc, #1760	; 0x6e0
 8005984:	4770      	bx	lr
 8005986:	f20f 60ec 	addw	r0, pc, #1772	; 0x6ec
 800598a:	4770      	bx	lr
 800598c:	f36f 000d 	bfc	r0, #0, #14
 8005990:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 8005994:	2840      	cmp	r0, #64	; 0x40
 8005996:	d009      	beq.n	80059ac <ai_array_fmt_name+0x198>
 8005998:	f8df 14a8 	ldr.w	r1, [pc, #1192]	; 8005e44 <.text_19>
 800599c:	4288      	cmp	r0, r1
 800599e:	d00b      	beq.n	80059b8 <ai_array_fmt_name+0x1a4>
 80059a0:	f8df 14a4 	ldr.w	r1, [pc, #1188]	; 8005e48 <.text_20>
 80059a4:	4288      	cmp	r0, r1
 80059a6:	d004      	beq.n	80059b2 <ai_array_fmt_name+0x19e>
 80059a8:	a07a      	add	r0, pc, #488	; (adr r0, 8005b94 <.text_8>)
 80059aa:	4770      	bx	lr
 80059ac:	f20f 60d4 	addw	r0, pc, #1748	; 0x6d4
 80059b0:	4770      	bx	lr
 80059b2:	f20f 60e8 	addw	r0, pc, #1768	; 0x6e8
 80059b6:	4770      	bx	lr
 80059b8:	f20f 60f4 	addw	r0, pc, #1780	; 0x6f4
 80059bc:	4770      	bx	lr

080059be <ai_array_fmt_exported>:
 80059be:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 80059c2:	f1b0 0140 	subs.w	r1, r0, #64	; 0x40
 80059c6:	d068      	beq.n	8005a9a <ai_array_fmt_exported+0xdc>
 80059c8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80059cc:	1a89      	subs	r1, r1, r2
 80059ce:	d064      	beq.n	8005a9a <ai_array_fmt_exported+0xdc>
 80059d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059d4:	1a89      	subs	r1, r1, r2
 80059d6:	d062      	beq.n	8005a9e <ai_array_fmt_exported+0xe0>
 80059d8:	1a89      	subs	r1, r1, r2
 80059da:	d05e      	beq.n	8005a9a <ai_array_fmt_exported+0xdc>
 80059dc:	1fc9      	subs	r1, r1, #7
 80059de:	d05c      	beq.n	8005a9a <ai_array_fmt_exported+0xdc>
 80059e0:	f240 32f9 	movw	r2, #1017	; 0x3f9
 80059e4:	1a89      	subs	r1, r1, r2
 80059e6:	d058      	beq.n	8005a9a <ai_array_fmt_exported+0xdc>
 80059e8:	390f      	subs	r1, #15
 80059ea:	d056      	beq.n	8005a9a <ai_array_fmt_exported+0xdc>
 80059ec:	f240 72f1 	movw	r2, #2033	; 0x7f1
 80059f0:	1a89      	subs	r1, r1, r2
 80059f2:	d054      	beq.n	8005a9e <ai_array_fmt_exported+0xe0>
 80059f4:	391f      	subs	r1, #31
 80059f6:	d052      	beq.n	8005a9e <ai_array_fmt_exported+0xe0>
 80059f8:	f640 72e1 	movw	r2, #4065	; 0xfe1
 80059fc:	1a89      	subs	r1, r1, r2
 80059fe:	d04e      	beq.n	8005a9e <ai_array_fmt_exported+0xe0>
 8005a00:	f8df 2430 	ldr.w	r2, [pc, #1072]	; 8005e34 <.text_15>
 8005a04:	1a89      	subs	r1, r1, r2
 8005a06:	d04a      	beq.n	8005a9e <ai_array_fmt_exported+0xe0>
 8005a08:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8005a0c:	1a89      	subs	r1, r1, r2
 8005a0e:	d046      	beq.n	8005a9e <ai_array_fmt_exported+0xe0>
 8005a10:	f8df 2424 	ldr.w	r2, [pc, #1060]	; 8005e38 <.text_16>
 8005a14:	1a89      	subs	r1, r1, r2
 8005a16:	d040      	beq.n	8005a9a <ai_array_fmt_exported+0xdc>
 8005a18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a1c:	1a89      	subs	r1, r1, r2
 8005a1e:	d03e      	beq.n	8005a9e <ai_array_fmt_exported+0xe0>
 8005a20:	1a89      	subs	r1, r1, r2
 8005a22:	d03a      	beq.n	8005a9a <ai_array_fmt_exported+0xdc>
 8005a24:	1fc9      	subs	r1, r1, #7
 8005a26:	d038      	beq.n	8005a9a <ai_array_fmt_exported+0xdc>
 8005a28:	f240 32f9 	movw	r2, #1017	; 0x3f9
 8005a2c:	1a89      	subs	r1, r1, r2
 8005a2e:	d034      	beq.n	8005a9a <ai_array_fmt_exported+0xdc>
 8005a30:	390f      	subs	r1, #15
 8005a32:	d032      	beq.n	8005a9a <ai_array_fmt_exported+0xdc>
 8005a34:	f240 72f1 	movw	r2, #2033	; 0x7f1
 8005a38:	1a89      	subs	r1, r1, r2
 8005a3a:	d030      	beq.n	8005a9e <ai_array_fmt_exported+0xe0>
 8005a3c:	391f      	subs	r1, #31
 8005a3e:	d02e      	beq.n	8005a9e <ai_array_fmt_exported+0xe0>
 8005a40:	f640 72e1 	movw	r2, #4065	; 0xfe1
 8005a44:	1a89      	subs	r1, r1, r2
 8005a46:	d02a      	beq.n	8005a9e <ai_array_fmt_exported+0xe0>
 8005a48:	f8df 23e8 	ldr.w	r2, [pc, #1000]	; 8005e34 <.text_15>
 8005a4c:	1a89      	subs	r1, r1, r2
 8005a4e:	d026      	beq.n	8005a9e <ai_array_fmt_exported+0xe0>
 8005a50:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8005a54:	1a89      	subs	r1, r1, r2
 8005a56:	d022      	beq.n	8005a9e <ai_array_fmt_exported+0xe0>
 8005a58:	f8df 23e0 	ldr.w	r2, [pc, #992]	; 8005e3c <.text_17>
 8005a5c:	1a89      	subs	r1, r1, r2
 8005a5e:	d01e      	beq.n	8005a9e <ai_array_fmt_exported+0xe0>
 8005a60:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a64:	1a89      	subs	r1, r1, r2
 8005a66:	d018      	beq.n	8005a9a <ai_array_fmt_exported+0xdc>
 8005a68:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005a6c:	1a89      	subs	r1, r1, r2
 8005a6e:	d016      	beq.n	8005a9e <ai_array_fmt_exported+0xe0>
 8005a70:	f8df 23cc 	ldr.w	r2, [pc, #972]	; 8005e40 <.text_18>
 8005a74:	1a89      	subs	r1, r1, r2
 8005a76:	d012      	beq.n	8005a9e <ai_array_fmt_exported+0xe0>
 8005a78:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8005a7c:	1a89      	subs	r1, r1, r2
 8005a7e:	d00e      	beq.n	8005a9e <ai_array_fmt_exported+0xe0>
 8005a80:	f36f 000d 	bfc	r0, #0, #14
 8005a84:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 8005a88:	2840      	cmp	r0, #64	; 0x40
 8005a8a:	bf1f      	itttt	ne
 8005a8c:	f8df 33b4 	ldrne.w	r3, [pc, #948]	; 8005e44 <.text_19>
 8005a90:	4298      	cmpne	r0, r3
 8005a92:	f8df 33b4 	ldrne.w	r3, [pc, #948]	; 8005e48 <.text_20>
 8005a96:	4298      	cmpne	r0, r3
 8005a98:	d101      	bne.n	8005a9e <ai_array_fmt_exported+0xe0>
 8005a9a:	2001      	movs	r0, #1
 8005a9c:	4770      	bx	lr
 8005a9e:	2000      	movs	r0, #0
 8005aa0:	4770      	bx	lr

08005aa2 <ai_array_fmt_valid>:
 8005aa2:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 8005aa6:	f1b0 0140 	subs.w	r1, r0, #64	; 0x40
 8005aaa:	d069      	beq.n	8005b80 <ai_array_fmt_valid+0xde>
 8005aac:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8005ab0:	1a89      	subs	r1, r1, r2
 8005ab2:	d065      	beq.n	8005b80 <ai_array_fmt_valid+0xde>
 8005ab4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ab8:	1a89      	subs	r1, r1, r2
 8005aba:	d061      	beq.n	8005b80 <ai_array_fmt_valid+0xde>
 8005abc:	1a89      	subs	r1, r1, r2
 8005abe:	d05f      	beq.n	8005b80 <ai_array_fmt_valid+0xde>
 8005ac0:	1fc9      	subs	r1, r1, #7
 8005ac2:	d05d      	beq.n	8005b80 <ai_array_fmt_valid+0xde>
 8005ac4:	f240 32f9 	movw	r2, #1017	; 0x3f9
 8005ac8:	1a89      	subs	r1, r1, r2
 8005aca:	d059      	beq.n	8005b80 <ai_array_fmt_valid+0xde>
 8005acc:	390f      	subs	r1, #15
 8005ace:	d057      	beq.n	8005b80 <ai_array_fmt_valid+0xde>
 8005ad0:	f240 72f1 	movw	r2, #2033	; 0x7f1
 8005ad4:	1a89      	subs	r1, r1, r2
 8005ad6:	d053      	beq.n	8005b80 <ai_array_fmt_valid+0xde>
 8005ad8:	391f      	subs	r1, #31
 8005ada:	d051      	beq.n	8005b80 <ai_array_fmt_valid+0xde>
 8005adc:	f640 72e1 	movw	r2, #4065	; 0xfe1
 8005ae0:	1a89      	subs	r1, r1, r2
 8005ae2:	d04d      	beq.n	8005b80 <ai_array_fmt_valid+0xde>
 8005ae4:	f8df 234c 	ldr.w	r2, [pc, #844]	; 8005e34 <.text_15>
 8005ae8:	1a89      	subs	r1, r1, r2
 8005aea:	d049      	beq.n	8005b80 <ai_array_fmt_valid+0xde>
 8005aec:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8005af0:	1a89      	subs	r1, r1, r2
 8005af2:	d045      	beq.n	8005b80 <ai_array_fmt_valid+0xde>
 8005af4:	f8df 2340 	ldr.w	r2, [pc, #832]	; 8005e38 <.text_16>
 8005af8:	1a89      	subs	r1, r1, r2
 8005afa:	d041      	beq.n	8005b80 <ai_array_fmt_valid+0xde>
 8005afc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b00:	1a89      	subs	r1, r1, r2
 8005b02:	d03d      	beq.n	8005b80 <ai_array_fmt_valid+0xde>
 8005b04:	1a89      	subs	r1, r1, r2
 8005b06:	d03b      	beq.n	8005b80 <ai_array_fmt_valid+0xde>
 8005b08:	1fc9      	subs	r1, r1, #7
 8005b0a:	d039      	beq.n	8005b80 <ai_array_fmt_valid+0xde>
 8005b0c:	f240 32f9 	movw	r2, #1017	; 0x3f9
 8005b10:	1a89      	subs	r1, r1, r2
 8005b12:	d035      	beq.n	8005b80 <ai_array_fmt_valid+0xde>
 8005b14:	390f      	subs	r1, #15
 8005b16:	d033      	beq.n	8005b80 <ai_array_fmt_valid+0xde>
 8005b18:	f240 72f1 	movw	r2, #2033	; 0x7f1
 8005b1c:	1a89      	subs	r1, r1, r2
 8005b1e:	d02f      	beq.n	8005b80 <ai_array_fmt_valid+0xde>
 8005b20:	391f      	subs	r1, #31
 8005b22:	d02d      	beq.n	8005b80 <ai_array_fmt_valid+0xde>
 8005b24:	f640 72e1 	movw	r2, #4065	; 0xfe1
 8005b28:	1a89      	subs	r1, r1, r2
 8005b2a:	d029      	beq.n	8005b80 <ai_array_fmt_valid+0xde>
 8005b2c:	f8df 2304 	ldr.w	r2, [pc, #772]	; 8005e34 <.text_15>
 8005b30:	1a89      	subs	r1, r1, r2
 8005b32:	d025      	beq.n	8005b80 <ai_array_fmt_valid+0xde>
 8005b34:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8005b38:	1a89      	subs	r1, r1, r2
 8005b3a:	d021      	beq.n	8005b80 <ai_array_fmt_valid+0xde>
 8005b3c:	f8df 22fc 	ldr.w	r2, [pc, #764]	; 8005e3c <.text_17>
 8005b40:	1a89      	subs	r1, r1, r2
 8005b42:	d01d      	beq.n	8005b80 <ai_array_fmt_valid+0xde>
 8005b44:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005b48:	1a89      	subs	r1, r1, r2
 8005b4a:	d019      	beq.n	8005b80 <ai_array_fmt_valid+0xde>
 8005b4c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005b50:	1a89      	subs	r1, r1, r2
 8005b52:	d015      	beq.n	8005b80 <ai_array_fmt_valid+0xde>
 8005b54:	f8df 22e8 	ldr.w	r2, [pc, #744]	; 8005e40 <.text_18>
 8005b58:	1a89      	subs	r1, r1, r2
 8005b5a:	d011      	beq.n	8005b80 <ai_array_fmt_valid+0xde>
 8005b5c:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8005b60:	1a89      	subs	r1, r1, r2
 8005b62:	bf1e      	ittt	ne
 8005b64:	f36f 000d 	bfcne	r0, #0, #14
 8005b68:	f040 0040 	orrne.w	r0, r0, #64	; 0x40
 8005b6c:	2840      	cmpne	r0, #64	; 0x40
 8005b6e:	d007      	beq.n	8005b80 <ai_array_fmt_valid+0xde>
 8005b70:	f8df 32d0 	ldr.w	r3, [pc, #720]	; 8005e44 <.text_19>
 8005b74:	4298      	cmp	r0, r3
 8005b76:	bf1c      	itt	ne
 8005b78:	f8df 32cc 	ldrne.w	r3, [pc, #716]	; 8005e48 <.text_20>
 8005b7c:	4298      	cmpne	r0, r3
 8005b7e:	d101      	bne.n	8005b84 <ai_array_fmt_valid+0xe2>
 8005b80:	2001      	movs	r0, #1
 8005b82:	4770      	bx	lr
 8005b84:	2000      	movs	r0, #0
 8005b86:	4770      	bx	lr

08005b88 <ai_array_fmt_get_formats>:
 8005b88:	f8df 12c0 	ldr.w	r1, [pc, #704]	; 8005e4c <.text_21>
 8005b8c:	6001      	str	r1, [r0, #0]
 8005b8e:	201c      	movs	r0, #28
 8005b90:	4770      	bx	lr
	...

08005b94 <.text_8>:
 8005b94:	00000000 	.word	0x00000000

08005b98 <ai_buffer_fmt_name>:
 8005b98:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 8005b9c:	f1b0 0140 	subs.w	r1, r0, #64	; 0x40
 8005ba0:	d022      	beq.n	8005be8 <ai_buffer_fmt_name+0x50>
 8005ba2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8005ba6:	1a89      	subs	r1, r1, r2
 8005ba8:	d039      	beq.n	8005c1e <ai_buffer_fmt_name+0x86>
 8005baa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005bae:	1a89      	subs	r1, r1, r2
 8005bb0:	d020      	beq.n	8005bf4 <ai_buffer_fmt_name+0x5c>
 8005bb2:	1fc9      	subs	r1, r1, #7
 8005bb4:	d036      	beq.n	8005c24 <ai_buffer_fmt_name+0x8c>
 8005bb6:	f240 32f9 	movw	r2, #1017	; 0x3f9
 8005bba:	1a89      	subs	r1, r1, r2
 8005bbc:	d01d      	beq.n	8005bfa <ai_buffer_fmt_name+0x62>
 8005bbe:	390f      	subs	r1, #15
 8005bc0:	d033      	beq.n	8005c2a <ai_buffer_fmt_name+0x92>
 8005bc2:	4aa3      	ldr	r2, [pc, #652]	; (8005e50 <.text_22>)
 8005bc4:	1a89      	subs	r1, r1, r2
 8005bc6:	d021      	beq.n	8005c0c <ai_buffer_fmt_name+0x74>
 8005bc8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005bcc:	1a89      	subs	r1, r1, r2
 8005bce:	d017      	beq.n	8005c00 <ai_buffer_fmt_name+0x68>
 8005bd0:	1fc9      	subs	r1, r1, #7
 8005bd2:	d01e      	beq.n	8005c12 <ai_buffer_fmt_name+0x7a>
 8005bd4:	f240 32f9 	movw	r2, #1017	; 0x3f9
 8005bd8:	1a89      	subs	r1, r1, r2
 8005bda:	d014      	beq.n	8005c06 <ai_buffer_fmt_name+0x6e>
 8005bdc:	390f      	subs	r1, #15
 8005bde:	d01b      	beq.n	8005c18 <ai_buffer_fmt_name+0x80>
 8005be0:	4a9c      	ldr	r2, [pc, #624]	; (8005e54 <.text_23>)
 8005be2:	1a89      	subs	r1, r1, r2
 8005be4:	d003      	beq.n	8005bee <ai_buffer_fmt_name+0x56>
 8005be6:	e023      	b.n	8005c30 <ai_buffer_fmt_name+0x98>
 8005be8:	f20f 3070 	addw	r0, pc, #880	; 0x370
 8005bec:	4770      	bx	lr
 8005bee:	f20f 3078 	addw	r0, pc, #888	; 0x378
 8005bf2:	4770      	bx	lr
 8005bf4:	f20f 3094 	addw	r0, pc, #916	; 0x394
 8005bf8:	4770      	bx	lr
 8005bfa:	f20f 3098 	addw	r0, pc, #920	; 0x398
 8005bfe:	4770      	bx	lr
 8005c00:	f20f 30b0 	addw	r0, pc, #944	; 0x3b0
 8005c04:	4770      	bx	lr
 8005c06:	f20f 30b4 	addw	r0, pc, #948	; 0x3b4
 8005c0a:	4770      	bx	lr
 8005c0c:	f20f 30cc 	addw	r0, pc, #972	; 0x3cc
 8005c10:	4770      	bx	lr
 8005c12:	f20f 30d0 	addw	r0, pc, #976	; 0x3d0
 8005c16:	4770      	bx	lr
 8005c18:	f20f 30d0 	addw	r0, pc, #976	; 0x3d0
 8005c1c:	4770      	bx	lr
 8005c1e:	f20f 30dc 	addw	r0, pc, #988	; 0x3dc
 8005c22:	4770      	bx	lr
 8005c24:	f20f 30dc 	addw	r0, pc, #988	; 0x3dc
 8005c28:	4770      	bx	lr
 8005c2a:	f20f 30e0 	addw	r0, pc, #992	; 0x3e0
 8005c2e:	4770      	bx	lr
 8005c30:	0b80      	lsrs	r0, r0, #14
 8005c32:	0380      	lsls	r0, r0, #14
 8005c34:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 8005c38:	2840      	cmp	r0, #64	; 0x40
 8005c3a:	d007      	beq.n	8005c4c <ai_buffer_fmt_name+0xb4>
 8005c3c:	4981      	ldr	r1, [pc, #516]	; (8005e44 <.text_19>)
 8005c3e:	4288      	cmp	r0, r1
 8005c40:	d00a      	beq.n	8005c58 <ai_buffer_fmt_name+0xc0>
 8005c42:	4981      	ldr	r1, [pc, #516]	; (8005e48 <.text_20>)
 8005c44:	4288      	cmp	r0, r1
 8005c46:	d004      	beq.n	8005c52 <ai_buffer_fmt_name+0xba>
 8005c48:	a079      	add	r0, pc, #484	; (adr r0, 8005e30 <.text_14>)
 8005c4a:	4770      	bx	lr
 8005c4c:	f20f 4074 	addw	r0, pc, #1140	; 0x474
 8005c50:	4770      	bx	lr
 8005c52:	f20f 4088 	addw	r0, pc, #1160	; 0x488
 8005c56:	4770      	bx	lr
 8005c58:	f20f 4094 	addw	r0, pc, #1172	; 0x494
 8005c5c:	4770      	bx	lr

08005c5e <ai_buffer_fmt_valid>:
 8005c5e:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 8005c62:	f1b0 0140 	subs.w	r1, r0, #64	; 0x40
 8005c66:	d02d      	beq.n	8005cc4 <ai_buffer_fmt_valid+0x66>
 8005c68:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8005c6c:	1a89      	subs	r1, r1, r2
 8005c6e:	d029      	beq.n	8005cc4 <ai_buffer_fmt_valid+0x66>
 8005c70:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005c74:	1a89      	subs	r1, r1, r2
 8005c76:	d025      	beq.n	8005cc4 <ai_buffer_fmt_valid+0x66>
 8005c78:	1fc9      	subs	r1, r1, #7
 8005c7a:	d023      	beq.n	8005cc4 <ai_buffer_fmt_valid+0x66>
 8005c7c:	f240 32f9 	movw	r2, #1017	; 0x3f9
 8005c80:	1a89      	subs	r1, r1, r2
 8005c82:	d01f      	beq.n	8005cc4 <ai_buffer_fmt_valid+0x66>
 8005c84:	390f      	subs	r1, #15
 8005c86:	d01d      	beq.n	8005cc4 <ai_buffer_fmt_valid+0x66>
 8005c88:	4a71      	ldr	r2, [pc, #452]	; (8005e50 <.text_22>)
 8005c8a:	1a89      	subs	r1, r1, r2
 8005c8c:	d01a      	beq.n	8005cc4 <ai_buffer_fmt_valid+0x66>
 8005c8e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005c92:	1a89      	subs	r1, r1, r2
 8005c94:	d016      	beq.n	8005cc4 <ai_buffer_fmt_valid+0x66>
 8005c96:	1fc9      	subs	r1, r1, #7
 8005c98:	d014      	beq.n	8005cc4 <ai_buffer_fmt_valid+0x66>
 8005c9a:	f240 32f9 	movw	r2, #1017	; 0x3f9
 8005c9e:	1a89      	subs	r1, r1, r2
 8005ca0:	d010      	beq.n	8005cc4 <ai_buffer_fmt_valid+0x66>
 8005ca2:	390f      	subs	r1, #15
 8005ca4:	d00e      	beq.n	8005cc4 <ai_buffer_fmt_valid+0x66>
 8005ca6:	4a6b      	ldr	r2, [pc, #428]	; (8005e54 <.text_23>)
 8005ca8:	1a89      	subs	r1, r1, r2
 8005caa:	bf1f      	itttt	ne
 8005cac:	0b80      	lsrne	r0, r0, #14
 8005cae:	0380      	lslne	r0, r0, #14
 8005cb0:	f040 0040 	orrne.w	r0, r0, #64	; 0x40
 8005cb4:	2840      	cmpne	r0, #64	; 0x40
 8005cb6:	d005      	beq.n	8005cc4 <ai_buffer_fmt_valid+0x66>
 8005cb8:	4b62      	ldr	r3, [pc, #392]	; (8005e44 <.text_19>)
 8005cba:	4298      	cmp	r0, r3
 8005cbc:	bf1c      	itt	ne
 8005cbe:	4b62      	ldrne	r3, [pc, #392]	; (8005e48 <.text_20>)
 8005cc0:	4298      	cmpne	r0, r3
 8005cc2:	d101      	bne.n	8005cc8 <ai_buffer_fmt_valid+0x6a>
 8005cc4:	2001      	movs	r0, #1
 8005cc6:	4770      	bx	lr
 8005cc8:	2000      	movs	r0, #0
 8005cca:	4770      	bx	lr

08005ccc <ai_buffer_fmt_get_formats>:
 8005ccc:	4962      	ldr	r1, [pc, #392]	; (8005e58 <.text_24>)
 8005cce:	6001      	str	r1, [r0, #0]
 8005cd0:	200c      	movs	r0, #12
 8005cd2:	4770      	bx	lr

08005cd4 <ai_array_to_buffer_fmt>:
 8005cd4:	4601      	mov	r1, r0
 8005cd6:	2040      	movs	r0, #64	; 0x40
 8005cd8:	f3c1 4243 	ubfx	r2, r1, #17, #4
 8005cdc:	2a02      	cmp	r2, #2
 8005cde:	d104      	bne.n	8005cea <ai_array_to_buffer_fmt+0x16>
 8005ce0:	485e      	ldr	r0, [pc, #376]	; (8005e5c <.text_25>)
 8005ce2:	4008      	ands	r0, r1
 8005ce4:	f440 2080 	orr.w	r0, r0, #262144	; 0x40000
 8005ce8:	e037      	b.n	8005d5a <ai_array_to_buffer_fmt+0x86>
 8005cea:	f021 427e 	bic.w	r2, r1, #4261412864	; 0xfe000000
 8005cee:	4b55      	ldr	r3, [pc, #340]	; (8005e44 <.text_19>)
 8005cf0:	1ad2      	subs	r2, r2, r3
 8005cf2:	d02d      	beq.n	8005d50 <ai_array_to_buffer_fmt+0x7c>
 8005cf4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005cf8:	1ad2      	subs	r2, r2, r3
 8005cfa:	d01b      	beq.n	8005d34 <ai_array_to_buffer_fmt+0x60>
 8005cfc:	1fd2      	subs	r2, r2, #7
 8005cfe:	d029      	beq.n	8005d54 <ai_array_to_buffer_fmt+0x80>
 8005d00:	f240 33f9 	movw	r3, #1017	; 0x3f9
 8005d04:	1ad2      	subs	r2, r2, r3
 8005d06:	d017      	beq.n	8005d38 <ai_array_to_buffer_fmt+0x64>
 8005d08:	3a0f      	subs	r2, #15
 8005d0a:	d025      	beq.n	8005d58 <ai_array_to_buffer_fmt+0x84>
 8005d0c:	4b50      	ldr	r3, [pc, #320]	; (8005e50 <.text_22>)
 8005d0e:	1ad2      	subs	r2, r2, r3
 8005d10:	d018      	beq.n	8005d44 <ai_array_to_buffer_fmt+0x70>
 8005d12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d16:	1ad2      	subs	r2, r2, r3
 8005d18:	d010      	beq.n	8005d3c <ai_array_to_buffer_fmt+0x68>
 8005d1a:	1fd2      	subs	r2, r2, #7
 8005d1c:	d014      	beq.n	8005d48 <ai_array_to_buffer_fmt+0x74>
 8005d1e:	f240 33f9 	movw	r3, #1017	; 0x3f9
 8005d22:	1ad2      	subs	r2, r2, r3
 8005d24:	d00c      	beq.n	8005d40 <ai_array_to_buffer_fmt+0x6c>
 8005d26:	3a0f      	subs	r2, #15
 8005d28:	d010      	beq.n	8005d4c <ai_array_to_buffer_fmt+0x78>
 8005d2a:	4b4a      	ldr	r3, [pc, #296]	; (8005e54 <.text_23>)
 8005d2c:	1ad2      	subs	r2, r2, r3
 8005d2e:	d114      	bne.n	8005d5a <ai_array_to_buffer_fmt+0x86>
 8005d30:	484b      	ldr	r0, [pc, #300]	; (8005e60 <.text_26>)
 8005d32:	e012      	b.n	8005d5a <ai_array_to_buffer_fmt+0x86>
 8005d34:	484b      	ldr	r0, [pc, #300]	; (8005e64 <.text_27>)
 8005d36:	e010      	b.n	8005d5a <ai_array_to_buffer_fmt+0x86>
 8005d38:	484b      	ldr	r0, [pc, #300]	; (8005e68 <.text_28>)
 8005d3a:	e00e      	b.n	8005d5a <ai_array_to_buffer_fmt+0x86>
 8005d3c:	484b      	ldr	r0, [pc, #300]	; (8005e6c <.text_29>)
 8005d3e:	e00c      	b.n	8005d5a <ai_array_to_buffer_fmt+0x86>
 8005d40:	484b      	ldr	r0, [pc, #300]	; (8005e70 <.text_30>)
 8005d42:	e00a      	b.n	8005d5a <ai_array_to_buffer_fmt+0x86>
 8005d44:	4840      	ldr	r0, [pc, #256]	; (8005e48 <.text_20>)
 8005d46:	e008      	b.n	8005d5a <ai_array_to_buffer_fmt+0x86>
 8005d48:	484a      	ldr	r0, [pc, #296]	; (8005e74 <.text_31>)
 8005d4a:	e006      	b.n	8005d5a <ai_array_to_buffer_fmt+0x86>
 8005d4c:	484a      	ldr	r0, [pc, #296]	; (8005e78 <.text_32>)
 8005d4e:	e004      	b.n	8005d5a <ai_array_to_buffer_fmt+0x86>
 8005d50:	4618      	mov	r0, r3
 8005d52:	e002      	b.n	8005d5a <ai_array_to_buffer_fmt+0x86>
 8005d54:	4849      	ldr	r0, [pc, #292]	; (8005e7c <.text_33>)
 8005d56:	e000      	b.n	8005d5a <ai_array_to_buffer_fmt+0x86>
 8005d58:	4849      	ldr	r0, [pc, #292]	; (8005e80 <.text_34>)
 8005d5a:	004a      	lsls	r2, r1, #1
 8005d5c:	bf4c      	ite	mi
 8005d5e:	f04f 4280 	movmi.w	r2, #1073741824	; 0x40000000
 8005d62:	2200      	movpl	r2, #0
 8005d64:	4310      	orrs	r0, r2
 8005d66:	008a      	lsls	r2, r1, #2
 8005d68:	bf4c      	ite	mi
 8005d6a:	f04f 5200 	movmi.w	r2, #536870912	; 0x20000000
 8005d6e:	2200      	movpl	r2, #0
 8005d70:	4310      	orrs	r0, r2
 8005d72:	0109      	lsls	r1, r1, #4
 8005d74:	bf4c      	ite	mi
 8005d76:	f04f 6100 	movmi.w	r1, #134217728	; 0x8000000
 8005d7a:	2100      	movpl	r1, #0
 8005d7c:	4308      	orrs	r0, r1
 8005d7e:	4770      	bx	lr

08005d80 <ai_buffer_to_array_fmt>:
 8005d80:	4602      	mov	r2, r0
 8005d82:	f022 407e 	bic.w	r0, r2, #4261412864	; 0xfe000000
 8005d86:	3840      	subs	r0, #64	; 0x40
 8005d88:	d022      	beq.n	8005dd0 <ai_buffer_to_array_fmt+0x50>
 8005d8a:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8005d8e:	1a40      	subs	r0, r0, r1
 8005d90:	d030      	beq.n	8005df4 <ai_buffer_to_array_fmt+0x74>
 8005d92:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005d96:	1a40      	subs	r0, r0, r1
 8005d98:	d01e      	beq.n	8005dd8 <ai_buffer_to_array_fmt+0x58>
 8005d9a:	1fc0      	subs	r0, r0, #7
 8005d9c:	d02c      	beq.n	8005df8 <ai_buffer_to_array_fmt+0x78>
 8005d9e:	f240 31f9 	movw	r1, #1017	; 0x3f9
 8005da2:	1a40      	subs	r0, r0, r1
 8005da4:	d01a      	beq.n	8005ddc <ai_buffer_to_array_fmt+0x5c>
 8005da6:	380f      	subs	r0, #15
 8005da8:	d028      	beq.n	8005dfc <ai_buffer_to_array_fmt+0x7c>
 8005daa:	4929      	ldr	r1, [pc, #164]	; (8005e50 <.text_22>)
 8005dac:	1a40      	subs	r0, r0, r1
 8005dae:	d01b      	beq.n	8005de8 <ai_buffer_to_array_fmt+0x68>
 8005db0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005db4:	1a40      	subs	r0, r0, r1
 8005db6:	d013      	beq.n	8005de0 <ai_buffer_to_array_fmt+0x60>
 8005db8:	1fc0      	subs	r0, r0, #7
 8005dba:	d017      	beq.n	8005dec <ai_buffer_to_array_fmt+0x6c>
 8005dbc:	f240 31f9 	movw	r1, #1017	; 0x3f9
 8005dc0:	1a40      	subs	r0, r0, r1
 8005dc2:	d00f      	beq.n	8005de4 <ai_buffer_to_array_fmt+0x64>
 8005dc4:	380f      	subs	r0, #15
 8005dc6:	d013      	beq.n	8005df0 <ai_buffer_to_array_fmt+0x70>
 8005dc8:	4922      	ldr	r1, [pc, #136]	; (8005e54 <.text_23>)
 8005dca:	1a40      	subs	r0, r0, r1
 8005dcc:	d002      	beq.n	8005dd4 <ai_buffer_to_array_fmt+0x54>
 8005dce:	e017      	b.n	8005e00 <ai_buffer_to_array_fmt+0x80>
 8005dd0:	2040      	movs	r0, #64	; 0x40
 8005dd2:	e01f      	b.n	8005e14 <ai_buffer_to_array_fmt+0x94>
 8005dd4:	4822      	ldr	r0, [pc, #136]	; (8005e60 <.text_26>)
 8005dd6:	e01d      	b.n	8005e14 <ai_buffer_to_array_fmt+0x94>
 8005dd8:	4822      	ldr	r0, [pc, #136]	; (8005e64 <.text_27>)
 8005dda:	e01b      	b.n	8005e14 <ai_buffer_to_array_fmt+0x94>
 8005ddc:	4822      	ldr	r0, [pc, #136]	; (8005e68 <.text_28>)
 8005dde:	e019      	b.n	8005e14 <ai_buffer_to_array_fmt+0x94>
 8005de0:	4822      	ldr	r0, [pc, #136]	; (8005e6c <.text_29>)
 8005de2:	e017      	b.n	8005e14 <ai_buffer_to_array_fmt+0x94>
 8005de4:	4822      	ldr	r0, [pc, #136]	; (8005e70 <.text_30>)
 8005de6:	e015      	b.n	8005e14 <ai_buffer_to_array_fmt+0x94>
 8005de8:	4817      	ldr	r0, [pc, #92]	; (8005e48 <.text_20>)
 8005dea:	e013      	b.n	8005e14 <ai_buffer_to_array_fmt+0x94>
 8005dec:	4821      	ldr	r0, [pc, #132]	; (8005e74 <.text_31>)
 8005dee:	e011      	b.n	8005e14 <ai_buffer_to_array_fmt+0x94>
 8005df0:	4821      	ldr	r0, [pc, #132]	; (8005e78 <.text_32>)
 8005df2:	e00f      	b.n	8005e14 <ai_buffer_to_array_fmt+0x94>
 8005df4:	4813      	ldr	r0, [pc, #76]	; (8005e44 <.text_19>)
 8005df6:	e00d      	b.n	8005e14 <ai_buffer_to_array_fmt+0x94>
 8005df8:	4820      	ldr	r0, [pc, #128]	; (8005e7c <.text_33>)
 8005dfa:	e00b      	b.n	8005e14 <ai_buffer_to_array_fmt+0x94>
 8005dfc:	4820      	ldr	r0, [pc, #128]	; (8005e80 <.text_34>)
 8005dfe:	e009      	b.n	8005e14 <ai_buffer_to_array_fmt+0x94>
 8005e00:	f3c2 51c0 	ubfx	r1, r2, #23, #1
 8005e04:	f3c2 000d 	ubfx	r0, r2, #0, #14
 8005e08:	2900      	cmp	r1, #0
 8005e0a:	bf14      	ite	ne
 8005e0c:	f440 0004 	orrne.w	r0, r0, #8650752	; 0x840000
 8005e10:	f440 2080 	orreq.w	r0, r0, #262144	; 0x40000
 8005e14:	0051      	lsls	r1, r2, #1
 8005e16:	bf48      	it	mi
 8005e18:	f040 4080 	orrmi.w	r0, r0, #1073741824	; 0x40000000
 8005e1c:	0091      	lsls	r1, r2, #2
 8005e1e:	bf48      	it	mi
 8005e20:	f040 5000 	orrmi.w	r0, r0, #536870912	; 0x20000000
 8005e24:	0111      	lsls	r1, r2, #4
 8005e26:	bf48      	it	mi
 8005e28:	f040 6000 	orrmi.w	r0, r0, #134217728	; 0x8000000
 8005e2c:	4770      	bx	lr
	...

08005e30 <.text_14>:
 8005e30:	00000000 	.word	0x00000000

08005e34 <.text_15>:
 8005e34:	002be80f 	.word	0x002be80f

08005e38 <.text_16>:
 8005e38:	003bf7f1 	.word	0x003bf7f1

08005e3c <.text_17>:
 8005e3c:	00b9fff1 	.word	0x00b9fff1

08005e40 <.text_18>:
 8005e40:	004df000 	.word	0x004df000

08005e44 <.text_19>:
 8005e44:	00040040 	.word	0x00040040

08005e48 <.text_20>:
 8005e48:	00840040 	.word	0x00840040

08005e4c <.text_21>:
 8005e4c:	08016d84 	.word	0x08016d84

08005e50 <.text_22>:
 8005e50:	007ff7f1 	.word	0x007ff7f1

08005e54 <.text_23>:
 8005e54:	00fe07f1 	.word	0x00fe07f1

08005e58 <.text_24>:
 8005e58:	08016df4 	.word	0x08016df4

08005e5c <.text_25>:
 8005e5c:	00803fff 	.word	0x00803fff

08005e60 <.text_26>:
 8005e60:	01821040 	.word	0x01821040

08005e64 <.text_27>:
 8005e64:	00040440 	.word	0x00040440

08005e68 <.text_28>:
 8005e68:	00040840 	.word	0x00040840

08005e6c <.text_29>:
 8005e6c:	00840440 	.word	0x00840440

08005e70 <.text_30>:
 8005e70:	00840840 	.word	0x00840840

08005e74 <.text_31>:
 8005e74:	00840447 	.word	0x00840447

08005e78 <.text_32>:
 8005e78:	0084084f 	.word	0x0084084f

08005e7c <.text_33>:
 8005e7c:	00040447 	.word	0x00040447

08005e80 <.text_34>:
 8005e80:	0004084f 	.word	0x0004084f

08005e84 <ai_array_get_byte_size>:
 8005e84:	b909      	cbnz	r1, 8005e8a <ai_array_get_byte_size+0x6>
 8005e86:	2000      	movs	r0, #0
 8005e88:	4770      	bx	lr
 8005e8a:	11c2      	asrs	r2, r0, #7
 8005e8c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005e90:	f3c0 3382 	ubfx	r3, r0, #14, #3
 8005e94:	189b      	adds	r3, r3, r2
 8005e96:	4359      	muls	r1, r3
 8005e98:	1dc9      	adds	r1, r1, #7
 8005e9a:	08c9      	lsrs	r1, r1, #3
 8005e9c:	1543      	asrs	r3, r0, #21
 8005e9e:	00c9      	lsls	r1, r1, #3
 8005ea0:	f003 0303 	and.w	r3, r3, #3
 8005ea4:	ea4f 4c60 	mov.w	ip, r0, asr #17
 8005ea8:	40d9      	lsrs	r1, r3
 8005eaa:	f00c 0c0f 	and.w	ip, ip, #15
 8005eae:	f1bc 0f04 	cmp.w	ip, #4
 8005eb2:	d00a      	beq.n	8005eca <ai_array_get_byte_size+0x46>
 8005eb4:	f1bc 0f08 	cmp.w	ip, #8
 8005eb8:	bf02      	ittt	eq
 8005eba:	f3c0 3082 	ubfxeq	r0, r0, #14, #3
 8005ebe:	1882      	addeq	r2, r0, r2
 8005ec0:	eb01 2102 	addeq.w	r1, r1, r2, lsl #8
 8005ec4:	1dc9      	adds	r1, r1, #7
 8005ec6:	08c8      	lsrs	r0, r1, #3
 8005ec8:	4770      	bx	lr
 8005eca:	f3c0 3082 	ubfx	r0, r0, #14, #3
 8005ece:	1882      	adds	r2, r0, r2
 8005ed0:	eb01 1102 	add.w	r1, r1, r2, lsl #4
 8005ed4:	1dc9      	adds	r1, r1, #7
 8005ed6:	08c8      	lsrs	r0, r1, #3
 8005ed8:	4770      	bx	lr

08005eda <ai_array_get_data_byte_size>:
 8005eda:	b909      	cbnz	r1, 8005ee0 <ai_array_get_data_byte_size+0x6>
 8005edc:	2000      	movs	r0, #0
 8005ede:	4770      	bx	lr
 8005ee0:	11c2      	asrs	r2, r0, #7
 8005ee2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005ee6:	f3c0 3382 	ubfx	r3, r0, #14, #3
 8005eea:	189a      	adds	r2, r3, r2
 8005eec:	4351      	muls	r1, r2
 8005eee:	1dc9      	adds	r1, r1, #7
 8005ef0:	08c9      	lsrs	r1, r1, #3
 8005ef2:	1540      	asrs	r0, r0, #21
 8005ef4:	00c9      	lsls	r1, r1, #3
 8005ef6:	f000 0003 	and.w	r0, r0, #3
 8005efa:	40c1      	lsrs	r1, r0
 8005efc:	1dc9      	adds	r1, r1, #7
 8005efe:	08c8      	lsrs	r0, r1, #3
 8005f00:	4770      	bx	lr

08005f02 <ai_array_get_elems_from_size>:
 8005f02:	b909      	cbnz	r1, 8005f08 <ai_array_get_elems_from_size+0x6>
 8005f04:	2000      	movs	r0, #0
 8005f06:	4770      	bx	lr
 8005f08:	1442      	asrs	r2, r0, #17
 8005f0a:	00c9      	lsls	r1, r1, #3
 8005f0c:	f002 020f 	and.w	r2, r2, #15
 8005f10:	2a04      	cmp	r2, #4
 8005f12:	d002      	beq.n	8005f1a <ai_array_get_elems_from_size+0x18>
 8005f14:	2a08      	cmp	r2, #8
 8005f16:	d009      	beq.n	8005f2c <ai_array_get_elems_from_size+0x2a>
 8005f18:	e010      	b.n	8005f3c <ai_array_get_elems_from_size+0x3a>
 8005f1a:	11c3      	asrs	r3, r0, #7
 8005f1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f20:	f3c0 3282 	ubfx	r2, r0, #14, #3
 8005f24:	18d2      	adds	r2, r2, r3
 8005f26:	eba1 1102 	sub.w	r1, r1, r2, lsl #4
 8005f2a:	e007      	b.n	8005f3c <ai_array_get_elems_from_size+0x3a>
 8005f2c:	11c2      	asrs	r2, r0, #7
 8005f2e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005f32:	f3c0 3382 	ubfx	r3, r0, #14, #3
 8005f36:	189a      	adds	r2, r3, r2
 8005f38:	eba1 2102 	sub.w	r1, r1, r2, lsl #8
 8005f3c:	1542      	asrs	r2, r0, #21
 8005f3e:	f002 0203 	and.w	r2, r2, #3
 8005f42:	4091      	lsls	r1, r2
 8005f44:	1dc9      	adds	r1, r1, #7
 8005f46:	11c2      	asrs	r2, r0, #7
 8005f48:	08c9      	lsrs	r1, r1, #3
 8005f4a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005f4e:	f3c0 3082 	ubfx	r0, r0, #14, #3
 8005f52:	00c9      	lsls	r1, r1, #3
 8005f54:	1880      	adds	r0, r0, r2
 8005f56:	fbb1 f0f0 	udiv	r0, r1, r0
 8005f5a:	4770      	bx	lr

08005f5c <.text_38>:
 8005f5c:	5f544d46 	.word	0x5f544d46
 8005f60:	454e4f4e 	.word	0x454e4f4e
 8005f64:	00          	.byte	0x00
 8005f65:	00          	.byte	0x00
	...

08005f68 <.text_39>:
 8005f68:	5f544d46 	.word	0x5f544d46
 8005f6c:	414f4c46 	.word	0x414f4c46
 8005f70:	0054      	.short	0x0054
	...

08005f74 <.text_40>:
 8005f74:	5f544d46 	.word	0x5f544d46
 8005f78:	414f4c46 	.word	0x414f4c46
 8005f7c:	00343654 	.word	0x00343654

08005f80 <.text_41>:
 8005f80:	5f544d46 	.word	0x5f544d46
 8005f84:	414f4c46 	.word	0x414f4c46
 8005f88:	00363154 	.word	0x00363154

08005f8c <.text_42>:
 8005f8c:	5f544d46 	.word	0x5f544d46
 8005f90:	00003855 	.word	0x00003855

08005f94 <.text_43>:
 8005f94:	5f544d46 	.word	0x5f544d46
 8005f98:	00363155 	.word	0x00363155

08005f9c <.text_44>:
 8005f9c:	5f544d46 	.word	0x5f544d46
 8005fa0:	00323355 	.word	0x00323355

08005fa4 <.text_45>:
 8005fa4:	5f544d46 	.word	0x5f544d46
 8005fa8:	00343655 	.word	0x00343655

08005fac <.text_46>:
 8005fac:	5f544d46 	.word	0x5f544d46
 8005fb0:	00003455 	.word	0x00003455

08005fb4 <.text_47>:
 8005fb4:	5f544d46 	.word	0x5f544d46
 8005fb8:	00003853 	.word	0x00003853

08005fbc <.text_48>:
 8005fbc:	5f544d46 	.word	0x5f544d46
 8005fc0:	00363153 	.word	0x00363153

08005fc4 <.text_49>:
 8005fc4:	5f544d46 	.word	0x5f544d46
 8005fc8:	00323353 	.word	0x00323353

08005fcc <.text_50>:
 8005fcc:	5f544d46 	.word	0x5f544d46
 8005fd0:	00343653 	.word	0x00343653

08005fd4 <.text_51>:
 8005fd4:	5f544d46 	.word	0x5f544d46
 8005fd8:	00003453 	.word	0x00003453

08005fdc <.text_52>:
 8005fdc:	5f544d46 	.word	0x5f544d46
 8005fe0:	0051      	.short	0x0051
	...

08005fe4 <.text_53>:
 8005fe4:	5f544d46 	.word	0x5f544d46
 8005fe8:	00003751 	.word	0x00003751

08005fec <.text_54>:
 8005fec:	5f544d46 	.word	0x5f544d46
 8005ff0:	00353151 	.word	0x00353151

08005ff4 <.text_55>:
 8005ff4:	5f544d46 	.word	0x5f544d46
 8005ff8:	00313351 	.word	0x00313351

08005ffc <.text_56>:
 8005ffc:	5f544d46 	.word	0x5f544d46
 8006000:	00005155 	.word	0x00005155

08006004 <.text_57>:
 8006004:	5f544d46 	.word	0x5f544d46
 8006008:	00375155 	.word	0x00375155

0800600c <.text_58>:
 800600c:	5f544d46 	.word	0x5f544d46
 8006010:	35315155 	.word	0x35315155
 8006014:	00          	.byte	0x00
 8006015:	00          	.byte	0x00
	...

08006018 <.text_59>:
 8006018:	5f544d46 	.word	0x5f544d46
 800601c:	31335155 	.word	0x31335155
 8006020:	00          	.byte	0x00
 8006021:	00          	.byte	0x00
	...

08006024 <.text_60>:
 8006024:	5f544d46 	.word	0x5f544d46
 8006028:	3454554c 	.word	0x3454554c
 800602c:	4f4c465f 	.word	0x4f4c465f
 8006030:	00005441 	.word	0x00005441

08006034 <.text_61>:
 8006034:	5f544d46 	.word	0x5f544d46
 8006038:	3854554c 	.word	0x3854554c
 800603c:	4f4c465f 	.word	0x4f4c465f
 8006040:	00005441 	.word	0x00005441

08006044 <.text_62>:
 8006044:	5f544d46 	.word	0x5f544d46
 8006048:	3454554c 	.word	0x3454554c
 800604c:	3531515f 	.word	0x3531515f
 8006050:	00          	.byte	0x00
 8006051:	00          	.byte	0x00
	...

08006054 <.text_63>:
 8006054:	5f544d46 	.word	0x5f544d46
 8006058:	3854554c 	.word	0x3854554c
 800605c:	3531515f 	.word	0x3531515f
 8006060:	00          	.byte	0x00
 8006061:	00          	.byte	0x00
	...

08006064 <.text_64>:
 8006064:	5f544d46 	.word	0x5f544d46
 8006068:	3454554c 	.word	0x3454554c
 800606c:	3151555f 	.word	0x3151555f
 8006070:	0035      	.short	0x0035
	...

08006074 <.text_65>:
 8006074:	5f544d46 	.word	0x5f544d46
 8006078:	3854554c 	.word	0x3854554c
 800607c:	3151555f 	.word	0x3151555f
 8006080:	0035      	.short	0x0035
	...

08006084 <.text_66>:
 8006084:	415f4941 	.word	0x415f4941
 8006088:	59415252 	.word	0x59415252
 800608c:	524f465f 	.word	0x524f465f
 8006090:	5f54414d 	.word	0x5f54414d
 8006094:	454e4f4e 	.word	0x454e4f4e
 8006098:	00          	.byte	0x00
 8006099:	00          	.byte	0x00
	...

0800609c <.text_67>:
 800609c:	415f4941 	.word	0x415f4941
 80060a0:	59415252 	.word	0x59415252
 80060a4:	524f465f 	.word	0x524f465f
 80060a8:	5f54414d 	.word	0x5f54414d
 80060ac:	0051      	.short	0x0051
	...

080060b0 <.text_68>:
 80060b0:	415f4941 	.word	0x415f4941
 80060b4:	59415252 	.word	0x59415252
 80060b8:	524f465f 	.word	0x524f465f
 80060bc:	5f54414d 	.word	0x5f54414d
 80060c0:	00005155 	.word	0x00005155

080060c4 <.text_69>:
 80060c4:	425f4941 	.word	0x425f4941
 80060c8:	45464655 	.word	0x45464655
 80060cc:	4f465f52 	.word	0x4f465f52
 80060d0:	54414d52 	.word	0x54414d52
 80060d4:	4e4f4e5f 	.word	0x4e4f4e5f
 80060d8:	0045      	.short	0x0045
	...

080060dc <.text_70>:
 80060dc:	425f4941 	.word	0x425f4941
 80060e0:	45464655 	.word	0x45464655
 80060e4:	4f465f52 	.word	0x4f465f52
 80060e8:	54414d52 	.word	0x54414d52
 80060ec:	0000515f 	.word	0x0000515f

080060f0 <.text_71>:
 80060f0:	425f4941 	.word	0x425f4941
 80060f4:	45464655 	.word	0x45464655
 80060f8:	4f465f52 	.word	0x4f465f52
 80060fc:	54414d52 	.word	0x54414d52
 8006100:	0051555f 	.word	0x0051555f

08006104 <ai_math_sqrt>:
 8006104:	eef0 0a40 	vmov.f32	s1, s0
 8006108:	eef5 0a40 	vcmp.f32	s1, #0.0
 800610c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006110:	ed9f 0a29 	vldr	s0, [pc, #164]	; 80061b8 <.text_12>
 8006114:	db01      	blt.n	800611a <ai_math_sqrt+0x16>
 8006116:	eeb1 0ae0 	vsqrt.f32	s0, s1
 800611a:	4770      	bx	lr

0800611c <ai_math_exp>:
 800611c:	f00e bd0c 	b.w	8014b38 <expf>

08006120 <ai_math_pow>:
 8006120:	f00e bd8e 	b.w	8014c40 <powf>

08006124 <ai_math_tanh>:
 8006124:	f00e bbe6 	b.w	80148f4 <tanhf>

08006128 <ai_math_cosh>:
 8006128:	f00e bcde 	b.w	8014ae8 <coshf>

0800612c <ai_math_relu>:
 800612c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8006130:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006134:	bf48      	it	mi
 8006136:	ed9f 0a20 	vldrmi	s0, [pc, #128]	; 80061b8 <.text_12>
 800613a:	4770      	bx	lr

0800613c <ai_math_prelu>:
 800613c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8006140:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006144:	bf48      	it	mi
 8006146:	ee20 0a20 	vmulmi.f32	s0, s0, s1
 800614a:	4770      	bx	lr

0800614c <ai_math_sigmoid>:
 800614c:	b500      	push	{lr}
 800614e:	b081      	sub	sp, #4
 8006150:	eeb1 0a40 	vneg.f32	s0, s0
 8006154:	f00e fcf0 	bl	8014b38 <expf>
 8006158:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800615c:	ee30 0a20 	vadd.f32	s0, s0, s1
 8006160:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8006164:	ee81 0a00 	vdiv.f32	s0, s2, s0
 8006168:	b001      	add	sp, #4
 800616a:	bd00      	pop	{pc}

0800616c <ai_math_hard_sigmoid>:
 800616c:	eef0 0a40 	vmov.f32	s1, s0
 8006170:	ed9f 1a12 	vldr	s2, [pc, #72]	; 80061bc <.text_13>
 8006174:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8006178:	ee00 0a81 	vmla.f32	s0, s1, s2
 800617c:	eddf 0a10 	vldr	s1, [pc, #64]	; 80061c0 <.text_14>
 8006180:	eeb4 0a60 	vcmp.f32	s0, s1
 8006184:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006188:	da07      	bge.n	800619a <ai_math_hard_sigmoid+0x2e>
 800618a:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800618e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006192:	d504      	bpl.n	800619e <ai_math_hard_sigmoid+0x32>
 8006194:	ed9f 0a08 	vldr	s0, [pc, #32]	; 80061b8 <.text_12>
 8006198:	4770      	bx	lr
 800619a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800619e:	4770      	bx	lr

080061a0 <ai_math_sign>:
 80061a0:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80061a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061a8:	bfcc      	ite	gt
 80061aa:	ed9f 0a06 	vldrgt	s0, [pc, #24]	; 80061c4 <.text_15>
 80061ae:	ed9f 0a06 	vldrle	s0, [pc, #24]	; 80061c8 <.text_16>
 80061b2:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 80061b6:	4770      	bx	lr

080061b8 <.text_12>:
 80061b8:	00000000 	.word	0x00000000

080061bc <.text_13>:
 80061bc:	3e4ccccd 	.word	0x3e4ccccd

080061c0 <.text_14>:
 80061c0:	3f800001 	.word	0x3f800001

080061c4 <.text_15>:
 80061c4:	00000001 	.word	0x00000001

080061c8 <.text_16>:
 80061c8:	ffffffff 	.word	0xffffffff

080061cc <ai_div>:
 80061cc:	ee80 0a20 	vdiv.f32	s0, s0, s1
 80061d0:	4770      	bx	lr

080061d2 <ai_floor_div>:
 80061d2:	ee80 0a20 	vdiv.f32	s0, s0, s1
 80061d6:	f00e b9b7 	b.w	8014548 <floorf>

080061da <ai_floor_mod>:
 80061da:	f00e bce3 	b.w	8014ba4 <fmodf>

080061de <ai_max>:
 80061de:	eef4 0a40 	vcmp.f32	s1, s0
 80061e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061e6:	bf58      	it	pl
 80061e8:	eeb0 0a60 	vmovpl.f32	s0, s1
 80061ec:	4770      	bx	lr

080061ee <ai_min>:
 80061ee:	eeb4 0a60 	vcmp.f32	s0, s1
 80061f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061f6:	bf58      	it	pl
 80061f8:	eeb0 0a60 	vmovpl.f32	s0, s1
 80061fc:	4770      	bx	lr

080061fe <ai_mul>:
 80061fe:	ee20 0a20 	vmul.f32	s0, s0, s1
 8006202:	4770      	bx	lr

08006204 <ai_sub>:
 8006204:	ee30 0a60 	vsub.f32	s0, s0, s1
 8006208:	4770      	bx	lr

0800620a <ai_sum>:
 800620a:	ee30 0a20 	vadd.f32	s0, s0, s1
 800620e:	4770      	bx	lr

08006210 <arm_mat_init_f32>:
 8006210:	8001      	strh	r1, [r0, #0]
 8006212:	8042      	strh	r2, [r0, #2]
 8006214:	6043      	str	r3, [r0, #4]
 8006216:	4770      	bx	lr

08006218 <__aeabi_memset>:
 8006218:	b470      	push	{r4, r5, r6}
 800621a:	0784      	lsls	r4, r0, #30
 800621c:	d046      	beq.n	80062ac <__aeabi_memset+0x94>
 800621e:	1e4c      	subs	r4, r1, #1
 8006220:	2900      	cmp	r1, #0
 8006222:	d041      	beq.n	80062a8 <__aeabi_memset+0x90>
 8006224:	b2d5      	uxtb	r5, r2
 8006226:	4603      	mov	r3, r0
 8006228:	e002      	b.n	8006230 <__aeabi_memset+0x18>
 800622a:	1e61      	subs	r1, r4, #1
 800622c:	b3e4      	cbz	r4, 80062a8 <__aeabi_memset+0x90>
 800622e:	460c      	mov	r4, r1
 8006230:	f803 5b01 	strb.w	r5, [r3], #1
 8006234:	0799      	lsls	r1, r3, #30
 8006236:	d1f8      	bne.n	800622a <__aeabi_memset+0x12>
 8006238:	2c03      	cmp	r4, #3
 800623a:	d92e      	bls.n	800629a <__aeabi_memset+0x82>
 800623c:	b2d5      	uxtb	r5, r2
 800623e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8006242:	2c0f      	cmp	r4, #15
 8006244:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8006248:	d919      	bls.n	800627e <__aeabi_memset+0x66>
 800624a:	4626      	mov	r6, r4
 800624c:	f103 0110 	add.w	r1, r3, #16
 8006250:	3e10      	subs	r6, #16
 8006252:	2e0f      	cmp	r6, #15
 8006254:	f841 5c10 	str.w	r5, [r1, #-16]
 8006258:	f841 5c0c 	str.w	r5, [r1, #-12]
 800625c:	f841 5c08 	str.w	r5, [r1, #-8]
 8006260:	f841 5c04 	str.w	r5, [r1, #-4]
 8006264:	f101 0110 	add.w	r1, r1, #16
 8006268:	d8f2      	bhi.n	8006250 <__aeabi_memset+0x38>
 800626a:	f1a4 0110 	sub.w	r1, r4, #16
 800626e:	f021 010f 	bic.w	r1, r1, #15
 8006272:	f004 040f 	and.w	r4, r4, #15
 8006276:	3110      	adds	r1, #16
 8006278:	2c03      	cmp	r4, #3
 800627a:	440b      	add	r3, r1
 800627c:	d90d      	bls.n	800629a <__aeabi_memset+0x82>
 800627e:	461e      	mov	r6, r3
 8006280:	4621      	mov	r1, r4
 8006282:	3904      	subs	r1, #4
 8006284:	2903      	cmp	r1, #3
 8006286:	f846 5b04 	str.w	r5, [r6], #4
 800628a:	d8fa      	bhi.n	8006282 <__aeabi_memset+0x6a>
 800628c:	1f21      	subs	r1, r4, #4
 800628e:	f021 0103 	bic.w	r1, r1, #3
 8006292:	3104      	adds	r1, #4
 8006294:	440b      	add	r3, r1
 8006296:	f004 0403 	and.w	r4, r4, #3
 800629a:	b12c      	cbz	r4, 80062a8 <__aeabi_memset+0x90>
 800629c:	b2d2      	uxtb	r2, r2
 800629e:	441c      	add	r4, r3
 80062a0:	f803 2b01 	strb.w	r2, [r3], #1
 80062a4:	42a3      	cmp	r3, r4
 80062a6:	d1fb      	bne.n	80062a0 <__aeabi_memset+0x88>
 80062a8:	bc70      	pop	{r4, r5, r6}
 80062aa:	4770      	bx	lr
 80062ac:	460c      	mov	r4, r1
 80062ae:	4603      	mov	r3, r0
 80062b0:	e7c2      	b.n	8006238 <__aeabi_memset+0x20>

080062b2 <strlen>:
 80062b2:	4603      	mov	r3, r0
 80062b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80062b8:	2a00      	cmp	r2, #0
 80062ba:	d1fb      	bne.n	80062b4 <strlen+0x2>
 80062bc:	1a18      	subs	r0, r3, r0
 80062be:	3801      	subs	r0, #1
 80062c0:	4770      	bx	lr
	...

080062d0 <memchr>:
 80062d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80062d4:	2a10      	cmp	r2, #16
 80062d6:	db2b      	blt.n	8006330 <memchr+0x60>
 80062d8:	f010 0f07 	tst.w	r0, #7
 80062dc:	d008      	beq.n	80062f0 <memchr+0x20>
 80062de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80062e2:	3a01      	subs	r2, #1
 80062e4:	428b      	cmp	r3, r1
 80062e6:	d02d      	beq.n	8006344 <memchr+0x74>
 80062e8:	f010 0f07 	tst.w	r0, #7
 80062ec:	b342      	cbz	r2, 8006340 <memchr+0x70>
 80062ee:	d1f6      	bne.n	80062de <memchr+0xe>
 80062f0:	b4f0      	push	{r4, r5, r6, r7}
 80062f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80062f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80062fa:	f022 0407 	bic.w	r4, r2, #7
 80062fe:	f07f 0700 	mvns.w	r7, #0
 8006302:	2300      	movs	r3, #0
 8006304:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8006308:	3c08      	subs	r4, #8
 800630a:	ea85 0501 	eor.w	r5, r5, r1
 800630e:	ea86 0601 	eor.w	r6, r6, r1
 8006312:	fa85 f547 	uadd8	r5, r5, r7
 8006316:	faa3 f587 	sel	r5, r3, r7
 800631a:	fa86 f647 	uadd8	r6, r6, r7
 800631e:	faa5 f687 	sel	r6, r5, r7
 8006322:	b98e      	cbnz	r6, 8006348 <memchr+0x78>
 8006324:	d1ee      	bne.n	8006304 <memchr+0x34>
 8006326:	bcf0      	pop	{r4, r5, r6, r7}
 8006328:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800632c:	f002 0207 	and.w	r2, r2, #7
 8006330:	b132      	cbz	r2, 8006340 <memchr+0x70>
 8006332:	f810 3b01 	ldrb.w	r3, [r0], #1
 8006336:	3a01      	subs	r2, #1
 8006338:	ea83 0301 	eor.w	r3, r3, r1
 800633c:	b113      	cbz	r3, 8006344 <memchr+0x74>
 800633e:	d1f8      	bne.n	8006332 <memchr+0x62>
 8006340:	2000      	movs	r0, #0
 8006342:	4770      	bx	lr
 8006344:	3801      	subs	r0, #1
 8006346:	4770      	bx	lr
 8006348:	2d00      	cmp	r5, #0
 800634a:	bf06      	itte	eq
 800634c:	4635      	moveq	r5, r6
 800634e:	3803      	subeq	r0, #3
 8006350:	3807      	subne	r0, #7
 8006352:	f015 0f01 	tst.w	r5, #1
 8006356:	d107      	bne.n	8006368 <memchr+0x98>
 8006358:	3001      	adds	r0, #1
 800635a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800635e:	bf02      	ittt	eq
 8006360:	3001      	addeq	r0, #1
 8006362:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8006366:	3001      	addeq	r0, #1
 8006368:	bcf0      	pop	{r4, r5, r6, r7}
 800636a:	3801      	subs	r0, #1
 800636c:	4770      	bx	lr
 800636e:	bf00      	nop

08006370 <__aeabi_drsub>:
 8006370:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8006374:	e002      	b.n	800637c <__adddf3>
 8006376:	bf00      	nop

08006378 <__aeabi_dsub>:
 8006378:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800637c <__adddf3>:
 800637c:	b530      	push	{r4, r5, lr}
 800637e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8006382:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8006386:	ea94 0f05 	teq	r4, r5
 800638a:	bf08      	it	eq
 800638c:	ea90 0f02 	teqeq	r0, r2
 8006390:	bf1f      	itttt	ne
 8006392:	ea54 0c00 	orrsne.w	ip, r4, r0
 8006396:	ea55 0c02 	orrsne.w	ip, r5, r2
 800639a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800639e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80063a2:	f000 80e2 	beq.w	800656a <__adddf3+0x1ee>
 80063a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80063aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80063ae:	bfb8      	it	lt
 80063b0:	426d      	neglt	r5, r5
 80063b2:	dd0c      	ble.n	80063ce <__adddf3+0x52>
 80063b4:	442c      	add	r4, r5
 80063b6:	ea80 0202 	eor.w	r2, r0, r2
 80063ba:	ea81 0303 	eor.w	r3, r1, r3
 80063be:	ea82 0000 	eor.w	r0, r2, r0
 80063c2:	ea83 0101 	eor.w	r1, r3, r1
 80063c6:	ea80 0202 	eor.w	r2, r0, r2
 80063ca:	ea81 0303 	eor.w	r3, r1, r3
 80063ce:	2d36      	cmp	r5, #54	; 0x36
 80063d0:	bf88      	it	hi
 80063d2:	bd30      	pophi	{r4, r5, pc}
 80063d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80063d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80063dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80063e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80063e4:	d002      	beq.n	80063ec <__adddf3+0x70>
 80063e6:	4240      	negs	r0, r0
 80063e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80063ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80063f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80063f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80063f8:	d002      	beq.n	8006400 <__adddf3+0x84>
 80063fa:	4252      	negs	r2, r2
 80063fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8006400:	ea94 0f05 	teq	r4, r5
 8006404:	f000 80a7 	beq.w	8006556 <__adddf3+0x1da>
 8006408:	f1a4 0401 	sub.w	r4, r4, #1
 800640c:	f1d5 0e20 	rsbs	lr, r5, #32
 8006410:	db0d      	blt.n	800642e <__adddf3+0xb2>
 8006412:	fa02 fc0e 	lsl.w	ip, r2, lr
 8006416:	fa22 f205 	lsr.w	r2, r2, r5
 800641a:	1880      	adds	r0, r0, r2
 800641c:	f141 0100 	adc.w	r1, r1, #0
 8006420:	fa03 f20e 	lsl.w	r2, r3, lr
 8006424:	1880      	adds	r0, r0, r2
 8006426:	fa43 f305 	asr.w	r3, r3, r5
 800642a:	4159      	adcs	r1, r3
 800642c:	e00e      	b.n	800644c <__adddf3+0xd0>
 800642e:	f1a5 0520 	sub.w	r5, r5, #32
 8006432:	f10e 0e20 	add.w	lr, lr, #32
 8006436:	2a01      	cmp	r2, #1
 8006438:	fa03 fc0e 	lsl.w	ip, r3, lr
 800643c:	bf28      	it	cs
 800643e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8006442:	fa43 f305 	asr.w	r3, r3, r5
 8006446:	18c0      	adds	r0, r0, r3
 8006448:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800644c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8006450:	d507      	bpl.n	8006462 <__adddf3+0xe6>
 8006452:	f04f 0e00 	mov.w	lr, #0
 8006456:	f1dc 0c00 	rsbs	ip, ip, #0
 800645a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800645e:	eb6e 0101 	sbc.w	r1, lr, r1
 8006462:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8006466:	d31b      	bcc.n	80064a0 <__adddf3+0x124>
 8006468:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800646c:	d30c      	bcc.n	8006488 <__adddf3+0x10c>
 800646e:	0849      	lsrs	r1, r1, #1
 8006470:	ea5f 0030 	movs.w	r0, r0, rrx
 8006474:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8006478:	f104 0401 	add.w	r4, r4, #1
 800647c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8006480:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8006484:	f080 809a 	bcs.w	80065bc <__adddf3+0x240>
 8006488:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800648c:	bf08      	it	eq
 800648e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8006492:	f150 0000 	adcs.w	r0, r0, #0
 8006496:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800649a:	ea41 0105 	orr.w	r1, r1, r5
 800649e:	bd30      	pop	{r4, r5, pc}
 80064a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80064a4:	4140      	adcs	r0, r0
 80064a6:	eb41 0101 	adc.w	r1, r1, r1
 80064aa:	3c01      	subs	r4, #1
 80064ac:	bf28      	it	cs
 80064ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80064b2:	d2e9      	bcs.n	8006488 <__adddf3+0x10c>
 80064b4:	f091 0f00 	teq	r1, #0
 80064b8:	bf04      	itt	eq
 80064ba:	4601      	moveq	r1, r0
 80064bc:	2000      	moveq	r0, #0
 80064be:	fab1 f381 	clz	r3, r1
 80064c2:	bf08      	it	eq
 80064c4:	3320      	addeq	r3, #32
 80064c6:	f1a3 030b 	sub.w	r3, r3, #11
 80064ca:	f1b3 0220 	subs.w	r2, r3, #32
 80064ce:	da0c      	bge.n	80064ea <__adddf3+0x16e>
 80064d0:	320c      	adds	r2, #12
 80064d2:	dd08      	ble.n	80064e6 <__adddf3+0x16a>
 80064d4:	f102 0c14 	add.w	ip, r2, #20
 80064d8:	f1c2 020c 	rsb	r2, r2, #12
 80064dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80064e0:	fa21 f102 	lsr.w	r1, r1, r2
 80064e4:	e00c      	b.n	8006500 <__adddf3+0x184>
 80064e6:	f102 0214 	add.w	r2, r2, #20
 80064ea:	bfd8      	it	le
 80064ec:	f1c2 0c20 	rsble	ip, r2, #32
 80064f0:	fa01 f102 	lsl.w	r1, r1, r2
 80064f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80064f8:	bfdc      	itt	le
 80064fa:	ea41 010c 	orrle.w	r1, r1, ip
 80064fe:	4090      	lslle	r0, r2
 8006500:	1ae4      	subs	r4, r4, r3
 8006502:	bfa2      	ittt	ge
 8006504:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8006508:	4329      	orrge	r1, r5
 800650a:	bd30      	popge	{r4, r5, pc}
 800650c:	ea6f 0404 	mvn.w	r4, r4
 8006510:	3c1f      	subs	r4, #31
 8006512:	da1c      	bge.n	800654e <__adddf3+0x1d2>
 8006514:	340c      	adds	r4, #12
 8006516:	dc0e      	bgt.n	8006536 <__adddf3+0x1ba>
 8006518:	f104 0414 	add.w	r4, r4, #20
 800651c:	f1c4 0220 	rsb	r2, r4, #32
 8006520:	fa20 f004 	lsr.w	r0, r0, r4
 8006524:	fa01 f302 	lsl.w	r3, r1, r2
 8006528:	ea40 0003 	orr.w	r0, r0, r3
 800652c:	fa21 f304 	lsr.w	r3, r1, r4
 8006530:	ea45 0103 	orr.w	r1, r5, r3
 8006534:	bd30      	pop	{r4, r5, pc}
 8006536:	f1c4 040c 	rsb	r4, r4, #12
 800653a:	f1c4 0220 	rsb	r2, r4, #32
 800653e:	fa20 f002 	lsr.w	r0, r0, r2
 8006542:	fa01 f304 	lsl.w	r3, r1, r4
 8006546:	ea40 0003 	orr.w	r0, r0, r3
 800654a:	4629      	mov	r1, r5
 800654c:	bd30      	pop	{r4, r5, pc}
 800654e:	fa21 f004 	lsr.w	r0, r1, r4
 8006552:	4629      	mov	r1, r5
 8006554:	bd30      	pop	{r4, r5, pc}
 8006556:	f094 0f00 	teq	r4, #0
 800655a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800655e:	bf06      	itte	eq
 8006560:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8006564:	3401      	addeq	r4, #1
 8006566:	3d01      	subne	r5, #1
 8006568:	e74e      	b.n	8006408 <__adddf3+0x8c>
 800656a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800656e:	bf18      	it	ne
 8006570:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8006574:	d029      	beq.n	80065ca <__adddf3+0x24e>
 8006576:	ea94 0f05 	teq	r4, r5
 800657a:	bf08      	it	eq
 800657c:	ea90 0f02 	teqeq	r0, r2
 8006580:	d005      	beq.n	800658e <__adddf3+0x212>
 8006582:	ea54 0c00 	orrs.w	ip, r4, r0
 8006586:	bf04      	itt	eq
 8006588:	4619      	moveq	r1, r3
 800658a:	4610      	moveq	r0, r2
 800658c:	bd30      	pop	{r4, r5, pc}
 800658e:	ea91 0f03 	teq	r1, r3
 8006592:	bf1e      	ittt	ne
 8006594:	2100      	movne	r1, #0
 8006596:	2000      	movne	r0, #0
 8006598:	bd30      	popne	{r4, r5, pc}
 800659a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800659e:	d105      	bne.n	80065ac <__adddf3+0x230>
 80065a0:	0040      	lsls	r0, r0, #1
 80065a2:	4149      	adcs	r1, r1
 80065a4:	bf28      	it	cs
 80065a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80065aa:	bd30      	pop	{r4, r5, pc}
 80065ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80065b0:	bf3c      	itt	cc
 80065b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80065b6:	bd30      	popcc	{r4, r5, pc}
 80065b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80065bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80065c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80065c4:	f04f 0000 	mov.w	r0, #0
 80065c8:	bd30      	pop	{r4, r5, pc}
 80065ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80065ce:	bf1a      	itte	ne
 80065d0:	4619      	movne	r1, r3
 80065d2:	4610      	movne	r0, r2
 80065d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80065d8:	bf1c      	itt	ne
 80065da:	460b      	movne	r3, r1
 80065dc:	4602      	movne	r2, r0
 80065de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80065e2:	bf06      	itte	eq
 80065e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80065e8:	ea91 0f03 	teqeq	r1, r3
 80065ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80065f0:	bd30      	pop	{r4, r5, pc}
 80065f2:	bf00      	nop

080065f4 <__aeabi_ui2d>:
 80065f4:	f090 0f00 	teq	r0, #0
 80065f8:	bf04      	itt	eq
 80065fa:	2100      	moveq	r1, #0
 80065fc:	4770      	bxeq	lr
 80065fe:	b530      	push	{r4, r5, lr}
 8006600:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8006604:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8006608:	f04f 0500 	mov.w	r5, #0
 800660c:	f04f 0100 	mov.w	r1, #0
 8006610:	e750      	b.n	80064b4 <__adddf3+0x138>
 8006612:	bf00      	nop

08006614 <__aeabi_i2d>:
 8006614:	f090 0f00 	teq	r0, #0
 8006618:	bf04      	itt	eq
 800661a:	2100      	moveq	r1, #0
 800661c:	4770      	bxeq	lr
 800661e:	b530      	push	{r4, r5, lr}
 8006620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8006624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8006628:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800662c:	bf48      	it	mi
 800662e:	4240      	negmi	r0, r0
 8006630:	f04f 0100 	mov.w	r1, #0
 8006634:	e73e      	b.n	80064b4 <__adddf3+0x138>
 8006636:	bf00      	nop

08006638 <__aeabi_f2d>:
 8006638:	0042      	lsls	r2, r0, #1
 800663a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800663e:	ea4f 0131 	mov.w	r1, r1, rrx
 8006642:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8006646:	bf1f      	itttt	ne
 8006648:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800664c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8006650:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8006654:	4770      	bxne	lr
 8006656:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800665a:	bf08      	it	eq
 800665c:	4770      	bxeq	lr
 800665e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8006662:	bf04      	itt	eq
 8006664:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8006668:	4770      	bxeq	lr
 800666a:	b530      	push	{r4, r5, lr}
 800666c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8006670:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8006674:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006678:	e71c      	b.n	80064b4 <__adddf3+0x138>
 800667a:	bf00      	nop

0800667c <__aeabi_ul2d>:
 800667c:	ea50 0201 	orrs.w	r2, r0, r1
 8006680:	bf08      	it	eq
 8006682:	4770      	bxeq	lr
 8006684:	b530      	push	{r4, r5, lr}
 8006686:	f04f 0500 	mov.w	r5, #0
 800668a:	e00a      	b.n	80066a2 <__aeabi_l2d+0x16>

0800668c <__aeabi_l2d>:
 800668c:	ea50 0201 	orrs.w	r2, r0, r1
 8006690:	bf08      	it	eq
 8006692:	4770      	bxeq	lr
 8006694:	b530      	push	{r4, r5, lr}
 8006696:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800669a:	d502      	bpl.n	80066a2 <__aeabi_l2d+0x16>
 800669c:	4240      	negs	r0, r0
 800669e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80066a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80066a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80066aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80066ae:	f43f aed8 	beq.w	8006462 <__adddf3+0xe6>
 80066b2:	f04f 0203 	mov.w	r2, #3
 80066b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80066ba:	bf18      	it	ne
 80066bc:	3203      	addne	r2, #3
 80066be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80066c2:	bf18      	it	ne
 80066c4:	3203      	addne	r2, #3
 80066c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80066ca:	f1c2 0320 	rsb	r3, r2, #32
 80066ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80066d2:	fa20 f002 	lsr.w	r0, r0, r2
 80066d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80066da:	ea40 000e 	orr.w	r0, r0, lr
 80066de:	fa21 f102 	lsr.w	r1, r1, r2
 80066e2:	4414      	add	r4, r2
 80066e4:	e6bd      	b.n	8006462 <__adddf3+0xe6>
 80066e6:	bf00      	nop

080066e8 <__aeabi_dmul>:
 80066e8:	b570      	push	{r4, r5, r6, lr}
 80066ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80066ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80066f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80066f6:	bf1d      	ittte	ne
 80066f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80066fc:	ea94 0f0c 	teqne	r4, ip
 8006700:	ea95 0f0c 	teqne	r5, ip
 8006704:	f000 f8de 	bleq	80068c4 <__aeabi_dmul+0x1dc>
 8006708:	442c      	add	r4, r5
 800670a:	ea81 0603 	eor.w	r6, r1, r3
 800670e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8006712:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8006716:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800671a:	bf18      	it	ne
 800671c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8006720:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8006724:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006728:	d038      	beq.n	800679c <__aeabi_dmul+0xb4>
 800672a:	fba0 ce02 	umull	ip, lr, r0, r2
 800672e:	f04f 0500 	mov.w	r5, #0
 8006732:	fbe1 e502 	umlal	lr, r5, r1, r2
 8006736:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800673a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800673e:	f04f 0600 	mov.w	r6, #0
 8006742:	fbe1 5603 	umlal	r5, r6, r1, r3
 8006746:	f09c 0f00 	teq	ip, #0
 800674a:	bf18      	it	ne
 800674c:	f04e 0e01 	orrne.w	lr, lr, #1
 8006750:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8006754:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8006758:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800675c:	d204      	bcs.n	8006768 <__aeabi_dmul+0x80>
 800675e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8006762:	416d      	adcs	r5, r5
 8006764:	eb46 0606 	adc.w	r6, r6, r6
 8006768:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800676c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8006770:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8006774:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8006778:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800677c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8006780:	bf88      	it	hi
 8006782:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8006786:	d81e      	bhi.n	80067c6 <__aeabi_dmul+0xde>
 8006788:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800678c:	bf08      	it	eq
 800678e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8006792:	f150 0000 	adcs.w	r0, r0, #0
 8006796:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800679a:	bd70      	pop	{r4, r5, r6, pc}
 800679c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80067a0:	ea46 0101 	orr.w	r1, r6, r1
 80067a4:	ea40 0002 	orr.w	r0, r0, r2
 80067a8:	ea81 0103 	eor.w	r1, r1, r3
 80067ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80067b0:	bfc2      	ittt	gt
 80067b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80067b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80067ba:	bd70      	popgt	{r4, r5, r6, pc}
 80067bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80067c0:	f04f 0e00 	mov.w	lr, #0
 80067c4:	3c01      	subs	r4, #1
 80067c6:	f300 80ab 	bgt.w	8006920 <__aeabi_dmul+0x238>
 80067ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80067ce:	bfde      	ittt	le
 80067d0:	2000      	movle	r0, #0
 80067d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80067d6:	bd70      	pople	{r4, r5, r6, pc}
 80067d8:	f1c4 0400 	rsb	r4, r4, #0
 80067dc:	3c20      	subs	r4, #32
 80067de:	da35      	bge.n	800684c <__aeabi_dmul+0x164>
 80067e0:	340c      	adds	r4, #12
 80067e2:	dc1b      	bgt.n	800681c <__aeabi_dmul+0x134>
 80067e4:	f104 0414 	add.w	r4, r4, #20
 80067e8:	f1c4 0520 	rsb	r5, r4, #32
 80067ec:	fa00 f305 	lsl.w	r3, r0, r5
 80067f0:	fa20 f004 	lsr.w	r0, r0, r4
 80067f4:	fa01 f205 	lsl.w	r2, r1, r5
 80067f8:	ea40 0002 	orr.w	r0, r0, r2
 80067fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8006800:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006804:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8006808:	fa21 f604 	lsr.w	r6, r1, r4
 800680c:	eb42 0106 	adc.w	r1, r2, r6
 8006810:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8006814:	bf08      	it	eq
 8006816:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800681a:	bd70      	pop	{r4, r5, r6, pc}
 800681c:	f1c4 040c 	rsb	r4, r4, #12
 8006820:	f1c4 0520 	rsb	r5, r4, #32
 8006824:	fa00 f304 	lsl.w	r3, r0, r4
 8006828:	fa20 f005 	lsr.w	r0, r0, r5
 800682c:	fa01 f204 	lsl.w	r2, r1, r4
 8006830:	ea40 0002 	orr.w	r0, r0, r2
 8006834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8006838:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800683c:	f141 0100 	adc.w	r1, r1, #0
 8006840:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8006844:	bf08      	it	eq
 8006846:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800684a:	bd70      	pop	{r4, r5, r6, pc}
 800684c:	f1c4 0520 	rsb	r5, r4, #32
 8006850:	fa00 f205 	lsl.w	r2, r0, r5
 8006854:	ea4e 0e02 	orr.w	lr, lr, r2
 8006858:	fa20 f304 	lsr.w	r3, r0, r4
 800685c:	fa01 f205 	lsl.w	r2, r1, r5
 8006860:	ea43 0302 	orr.w	r3, r3, r2
 8006864:	fa21 f004 	lsr.w	r0, r1, r4
 8006868:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800686c:	fa21 f204 	lsr.w	r2, r1, r4
 8006870:	ea20 0002 	bic.w	r0, r0, r2
 8006874:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8006878:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800687c:	bf08      	it	eq
 800687e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8006882:	bd70      	pop	{r4, r5, r6, pc}
 8006884:	f094 0f00 	teq	r4, #0
 8006888:	d10f      	bne.n	80068aa <__aeabi_dmul+0x1c2>
 800688a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800688e:	0040      	lsls	r0, r0, #1
 8006890:	eb41 0101 	adc.w	r1, r1, r1
 8006894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8006898:	bf08      	it	eq
 800689a:	3c01      	subeq	r4, #1
 800689c:	d0f7      	beq.n	800688e <__aeabi_dmul+0x1a6>
 800689e:	ea41 0106 	orr.w	r1, r1, r6
 80068a2:	f095 0f00 	teq	r5, #0
 80068a6:	bf18      	it	ne
 80068a8:	4770      	bxne	lr
 80068aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80068ae:	0052      	lsls	r2, r2, #1
 80068b0:	eb43 0303 	adc.w	r3, r3, r3
 80068b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80068b8:	bf08      	it	eq
 80068ba:	3d01      	subeq	r5, #1
 80068bc:	d0f7      	beq.n	80068ae <__aeabi_dmul+0x1c6>
 80068be:	ea43 0306 	orr.w	r3, r3, r6
 80068c2:	4770      	bx	lr
 80068c4:	ea94 0f0c 	teq	r4, ip
 80068c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80068cc:	bf18      	it	ne
 80068ce:	ea95 0f0c 	teqne	r5, ip
 80068d2:	d00c      	beq.n	80068ee <__aeabi_dmul+0x206>
 80068d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80068d8:	bf18      	it	ne
 80068da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80068de:	d1d1      	bne.n	8006884 <__aeabi_dmul+0x19c>
 80068e0:	ea81 0103 	eor.w	r1, r1, r3
 80068e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80068e8:	f04f 0000 	mov.w	r0, #0
 80068ec:	bd70      	pop	{r4, r5, r6, pc}
 80068ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80068f2:	bf06      	itte	eq
 80068f4:	4610      	moveq	r0, r2
 80068f6:	4619      	moveq	r1, r3
 80068f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80068fc:	d019      	beq.n	8006932 <__aeabi_dmul+0x24a>
 80068fe:	ea94 0f0c 	teq	r4, ip
 8006902:	d102      	bne.n	800690a <__aeabi_dmul+0x222>
 8006904:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8006908:	d113      	bne.n	8006932 <__aeabi_dmul+0x24a>
 800690a:	ea95 0f0c 	teq	r5, ip
 800690e:	d105      	bne.n	800691c <__aeabi_dmul+0x234>
 8006910:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8006914:	bf1c      	itt	ne
 8006916:	4610      	movne	r0, r2
 8006918:	4619      	movne	r1, r3
 800691a:	d10a      	bne.n	8006932 <__aeabi_dmul+0x24a>
 800691c:	ea81 0103 	eor.w	r1, r1, r3
 8006920:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8006924:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8006928:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800692c:	f04f 0000 	mov.w	r0, #0
 8006930:	bd70      	pop	{r4, r5, r6, pc}
 8006932:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8006936:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800693a:	bd70      	pop	{r4, r5, r6, pc}

0800693c <__aeabi_ddiv>:
 800693c:	b570      	push	{r4, r5, r6, lr}
 800693e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8006942:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8006946:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800694a:	bf1d      	ittte	ne
 800694c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8006950:	ea94 0f0c 	teqne	r4, ip
 8006954:	ea95 0f0c 	teqne	r5, ip
 8006958:	f000 f8a7 	bleq	8006aaa <__aeabi_ddiv+0x16e>
 800695c:	eba4 0405 	sub.w	r4, r4, r5
 8006960:	ea81 0e03 	eor.w	lr, r1, r3
 8006964:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8006968:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800696c:	f000 8088 	beq.w	8006a80 <__aeabi_ddiv+0x144>
 8006970:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8006974:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8006978:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800697c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8006980:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8006984:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8006988:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800698c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8006990:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8006994:	429d      	cmp	r5, r3
 8006996:	bf08      	it	eq
 8006998:	4296      	cmpeq	r6, r2
 800699a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800699e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80069a2:	d202      	bcs.n	80069aa <__aeabi_ddiv+0x6e>
 80069a4:	085b      	lsrs	r3, r3, #1
 80069a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80069aa:	1ab6      	subs	r6, r6, r2
 80069ac:	eb65 0503 	sbc.w	r5, r5, r3
 80069b0:	085b      	lsrs	r3, r3, #1
 80069b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80069b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80069ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80069be:	ebb6 0e02 	subs.w	lr, r6, r2
 80069c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80069c6:	bf22      	ittt	cs
 80069c8:	1ab6      	subcs	r6, r6, r2
 80069ca:	4675      	movcs	r5, lr
 80069cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80069d0:	085b      	lsrs	r3, r3, #1
 80069d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80069d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80069da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80069de:	bf22      	ittt	cs
 80069e0:	1ab6      	subcs	r6, r6, r2
 80069e2:	4675      	movcs	r5, lr
 80069e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80069e8:	085b      	lsrs	r3, r3, #1
 80069ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80069ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80069f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80069f6:	bf22      	ittt	cs
 80069f8:	1ab6      	subcs	r6, r6, r2
 80069fa:	4675      	movcs	r5, lr
 80069fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8006a00:	085b      	lsrs	r3, r3, #1
 8006a02:	ea4f 0232 	mov.w	r2, r2, rrx
 8006a06:	ebb6 0e02 	subs.w	lr, r6, r2
 8006a0a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8006a0e:	bf22      	ittt	cs
 8006a10:	1ab6      	subcs	r6, r6, r2
 8006a12:	4675      	movcs	r5, lr
 8006a14:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8006a18:	ea55 0e06 	orrs.w	lr, r5, r6
 8006a1c:	d018      	beq.n	8006a50 <__aeabi_ddiv+0x114>
 8006a1e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8006a22:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8006a26:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8006a2a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8006a2e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8006a32:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8006a36:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8006a3a:	d1c0      	bne.n	80069be <__aeabi_ddiv+0x82>
 8006a3c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8006a40:	d10b      	bne.n	8006a5a <__aeabi_ddiv+0x11e>
 8006a42:	ea41 0100 	orr.w	r1, r1, r0
 8006a46:	f04f 0000 	mov.w	r0, #0
 8006a4a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8006a4e:	e7b6      	b.n	80069be <__aeabi_ddiv+0x82>
 8006a50:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8006a54:	bf04      	itt	eq
 8006a56:	4301      	orreq	r1, r0
 8006a58:	2000      	moveq	r0, #0
 8006a5a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8006a5e:	bf88      	it	hi
 8006a60:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8006a64:	f63f aeaf 	bhi.w	80067c6 <__aeabi_dmul+0xde>
 8006a68:	ebb5 0c03 	subs.w	ip, r5, r3
 8006a6c:	bf04      	itt	eq
 8006a6e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8006a72:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8006a76:	f150 0000 	adcs.w	r0, r0, #0
 8006a7a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8006a7e:	bd70      	pop	{r4, r5, r6, pc}
 8006a80:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8006a84:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8006a88:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8006a8c:	bfc2      	ittt	gt
 8006a8e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8006a92:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8006a96:	bd70      	popgt	{r4, r5, r6, pc}
 8006a98:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8006a9c:	f04f 0e00 	mov.w	lr, #0
 8006aa0:	3c01      	subs	r4, #1
 8006aa2:	e690      	b.n	80067c6 <__aeabi_dmul+0xde>
 8006aa4:	ea45 0e06 	orr.w	lr, r5, r6
 8006aa8:	e68d      	b.n	80067c6 <__aeabi_dmul+0xde>
 8006aaa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8006aae:	ea94 0f0c 	teq	r4, ip
 8006ab2:	bf08      	it	eq
 8006ab4:	ea95 0f0c 	teqeq	r5, ip
 8006ab8:	f43f af3b 	beq.w	8006932 <__aeabi_dmul+0x24a>
 8006abc:	ea94 0f0c 	teq	r4, ip
 8006ac0:	d10a      	bne.n	8006ad8 <__aeabi_ddiv+0x19c>
 8006ac2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8006ac6:	f47f af34 	bne.w	8006932 <__aeabi_dmul+0x24a>
 8006aca:	ea95 0f0c 	teq	r5, ip
 8006ace:	f47f af25 	bne.w	800691c <__aeabi_dmul+0x234>
 8006ad2:	4610      	mov	r0, r2
 8006ad4:	4619      	mov	r1, r3
 8006ad6:	e72c      	b.n	8006932 <__aeabi_dmul+0x24a>
 8006ad8:	ea95 0f0c 	teq	r5, ip
 8006adc:	d106      	bne.n	8006aec <__aeabi_ddiv+0x1b0>
 8006ade:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8006ae2:	f43f aefd 	beq.w	80068e0 <__aeabi_dmul+0x1f8>
 8006ae6:	4610      	mov	r0, r2
 8006ae8:	4619      	mov	r1, r3
 8006aea:	e722      	b.n	8006932 <__aeabi_dmul+0x24a>
 8006aec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8006af0:	bf18      	it	ne
 8006af2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8006af6:	f47f aec5 	bne.w	8006884 <__aeabi_dmul+0x19c>
 8006afa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8006afe:	f47f af0d 	bne.w	800691c <__aeabi_dmul+0x234>
 8006b02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8006b06:	f47f aeeb 	bne.w	80068e0 <__aeabi_dmul+0x1f8>
 8006b0a:	e712      	b.n	8006932 <__aeabi_dmul+0x24a>

08006b0c <__gedf2>:
 8006b0c:	f04f 3cff 	mov.w	ip, #4294967295
 8006b10:	e006      	b.n	8006b20 <__cmpdf2+0x4>
 8006b12:	bf00      	nop

08006b14 <__ledf2>:
 8006b14:	f04f 0c01 	mov.w	ip, #1
 8006b18:	e002      	b.n	8006b20 <__cmpdf2+0x4>
 8006b1a:	bf00      	nop

08006b1c <__cmpdf2>:
 8006b1c:	f04f 0c01 	mov.w	ip, #1
 8006b20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8006b24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8006b28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8006b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8006b30:	bf18      	it	ne
 8006b32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8006b36:	d01b      	beq.n	8006b70 <__cmpdf2+0x54>
 8006b38:	b001      	add	sp, #4
 8006b3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8006b3e:	bf0c      	ite	eq
 8006b40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8006b44:	ea91 0f03 	teqne	r1, r3
 8006b48:	bf02      	ittt	eq
 8006b4a:	ea90 0f02 	teqeq	r0, r2
 8006b4e:	2000      	moveq	r0, #0
 8006b50:	4770      	bxeq	lr
 8006b52:	f110 0f00 	cmn.w	r0, #0
 8006b56:	ea91 0f03 	teq	r1, r3
 8006b5a:	bf58      	it	pl
 8006b5c:	4299      	cmppl	r1, r3
 8006b5e:	bf08      	it	eq
 8006b60:	4290      	cmpeq	r0, r2
 8006b62:	bf2c      	ite	cs
 8006b64:	17d8      	asrcs	r0, r3, #31
 8006b66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8006b6a:	f040 0001 	orr.w	r0, r0, #1
 8006b6e:	4770      	bx	lr
 8006b70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8006b74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8006b78:	d102      	bne.n	8006b80 <__cmpdf2+0x64>
 8006b7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8006b7e:	d107      	bne.n	8006b90 <__cmpdf2+0x74>
 8006b80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8006b84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8006b88:	d1d6      	bne.n	8006b38 <__cmpdf2+0x1c>
 8006b8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8006b8e:	d0d3      	beq.n	8006b38 <__cmpdf2+0x1c>
 8006b90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8006b94:	4770      	bx	lr
 8006b96:	bf00      	nop

08006b98 <__aeabi_cdrcmple>:
 8006b98:	4684      	mov	ip, r0
 8006b9a:	4610      	mov	r0, r2
 8006b9c:	4662      	mov	r2, ip
 8006b9e:	468c      	mov	ip, r1
 8006ba0:	4619      	mov	r1, r3
 8006ba2:	4663      	mov	r3, ip
 8006ba4:	e000      	b.n	8006ba8 <__aeabi_cdcmpeq>
 8006ba6:	bf00      	nop

08006ba8 <__aeabi_cdcmpeq>:
 8006ba8:	b501      	push	{r0, lr}
 8006baa:	f7ff ffb7 	bl	8006b1c <__cmpdf2>
 8006bae:	2800      	cmp	r0, #0
 8006bb0:	bf48      	it	mi
 8006bb2:	f110 0f00 	cmnmi.w	r0, #0
 8006bb6:	bd01      	pop	{r0, pc}

08006bb8 <__aeabi_dcmpeq>:
 8006bb8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006bbc:	f7ff fff4 	bl	8006ba8 <__aeabi_cdcmpeq>
 8006bc0:	bf0c      	ite	eq
 8006bc2:	2001      	moveq	r0, #1
 8006bc4:	2000      	movne	r0, #0
 8006bc6:	f85d fb08 	ldr.w	pc, [sp], #8
 8006bca:	bf00      	nop

08006bcc <__aeabi_dcmplt>:
 8006bcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006bd0:	f7ff ffea 	bl	8006ba8 <__aeabi_cdcmpeq>
 8006bd4:	bf34      	ite	cc
 8006bd6:	2001      	movcc	r0, #1
 8006bd8:	2000      	movcs	r0, #0
 8006bda:	f85d fb08 	ldr.w	pc, [sp], #8
 8006bde:	bf00      	nop

08006be0 <__aeabi_dcmple>:
 8006be0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006be4:	f7ff ffe0 	bl	8006ba8 <__aeabi_cdcmpeq>
 8006be8:	bf94      	ite	ls
 8006bea:	2001      	movls	r0, #1
 8006bec:	2000      	movhi	r0, #0
 8006bee:	f85d fb08 	ldr.w	pc, [sp], #8
 8006bf2:	bf00      	nop

08006bf4 <__aeabi_dcmpge>:
 8006bf4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006bf8:	f7ff ffce 	bl	8006b98 <__aeabi_cdrcmple>
 8006bfc:	bf94      	ite	ls
 8006bfe:	2001      	movls	r0, #1
 8006c00:	2000      	movhi	r0, #0
 8006c02:	f85d fb08 	ldr.w	pc, [sp], #8
 8006c06:	bf00      	nop

08006c08 <__aeabi_dcmpgt>:
 8006c08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006c0c:	f7ff ffc4 	bl	8006b98 <__aeabi_cdrcmple>
 8006c10:	bf34      	ite	cc
 8006c12:	2001      	movcc	r0, #1
 8006c14:	2000      	movcs	r0, #0
 8006c16:	f85d fb08 	ldr.w	pc, [sp], #8
 8006c1a:	bf00      	nop

08006c1c <__aeabi_dcmpun>:
 8006c1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8006c20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8006c24:	d102      	bne.n	8006c2c <__aeabi_dcmpun+0x10>
 8006c26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8006c2a:	d10a      	bne.n	8006c42 <__aeabi_dcmpun+0x26>
 8006c2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8006c30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8006c34:	d102      	bne.n	8006c3c <__aeabi_dcmpun+0x20>
 8006c36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8006c3a:	d102      	bne.n	8006c42 <__aeabi_dcmpun+0x26>
 8006c3c:	f04f 0000 	mov.w	r0, #0
 8006c40:	4770      	bx	lr
 8006c42:	f04f 0001 	mov.w	r0, #1
 8006c46:	4770      	bx	lr

08006c48 <__aeabi_d2iz>:
 8006c48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8006c4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8006c50:	d215      	bcs.n	8006c7e <__aeabi_d2iz+0x36>
 8006c52:	d511      	bpl.n	8006c78 <__aeabi_d2iz+0x30>
 8006c54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8006c58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8006c5c:	d912      	bls.n	8006c84 <__aeabi_d2iz+0x3c>
 8006c5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8006c62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006c66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8006c6a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8006c6e:	fa23 f002 	lsr.w	r0, r3, r2
 8006c72:	bf18      	it	ne
 8006c74:	4240      	negne	r0, r0
 8006c76:	4770      	bx	lr
 8006c78:	f04f 0000 	mov.w	r0, #0
 8006c7c:	4770      	bx	lr
 8006c7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8006c82:	d105      	bne.n	8006c90 <__aeabi_d2iz+0x48>
 8006c84:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8006c88:	bf08      	it	eq
 8006c8a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8006c8e:	4770      	bx	lr
 8006c90:	f04f 0000 	mov.w	r0, #0
 8006c94:	4770      	bx	lr
 8006c96:	bf00      	nop

08006c98 <__aeabi_uldivmod>:
 8006c98:	b953      	cbnz	r3, 8006cb0 <__aeabi_uldivmod+0x18>
 8006c9a:	b94a      	cbnz	r2, 8006cb0 <__aeabi_uldivmod+0x18>
 8006c9c:	2900      	cmp	r1, #0
 8006c9e:	bf08      	it	eq
 8006ca0:	2800      	cmpeq	r0, #0
 8006ca2:	bf1c      	itt	ne
 8006ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8006ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8006cac:	f000 b974 	b.w	8006f98 <__aeabi_idiv0>
 8006cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8006cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8006cb8:	f000 f806 	bl	8006cc8 <__udivmoddi4>
 8006cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8006cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006cc4:	b004      	add	sp, #16
 8006cc6:	4770      	bx	lr

08006cc8 <__udivmoddi4>:
 8006cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ccc:	9d08      	ldr	r5, [sp, #32]
 8006cce:	4604      	mov	r4, r0
 8006cd0:	468e      	mov	lr, r1
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d14d      	bne.n	8006d72 <__udivmoddi4+0xaa>
 8006cd6:	428a      	cmp	r2, r1
 8006cd8:	4694      	mov	ip, r2
 8006cda:	d969      	bls.n	8006db0 <__udivmoddi4+0xe8>
 8006cdc:	fab2 f282 	clz	r2, r2
 8006ce0:	b152      	cbz	r2, 8006cf8 <__udivmoddi4+0x30>
 8006ce2:	fa01 f302 	lsl.w	r3, r1, r2
 8006ce6:	f1c2 0120 	rsb	r1, r2, #32
 8006cea:	fa20 f101 	lsr.w	r1, r0, r1
 8006cee:	fa0c fc02 	lsl.w	ip, ip, r2
 8006cf2:	ea41 0e03 	orr.w	lr, r1, r3
 8006cf6:	4094      	lsls	r4, r2
 8006cf8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8006cfc:	0c21      	lsrs	r1, r4, #16
 8006cfe:	fbbe f6f8 	udiv	r6, lr, r8
 8006d02:	fa1f f78c 	uxth.w	r7, ip
 8006d06:	fb08 e316 	mls	r3, r8, r6, lr
 8006d0a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006d0e:	fb06 f107 	mul.w	r1, r6, r7
 8006d12:	4299      	cmp	r1, r3
 8006d14:	d90a      	bls.n	8006d2c <__udivmoddi4+0x64>
 8006d16:	eb1c 0303 	adds.w	r3, ip, r3
 8006d1a:	f106 30ff 	add.w	r0, r6, #4294967295
 8006d1e:	f080 811f 	bcs.w	8006f60 <__udivmoddi4+0x298>
 8006d22:	4299      	cmp	r1, r3
 8006d24:	f240 811c 	bls.w	8006f60 <__udivmoddi4+0x298>
 8006d28:	3e02      	subs	r6, #2
 8006d2a:	4463      	add	r3, ip
 8006d2c:	1a5b      	subs	r3, r3, r1
 8006d2e:	b2a4      	uxth	r4, r4
 8006d30:	fbb3 f0f8 	udiv	r0, r3, r8
 8006d34:	fb08 3310 	mls	r3, r8, r0, r3
 8006d38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8006d3c:	fb00 f707 	mul.w	r7, r0, r7
 8006d40:	42a7      	cmp	r7, r4
 8006d42:	d90a      	bls.n	8006d5a <__udivmoddi4+0x92>
 8006d44:	eb1c 0404 	adds.w	r4, ip, r4
 8006d48:	f100 33ff 	add.w	r3, r0, #4294967295
 8006d4c:	f080 810a 	bcs.w	8006f64 <__udivmoddi4+0x29c>
 8006d50:	42a7      	cmp	r7, r4
 8006d52:	f240 8107 	bls.w	8006f64 <__udivmoddi4+0x29c>
 8006d56:	4464      	add	r4, ip
 8006d58:	3802      	subs	r0, #2
 8006d5a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8006d5e:	1be4      	subs	r4, r4, r7
 8006d60:	2600      	movs	r6, #0
 8006d62:	b11d      	cbz	r5, 8006d6c <__udivmoddi4+0xa4>
 8006d64:	40d4      	lsrs	r4, r2
 8006d66:	2300      	movs	r3, #0
 8006d68:	e9c5 4300 	strd	r4, r3, [r5]
 8006d6c:	4631      	mov	r1, r6
 8006d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d72:	428b      	cmp	r3, r1
 8006d74:	d909      	bls.n	8006d8a <__udivmoddi4+0xc2>
 8006d76:	2d00      	cmp	r5, #0
 8006d78:	f000 80ef 	beq.w	8006f5a <__udivmoddi4+0x292>
 8006d7c:	2600      	movs	r6, #0
 8006d7e:	e9c5 0100 	strd	r0, r1, [r5]
 8006d82:	4630      	mov	r0, r6
 8006d84:	4631      	mov	r1, r6
 8006d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d8a:	fab3 f683 	clz	r6, r3
 8006d8e:	2e00      	cmp	r6, #0
 8006d90:	d14a      	bne.n	8006e28 <__udivmoddi4+0x160>
 8006d92:	428b      	cmp	r3, r1
 8006d94:	d302      	bcc.n	8006d9c <__udivmoddi4+0xd4>
 8006d96:	4282      	cmp	r2, r0
 8006d98:	f200 80f9 	bhi.w	8006f8e <__udivmoddi4+0x2c6>
 8006d9c:	1a84      	subs	r4, r0, r2
 8006d9e:	eb61 0303 	sbc.w	r3, r1, r3
 8006da2:	2001      	movs	r0, #1
 8006da4:	469e      	mov	lr, r3
 8006da6:	2d00      	cmp	r5, #0
 8006da8:	d0e0      	beq.n	8006d6c <__udivmoddi4+0xa4>
 8006daa:	e9c5 4e00 	strd	r4, lr, [r5]
 8006dae:	e7dd      	b.n	8006d6c <__udivmoddi4+0xa4>
 8006db0:	b902      	cbnz	r2, 8006db4 <__udivmoddi4+0xec>
 8006db2:	deff      	udf	#255	; 0xff
 8006db4:	fab2 f282 	clz	r2, r2
 8006db8:	2a00      	cmp	r2, #0
 8006dba:	f040 8092 	bne.w	8006ee2 <__udivmoddi4+0x21a>
 8006dbe:	eba1 010c 	sub.w	r1, r1, ip
 8006dc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8006dc6:	fa1f fe8c 	uxth.w	lr, ip
 8006dca:	2601      	movs	r6, #1
 8006dcc:	0c20      	lsrs	r0, r4, #16
 8006dce:	fbb1 f3f7 	udiv	r3, r1, r7
 8006dd2:	fb07 1113 	mls	r1, r7, r3, r1
 8006dd6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8006dda:	fb0e f003 	mul.w	r0, lr, r3
 8006dde:	4288      	cmp	r0, r1
 8006de0:	d908      	bls.n	8006df4 <__udivmoddi4+0x12c>
 8006de2:	eb1c 0101 	adds.w	r1, ip, r1
 8006de6:	f103 38ff 	add.w	r8, r3, #4294967295
 8006dea:	d202      	bcs.n	8006df2 <__udivmoddi4+0x12a>
 8006dec:	4288      	cmp	r0, r1
 8006dee:	f200 80cb 	bhi.w	8006f88 <__udivmoddi4+0x2c0>
 8006df2:	4643      	mov	r3, r8
 8006df4:	1a09      	subs	r1, r1, r0
 8006df6:	b2a4      	uxth	r4, r4
 8006df8:	fbb1 f0f7 	udiv	r0, r1, r7
 8006dfc:	fb07 1110 	mls	r1, r7, r0, r1
 8006e00:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8006e04:	fb0e fe00 	mul.w	lr, lr, r0
 8006e08:	45a6      	cmp	lr, r4
 8006e0a:	d908      	bls.n	8006e1e <__udivmoddi4+0x156>
 8006e0c:	eb1c 0404 	adds.w	r4, ip, r4
 8006e10:	f100 31ff 	add.w	r1, r0, #4294967295
 8006e14:	d202      	bcs.n	8006e1c <__udivmoddi4+0x154>
 8006e16:	45a6      	cmp	lr, r4
 8006e18:	f200 80bb 	bhi.w	8006f92 <__udivmoddi4+0x2ca>
 8006e1c:	4608      	mov	r0, r1
 8006e1e:	eba4 040e 	sub.w	r4, r4, lr
 8006e22:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8006e26:	e79c      	b.n	8006d62 <__udivmoddi4+0x9a>
 8006e28:	f1c6 0720 	rsb	r7, r6, #32
 8006e2c:	40b3      	lsls	r3, r6
 8006e2e:	fa22 fc07 	lsr.w	ip, r2, r7
 8006e32:	ea4c 0c03 	orr.w	ip, ip, r3
 8006e36:	fa20 f407 	lsr.w	r4, r0, r7
 8006e3a:	fa01 f306 	lsl.w	r3, r1, r6
 8006e3e:	431c      	orrs	r4, r3
 8006e40:	40f9      	lsrs	r1, r7
 8006e42:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8006e46:	fa00 f306 	lsl.w	r3, r0, r6
 8006e4a:	fbb1 f8f9 	udiv	r8, r1, r9
 8006e4e:	0c20      	lsrs	r0, r4, #16
 8006e50:	fa1f fe8c 	uxth.w	lr, ip
 8006e54:	fb09 1118 	mls	r1, r9, r8, r1
 8006e58:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8006e5c:	fb08 f00e 	mul.w	r0, r8, lr
 8006e60:	4288      	cmp	r0, r1
 8006e62:	fa02 f206 	lsl.w	r2, r2, r6
 8006e66:	d90b      	bls.n	8006e80 <__udivmoddi4+0x1b8>
 8006e68:	eb1c 0101 	adds.w	r1, ip, r1
 8006e6c:	f108 3aff 	add.w	sl, r8, #4294967295
 8006e70:	f080 8088 	bcs.w	8006f84 <__udivmoddi4+0x2bc>
 8006e74:	4288      	cmp	r0, r1
 8006e76:	f240 8085 	bls.w	8006f84 <__udivmoddi4+0x2bc>
 8006e7a:	f1a8 0802 	sub.w	r8, r8, #2
 8006e7e:	4461      	add	r1, ip
 8006e80:	1a09      	subs	r1, r1, r0
 8006e82:	b2a4      	uxth	r4, r4
 8006e84:	fbb1 f0f9 	udiv	r0, r1, r9
 8006e88:	fb09 1110 	mls	r1, r9, r0, r1
 8006e8c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8006e90:	fb00 fe0e 	mul.w	lr, r0, lr
 8006e94:	458e      	cmp	lr, r1
 8006e96:	d908      	bls.n	8006eaa <__udivmoddi4+0x1e2>
 8006e98:	eb1c 0101 	adds.w	r1, ip, r1
 8006e9c:	f100 34ff 	add.w	r4, r0, #4294967295
 8006ea0:	d26c      	bcs.n	8006f7c <__udivmoddi4+0x2b4>
 8006ea2:	458e      	cmp	lr, r1
 8006ea4:	d96a      	bls.n	8006f7c <__udivmoddi4+0x2b4>
 8006ea6:	3802      	subs	r0, #2
 8006ea8:	4461      	add	r1, ip
 8006eaa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8006eae:	fba0 9402 	umull	r9, r4, r0, r2
 8006eb2:	eba1 010e 	sub.w	r1, r1, lr
 8006eb6:	42a1      	cmp	r1, r4
 8006eb8:	46c8      	mov	r8, r9
 8006eba:	46a6      	mov	lr, r4
 8006ebc:	d356      	bcc.n	8006f6c <__udivmoddi4+0x2a4>
 8006ebe:	d053      	beq.n	8006f68 <__udivmoddi4+0x2a0>
 8006ec0:	b15d      	cbz	r5, 8006eda <__udivmoddi4+0x212>
 8006ec2:	ebb3 0208 	subs.w	r2, r3, r8
 8006ec6:	eb61 010e 	sbc.w	r1, r1, lr
 8006eca:	fa01 f707 	lsl.w	r7, r1, r7
 8006ece:	fa22 f306 	lsr.w	r3, r2, r6
 8006ed2:	40f1      	lsrs	r1, r6
 8006ed4:	431f      	orrs	r7, r3
 8006ed6:	e9c5 7100 	strd	r7, r1, [r5]
 8006eda:	2600      	movs	r6, #0
 8006edc:	4631      	mov	r1, r6
 8006ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ee2:	f1c2 0320 	rsb	r3, r2, #32
 8006ee6:	40d8      	lsrs	r0, r3
 8006ee8:	fa0c fc02 	lsl.w	ip, ip, r2
 8006eec:	fa21 f303 	lsr.w	r3, r1, r3
 8006ef0:	4091      	lsls	r1, r2
 8006ef2:	4301      	orrs	r1, r0
 8006ef4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8006ef8:	fa1f fe8c 	uxth.w	lr, ip
 8006efc:	fbb3 f0f7 	udiv	r0, r3, r7
 8006f00:	fb07 3610 	mls	r6, r7, r0, r3
 8006f04:	0c0b      	lsrs	r3, r1, #16
 8006f06:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8006f0a:	fb00 f60e 	mul.w	r6, r0, lr
 8006f0e:	429e      	cmp	r6, r3
 8006f10:	fa04 f402 	lsl.w	r4, r4, r2
 8006f14:	d908      	bls.n	8006f28 <__udivmoddi4+0x260>
 8006f16:	eb1c 0303 	adds.w	r3, ip, r3
 8006f1a:	f100 38ff 	add.w	r8, r0, #4294967295
 8006f1e:	d22f      	bcs.n	8006f80 <__udivmoddi4+0x2b8>
 8006f20:	429e      	cmp	r6, r3
 8006f22:	d92d      	bls.n	8006f80 <__udivmoddi4+0x2b8>
 8006f24:	3802      	subs	r0, #2
 8006f26:	4463      	add	r3, ip
 8006f28:	1b9b      	subs	r3, r3, r6
 8006f2a:	b289      	uxth	r1, r1
 8006f2c:	fbb3 f6f7 	udiv	r6, r3, r7
 8006f30:	fb07 3316 	mls	r3, r7, r6, r3
 8006f34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8006f38:	fb06 f30e 	mul.w	r3, r6, lr
 8006f3c:	428b      	cmp	r3, r1
 8006f3e:	d908      	bls.n	8006f52 <__udivmoddi4+0x28a>
 8006f40:	eb1c 0101 	adds.w	r1, ip, r1
 8006f44:	f106 38ff 	add.w	r8, r6, #4294967295
 8006f48:	d216      	bcs.n	8006f78 <__udivmoddi4+0x2b0>
 8006f4a:	428b      	cmp	r3, r1
 8006f4c:	d914      	bls.n	8006f78 <__udivmoddi4+0x2b0>
 8006f4e:	3e02      	subs	r6, #2
 8006f50:	4461      	add	r1, ip
 8006f52:	1ac9      	subs	r1, r1, r3
 8006f54:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8006f58:	e738      	b.n	8006dcc <__udivmoddi4+0x104>
 8006f5a:	462e      	mov	r6, r5
 8006f5c:	4628      	mov	r0, r5
 8006f5e:	e705      	b.n	8006d6c <__udivmoddi4+0xa4>
 8006f60:	4606      	mov	r6, r0
 8006f62:	e6e3      	b.n	8006d2c <__udivmoddi4+0x64>
 8006f64:	4618      	mov	r0, r3
 8006f66:	e6f8      	b.n	8006d5a <__udivmoddi4+0x92>
 8006f68:	454b      	cmp	r3, r9
 8006f6a:	d2a9      	bcs.n	8006ec0 <__udivmoddi4+0x1f8>
 8006f6c:	ebb9 0802 	subs.w	r8, r9, r2
 8006f70:	eb64 0e0c 	sbc.w	lr, r4, ip
 8006f74:	3801      	subs	r0, #1
 8006f76:	e7a3      	b.n	8006ec0 <__udivmoddi4+0x1f8>
 8006f78:	4646      	mov	r6, r8
 8006f7a:	e7ea      	b.n	8006f52 <__udivmoddi4+0x28a>
 8006f7c:	4620      	mov	r0, r4
 8006f7e:	e794      	b.n	8006eaa <__udivmoddi4+0x1e2>
 8006f80:	4640      	mov	r0, r8
 8006f82:	e7d1      	b.n	8006f28 <__udivmoddi4+0x260>
 8006f84:	46d0      	mov	r8, sl
 8006f86:	e77b      	b.n	8006e80 <__udivmoddi4+0x1b8>
 8006f88:	3b02      	subs	r3, #2
 8006f8a:	4461      	add	r1, ip
 8006f8c:	e732      	b.n	8006df4 <__udivmoddi4+0x12c>
 8006f8e:	4630      	mov	r0, r6
 8006f90:	e709      	b.n	8006da6 <__udivmoddi4+0xde>
 8006f92:	4464      	add	r4, ip
 8006f94:	3802      	subs	r0, #2
 8006f96:	e742      	b.n	8006e1e <__udivmoddi4+0x156>

08006f98 <__aeabi_idiv0>:
 8006f98:	4770      	bx	lr
 8006f9a:	bf00      	nop

08006f9c <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 8006fa0:	4b06      	ldr	r3, [pc, #24]	; (8006fbc <MX_CRC_Init+0x20>)
 8006fa2:	4a07      	ldr	r2, [pc, #28]	; (8006fc0 <MX_CRC_Init+0x24>)
 8006fa4:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8006fa6:	4805      	ldr	r0, [pc, #20]	; (8006fbc <MX_CRC_Init+0x20>)
 8006fa8:	f004 fa8c 	bl	800b4c4 <HAL_CRC_Init>
 8006fac:	4603      	mov	r3, r0
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d001      	beq.n	8006fb6 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8006fb2:	f000 fdf3 	bl	8007b9c <Error_Handler>
  }

}
 8006fb6:	bf00      	nop
 8006fb8:	bd80      	pop	{r7, pc}
 8006fba:	bf00      	nop
 8006fbc:	20000e20 	.word	0x20000e20
 8006fc0:	40023000 	.word	0x40023000

08006fc4 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8006fc4:	b480      	push	{r7}
 8006fc6:	b085      	sub	sp, #20
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4a0b      	ldr	r2, [pc, #44]	; (8007000 <HAL_CRC_MspInit+0x3c>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d10d      	bne.n	8006ff2 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	60fb      	str	r3, [r7, #12]
 8006fda:	4b0a      	ldr	r3, [pc, #40]	; (8007004 <HAL_CRC_MspInit+0x40>)
 8006fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fde:	4a09      	ldr	r2, [pc, #36]	; (8007004 <HAL_CRC_MspInit+0x40>)
 8006fe0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006fe4:	6313      	str	r3, [r2, #48]	; 0x30
 8006fe6:	4b07      	ldr	r3, [pc, #28]	; (8007004 <HAL_CRC_MspInit+0x40>)
 8006fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006fee:	60fb      	str	r3, [r7, #12]
 8006ff0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8006ff2:	bf00      	nop
 8006ff4:	3714      	adds	r7, #20
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffc:	4770      	bx	lr
 8006ffe:	bf00      	nop
 8007000:	40023000 	.word	0x40023000
 8007004:	40023800 	.word	0x40023800

08007008 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	af00      	add	r7, sp, #0

  hdma2d.Instance = DMA2D;
 800700c:	4b15      	ldr	r3, [pc, #84]	; (8007064 <MX_DMA2D_Init+0x5c>)
 800700e:	4a16      	ldr	r2, [pc, #88]	; (8007068 <MX_DMA2D_Init+0x60>)
 8007010:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8007012:	4b14      	ldr	r3, [pc, #80]	; (8007064 <MX_DMA2D_Init+0x5c>)
 8007014:	2200      	movs	r2, #0
 8007016:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8007018:	4b12      	ldr	r3, [pc, #72]	; (8007064 <MX_DMA2D_Init+0x5c>)
 800701a:	2200      	movs	r2, #0
 800701c:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800701e:	4b11      	ldr	r3, [pc, #68]	; (8007064 <MX_DMA2D_Init+0x5c>)
 8007020:	2200      	movs	r2, #0
 8007022:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8007024:	4b0f      	ldr	r3, [pc, #60]	; (8007064 <MX_DMA2D_Init+0x5c>)
 8007026:	2200      	movs	r2, #0
 8007028:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800702a:	4b0e      	ldr	r3, [pc, #56]	; (8007064 <MX_DMA2D_Init+0x5c>)
 800702c:	2200      	movs	r2, #0
 800702e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8007030:	4b0c      	ldr	r3, [pc, #48]	; (8007064 <MX_DMA2D_Init+0x5c>)
 8007032:	2200      	movs	r2, #0
 8007034:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8007036:	4b0b      	ldr	r3, [pc, #44]	; (8007064 <MX_DMA2D_Init+0x5c>)
 8007038:	2200      	movs	r2, #0
 800703a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800703c:	4809      	ldr	r0, [pc, #36]	; (8007064 <MX_DMA2D_Init+0x5c>)
 800703e:	f004 fc1b 	bl	800b878 <HAL_DMA2D_Init>
 8007042:	4603      	mov	r3, r0
 8007044:	2b00      	cmp	r3, #0
 8007046:	d001      	beq.n	800704c <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8007048:	f000 fda8 	bl	8007b9c <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800704c:	2101      	movs	r1, #1
 800704e:	4805      	ldr	r0, [pc, #20]	; (8007064 <MX_DMA2D_Init+0x5c>)
 8007050:	f004 fe80 	bl	800bd54 <HAL_DMA2D_ConfigLayer>
 8007054:	4603      	mov	r3, r0
 8007056:	2b00      	cmp	r3, #0
 8007058:	d001      	beq.n	800705e <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800705a:	f000 fd9f 	bl	8007b9c <Error_Handler>
  }

}
 800705e:	bf00      	nop
 8007060:	bd80      	pop	{r7, pc}
 8007062:	bf00      	nop
 8007064:	20000e28 	.word	0x20000e28
 8007068:	4002b000 	.word	0x4002b000

0800706c <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b084      	sub	sp, #16
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	4a0e      	ldr	r2, [pc, #56]	; (80070b4 <HAL_DMA2D_MspInit+0x48>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d115      	bne.n	80070aa <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800707e:	2300      	movs	r3, #0
 8007080:	60fb      	str	r3, [r7, #12]
 8007082:	4b0d      	ldr	r3, [pc, #52]	; (80070b8 <HAL_DMA2D_MspInit+0x4c>)
 8007084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007086:	4a0c      	ldr	r2, [pc, #48]	; (80070b8 <HAL_DMA2D_MspInit+0x4c>)
 8007088:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800708c:	6313      	str	r3, [r2, #48]	; 0x30
 800708e:	4b0a      	ldr	r3, [pc, #40]	; (80070b8 <HAL_DMA2D_MspInit+0x4c>)
 8007090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007092:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007096:	60fb      	str	r3, [r7, #12]
 8007098:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 800709a:	2200      	movs	r2, #0
 800709c:	2105      	movs	r1, #5
 800709e:	205a      	movs	r0, #90	; 0x5a
 80070a0:	f004 f9e6 	bl	800b470 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80070a4:	205a      	movs	r0, #90	; 0x5a
 80070a6:	f004 f9ff 	bl	800b4a8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 80070aa:	bf00      	nop
 80070ac:	3710      	adds	r7, #16
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bd80      	pop	{r7, pc}
 80070b2:	bf00      	nop
 80070b4:	4002b000 	.word	0x4002b000
 80070b8:	40023800 	.word	0x40023800

080070bc <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b088      	sub	sp, #32
 80070c0:	af00      	add	r7, sp, #0
  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80070c2:	1d3b      	adds	r3, r7, #4
 80070c4:	2200      	movs	r2, #0
 80070c6:	601a      	str	r2, [r3, #0]
 80070c8:	605a      	str	r2, [r3, #4]
 80070ca:	609a      	str	r2, [r3, #8]
 80070cc:	60da      	str	r2, [r3, #12]
 80070ce:	611a      	str	r2, [r3, #16]
 80070d0:	615a      	str	r2, [r3, #20]
 80070d2:	619a      	str	r2, [r3, #24]

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80070d4:	4b1e      	ldr	r3, [pc, #120]	; (8007150 <MX_FMC_Init+0x94>)
 80070d6:	4a1f      	ldr	r2, [pc, #124]	; (8007154 <MX_FMC_Init+0x98>)
 80070d8:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 80070da:	4b1d      	ldr	r3, [pc, #116]	; (8007150 <MX_FMC_Init+0x94>)
 80070dc:	2201      	movs	r2, #1
 80070de:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80070e0:	4b1b      	ldr	r3, [pc, #108]	; (8007150 <MX_FMC_Init+0x94>)
 80070e2:	2200      	movs	r2, #0
 80070e4:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80070e6:	4b1a      	ldr	r3, [pc, #104]	; (8007150 <MX_FMC_Init+0x94>)
 80070e8:	2204      	movs	r2, #4
 80070ea:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80070ec:	4b18      	ldr	r3, [pc, #96]	; (8007150 <MX_FMC_Init+0x94>)
 80070ee:	2210      	movs	r2, #16
 80070f0:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80070f2:	4b17      	ldr	r3, [pc, #92]	; (8007150 <MX_FMC_Init+0x94>)
 80070f4:	2240      	movs	r2, #64	; 0x40
 80070f6:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 80070f8:	4b15      	ldr	r3, [pc, #84]	; (8007150 <MX_FMC_Init+0x94>)
 80070fa:	2280      	movs	r2, #128	; 0x80
 80070fc:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80070fe:	4b14      	ldr	r3, [pc, #80]	; (8007150 <MX_FMC_Init+0x94>)
 8007100:	2200      	movs	r2, #0
 8007102:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8007104:	4b12      	ldr	r3, [pc, #72]	; (8007150 <MX_FMC_Init+0x94>)
 8007106:	2200      	movs	r2, #0
 8007108:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 800710a:	4b11      	ldr	r3, [pc, #68]	; (8007150 <MX_FMC_Init+0x94>)
 800710c:	2200      	movs	r2, #0
 800710e:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8007110:	4b0f      	ldr	r3, [pc, #60]	; (8007150 <MX_FMC_Init+0x94>)
 8007112:	2200      	movs	r2, #0
 8007114:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 8007116:	2310      	movs	r3, #16
 8007118:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 800711a:	2310      	movs	r3, #16
 800711c:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 800711e:	2310      	movs	r3, #16
 8007120:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 8007122:	2310      	movs	r3, #16
 8007124:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 8007126:	2310      	movs	r3, #16
 8007128:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 800712a:	2310      	movs	r3, #16
 800712c:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 800712e:	2310      	movs	r3, #16
 8007130:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8007132:	1d3b      	adds	r3, r7, #4
 8007134:	4619      	mov	r1, r3
 8007136:	4806      	ldr	r0, [pc, #24]	; (8007150 <MX_FMC_Init+0x94>)
 8007138:	f007 fc06 	bl	800e948 <HAL_SDRAM_Init>
 800713c:	4603      	mov	r3, r0
 800713e:	2b00      	cmp	r3, #0
 8007140:	d001      	beq.n	8007146 <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 8007142:	f000 fd2b 	bl	8007b9c <Error_Handler>
  }

}
 8007146:	bf00      	nop
 8007148:	3720      	adds	r7, #32
 800714a:	46bd      	mov	sp, r7
 800714c:	bd80      	pop	{r7, pc}
 800714e:	bf00      	nop
 8007150:	20000e68 	.word	0x20000e68
 8007154:	a0000140 	.word	0xa0000140

08007158 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8007158:	b580      	push	{r7, lr}
 800715a:	b086      	sub	sp, #24
 800715c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800715e:	1d3b      	adds	r3, r7, #4
 8007160:	2200      	movs	r2, #0
 8007162:	601a      	str	r2, [r3, #0]
 8007164:	605a      	str	r2, [r3, #4]
 8007166:	609a      	str	r2, [r3, #8]
 8007168:	60da      	str	r2, [r3, #12]
 800716a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800716c:	4b3b      	ldr	r3, [pc, #236]	; (800725c <HAL_FMC_MspInit+0x104>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d16f      	bne.n	8007254 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8007174:	4b39      	ldr	r3, [pc, #228]	; (800725c <HAL_FMC_MspInit+0x104>)
 8007176:	2201      	movs	r2, #1
 8007178:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800717a:	2300      	movs	r3, #0
 800717c:	603b      	str	r3, [r7, #0]
 800717e:	4b38      	ldr	r3, [pc, #224]	; (8007260 <HAL_FMC_MspInit+0x108>)
 8007180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007182:	4a37      	ldr	r2, [pc, #220]	; (8007260 <HAL_FMC_MspInit+0x108>)
 8007184:	f043 0301 	orr.w	r3, r3, #1
 8007188:	6393      	str	r3, [r2, #56]	; 0x38
 800718a:	4b35      	ldr	r3, [pc, #212]	; (8007260 <HAL_FMC_MspInit+0x108>)
 800718c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800718e:	f003 0301 	and.w	r3, r3, #1
 8007192:	603b      	str	r3, [r7, #0]
 8007194:	683b      	ldr	r3, [r7, #0]
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin 
 8007196:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800719a:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin 
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800719c:	2302      	movs	r3, #2
 800719e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071a0:	2300      	movs	r3, #0
 80071a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80071a4:	2303      	movs	r3, #3
 80071a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80071a8:	230c      	movs	r3, #12
 80071aa:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80071ac:	1d3b      	adds	r3, r7, #4
 80071ae:	4619      	mov	r1, r3
 80071b0:	482c      	ldr	r0, [pc, #176]	; (8007264 <HAL_FMC_MspInit+0x10c>)
 80071b2:	f004 fefd 	bl	800bfb0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 80071b6:	2301      	movs	r3, #1
 80071b8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80071ba:	2302      	movs	r3, #2
 80071bc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071be:	2300      	movs	r3, #0
 80071c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80071c2:	2303      	movs	r3, #3
 80071c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80071c6:	230c      	movs	r3, #12
 80071c8:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 80071ca:	1d3b      	adds	r3, r7, #4
 80071cc:	4619      	mov	r1, r3
 80071ce:	4826      	ldr	r0, [pc, #152]	; (8007268 <HAL_FMC_MspInit+0x110>)
 80071d0:	f004 feee 	bl	800bfb0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin 
 80071d4:	f248 1333 	movw	r3, #33075	; 0x8133
 80071d8:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80071da:	2302      	movs	r3, #2
 80071dc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071de:	2300      	movs	r3, #0
 80071e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80071e2:	2303      	movs	r3, #3
 80071e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80071e6:	230c      	movs	r3, #12
 80071e8:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80071ea:	1d3b      	adds	r3, r7, #4
 80071ec:	4619      	mov	r1, r3
 80071ee:	481f      	ldr	r0, [pc, #124]	; (800726c <HAL_FMC_MspInit+0x114>)
 80071f0:	f004 fede 	bl	800bfb0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin 
 80071f4:	f64f 7383 	movw	r3, #65411	; 0xff83
 80071f8:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin 
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80071fa:	2302      	movs	r3, #2
 80071fc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071fe:	2300      	movs	r3, #0
 8007200:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007202:	2303      	movs	r3, #3
 8007204:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8007206:	230c      	movs	r3, #12
 8007208:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800720a:	1d3b      	adds	r3, r7, #4
 800720c:	4619      	mov	r1, r3
 800720e:	4818      	ldr	r0, [pc, #96]	; (8007270 <HAL_FMC_MspInit+0x118>)
 8007210:	f004 fece 	bl	800bfb0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin 
 8007214:	f24c 7303 	movw	r3, #50947	; 0xc703
 8007218:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800721a:	2302      	movs	r3, #2
 800721c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800721e:	2300      	movs	r3, #0
 8007220:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007222:	2303      	movs	r3, #3
 8007224:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8007226:	230c      	movs	r3, #12
 8007228:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800722a:	1d3b      	adds	r3, r7, #4
 800722c:	4619      	mov	r1, r3
 800722e:	4811      	ldr	r0, [pc, #68]	; (8007274 <HAL_FMC_MspInit+0x11c>)
 8007230:	f004 febe 	bl	800bfb0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8007234:	2360      	movs	r3, #96	; 0x60
 8007236:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007238:	2302      	movs	r3, #2
 800723a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800723c:	2300      	movs	r3, #0
 800723e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007240:	2303      	movs	r3, #3
 8007242:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8007244:	230c      	movs	r3, #12
 8007246:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007248:	1d3b      	adds	r3, r7, #4
 800724a:	4619      	mov	r1, r3
 800724c:	480a      	ldr	r0, [pc, #40]	; (8007278 <HAL_FMC_MspInit+0x120>)
 800724e:	f004 feaf 	bl	800bfb0 <HAL_GPIO_Init>
 8007252:	e000      	b.n	8007256 <HAL_FMC_MspInit+0xfe>
    return;
 8007254:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8007256:	3718      	adds	r7, #24
 8007258:	46bd      	mov	sp, r7
 800725a:	bd80      	pop	{r7, pc}
 800725c:	20000e9c 	.word	0x20000e9c
 8007260:	40023800 	.word	0x40023800
 8007264:	40021400 	.word	0x40021400
 8007268:	40020800 	.word	0x40020800
 800726c:	40021800 	.word	0x40021800
 8007270:	40021000 	.word	0x40021000
 8007274:	40020c00 	.word	0x40020c00
 8007278:	40020400 	.word	0x40020400

0800727c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 800727c:	b580      	push	{r7, lr}
 800727e:	b082      	sub	sp, #8
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8007284:	f7ff ff68 	bl	8007158 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8007288:	bf00      	nop
 800728a:	3708      	adds	r7, #8
 800728c:	46bd      	mov	sp, r7
 800728e:	bd80      	pop	{r7, pc}

08007290 <MX_GPIO_Init>:
     PB13   ------> USB_OTG_HS_VBUS
     PB14   ------> USB_OTG_HS_DM
     PB15   ------> USB_OTG_HS_DP
*/
void MX_GPIO_Init(void)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b08e      	sub	sp, #56	; 0x38
 8007294:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007296:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800729a:	2200      	movs	r2, #0
 800729c:	601a      	str	r2, [r3, #0]
 800729e:	605a      	str	r2, [r3, #4]
 80072a0:	609a      	str	r2, [r3, #8]
 80072a2:	60da      	str	r2, [r3, #12]
 80072a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80072a6:	2300      	movs	r3, #0
 80072a8:	623b      	str	r3, [r7, #32]
 80072aa:	4b89      	ldr	r3, [pc, #548]	; (80074d0 <MX_GPIO_Init+0x240>)
 80072ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072ae:	4a88      	ldr	r2, [pc, #544]	; (80074d0 <MX_GPIO_Init+0x240>)
 80072b0:	f043 0304 	orr.w	r3, r3, #4
 80072b4:	6313      	str	r3, [r2, #48]	; 0x30
 80072b6:	4b86      	ldr	r3, [pc, #536]	; (80074d0 <MX_GPIO_Init+0x240>)
 80072b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072ba:	f003 0304 	and.w	r3, r3, #4
 80072be:	623b      	str	r3, [r7, #32]
 80072c0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80072c2:	2300      	movs	r3, #0
 80072c4:	61fb      	str	r3, [r7, #28]
 80072c6:	4b82      	ldr	r3, [pc, #520]	; (80074d0 <MX_GPIO_Init+0x240>)
 80072c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072ca:	4a81      	ldr	r2, [pc, #516]	; (80074d0 <MX_GPIO_Init+0x240>)
 80072cc:	f043 0320 	orr.w	r3, r3, #32
 80072d0:	6313      	str	r3, [r2, #48]	; 0x30
 80072d2:	4b7f      	ldr	r3, [pc, #508]	; (80074d0 <MX_GPIO_Init+0x240>)
 80072d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072d6:	f003 0320 	and.w	r3, r3, #32
 80072da:	61fb      	str	r3, [r7, #28]
 80072dc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80072de:	2300      	movs	r3, #0
 80072e0:	61bb      	str	r3, [r7, #24]
 80072e2:	4b7b      	ldr	r3, [pc, #492]	; (80074d0 <MX_GPIO_Init+0x240>)
 80072e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072e6:	4a7a      	ldr	r2, [pc, #488]	; (80074d0 <MX_GPIO_Init+0x240>)
 80072e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072ec:	6313      	str	r3, [r2, #48]	; 0x30
 80072ee:	4b78      	ldr	r3, [pc, #480]	; (80074d0 <MX_GPIO_Init+0x240>)
 80072f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072f6:	61bb      	str	r3, [r7, #24]
 80072f8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80072fa:	2300      	movs	r3, #0
 80072fc:	617b      	str	r3, [r7, #20]
 80072fe:	4b74      	ldr	r3, [pc, #464]	; (80074d0 <MX_GPIO_Init+0x240>)
 8007300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007302:	4a73      	ldr	r2, [pc, #460]	; (80074d0 <MX_GPIO_Init+0x240>)
 8007304:	f043 0301 	orr.w	r3, r3, #1
 8007308:	6313      	str	r3, [r2, #48]	; 0x30
 800730a:	4b71      	ldr	r3, [pc, #452]	; (80074d0 <MX_GPIO_Init+0x240>)
 800730c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800730e:	f003 0301 	and.w	r3, r3, #1
 8007312:	617b      	str	r3, [r7, #20]
 8007314:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007316:	2300      	movs	r3, #0
 8007318:	613b      	str	r3, [r7, #16]
 800731a:	4b6d      	ldr	r3, [pc, #436]	; (80074d0 <MX_GPIO_Init+0x240>)
 800731c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800731e:	4a6c      	ldr	r2, [pc, #432]	; (80074d0 <MX_GPIO_Init+0x240>)
 8007320:	f043 0302 	orr.w	r3, r3, #2
 8007324:	6313      	str	r3, [r2, #48]	; 0x30
 8007326:	4b6a      	ldr	r3, [pc, #424]	; (80074d0 <MX_GPIO_Init+0x240>)
 8007328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800732a:	f003 0302 	and.w	r3, r3, #2
 800732e:	613b      	str	r3, [r7, #16]
 8007330:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8007332:	2300      	movs	r3, #0
 8007334:	60fb      	str	r3, [r7, #12]
 8007336:	4b66      	ldr	r3, [pc, #408]	; (80074d0 <MX_GPIO_Init+0x240>)
 8007338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800733a:	4a65      	ldr	r2, [pc, #404]	; (80074d0 <MX_GPIO_Init+0x240>)
 800733c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007340:	6313      	str	r3, [r2, #48]	; 0x30
 8007342:	4b63      	ldr	r3, [pc, #396]	; (80074d0 <MX_GPIO_Init+0x240>)
 8007344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007346:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800734a:	60fb      	str	r3, [r7, #12]
 800734c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800734e:	2300      	movs	r3, #0
 8007350:	60bb      	str	r3, [r7, #8]
 8007352:	4b5f      	ldr	r3, [pc, #380]	; (80074d0 <MX_GPIO_Init+0x240>)
 8007354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007356:	4a5e      	ldr	r2, [pc, #376]	; (80074d0 <MX_GPIO_Init+0x240>)
 8007358:	f043 0310 	orr.w	r3, r3, #16
 800735c:	6313      	str	r3, [r2, #48]	; 0x30
 800735e:	4b5c      	ldr	r3, [pc, #368]	; (80074d0 <MX_GPIO_Init+0x240>)
 8007360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007362:	f003 0310 	and.w	r3, r3, #16
 8007366:	60bb      	str	r3, [r7, #8]
 8007368:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800736a:	2300      	movs	r3, #0
 800736c:	607b      	str	r3, [r7, #4]
 800736e:	4b58      	ldr	r3, [pc, #352]	; (80074d0 <MX_GPIO_Init+0x240>)
 8007370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007372:	4a57      	ldr	r2, [pc, #348]	; (80074d0 <MX_GPIO_Init+0x240>)
 8007374:	f043 0308 	orr.w	r3, r3, #8
 8007378:	6313      	str	r3, [r2, #48]	; 0x30
 800737a:	4b55      	ldr	r3, [pc, #340]	; (80074d0 <MX_GPIO_Init+0x240>)
 800737c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800737e:	f003 0308 	and.w	r3, r3, #8
 8007382:	607b      	str	r3, [r7, #4]
 8007384:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8007386:	2200      	movs	r2, #0
 8007388:	2116      	movs	r1, #22
 800738a:	4852      	ldr	r0, [pc, #328]	; (80074d4 <MX_GPIO_Init+0x244>)
 800738c:	f005 f8c8 	bl	800c520 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8007390:	2200      	movs	r2, #0
 8007392:	2180      	movs	r1, #128	; 0x80
 8007394:	4850      	ldr	r0, [pc, #320]	; (80074d8 <MX_GPIO_Init+0x248>)
 8007396:	f005 f8c3 	bl	800c520 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 800739a:	2200      	movs	r2, #0
 800739c:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80073a0:	484e      	ldr	r0, [pc, #312]	; (80074dc <MX_GPIO_Init+0x24c>)
 80073a2:	f005 f8bd 	bl	800c520 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 80073a6:	2200      	movs	r2, #0
 80073a8:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80073ac:	484c      	ldr	r0, [pc, #304]	; (80074e0 <MX_GPIO_Init+0x250>)
 80073ae:	f005 f8b7 	bl	800c520 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 80073b2:	2316      	movs	r3, #22
 80073b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80073b6:	2301      	movs	r3, #1
 80073b8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80073ba:	2300      	movs	r3, #0
 80073bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80073be:	2300      	movs	r3, #0
 80073c0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80073c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80073c6:	4619      	mov	r1, r3
 80073c8:	4842      	ldr	r0, [pc, #264]	; (80074d4 <MX_GPIO_Init+0x244>)
 80073ca:	f004 fdf1 	bl	800bfb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 80073ce:	f248 0307 	movw	r3, #32775	; 0x8007
 80073d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80073d4:	4b43      	ldr	r3, [pc, #268]	; (80074e4 <MX_GPIO_Init+0x254>)
 80073d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80073d8:	2300      	movs	r3, #0
 80073da:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80073dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80073e0:	4619      	mov	r1, r3
 80073e2:	483d      	ldr	r0, [pc, #244]	; (80074d8 <MX_GPIO_Init+0x248>)
 80073e4:	f004 fde4 	bl	800bfb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 80073e8:	2380      	movs	r3, #128	; 0x80
 80073ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80073ec:	2301      	movs	r3, #1
 80073ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80073f0:	2300      	movs	r3, #0
 80073f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80073f4:	2300      	movs	r3, #0
 80073f6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 80073f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80073fc:	4619      	mov	r1, r3
 80073fe:	4836      	ldr	r0, [pc, #216]	; (80074d8 <MX_GPIO_Init+0x248>)
 8007400:	f004 fdd6 	bl	800bfb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8007404:	2320      	movs	r3, #32
 8007406:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8007408:	4b36      	ldr	r3, [pc, #216]	; (80074e4 <MX_GPIO_Init+0x254>)
 800740a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800740c:	2300      	movs	r3, #0
 800740e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8007410:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007414:	4619      	mov	r1, r3
 8007416:	482f      	ldr	r0, [pc, #188]	; (80074d4 <MX_GPIO_Init+0x244>)
 8007418:	f004 fdca 	bl	800bfb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800741c:	2304      	movs	r3, #4
 800741e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007420:	2300      	movs	r3, #0
 8007422:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007424:	2300      	movs	r3, #0
 8007426:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8007428:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800742c:	4619      	mov	r1, r3
 800742e:	482e      	ldr	r0, [pc, #184]	; (80074e8 <MX_GPIO_Init+0x258>)
 8007430:	f004 fdbe 	bl	800bfb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8007434:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8007438:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800743a:	2302      	movs	r3, #2
 800743c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800743e:	2300      	movs	r3, #0
 8007440:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007442:	2300      	movs	r3, #0
 8007444:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8007446:	230c      	movs	r3, #12
 8007448:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800744a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800744e:	4619      	mov	r1, r3
 8007450:	4825      	ldr	r0, [pc, #148]	; (80074e8 <MX_GPIO_Init+0x258>)
 8007452:	f004 fdad 	bl	800bfb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8007456:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800745a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800745c:	2300      	movs	r3, #0
 800745e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007460:	2300      	movs	r3, #0
 8007462:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8007464:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007468:	4619      	mov	r1, r3
 800746a:	481f      	ldr	r0, [pc, #124]	; (80074e8 <MX_GPIO_Init+0x258>)
 800746c:	f004 fda0 	bl	800bfb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TE_Pin;
 8007470:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007474:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007476:	2300      	movs	r3, #0
 8007478:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800747a:	2300      	movs	r3, #0
 800747c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 800747e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007482:	4619      	mov	r1, r3
 8007484:	4815      	ldr	r0, [pc, #84]	; (80074dc <MX_GPIO_Init+0x24c>)
 8007486:	f004 fd93 	bl	800bfb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 800748a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800748e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007490:	2301      	movs	r3, #1
 8007492:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007494:	2300      	movs	r3, #0
 8007496:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007498:	2300      	movs	r3, #0
 800749a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800749c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80074a0:	4619      	mov	r1, r3
 80074a2:	480e      	ldr	r0, [pc, #56]	; (80074dc <MX_GPIO_Init+0x24c>)
 80074a4:	f004 fd84 	bl	800bfb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 80074a8:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80074ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80074ae:	2301      	movs	r3, #1
 80074b0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074b2:	2300      	movs	r3, #0
 80074b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80074b6:	2300      	movs	r3, #0
 80074b8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80074ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80074be:	4619      	mov	r1, r3
 80074c0:	4807      	ldr	r0, [pc, #28]	; (80074e0 <MX_GPIO_Init+0x250>)
 80074c2:	f004 fd75 	bl	800bfb0 <HAL_GPIO_Init>

}
 80074c6:	bf00      	nop
 80074c8:	3738      	adds	r7, #56	; 0x38
 80074ca:	46bd      	mov	sp, r7
 80074cc:	bd80      	pop	{r7, pc}
 80074ce:	bf00      	nop
 80074d0:	40023800 	.word	0x40023800
 80074d4:	40020800 	.word	0x40020800
 80074d8:	40020000 	.word	0x40020000
 80074dc:	40020c00 	.word	0x40020c00
 80074e0:	40021800 	.word	0x40021800
 80074e4:	10120000 	.word	0x10120000
 80074e8:	40020400 	.word	0x40020400

080074ec <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 80074f0:	4b1b      	ldr	r3, [pc, #108]	; (8007560 <MX_I2C3_Init+0x74>)
 80074f2:	4a1c      	ldr	r2, [pc, #112]	; (8007564 <MX_I2C3_Init+0x78>)
 80074f4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80074f6:	4b1a      	ldr	r3, [pc, #104]	; (8007560 <MX_I2C3_Init+0x74>)
 80074f8:	4a1b      	ldr	r2, [pc, #108]	; (8007568 <MX_I2C3_Init+0x7c>)
 80074fa:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80074fc:	4b18      	ldr	r3, [pc, #96]	; (8007560 <MX_I2C3_Init+0x74>)
 80074fe:	2200      	movs	r2, #0
 8007500:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8007502:	4b17      	ldr	r3, [pc, #92]	; (8007560 <MX_I2C3_Init+0x74>)
 8007504:	2200      	movs	r2, #0
 8007506:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007508:	4b15      	ldr	r3, [pc, #84]	; (8007560 <MX_I2C3_Init+0x74>)
 800750a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800750e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007510:	4b13      	ldr	r3, [pc, #76]	; (8007560 <MX_I2C3_Init+0x74>)
 8007512:	2200      	movs	r2, #0
 8007514:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8007516:	4b12      	ldr	r3, [pc, #72]	; (8007560 <MX_I2C3_Init+0x74>)
 8007518:	2200      	movs	r2, #0
 800751a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800751c:	4b10      	ldr	r3, [pc, #64]	; (8007560 <MX_I2C3_Init+0x74>)
 800751e:	2200      	movs	r2, #0
 8007520:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007522:	4b0f      	ldr	r3, [pc, #60]	; (8007560 <MX_I2C3_Init+0x74>)
 8007524:	2200      	movs	r2, #0
 8007526:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8007528:	480d      	ldr	r0, [pc, #52]	; (8007560 <MX_I2C3_Init+0x74>)
 800752a:	f005 f813 	bl	800c554 <HAL_I2C_Init>
 800752e:	4603      	mov	r3, r0
 8007530:	2b00      	cmp	r3, #0
 8007532:	d001      	beq.n	8007538 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8007534:	f000 fb32 	bl	8007b9c <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8007538:	2100      	movs	r1, #0
 800753a:	4809      	ldr	r0, [pc, #36]	; (8007560 <MX_I2C3_Init+0x74>)
 800753c:	f006 f803 	bl	800d546 <HAL_I2CEx_ConfigAnalogFilter>
 8007540:	4603      	mov	r3, r0
 8007542:	2b00      	cmp	r3, #0
 8007544:	d001      	beq.n	800754a <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8007546:	f000 fb29 	bl	8007b9c <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800754a:	2100      	movs	r1, #0
 800754c:	4804      	ldr	r0, [pc, #16]	; (8007560 <MX_I2C3_Init+0x74>)
 800754e:	f006 f836 	bl	800d5be <HAL_I2CEx_ConfigDigitalFilter>
 8007552:	4603      	mov	r3, r0
 8007554:	2b00      	cmp	r3, #0
 8007556:	d001      	beq.n	800755c <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8007558:	f000 fb20 	bl	8007b9c <Error_Handler>
  }

}
 800755c:	bf00      	nop
 800755e:	bd80      	pop	{r7, pc}
 8007560:	20000ea0 	.word	0x20000ea0
 8007564:	40005c00 	.word	0x40005c00
 8007568:	000186a0 	.word	0x000186a0

0800756c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b08a      	sub	sp, #40	; 0x28
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007574:	f107 0314 	add.w	r3, r7, #20
 8007578:	2200      	movs	r2, #0
 800757a:	601a      	str	r2, [r3, #0]
 800757c:	605a      	str	r2, [r3, #4]
 800757e:	609a      	str	r2, [r3, #8]
 8007580:	60da      	str	r2, [r3, #12]
 8007582:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	4a29      	ldr	r2, [pc, #164]	; (8007630 <HAL_I2C_MspInit+0xc4>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d14b      	bne.n	8007626 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800758e:	2300      	movs	r3, #0
 8007590:	613b      	str	r3, [r7, #16]
 8007592:	4b28      	ldr	r3, [pc, #160]	; (8007634 <HAL_I2C_MspInit+0xc8>)
 8007594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007596:	4a27      	ldr	r2, [pc, #156]	; (8007634 <HAL_I2C_MspInit+0xc8>)
 8007598:	f043 0304 	orr.w	r3, r3, #4
 800759c:	6313      	str	r3, [r2, #48]	; 0x30
 800759e:	4b25      	ldr	r3, [pc, #148]	; (8007634 <HAL_I2C_MspInit+0xc8>)
 80075a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075a2:	f003 0304 	and.w	r3, r3, #4
 80075a6:	613b      	str	r3, [r7, #16]
 80075a8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80075aa:	2300      	movs	r3, #0
 80075ac:	60fb      	str	r3, [r7, #12]
 80075ae:	4b21      	ldr	r3, [pc, #132]	; (8007634 <HAL_I2C_MspInit+0xc8>)
 80075b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075b2:	4a20      	ldr	r2, [pc, #128]	; (8007634 <HAL_I2C_MspInit+0xc8>)
 80075b4:	f043 0301 	orr.w	r3, r3, #1
 80075b8:	6313      	str	r3, [r2, #48]	; 0x30
 80075ba:	4b1e      	ldr	r3, [pc, #120]	; (8007634 <HAL_I2C_MspInit+0xc8>)
 80075bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075be:	f003 0301 	and.w	r3, r3, #1
 80075c2:	60fb      	str	r3, [r7, #12]
 80075c4:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration    
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL 
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 80075c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80075ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80075cc:	2312      	movs	r3, #18
 80075ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80075d0:	2301      	movs	r3, #1
 80075d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80075d4:	2300      	movs	r3, #0
 80075d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80075d8:	2304      	movs	r3, #4
 80075da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 80075dc:	f107 0314 	add.w	r3, r7, #20
 80075e0:	4619      	mov	r1, r3
 80075e2:	4815      	ldr	r0, [pc, #84]	; (8007638 <HAL_I2C_MspInit+0xcc>)
 80075e4:	f004 fce4 	bl	800bfb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 80075e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80075ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80075ee:	2312      	movs	r3, #18
 80075f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80075f2:	2301      	movs	r3, #1
 80075f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80075f6:	2300      	movs	r3, #0
 80075f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80075fa:	2304      	movs	r3, #4
 80075fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 80075fe:	f107 0314 	add.w	r3, r7, #20
 8007602:	4619      	mov	r1, r3
 8007604:	480d      	ldr	r0, [pc, #52]	; (800763c <HAL_I2C_MspInit+0xd0>)
 8007606:	f004 fcd3 	bl	800bfb0 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800760a:	2300      	movs	r3, #0
 800760c:	60bb      	str	r3, [r7, #8]
 800760e:	4b09      	ldr	r3, [pc, #36]	; (8007634 <HAL_I2C_MspInit+0xc8>)
 8007610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007612:	4a08      	ldr	r2, [pc, #32]	; (8007634 <HAL_I2C_MspInit+0xc8>)
 8007614:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007618:	6413      	str	r3, [r2, #64]	; 0x40
 800761a:	4b06      	ldr	r3, [pc, #24]	; (8007634 <HAL_I2C_MspInit+0xc8>)
 800761c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800761e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007622:	60bb      	str	r3, [r7, #8]
 8007624:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8007626:	bf00      	nop
 8007628:	3728      	adds	r7, #40	; 0x28
 800762a:	46bd      	mov	sp, r7
 800762c:	bd80      	pop	{r7, pc}
 800762e:	bf00      	nop
 8007630:	40005c00 	.word	0x40005c00
 8007634:	40023800 	.word	0x40023800
 8007638:	40020800 	.word	0x40020800
 800763c:	40020000 	.word	0x40020000

08007640 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b082      	sub	sp, #8
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C3)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	4a0b      	ldr	r2, [pc, #44]	; (800767c <HAL_I2C_MspDeInit+0x3c>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d10f      	bne.n	8007672 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C3_MspDeInit 0 */

  /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 8007652:	4b0b      	ldr	r3, [pc, #44]	; (8007680 <HAL_I2C_MspDeInit+0x40>)
 8007654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007656:	4a0a      	ldr	r2, [pc, #40]	; (8007680 <HAL_I2C_MspDeInit+0x40>)
 8007658:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800765c:	6413      	str	r3, [r2, #64]	; 0x40
  
    /**I2C3 GPIO Configuration    
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL 
    */
    HAL_GPIO_DeInit(I2C3_SDA_GPIO_Port, I2C3_SDA_Pin);
 800765e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007662:	4808      	ldr	r0, [pc, #32]	; (8007684 <HAL_I2C_MspDeInit+0x44>)
 8007664:	f004 fe50 	bl	800c308 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(I2C3_SCL_GPIO_Port, I2C3_SCL_Pin);
 8007668:	f44f 7180 	mov.w	r1, #256	; 0x100
 800766c:	4806      	ldr	r0, [pc, #24]	; (8007688 <HAL_I2C_MspDeInit+0x48>)
 800766e:	f004 fe4b 	bl	800c308 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }
} 
 8007672:	bf00      	nop
 8007674:	3708      	adds	r7, #8
 8007676:	46bd      	mov	sp, r7
 8007678:	bd80      	pop	{r7, pc}
 800767a:	bf00      	nop
 800767c:	40005c00 	.word	0x40005c00
 8007680:	40023800 	.word	0x40023800
 8007684:	40020800 	.word	0x40020800
 8007688:	40020000 	.word	0x40020000

0800768c <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b09a      	sub	sp, #104	; 0x68
 8007690:	af00      	add	r7, sp, #0
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8007692:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007696:	2234      	movs	r2, #52	; 0x34
 8007698:	2100      	movs	r1, #0
 800769a:	4618      	mov	r0, r3
 800769c:	f009 fcd4 	bl	8011048 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 80076a0:	463b      	mov	r3, r7
 80076a2:	2234      	movs	r2, #52	; 0x34
 80076a4:	2100      	movs	r1, #0
 80076a6:	4618      	mov	r0, r3
 80076a8:	f009 fcce 	bl	8011048 <memset>

  hltdc.Instance = LTDC;
 80076ac:	4b4e      	ldr	r3, [pc, #312]	; (80077e8 <MX_LTDC_Init+0x15c>)
 80076ae:	4a4f      	ldr	r2, [pc, #316]	; (80077ec <MX_LTDC_Init+0x160>)
 80076b0:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80076b2:	4b4d      	ldr	r3, [pc, #308]	; (80077e8 <MX_LTDC_Init+0x15c>)
 80076b4:	2200      	movs	r2, #0
 80076b6:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80076b8:	4b4b      	ldr	r3, [pc, #300]	; (80077e8 <MX_LTDC_Init+0x15c>)
 80076ba:	2200      	movs	r2, #0
 80076bc:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80076be:	4b4a      	ldr	r3, [pc, #296]	; (80077e8 <MX_LTDC_Init+0x15c>)
 80076c0:	2200      	movs	r2, #0
 80076c2:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80076c4:	4b48      	ldr	r3, [pc, #288]	; (80077e8 <MX_LTDC_Init+0x15c>)
 80076c6:	2200      	movs	r2, #0
 80076c8:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 80076ca:	4b47      	ldr	r3, [pc, #284]	; (80077e8 <MX_LTDC_Init+0x15c>)
 80076cc:	2207      	movs	r2, #7
 80076ce:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 80076d0:	4b45      	ldr	r3, [pc, #276]	; (80077e8 <MX_LTDC_Init+0x15c>)
 80076d2:	2203      	movs	r2, #3
 80076d4:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 80076d6:	4b44      	ldr	r3, [pc, #272]	; (80077e8 <MX_LTDC_Init+0x15c>)
 80076d8:	220e      	movs	r2, #14
 80076da:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 80076dc:	4b42      	ldr	r3, [pc, #264]	; (80077e8 <MX_LTDC_Init+0x15c>)
 80076de:	2205      	movs	r2, #5
 80076e0:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 80076e2:	4b41      	ldr	r3, [pc, #260]	; (80077e8 <MX_LTDC_Init+0x15c>)
 80076e4:	f240 228e 	movw	r2, #654	; 0x28e
 80076e8:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 80076ea:	4b3f      	ldr	r3, [pc, #252]	; (80077e8 <MX_LTDC_Init+0x15c>)
 80076ec:	f240 12e5 	movw	r2, #485	; 0x1e5
 80076f0:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 660;
 80076f2:	4b3d      	ldr	r3, [pc, #244]	; (80077e8 <MX_LTDC_Init+0x15c>)
 80076f4:	f44f 7225 	mov.w	r2, #660	; 0x294
 80076f8:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 487;
 80076fa:	4b3b      	ldr	r3, [pc, #236]	; (80077e8 <MX_LTDC_Init+0x15c>)
 80076fc:	f240 12e7 	movw	r2, #487	; 0x1e7
 8007700:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8007702:	4b39      	ldr	r3, [pc, #228]	; (80077e8 <MX_LTDC_Init+0x15c>)
 8007704:	2200      	movs	r2, #0
 8007706:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 800770a:	4b37      	ldr	r3, [pc, #220]	; (80077e8 <MX_LTDC_Init+0x15c>)
 800770c:	2200      	movs	r2, #0
 800770e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8007712:	4b35      	ldr	r3, [pc, #212]	; (80077e8 <MX_LTDC_Init+0x15c>)
 8007714:	2200      	movs	r2, #0
 8007716:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800771a:	4833      	ldr	r0, [pc, #204]	; (80077e8 <MX_LTDC_Init+0x15c>)
 800771c:	f005 ff8e 	bl	800d63c <HAL_LTDC_Init>
 8007720:	4603      	mov	r3, r0
 8007722:	2b00      	cmp	r3, #0
 8007724:	d001      	beq.n	800772a <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8007726:	f000 fa39 	bl	8007b9c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800772a:	2300      	movs	r3, #0
 800772c:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 800772e:	2300      	movs	r3, #0
 8007730:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8007732:	2300      	movs	r3, #0
 8007734:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 8007736:	2300      	movs	r3, #0
 8007738:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800773a:	2300      	movs	r3, #0
 800773c:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 800773e:	2300      	movs	r3, #0
 8007740:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 8007742:	2300      	movs	r3, #0
 8007744:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8007746:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800774a:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800774c:	2305      	movs	r3, #5
 800774e:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 8007750:	2300      	movs	r3, #0
 8007752:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 8007754:	2300      	movs	r3, #0
 8007756:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 8007758:	2300      	movs	r3, #0
 800775a:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 800775c:	2300      	movs	r3, #0
 800775e:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8007762:	2300      	movs	r3, #0
 8007764:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8007768:	2300      	movs	r3, #0
 800776a:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800776e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007772:	2200      	movs	r2, #0
 8007774:	4619      	mov	r1, r3
 8007776:	481c      	ldr	r0, [pc, #112]	; (80077e8 <MX_LTDC_Init+0x15c>)
 8007778:	f006 f830 	bl	800d7dc <HAL_LTDC_ConfigLayer>
 800777c:	4603      	mov	r3, r0
 800777e:	2b00      	cmp	r3, #0
 8007780:	d001      	beq.n	8007786 <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 8007782:	f000 fa0b 	bl	8007b9c <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8007786:	2300      	movs	r3, #0
 8007788:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 800778a:	2300      	movs	r3, #0
 800778c:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 800778e:	2300      	movs	r3, #0
 8007790:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8007792:	2300      	movs	r3, #0
 8007794:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8007796:	2300      	movs	r3, #0
 8007798:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 800779a:	2300      	movs	r3, #0
 800779c:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 800779e:	2300      	movs	r3, #0
 80077a0:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80077a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80077a6:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80077a8:	2305      	movs	r3, #5
 80077aa:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 80077ac:	2300      	movs	r3, #0
 80077ae:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 80077b0:	2300      	movs	r3, #0
 80077b2:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 80077b4:	2300      	movs	r3, #0
 80077b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 80077b8:	2300      	movs	r3, #0
 80077ba:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 80077be:	2300      	movs	r3, #0
 80077c0:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 80077c4:	2300      	movs	r3, #0
 80077c6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 80077ca:	463b      	mov	r3, r7
 80077cc:	2201      	movs	r2, #1
 80077ce:	4619      	mov	r1, r3
 80077d0:	4805      	ldr	r0, [pc, #20]	; (80077e8 <MX_LTDC_Init+0x15c>)
 80077d2:	f006 f803 	bl	800d7dc <HAL_LTDC_ConfigLayer>
 80077d6:	4603      	mov	r3, r0
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d001      	beq.n	80077e0 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 80077dc:	f000 f9de 	bl	8007b9c <Error_Handler>
  }

}
 80077e0:	bf00      	nop
 80077e2:	3768      	adds	r7, #104	; 0x68
 80077e4:	46bd      	mov	sp, r7
 80077e6:	bd80      	pop	{r7, pc}
 80077e8:	20000ef4 	.word	0x20000ef4
 80077ec:	40016800 	.word	0x40016800

080077f0 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b08e      	sub	sp, #56	; 0x38
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80077f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80077fc:	2200      	movs	r2, #0
 80077fe:	601a      	str	r2, [r3, #0]
 8007800:	605a      	str	r2, [r3, #4]
 8007802:	609a      	str	r2, [r3, #8]
 8007804:	60da      	str	r2, [r3, #12]
 8007806:	611a      	str	r2, [r3, #16]
  if(ltdcHandle->Instance==LTDC)
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	4a77      	ldr	r2, [pc, #476]	; (80079ec <HAL_LTDC_MspInit+0x1fc>)
 800780e:	4293      	cmp	r3, r2
 8007810:	f040 80e8 	bne.w	80079e4 <HAL_LTDC_MspInit+0x1f4>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8007814:	2300      	movs	r3, #0
 8007816:	623b      	str	r3, [r7, #32]
 8007818:	4b75      	ldr	r3, [pc, #468]	; (80079f0 <HAL_LTDC_MspInit+0x200>)
 800781a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800781c:	4a74      	ldr	r2, [pc, #464]	; (80079f0 <HAL_LTDC_MspInit+0x200>)
 800781e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007822:	6453      	str	r3, [r2, #68]	; 0x44
 8007824:	4b72      	ldr	r3, [pc, #456]	; (80079f0 <HAL_LTDC_MspInit+0x200>)
 8007826:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007828:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800782c:	623b      	str	r3, [r7, #32]
 800782e:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8007830:	2300      	movs	r3, #0
 8007832:	61fb      	str	r3, [r7, #28]
 8007834:	4b6e      	ldr	r3, [pc, #440]	; (80079f0 <HAL_LTDC_MspInit+0x200>)
 8007836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007838:	4a6d      	ldr	r2, [pc, #436]	; (80079f0 <HAL_LTDC_MspInit+0x200>)
 800783a:	f043 0320 	orr.w	r3, r3, #32
 800783e:	6313      	str	r3, [r2, #48]	; 0x30
 8007840:	4b6b      	ldr	r3, [pc, #428]	; (80079f0 <HAL_LTDC_MspInit+0x200>)
 8007842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007844:	f003 0320 	and.w	r3, r3, #32
 8007848:	61fb      	str	r3, [r7, #28]
 800784a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800784c:	2300      	movs	r3, #0
 800784e:	61bb      	str	r3, [r7, #24]
 8007850:	4b67      	ldr	r3, [pc, #412]	; (80079f0 <HAL_LTDC_MspInit+0x200>)
 8007852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007854:	4a66      	ldr	r2, [pc, #408]	; (80079f0 <HAL_LTDC_MspInit+0x200>)
 8007856:	f043 0301 	orr.w	r3, r3, #1
 800785a:	6313      	str	r3, [r2, #48]	; 0x30
 800785c:	4b64      	ldr	r3, [pc, #400]	; (80079f0 <HAL_LTDC_MspInit+0x200>)
 800785e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007860:	f003 0301 	and.w	r3, r3, #1
 8007864:	61bb      	str	r3, [r7, #24]
 8007866:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007868:	2300      	movs	r3, #0
 800786a:	617b      	str	r3, [r7, #20]
 800786c:	4b60      	ldr	r3, [pc, #384]	; (80079f0 <HAL_LTDC_MspInit+0x200>)
 800786e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007870:	4a5f      	ldr	r2, [pc, #380]	; (80079f0 <HAL_LTDC_MspInit+0x200>)
 8007872:	f043 0302 	orr.w	r3, r3, #2
 8007876:	6313      	str	r3, [r2, #48]	; 0x30
 8007878:	4b5d      	ldr	r3, [pc, #372]	; (80079f0 <HAL_LTDC_MspInit+0x200>)
 800787a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800787c:	f003 0302 	and.w	r3, r3, #2
 8007880:	617b      	str	r3, [r7, #20]
 8007882:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8007884:	2300      	movs	r3, #0
 8007886:	613b      	str	r3, [r7, #16]
 8007888:	4b59      	ldr	r3, [pc, #356]	; (80079f0 <HAL_LTDC_MspInit+0x200>)
 800788a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800788c:	4a58      	ldr	r2, [pc, #352]	; (80079f0 <HAL_LTDC_MspInit+0x200>)
 800788e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007892:	6313      	str	r3, [r2, #48]	; 0x30
 8007894:	4b56      	ldr	r3, [pc, #344]	; (80079f0 <HAL_LTDC_MspInit+0x200>)
 8007896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007898:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800789c:	613b      	str	r3, [r7, #16]
 800789e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80078a0:	2300      	movs	r3, #0
 80078a2:	60fb      	str	r3, [r7, #12]
 80078a4:	4b52      	ldr	r3, [pc, #328]	; (80079f0 <HAL_LTDC_MspInit+0x200>)
 80078a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078a8:	4a51      	ldr	r2, [pc, #324]	; (80079f0 <HAL_LTDC_MspInit+0x200>)
 80078aa:	f043 0304 	orr.w	r3, r3, #4
 80078ae:	6313      	str	r3, [r2, #48]	; 0x30
 80078b0:	4b4f      	ldr	r3, [pc, #316]	; (80079f0 <HAL_LTDC_MspInit+0x200>)
 80078b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078b4:	f003 0304 	and.w	r3, r3, #4
 80078b8:	60fb      	str	r3, [r7, #12]
 80078ba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80078bc:	2300      	movs	r3, #0
 80078be:	60bb      	str	r3, [r7, #8]
 80078c0:	4b4b      	ldr	r3, [pc, #300]	; (80079f0 <HAL_LTDC_MspInit+0x200>)
 80078c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078c4:	4a4a      	ldr	r2, [pc, #296]	; (80079f0 <HAL_LTDC_MspInit+0x200>)
 80078c6:	f043 0308 	orr.w	r3, r3, #8
 80078ca:	6313      	str	r3, [r2, #48]	; 0x30
 80078cc:	4b48      	ldr	r3, [pc, #288]	; (80079f0 <HAL_LTDC_MspInit+0x200>)
 80078ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078d0:	f003 0308 	and.w	r3, r3, #8
 80078d4:	60bb      	str	r3, [r7, #8]
 80078d6:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7 
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 80078d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80078dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80078de:	2302      	movs	r3, #2
 80078e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078e2:	2300      	movs	r3, #0
 80078e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80078e6:	2300      	movs	r3, #0
 80078e8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80078ea:	230e      	movs	r3, #14
 80078ec:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80078ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80078f2:	4619      	mov	r1, r3
 80078f4:	483f      	ldr	r0, [pc, #252]	; (80079f4 <HAL_LTDC_MspInit+0x204>)
 80078f6:	f004 fb5b 	bl	800bfb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin 
 80078fa:	f641 0358 	movw	r3, #6232	; 0x1858
 80078fe:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007900:	2302      	movs	r3, #2
 8007902:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007904:	2300      	movs	r3, #0
 8007906:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007908:	2300      	movs	r3, #0
 800790a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800790c:	230e      	movs	r3, #14
 800790e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007910:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007914:	4619      	mov	r1, r3
 8007916:	4838      	ldr	r0, [pc, #224]	; (80079f8 <HAL_LTDC_MspInit+0x208>)
 8007918:	f004 fb4a 	bl	800bfb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 800791c:	2303      	movs	r3, #3
 800791e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007920:	2302      	movs	r3, #2
 8007922:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007924:	2300      	movs	r3, #0
 8007926:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007928:	2300      	movs	r3, #0
 800792a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800792c:	2309      	movs	r3, #9
 800792e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007930:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007934:	4619      	mov	r1, r3
 8007936:	4831      	ldr	r0, [pc, #196]	; (80079fc <HAL_LTDC_MspInit+0x20c>)
 8007938:	f004 fb3a 	bl	800bfb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 800793c:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8007940:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007942:	2302      	movs	r3, #2
 8007944:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007946:	2300      	movs	r3, #0
 8007948:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800794a:	2300      	movs	r3, #0
 800794c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800794e:	230e      	movs	r3, #14
 8007950:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007952:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007956:	4619      	mov	r1, r3
 8007958:	4828      	ldr	r0, [pc, #160]	; (80079fc <HAL_LTDC_MspInit+0x20c>)
 800795a:	f004 fb29 	bl	800bfb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 800795e:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8007962:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007964:	2302      	movs	r3, #2
 8007966:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007968:	2300      	movs	r3, #0
 800796a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800796c:	2300      	movs	r3, #0
 800796e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8007970:	230e      	movs	r3, #14
 8007972:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8007974:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007978:	4619      	mov	r1, r3
 800797a:	4821      	ldr	r0, [pc, #132]	; (8007a00 <HAL_LTDC_MspInit+0x210>)
 800797c:	f004 fb18 	bl	800bfb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8007980:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8007984:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007986:	2302      	movs	r3, #2
 8007988:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800798a:	2300      	movs	r3, #0
 800798c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800798e:	2300      	movs	r3, #0
 8007990:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8007992:	230e      	movs	r3, #14
 8007994:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007996:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800799a:	4619      	mov	r1, r3
 800799c:	4819      	ldr	r0, [pc, #100]	; (8007a04 <HAL_LTDC_MspInit+0x214>)
 800799e:	f004 fb07 	bl	800bfb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 80079a2:	2348      	movs	r3, #72	; 0x48
 80079a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80079a6:	2302      	movs	r3, #2
 80079a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80079aa:	2300      	movs	r3, #0
 80079ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80079ae:	2300      	movs	r3, #0
 80079b0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80079b2:	230e      	movs	r3, #14
 80079b4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80079b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80079ba:	4619      	mov	r1, r3
 80079bc:	4812      	ldr	r0, [pc, #72]	; (8007a08 <HAL_LTDC_MspInit+0x218>)
 80079be:	f004 faf7 	bl	800bfb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 80079c2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80079c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80079c8:	2302      	movs	r3, #2
 80079ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80079cc:	2300      	movs	r3, #0
 80079ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80079d0:	2300      	movs	r3, #0
 80079d2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80079d4:	2309      	movs	r3, #9
 80079d6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80079d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80079dc:	4619      	mov	r1, r3
 80079de:	4808      	ldr	r0, [pc, #32]	; (8007a00 <HAL_LTDC_MspInit+0x210>)
 80079e0:	f004 fae6 	bl	800bfb0 <HAL_GPIO_Init>

  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 80079e4:	bf00      	nop
 80079e6:	3738      	adds	r7, #56	; 0x38
 80079e8:	46bd      	mov	sp, r7
 80079ea:	bd80      	pop	{r7, pc}
 80079ec:	40016800 	.word	0x40016800
 80079f0:	40023800 	.word	0x40023800
 80079f4:	40021400 	.word	0x40021400
 80079f8:	40020000 	.word	0x40020000
 80079fc:	40020400 	.word	0x40020400
 8007a00:	40021800 	.word	0x40021800
 8007a04:	40020800 	.word	0x40020800
 8007a08:	40020c00 	.word	0x40020c00

08007a0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007a0c:	b598      	push	{r3, r4, r7, lr}
 8007a0e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007a10:	f003 fc10 	bl	800b234 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007a14:	f000 f82e 	bl	8007a74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007a18:	f7ff fc3a 	bl	8007290 <MX_GPIO_Init>
  MX_CRC_Init();
 8007a1c:	f7ff fabe 	bl	8006f9c <MX_CRC_Init>
  MX_DMA2D_Init();
 8007a20:	f7ff faf2 	bl	8007008 <MX_DMA2D_Init>
  MX_FMC_Init();
 8007a24:	f7ff fb4a 	bl	80070bc <MX_FMC_Init>
  MX_I2C3_Init();
 8007a28:	f7ff fd60 	bl	80074ec <MX_I2C3_Init>
  MX_SPI5_Init();
 8007a2c:	f000 f8be 	bl	8007bac <MX_SPI5_Init>
  MX_TIM1_Init();
 8007a30:	f000 fae8 	bl	8008004 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8007a34:	f001 f93e 	bl	8008cb4 <MX_USART1_UART_Init>
  MX_LTDC_Init();
 8007a38:	f7ff fe28 	bl	800768c <MX_LTDC_Init>
  MX_X_CUBE_AI_Init();
 8007a3c:	f009 f898 	bl	8010b70 <MX_X_CUBE_AI_Init>
  /* USER CODE BEGIN 2 */
  LCD_Config();
 8007a40:	f000 febc 	bl	80087bc <LCD_Config>
  Touchscreen_Calibration();
 8007a44:	f000 ff66 	bl	8008914 <Touchscreen_Calibration>
  BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 8007a48:	f002 f9f0 	bl	8009e2c <BSP_LCD_GetXSize>
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	b29c      	uxth	r4, r3
 8007a50:	f002 f9f8 	bl	8009e44 <BSP_LCD_GetYSize>
 8007a54:	4603      	mov	r3, r0
 8007a56:	b29b      	uxth	r3, r3
 8007a58:	4619      	mov	r1, r3
 8007a5a:	4620      	mov	r0, r4
 8007a5c:	f003 fafe 	bl	800b05c <BSP_TS_Init>
  BSP_LCD_Clear(LCD_COLOR_BLUE);
 8007a60:	4803      	ldr	r0, [pc, #12]	; (8007a70 <main+0x64>)
 8007a62:	f002 fb73 	bl	800a14c <BSP_LCD_Clear>
  Draw_Menu();
 8007a66:	f000 fed3 	bl	8008810 <Draw_Menu>
  {
    /* USER CODE END WHILE */

 // MX_X_CUBE_AI_Process();
    /* USER CODE BEGIN 3 */
  Read_TouchPanel();
 8007a6a:	f000 fb3d 	bl	80080e8 <Read_TouchPanel>
 8007a6e:	e7fc      	b.n	8007a6a <main+0x5e>
 8007a70:	ff0000ff 	.word	0xff0000ff

08007a74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b0a0      	sub	sp, #128	; 0x80
 8007a78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007a7a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007a7e:	2230      	movs	r2, #48	; 0x30
 8007a80:	2100      	movs	r1, #0
 8007a82:	4618      	mov	r0, r3
 8007a84:	f009 fae0 	bl	8011048 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007a88:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	601a      	str	r2, [r3, #0]
 8007a90:	605a      	str	r2, [r3, #4]
 8007a92:	609a      	str	r2, [r3, #8]
 8007a94:	60da      	str	r2, [r3, #12]
 8007a96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007a98:	f107 030c 	add.w	r3, r7, #12
 8007a9c:	2230      	movs	r2, #48	; 0x30
 8007a9e:	2100      	movs	r1, #0
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	f009 fad1 	bl	8011048 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	60bb      	str	r3, [r7, #8]
 8007aaa:	4b31      	ldr	r3, [pc, #196]	; (8007b70 <SystemClock_Config+0xfc>)
 8007aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aae:	4a30      	ldr	r2, [pc, #192]	; (8007b70 <SystemClock_Config+0xfc>)
 8007ab0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ab4:	6413      	str	r3, [r2, #64]	; 0x40
 8007ab6:	4b2e      	ldr	r3, [pc, #184]	; (8007b70 <SystemClock_Config+0xfc>)
 8007ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007abe:	60bb      	str	r3, [r7, #8]
 8007ac0:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	607b      	str	r3, [r7, #4]
 8007ac6:	4b2b      	ldr	r3, [pc, #172]	; (8007b74 <SystemClock_Config+0x100>)
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	4a2a      	ldr	r2, [pc, #168]	; (8007b74 <SystemClock_Config+0x100>)
 8007acc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007ad0:	6013      	str	r3, [r2, #0]
 8007ad2:	4b28      	ldr	r3, [pc, #160]	; (8007b74 <SystemClock_Config+0x100>)
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007ada:	607b      	str	r3, [r7, #4]
 8007adc:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8007ade:	2301      	movs	r3, #1
 8007ae0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007ae2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007ae6:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007ae8:	2302      	movs	r3, #2
 8007aea:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007aec:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007af0:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8007af2:	2304      	movs	r3, #4
 8007af4:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 168;
 8007af6:	23a8      	movs	r3, #168	; 0xa8
 8007af8:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8007afa:	2302      	movs	r3, #2
 8007afc:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8007afe:	2307      	movs	r3, #7
 8007b00:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007b02:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007b06:	4618      	mov	r0, r3
 8007b08:	f006 f89e 	bl	800dc48 <HAL_RCC_OscConfig>
 8007b0c:	4603      	mov	r3, r0
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d001      	beq.n	8007b16 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8007b12:	f000 f843 	bl	8007b9c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007b16:	230f      	movs	r3, #15
 8007b18:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007b1a:	2302      	movs	r3, #2
 8007b1c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007b1e:	2300      	movs	r3, #0
 8007b20:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8007b22:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8007b26:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8007b28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007b2c:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8007b2e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007b32:	2105      	movs	r1, #5
 8007b34:	4618      	mov	r0, r3
 8007b36:	f006 faf5 	bl	800e124 <HAL_RCC_ClockConfig>
 8007b3a:	4603      	mov	r3, r0
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d001      	beq.n	8007b44 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8007b40:	f000 f82c 	bl	8007b9c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8007b44:	2308      	movs	r3, #8
 8007b46:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8007b48:	2332      	movs	r3, #50	; 0x32
 8007b4a:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8007b4c:	2302      	movs	r3, #2
 8007b4e:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8007b50:	2300      	movs	r3, #0
 8007b52:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007b54:	f107 030c 	add.w	r3, r7, #12
 8007b58:	4618      	mov	r0, r3
 8007b5a:	f006 fd35 	bl	800e5c8 <HAL_RCCEx_PeriphCLKConfig>
 8007b5e:	4603      	mov	r3, r0
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d001      	beq.n	8007b68 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8007b64:	f000 f81a 	bl	8007b9c <Error_Handler>
  }
}
 8007b68:	bf00      	nop
 8007b6a:	3780      	adds	r7, #128	; 0x80
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	bd80      	pop	{r7, pc}
 8007b70:	40023800 	.word	0x40023800
 8007b74:	40007000 	.word	0x40007000

08007b78 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b082      	sub	sp, #8
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	4a04      	ldr	r2, [pc, #16]	; (8007b98 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8007b86:	4293      	cmp	r3, r2
 8007b88:	d101      	bne.n	8007b8e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8007b8a:	f003 fb75 	bl	800b278 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8007b8e:	bf00      	nop
 8007b90:	3708      	adds	r7, #8
 8007b92:	46bd      	mov	sp, r7
 8007b94:	bd80      	pop	{r7, pc}
 8007b96:	bf00      	nop
 8007b98:	40001000 	.word	0x40001000

08007b9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007b9c:	b480      	push	{r7}
 8007b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8007ba0:	bf00      	nop
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba8:	4770      	bx	lr
	...

08007bac <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	af00      	add	r7, sp, #0

  hspi5.Instance = SPI5;
 8007bb0:	4b17      	ldr	r3, [pc, #92]	; (8007c10 <MX_SPI5_Init+0x64>)
 8007bb2:	4a18      	ldr	r2, [pc, #96]	; (8007c14 <MX_SPI5_Init+0x68>)
 8007bb4:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8007bb6:	4b16      	ldr	r3, [pc, #88]	; (8007c10 <MX_SPI5_Init+0x64>)
 8007bb8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8007bbc:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8007bbe:	4b14      	ldr	r3, [pc, #80]	; (8007c10 <MX_SPI5_Init+0x64>)
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8007bc4:	4b12      	ldr	r3, [pc, #72]	; (8007c10 <MX_SPI5_Init+0x64>)
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8007bca:	4b11      	ldr	r3, [pc, #68]	; (8007c10 <MX_SPI5_Init+0x64>)
 8007bcc:	2200      	movs	r2, #0
 8007bce:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007bd0:	4b0f      	ldr	r3, [pc, #60]	; (8007c10 <MX_SPI5_Init+0x64>)
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8007bd6:	4b0e      	ldr	r3, [pc, #56]	; (8007c10 <MX_SPI5_Init+0x64>)
 8007bd8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007bdc:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8007bde:	4b0c      	ldr	r3, [pc, #48]	; (8007c10 <MX_SPI5_Init+0x64>)
 8007be0:	2218      	movs	r2, #24
 8007be2:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007be4:	4b0a      	ldr	r3, [pc, #40]	; (8007c10 <MX_SPI5_Init+0x64>)
 8007be6:	2200      	movs	r2, #0
 8007be8:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8007bea:	4b09      	ldr	r3, [pc, #36]	; (8007c10 <MX_SPI5_Init+0x64>)
 8007bec:	2200      	movs	r2, #0
 8007bee:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007bf0:	4b07      	ldr	r3, [pc, #28]	; (8007c10 <MX_SPI5_Init+0x64>)
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8007bf6:	4b06      	ldr	r3, [pc, #24]	; (8007c10 <MX_SPI5_Init+0x64>)
 8007bf8:	220a      	movs	r2, #10
 8007bfa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8007bfc:	4804      	ldr	r0, [pc, #16]	; (8007c10 <MX_SPI5_Init+0x64>)
 8007bfe:	f006 ff22 	bl	800ea46 <HAL_SPI_Init>
 8007c02:	4603      	mov	r3, r0
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d001      	beq.n	8007c0c <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8007c08:	f7ff ffc8 	bl	8007b9c <Error_Handler>
  }

}
 8007c0c:	bf00      	nop
 8007c0e:	bd80      	pop	{r7, pc}
 8007c10:	20000f9c 	.word	0x20000f9c
 8007c14:	40015000 	.word	0x40015000

08007c18 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b08a      	sub	sp, #40	; 0x28
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007c20:	f107 0314 	add.w	r3, r7, #20
 8007c24:	2200      	movs	r2, #0
 8007c26:	601a      	str	r2, [r3, #0]
 8007c28:	605a      	str	r2, [r3, #4]
 8007c2a:	609a      	str	r2, [r3, #8]
 8007c2c:	60da      	str	r2, [r3, #12]
 8007c2e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	4a19      	ldr	r2, [pc, #100]	; (8007c9c <HAL_SPI_MspInit+0x84>)
 8007c36:	4293      	cmp	r3, r2
 8007c38:	d12c      	bne.n	8007c94 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	613b      	str	r3, [r7, #16]
 8007c3e:	4b18      	ldr	r3, [pc, #96]	; (8007ca0 <HAL_SPI_MspInit+0x88>)
 8007c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c42:	4a17      	ldr	r2, [pc, #92]	; (8007ca0 <HAL_SPI_MspInit+0x88>)
 8007c44:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007c48:	6453      	str	r3, [r2, #68]	; 0x44
 8007c4a:	4b15      	ldr	r3, [pc, #84]	; (8007ca0 <HAL_SPI_MspInit+0x88>)
 8007c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007c52:	613b      	str	r3, [r7, #16]
 8007c54:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8007c56:	2300      	movs	r3, #0
 8007c58:	60fb      	str	r3, [r7, #12]
 8007c5a:	4b11      	ldr	r3, [pc, #68]	; (8007ca0 <HAL_SPI_MspInit+0x88>)
 8007c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c5e:	4a10      	ldr	r2, [pc, #64]	; (8007ca0 <HAL_SPI_MspInit+0x88>)
 8007c60:	f043 0320 	orr.w	r3, r3, #32
 8007c64:	6313      	str	r3, [r2, #48]	; 0x30
 8007c66:	4b0e      	ldr	r3, [pc, #56]	; (8007ca0 <HAL_SPI_MspInit+0x88>)
 8007c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c6a:	f003 0320 	and.w	r3, r3, #32
 8007c6e:	60fb      	str	r3, [r7, #12]
 8007c70:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration    
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI 
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8007c72:	f44f 7360 	mov.w	r3, #896	; 0x380
 8007c76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c78:	2302      	movs	r3, #2
 8007c7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007c80:	2300      	movs	r3, #0
 8007c82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8007c84:	2305      	movs	r3, #5
 8007c86:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8007c88:	f107 0314 	add.w	r3, r7, #20
 8007c8c:	4619      	mov	r1, r3
 8007c8e:	4805      	ldr	r0, [pc, #20]	; (8007ca4 <HAL_SPI_MspInit+0x8c>)
 8007c90:	f004 f98e 	bl	800bfb0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8007c94:	bf00      	nop
 8007c96:	3728      	adds	r7, #40	; 0x28
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	bd80      	pop	{r7, pc}
 8007c9c:	40015000 	.word	0x40015000
 8007ca0:	40023800 	.word	0x40023800
 8007ca4:	40021400 	.word	0x40021400

08007ca8 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b082      	sub	sp, #8
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI5)
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	4a08      	ldr	r2, [pc, #32]	; (8007cd8 <HAL_SPI_MspDeInit+0x30>)
 8007cb6:	4293      	cmp	r3, r2
 8007cb8:	d10a      	bne.n	8007cd0 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8007cba:	4b08      	ldr	r3, [pc, #32]	; (8007cdc <HAL_SPI_MspDeInit+0x34>)
 8007cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cbe:	4a07      	ldr	r2, [pc, #28]	; (8007cdc <HAL_SPI_MspDeInit+0x34>)
 8007cc0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007cc4:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration    
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI 
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8007cc6:	f44f 7160 	mov.w	r1, #896	; 0x380
 8007cca:	4805      	ldr	r0, [pc, #20]	; (8007ce0 <HAL_SPI_MspDeInit+0x38>)
 8007ccc:	f004 fb1c 	bl	800c308 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }
} 
 8007cd0:	bf00      	nop
 8007cd2:	3708      	adds	r7, #8
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	bd80      	pop	{r7, pc}
 8007cd8:	40015000 	.word	0x40015000
 8007cdc:	40023800 	.word	0x40023800
 8007ce0:	40021400 	.word	0x40021400

08007ce4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007ce4:	b480      	push	{r7}
 8007ce6:	b083      	sub	sp, #12
 8007ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007cea:	2300      	movs	r3, #0
 8007cec:	607b      	str	r3, [r7, #4]
 8007cee:	4b10      	ldr	r3, [pc, #64]	; (8007d30 <HAL_MspInit+0x4c>)
 8007cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cf2:	4a0f      	ldr	r2, [pc, #60]	; (8007d30 <HAL_MspInit+0x4c>)
 8007cf4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007cf8:	6453      	str	r3, [r2, #68]	; 0x44
 8007cfa:	4b0d      	ldr	r3, [pc, #52]	; (8007d30 <HAL_MspInit+0x4c>)
 8007cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d02:	607b      	str	r3, [r7, #4]
 8007d04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007d06:	2300      	movs	r3, #0
 8007d08:	603b      	str	r3, [r7, #0]
 8007d0a:	4b09      	ldr	r3, [pc, #36]	; (8007d30 <HAL_MspInit+0x4c>)
 8007d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d0e:	4a08      	ldr	r2, [pc, #32]	; (8007d30 <HAL_MspInit+0x4c>)
 8007d10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d14:	6413      	str	r3, [r2, #64]	; 0x40
 8007d16:	4b06      	ldr	r3, [pc, #24]	; (8007d30 <HAL_MspInit+0x4c>)
 8007d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d1e:	603b      	str	r3, [r7, #0]
 8007d20:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007d22:	bf00      	nop
 8007d24:	370c      	adds	r7, #12
 8007d26:	46bd      	mov	sp, r7
 8007d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2c:	4770      	bx	lr
 8007d2e:	bf00      	nop
 8007d30:	40023800 	.word	0x40023800

08007d34 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b08c      	sub	sp, #48	; 0x30
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8007d40:	2300      	movs	r3, #0
 8007d42:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8007d44:	2200      	movs	r2, #0
 8007d46:	6879      	ldr	r1, [r7, #4]
 8007d48:	2036      	movs	r0, #54	; 0x36
 8007d4a:	f003 fb91 	bl	800b470 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8007d4e:	2036      	movs	r0, #54	; 0x36
 8007d50:	f003 fbaa 	bl	800b4a8 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8007d54:	2300      	movs	r3, #0
 8007d56:	60fb      	str	r3, [r7, #12]
 8007d58:	4b1f      	ldr	r3, [pc, #124]	; (8007dd8 <HAL_InitTick+0xa4>)
 8007d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d5c:	4a1e      	ldr	r2, [pc, #120]	; (8007dd8 <HAL_InitTick+0xa4>)
 8007d5e:	f043 0310 	orr.w	r3, r3, #16
 8007d62:	6413      	str	r3, [r2, #64]	; 0x40
 8007d64:	4b1c      	ldr	r3, [pc, #112]	; (8007dd8 <HAL_InitTick+0xa4>)
 8007d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d68:	f003 0310 	and.w	r3, r3, #16
 8007d6c:	60fb      	str	r3, [r7, #12]
 8007d6e:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8007d70:	f107 0210 	add.w	r2, r7, #16
 8007d74:	f107 0314 	add.w	r3, r7, #20
 8007d78:	4611      	mov	r1, r2
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	f006 fbf2 	bl	800e564 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8007d80:	f006 fbc8 	bl	800e514 <HAL_RCC_GetPCLK1Freq>
 8007d84:	4603      	mov	r3, r0
 8007d86:	005b      	lsls	r3, r3, #1
 8007d88:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8007d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d8c:	4a13      	ldr	r2, [pc, #76]	; (8007ddc <HAL_InitTick+0xa8>)
 8007d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8007d92:	0c9b      	lsrs	r3, r3, #18
 8007d94:	3b01      	subs	r3, #1
 8007d96:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8007d98:	4b11      	ldr	r3, [pc, #68]	; (8007de0 <HAL_InitTick+0xac>)
 8007d9a:	4a12      	ldr	r2, [pc, #72]	; (8007de4 <HAL_InitTick+0xb0>)
 8007d9c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8007d9e:	4b10      	ldr	r3, [pc, #64]	; (8007de0 <HAL_InitTick+0xac>)
 8007da0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8007da4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8007da6:	4a0e      	ldr	r2, [pc, #56]	; (8007de0 <HAL_InitTick+0xac>)
 8007da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007daa:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8007dac:	4b0c      	ldr	r3, [pc, #48]	; (8007de0 <HAL_InitTick+0xac>)
 8007dae:	2200      	movs	r2, #0
 8007db0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007db2:	4b0b      	ldr	r3, [pc, #44]	; (8007de0 <HAL_InitTick+0xac>)
 8007db4:	2200      	movs	r2, #0
 8007db6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8007db8:	4809      	ldr	r0, [pc, #36]	; (8007de0 <HAL_InitTick+0xac>)
 8007dba:	f007 fbcf 	bl	800f55c <HAL_TIM_Base_Init>
 8007dbe:	4603      	mov	r3, r0
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d104      	bne.n	8007dce <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8007dc4:	4806      	ldr	r0, [pc, #24]	; (8007de0 <HAL_InitTick+0xac>)
 8007dc6:	f007 fbf4 	bl	800f5b2 <HAL_TIM_Base_Start_IT>
 8007dca:	4603      	mov	r3, r0
 8007dcc:	e000      	b.n	8007dd0 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8007dce:	2301      	movs	r3, #1
}
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	3730      	adds	r7, #48	; 0x30
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	bd80      	pop	{r7, pc}
 8007dd8:	40023800 	.word	0x40023800
 8007ddc:	431bde83 	.word	0x431bde83
 8007de0:	20000ff4 	.word	0x20000ff4
 8007de4:	40001000 	.word	0x40001000

08007de8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007de8:	b480      	push	{r7}
 8007dea:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8007dec:	bf00      	nop
 8007dee:	46bd      	mov	sp, r7
 8007df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df4:	4770      	bx	lr

08007df6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007df6:	b480      	push	{r7}
 8007df8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007dfa:	e7fe      	b.n	8007dfa <HardFault_Handler+0x4>

08007dfc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007dfc:	b480      	push	{r7}
 8007dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007e00:	e7fe      	b.n	8007e00 <MemManage_Handler+0x4>

08007e02 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007e02:	b480      	push	{r7}
 8007e04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007e06:	e7fe      	b.n	8007e06 <BusFault_Handler+0x4>

08007e08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007e08:	b480      	push	{r7}
 8007e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007e0c:	e7fe      	b.n	8007e0c <UsageFault_Handler+0x4>

08007e0e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007e0e:	b480      	push	{r7}
 8007e10:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007e12:	bf00      	nop
 8007e14:	46bd      	mov	sp, r7
 8007e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1a:	4770      	bx	lr

08007e1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007e1c:	b480      	push	{r7}
 8007e1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007e20:	bf00      	nop
 8007e22:	46bd      	mov	sp, r7
 8007e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e28:	4770      	bx	lr

08007e2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007e2a:	b480      	push	{r7}
 8007e2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007e2e:	bf00      	nop
 8007e30:	46bd      	mov	sp, r7
 8007e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e36:	4770      	bx	lr

08007e38 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8007e3c:	4802      	ldr	r0, [pc, #8]	; (8007e48 <TIM6_DAC_IRQHandler+0x10>)
 8007e3e:	f007 fbdc 	bl	800f5fa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8007e42:	bf00      	nop
 8007e44:	bd80      	pop	{r7, pc}
 8007e46:	bf00      	nop
 8007e48:	20000ff4 	.word	0x20000ff4

08007e4c <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8007e50:	4802      	ldr	r0, [pc, #8]	; (8007e5c <DMA2D_IRQHandler+0x10>)
 8007e52:	f003 fe6e 	bl	800bb32 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8007e56:	bf00      	nop
 8007e58:	bd80      	pop	{r7, pc}
 8007e5a:	bf00      	nop
 8007e5c:	20000e28 	.word	0x20000e28

08007e60 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8007e60:	b480      	push	{r7}
 8007e62:	af00      	add	r7, sp, #0
	return 1;
 8007e64:	2301      	movs	r3, #1
}
 8007e66:	4618      	mov	r0, r3
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6e:	4770      	bx	lr

08007e70 <_kill>:

int _kill(int pid, int sig)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b082      	sub	sp, #8
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
 8007e78:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8007e7a:	f009 f89d 	bl	8010fb8 <__errno>
 8007e7e:	4603      	mov	r3, r0
 8007e80:	2216      	movs	r2, #22
 8007e82:	601a      	str	r2, [r3, #0]
	return -1;
 8007e84:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007e88:	4618      	mov	r0, r3
 8007e8a:	3708      	adds	r7, #8
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	bd80      	pop	{r7, pc}

08007e90 <_exit>:

void _exit (int status)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b082      	sub	sp, #8
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8007e98:	f04f 31ff 	mov.w	r1, #4294967295
 8007e9c:	6878      	ldr	r0, [r7, #4]
 8007e9e:	f7ff ffe7 	bl	8007e70 <_kill>
	while (1) {}		/* Make sure we hang here */
 8007ea2:	e7fe      	b.n	8007ea2 <_exit+0x12>

08007ea4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b086      	sub	sp, #24
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	60f8      	str	r0, [r7, #12]
 8007eac:	60b9      	str	r1, [r7, #8]
 8007eae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	617b      	str	r3, [r7, #20]
 8007eb4:	e00a      	b.n	8007ecc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8007eb6:	f3af 8000 	nop.w
 8007eba:	4601      	mov	r1, r0
 8007ebc:	68bb      	ldr	r3, [r7, #8]
 8007ebe:	1c5a      	adds	r2, r3, #1
 8007ec0:	60ba      	str	r2, [r7, #8]
 8007ec2:	b2ca      	uxtb	r2, r1
 8007ec4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007ec6:	697b      	ldr	r3, [r7, #20]
 8007ec8:	3301      	adds	r3, #1
 8007eca:	617b      	str	r3, [r7, #20]
 8007ecc:	697a      	ldr	r2, [r7, #20]
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	429a      	cmp	r2, r3
 8007ed2:	dbf0      	blt.n	8007eb6 <_read+0x12>
	}

return len;
 8007ed4:	687b      	ldr	r3, [r7, #4]
}
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	3718      	adds	r7, #24
 8007eda:	46bd      	mov	sp, r7
 8007edc:	bd80      	pop	{r7, pc}

08007ede <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8007ede:	b580      	push	{r7, lr}
 8007ee0:	b086      	sub	sp, #24
 8007ee2:	af00      	add	r7, sp, #0
 8007ee4:	60f8      	str	r0, [r7, #12]
 8007ee6:	60b9      	str	r1, [r7, #8]
 8007ee8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007eea:	2300      	movs	r3, #0
 8007eec:	617b      	str	r3, [r7, #20]
 8007eee:	e009      	b.n	8007f04 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8007ef0:	68bb      	ldr	r3, [r7, #8]
 8007ef2:	1c5a      	adds	r2, r3, #1
 8007ef4:	60ba      	str	r2, [r7, #8]
 8007ef6:	781b      	ldrb	r3, [r3, #0]
 8007ef8:	4618      	mov	r0, r3
 8007efa:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007efe:	697b      	ldr	r3, [r7, #20]
 8007f00:	3301      	adds	r3, #1
 8007f02:	617b      	str	r3, [r7, #20]
 8007f04:	697a      	ldr	r2, [r7, #20]
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	429a      	cmp	r2, r3
 8007f0a:	dbf1      	blt.n	8007ef0 <_write+0x12>
	}
	return len;
 8007f0c:	687b      	ldr	r3, [r7, #4]
}
 8007f0e:	4618      	mov	r0, r3
 8007f10:	3718      	adds	r7, #24
 8007f12:	46bd      	mov	sp, r7
 8007f14:	bd80      	pop	{r7, pc}

08007f16 <_close>:

int _close(int file)
{
 8007f16:	b480      	push	{r7}
 8007f18:	b083      	sub	sp, #12
 8007f1a:	af00      	add	r7, sp, #0
 8007f1c:	6078      	str	r0, [r7, #4]
	return -1;
 8007f1e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007f22:	4618      	mov	r0, r3
 8007f24:	370c      	adds	r7, #12
 8007f26:	46bd      	mov	sp, r7
 8007f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2c:	4770      	bx	lr

08007f2e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8007f2e:	b480      	push	{r7}
 8007f30:	b083      	sub	sp, #12
 8007f32:	af00      	add	r7, sp, #0
 8007f34:	6078      	str	r0, [r7, #4]
 8007f36:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007f3e:	605a      	str	r2, [r3, #4]
	return 0;
 8007f40:	2300      	movs	r3, #0
}
 8007f42:	4618      	mov	r0, r3
 8007f44:	370c      	adds	r7, #12
 8007f46:	46bd      	mov	sp, r7
 8007f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4c:	4770      	bx	lr

08007f4e <_isatty>:

int _isatty(int file)
{
 8007f4e:	b480      	push	{r7}
 8007f50:	b083      	sub	sp, #12
 8007f52:	af00      	add	r7, sp, #0
 8007f54:	6078      	str	r0, [r7, #4]
	return 1;
 8007f56:	2301      	movs	r3, #1
}
 8007f58:	4618      	mov	r0, r3
 8007f5a:	370c      	adds	r7, #12
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f62:	4770      	bx	lr

08007f64 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8007f64:	b480      	push	{r7}
 8007f66:	b085      	sub	sp, #20
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	60f8      	str	r0, [r7, #12]
 8007f6c:	60b9      	str	r1, [r7, #8]
 8007f6e:	607a      	str	r2, [r7, #4]
	return 0;
 8007f70:	2300      	movs	r3, #0
}
 8007f72:	4618      	mov	r0, r3
 8007f74:	3714      	adds	r7, #20
 8007f76:	46bd      	mov	sp, r7
 8007f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7c:	4770      	bx	lr
	...

08007f80 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b084      	sub	sp, #16
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8007f88:	4b11      	ldr	r3, [pc, #68]	; (8007fd0 <_sbrk+0x50>)
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d102      	bne.n	8007f96 <_sbrk+0x16>
		heap_end = &end;
 8007f90:	4b0f      	ldr	r3, [pc, #60]	; (8007fd0 <_sbrk+0x50>)
 8007f92:	4a10      	ldr	r2, [pc, #64]	; (8007fd4 <_sbrk+0x54>)
 8007f94:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8007f96:	4b0e      	ldr	r3, [pc, #56]	; (8007fd0 <_sbrk+0x50>)
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8007f9c:	4b0c      	ldr	r3, [pc, #48]	; (8007fd0 <_sbrk+0x50>)
 8007f9e:	681a      	ldr	r2, [r3, #0]
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	4413      	add	r3, r2
 8007fa4:	466a      	mov	r2, sp
 8007fa6:	4293      	cmp	r3, r2
 8007fa8:	d907      	bls.n	8007fba <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8007faa:	f009 f805 	bl	8010fb8 <__errno>
 8007fae:	4603      	mov	r3, r0
 8007fb0:	220c      	movs	r2, #12
 8007fb2:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8007fb4:	f04f 33ff 	mov.w	r3, #4294967295
 8007fb8:	e006      	b.n	8007fc8 <_sbrk+0x48>
	}

	heap_end += incr;
 8007fba:	4b05      	ldr	r3, [pc, #20]	; (8007fd0 <_sbrk+0x50>)
 8007fbc:	681a      	ldr	r2, [r3, #0]
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	4413      	add	r3, r2
 8007fc2:	4a03      	ldr	r2, [pc, #12]	; (8007fd0 <_sbrk+0x50>)
 8007fc4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
}
 8007fc8:	4618      	mov	r0, r3
 8007fca:	3710      	adds	r7, #16
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	bd80      	pop	{r7, pc}
 8007fd0:	20001034 	.word	0x20001034
 8007fd4:	20019e20 	.word	0x20019e20

08007fd8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007fd8:	b480      	push	{r7}
 8007fda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007fdc:	4b08      	ldr	r3, [pc, #32]	; (8008000 <SystemInit+0x28>)
 8007fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fe2:	4a07      	ldr	r2, [pc, #28]	; (8008000 <SystemInit+0x28>)
 8007fe4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007fe8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007fec:	4b04      	ldr	r3, [pc, #16]	; (8008000 <SystemInit+0x28>)
 8007fee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007ff2:	609a      	str	r2, [r3, #8]
#endif
}
 8007ff4:	bf00      	nop
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffc:	4770      	bx	lr
 8007ffe:	bf00      	nop
 8008000:	e000ed00 	.word	0xe000ed00

08008004 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b086      	sub	sp, #24
 8008008:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800800a:	f107 0308 	add.w	r3, r7, #8
 800800e:	2200      	movs	r2, #0
 8008010:	601a      	str	r2, [r3, #0]
 8008012:	605a      	str	r2, [r3, #4]
 8008014:	609a      	str	r2, [r3, #8]
 8008016:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008018:	463b      	mov	r3, r7
 800801a:	2200      	movs	r2, #0
 800801c:	601a      	str	r2, [r3, #0]
 800801e:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 8008020:	4b1e      	ldr	r3, [pc, #120]	; (800809c <MX_TIM1_Init+0x98>)
 8008022:	4a1f      	ldr	r2, [pc, #124]	; (80080a0 <MX_TIM1_Init+0x9c>)
 8008024:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8008026:	4b1d      	ldr	r3, [pc, #116]	; (800809c <MX_TIM1_Init+0x98>)
 8008028:	2200      	movs	r2, #0
 800802a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800802c:	4b1b      	ldr	r3, [pc, #108]	; (800809c <MX_TIM1_Init+0x98>)
 800802e:	2200      	movs	r2, #0
 8008030:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 8008032:	4b1a      	ldr	r3, [pc, #104]	; (800809c <MX_TIM1_Init+0x98>)
 8008034:	2200      	movs	r2, #0
 8008036:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008038:	4b18      	ldr	r3, [pc, #96]	; (800809c <MX_TIM1_Init+0x98>)
 800803a:	2200      	movs	r2, #0
 800803c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800803e:	4b17      	ldr	r3, [pc, #92]	; (800809c <MX_TIM1_Init+0x98>)
 8008040:	2200      	movs	r2, #0
 8008042:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008044:	4b15      	ldr	r3, [pc, #84]	; (800809c <MX_TIM1_Init+0x98>)
 8008046:	2200      	movs	r2, #0
 8008048:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800804a:	4814      	ldr	r0, [pc, #80]	; (800809c <MX_TIM1_Init+0x98>)
 800804c:	f007 fa86 	bl	800f55c <HAL_TIM_Base_Init>
 8008050:	4603      	mov	r3, r0
 8008052:	2b00      	cmp	r3, #0
 8008054:	d001      	beq.n	800805a <MX_TIM1_Init+0x56>
  {
    Error_Handler();
 8008056:	f7ff fda1 	bl	8007b9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800805a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800805e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8008060:	f107 0308 	add.w	r3, r7, #8
 8008064:	4619      	mov	r1, r3
 8008066:	480d      	ldr	r0, [pc, #52]	; (800809c <MX_TIM1_Init+0x98>)
 8008068:	f007 fbcf 	bl	800f80a <HAL_TIM_ConfigClockSource>
 800806c:	4603      	mov	r3, r0
 800806e:	2b00      	cmp	r3, #0
 8008070:	d001      	beq.n	8008076 <MX_TIM1_Init+0x72>
  {
    Error_Handler();
 8008072:	f7ff fd93 	bl	8007b9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008076:	2300      	movs	r3, #0
 8008078:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800807a:	2300      	movs	r3, #0
 800807c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800807e:	463b      	mov	r3, r7
 8008080:	4619      	mov	r1, r3
 8008082:	4806      	ldr	r0, [pc, #24]	; (800809c <MX_TIM1_Init+0x98>)
 8008084:	f007 fde8 	bl	800fc58 <HAL_TIMEx_MasterConfigSynchronization>
 8008088:	4603      	mov	r3, r0
 800808a:	2b00      	cmp	r3, #0
 800808c:	d001      	beq.n	8008092 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 800808e:	f7ff fd85 	bl	8007b9c <Error_Handler>
  }

}
 8008092:	bf00      	nop
 8008094:	3718      	adds	r7, #24
 8008096:	46bd      	mov	sp, r7
 8008098:	bd80      	pop	{r7, pc}
 800809a:	bf00      	nop
 800809c:	20001038 	.word	0x20001038
 80080a0:	40010000 	.word	0x40010000

080080a4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80080a4:	b480      	push	{r7}
 80080a6:	b085      	sub	sp, #20
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	4a0b      	ldr	r2, [pc, #44]	; (80080e0 <HAL_TIM_Base_MspInit+0x3c>)
 80080b2:	4293      	cmp	r3, r2
 80080b4:	d10d      	bne.n	80080d2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80080b6:	2300      	movs	r3, #0
 80080b8:	60fb      	str	r3, [r7, #12]
 80080ba:	4b0a      	ldr	r3, [pc, #40]	; (80080e4 <HAL_TIM_Base_MspInit+0x40>)
 80080bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080be:	4a09      	ldr	r2, [pc, #36]	; (80080e4 <HAL_TIM_Base_MspInit+0x40>)
 80080c0:	f043 0301 	orr.w	r3, r3, #1
 80080c4:	6453      	str	r3, [r2, #68]	; 0x44
 80080c6:	4b07      	ldr	r3, [pc, #28]	; (80080e4 <HAL_TIM_Base_MspInit+0x40>)
 80080c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080ca:	f003 0301 	and.w	r3, r3, #1
 80080ce:	60fb      	str	r3, [r7, #12]
 80080d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80080d2:	bf00      	nop
 80080d4:	3714      	adds	r7, #20
 80080d6:	46bd      	mov	sp, r7
 80080d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080dc:	4770      	bx	lr
 80080de:	bf00      	nop
 80080e0:	40010000 	.word	0x40010000
 80080e4:	40023800 	.word	0x40023800

080080e8 <Read_TouchPanel>:
void Read_Image(void);
void Convert_To_AIIn_Data(void);
void Display_AI_Output(void);
static void Bubblesort(void);

void Read_TouchPanel(void){
 80080e8:	b5b0      	push	{r4, r5, r7, lr}
 80080ea:	b088      	sub	sp, #32
 80080ec:	af00      	add	r7, sp, #0
  static uint32_t x = 0, y = 0;
  static TS_StateTypeDef  TS_State;
  uint8_t bfr[32];

  /* Get Touch screen position */
  BSP_TS_GetState(&TS_State);
 80080ee:	48c2      	ldr	r0, [pc, #776]	; (80083f8 <Read_TouchPanel+0x310>)
 80080f0:	f002 ffee 	bl	800b0d0 <BSP_TS_GetState>

  //Return if not touched
  if(!TS_State.TouchDetected)
 80080f4:	4bc0      	ldr	r3, [pc, #768]	; (80083f8 <Read_TouchPanel+0x310>)
 80080f6:	881b      	ldrh	r3, [r3, #0]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	f000 8198 	beq.w	800842e <Read_TouchPanel+0x346>
	  return;

  /* Read the coordinate */
  x = Calibration_GetX(TS_State.X);
 80080fe:	4bbe      	ldr	r3, [pc, #760]	; (80083f8 <Read_TouchPanel+0x310>)
 8008100:	885b      	ldrh	r3, [r3, #2]
 8008102:	4618      	mov	r0, r3
 8008104:	f000 fdb2 	bl	8008c6c <Calibration_GetX>
 8008108:	4603      	mov	r3, r0
 800810a:	461a      	mov	r2, r3
 800810c:	4bbb      	ldr	r3, [pc, #748]	; (80083fc <Read_TouchPanel+0x314>)
 800810e:	601a      	str	r2, [r3, #0]
  y = Calibration_GetX(TS_State.Y);
 8008110:	4bb9      	ldr	r3, [pc, #740]	; (80083f8 <Read_TouchPanel+0x310>)
 8008112:	889b      	ldrh	r3, [r3, #4]
 8008114:	4618      	mov	r0, r3
 8008116:	f000 fda9 	bl	8008c6c <Calibration_GetX>
 800811a:	4603      	mov	r3, r0
 800811c:	461a      	mov	r2, r3
 800811e:	4bb8      	ldr	r3, [pc, #736]	; (8008400 <Read_TouchPanel+0x318>)
 8008120:	601a      	str	r2, [r3, #0]
  BSP_LCD_SetFont(&Font12);
 8008122:	48b8      	ldr	r0, [pc, #736]	; (8008404 <Read_TouchPanel+0x31c>)
 8008124:	f001 ff52 	bl	8009fcc <BSP_LCD_SetFont>
  sprintf((char*)bfr,"%lu,%lu      ",x,y);
 8008128:	4bb4      	ldr	r3, [pc, #720]	; (80083fc <Read_TouchPanel+0x314>)
 800812a:	681a      	ldr	r2, [r3, #0]
 800812c:	4bb4      	ldr	r3, [pc, #720]	; (8008400 <Read_TouchPanel+0x318>)
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	4638      	mov	r0, r7
 8008132:	49b5      	ldr	r1, [pc, #724]	; (8008408 <Read_TouchPanel+0x320>)
 8008134:	f009 fbfa 	bl	801192c <siprintf>
  BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 8008138:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800813c:	f001 ff2c 	bl	8009f98 <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
 8008140:	f06f 00ff 	mvn.w	r0, #255	; 0xff
 8008144:	f001 ff10 	bl	8009f68 <BSP_LCD_SetTextColor>
  BSP_LCD_DisplayStringAt(3, 300, (uint8_t*)bfr, LEFT_MODE);
 8008148:	463a      	mov	r2, r7
 800814a:	2303      	movs	r3, #3
 800814c:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8008150:	2003      	movs	r0, #3
 8008152:	f002 f867 	bl	800a224 <BSP_LCD_DisplayStringAt>
  BSP_LCD_SetFont(&Font16);
 8008156:	48ad      	ldr	r0, [pc, #692]	; (800840c <Read_TouchPanel+0x324>)
 8008158:	f001 ff38 	bl	8009fcc <BSP_LCD_SetFont>
  //Draw in the box
  if (( x > ((BSP_LCD_GetXSize()/2)-(WINDOWS_WITH/2)+1 + radius)) & (y > 46+radius) & ( x < (BSP_LCD_GetXSize()-((BSP_LCD_GetXSize()/2)-(WINDOWS_WITH/2)-1  + radius )) ) & ( y < 45+WINDOWS_HEIGHT-radius))
 800815c:	f001 fe66 	bl	8009e2c <BSP_LCD_GetXSize>
 8008160:	4603      	mov	r3, r0
 8008162:	085a      	lsrs	r2, r3, #1
 8008164:	4baa      	ldr	r3, [pc, #680]	; (8008410 <Read_TouchPanel+0x328>)
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	4413      	add	r3, r2
 800816a:	f1a3 0245 	sub.w	r2, r3, #69	; 0x45
 800816e:	4ba3      	ldr	r3, [pc, #652]	; (80083fc <Read_TouchPanel+0x314>)
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	429a      	cmp	r2, r3
 8008174:	bf34      	ite	cc
 8008176:	2301      	movcc	r3, #1
 8008178:	2300      	movcs	r3, #0
 800817a:	b2da      	uxtb	r2, r3
 800817c:	4ba4      	ldr	r3, [pc, #656]	; (8008410 <Read_TouchPanel+0x328>)
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	f103 012e 	add.w	r1, r3, #46	; 0x2e
 8008184:	4b9e      	ldr	r3, [pc, #632]	; (8008400 <Read_TouchPanel+0x318>)
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	4299      	cmp	r1, r3
 800818a:	bf34      	ite	cc
 800818c:	2301      	movcc	r3, #1
 800818e:	2300      	movcs	r3, #0
 8008190:	b2db      	uxtb	r3, r3
 8008192:	4013      	ands	r3, r2
 8008194:	b2db      	uxtb	r3, r3
 8008196:	461d      	mov	r5, r3
 8008198:	f001 fe48 	bl	8009e2c <BSP_LCD_GetXSize>
 800819c:	4604      	mov	r4, r0
 800819e:	f001 fe45 	bl	8009e2c <BSP_LCD_GetXSize>
 80081a2:	4603      	mov	r3, r0
 80081a4:	085a      	lsrs	r2, r3, #1
 80081a6:	4b9a      	ldr	r3, [pc, #616]	; (8008410 <Read_TouchPanel+0x328>)
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	4413      	add	r3, r2
 80081ac:	1ae3      	subs	r3, r4, r3
 80081ae:	f103 0247 	add.w	r2, r3, #71	; 0x47
 80081b2:	4b92      	ldr	r3, [pc, #584]	; (80083fc <Read_TouchPanel+0x314>)
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	429a      	cmp	r2, r3
 80081b8:	bf8c      	ite	hi
 80081ba:	2301      	movhi	r3, #1
 80081bc:	2300      	movls	r3, #0
 80081be:	b2db      	uxtb	r3, r3
 80081c0:	402b      	ands	r3, r5
 80081c2:	4a93      	ldr	r2, [pc, #588]	; (8008410 <Read_TouchPanel+0x328>)
 80081c4:	6812      	ldr	r2, [r2, #0]
 80081c6:	f1c2 01b9 	rsb	r1, r2, #185	; 0xb9
 80081ca:	4a8d      	ldr	r2, [pc, #564]	; (8008400 <Read_TouchPanel+0x318>)
 80081cc:	6812      	ldr	r2, [r2, #0]
 80081ce:	4291      	cmp	r1, r2
 80081d0:	bf8c      	ite	hi
 80081d2:	2201      	movhi	r2, #1
 80081d4:	2200      	movls	r2, #0
 80081d6:	b2d2      	uxtb	r2, r2
 80081d8:	4013      	ands	r3, r2
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d010      	beq.n	8008200 <Read_TouchPanel+0x118>
   {
	 BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80081de:	f04f 30ff 	mov.w	r0, #4294967295
 80081e2:	f001 fec1 	bl	8009f68 <BSP_LCD_SetTextColor>
     BSP_LCD_FillCircle((x), (y), 4);
 80081e6:	4b85      	ldr	r3, [pc, #532]	; (80083fc <Read_TouchPanel+0x314>)
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	b29b      	uxth	r3, r3
 80081ec:	4a84      	ldr	r2, [pc, #528]	; (8008400 <Read_TouchPanel+0x318>)
 80081ee:	6812      	ldr	r2, [r2, #0]
 80081f0:	b291      	uxth	r1, r2
 80081f2:	2204      	movs	r2, #4
 80081f4:	4618      	mov	r0, r3
 80081f6:	f002 fac9 	bl	800a78c <BSP_LCD_FillCircle>
     //BSP_LED_On(LED3);
     BSP_LED_Off(LED4);
 80081fa:	2001      	movs	r0, #1
 80081fc:	f001 fa1c 	bl	8009638 <BSP_LED_Off>
   }

  //Read Clear Bu Button
  if((x>177) && (x < 200) && (y>187)&&(y<210)){
 8008200:	4b7e      	ldr	r3, [pc, #504]	; (80083fc <Read_TouchPanel+0x314>)
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	2bb1      	cmp	r3, #177	; 0xb1
 8008206:	f240 8083 	bls.w	8008310 <Read_TouchPanel+0x228>
 800820a:	4b7c      	ldr	r3, [pc, #496]	; (80083fc <Read_TouchPanel+0x314>)
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	2bc7      	cmp	r3, #199	; 0xc7
 8008210:	d87e      	bhi.n	8008310 <Read_TouchPanel+0x228>
 8008212:	4b7b      	ldr	r3, [pc, #492]	; (8008400 <Read_TouchPanel+0x318>)
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	2bbb      	cmp	r3, #187	; 0xbb
 8008218:	d97a      	bls.n	8008310 <Read_TouchPanel+0x228>
 800821a:	4b79      	ldr	r3, [pc, #484]	; (8008400 <Read_TouchPanel+0x318>)
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	2bd1      	cmp	r3, #209	; 0xd1
 8008220:	d876      	bhi.n	8008310 <Read_TouchPanel+0x228>
	  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8008222:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8008226:	f001 fe9f 	bl	8009f68 <BSP_LCD_SetTextColor>
	  BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 800822a:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800822e:	f001 feb3 	bl	8009f98 <BSP_LCD_SetBackColor>
	  BSP_LCD_FillCircle((BSP_LCD_GetXSize()/2)+(WINDOWS_WITH/2)-1,WINDOWS_HEIGHT+65, 15);
 8008232:	f001 fdfb 	bl	8009e2c <BSP_LCD_GetXSize>
 8008236:	4603      	mov	r3, r0
 8008238:	085b      	lsrs	r3, r3, #1
 800823a:	b29b      	uxth	r3, r3
 800823c:	3345      	adds	r3, #69	; 0x45
 800823e:	b29b      	uxth	r3, r3
 8008240:	220f      	movs	r2, #15
 8008242:	21cd      	movs	r1, #205	; 0xcd
 8008244:	4618      	mov	r0, r3
 8008246:	f002 faa1 	bl	800a78c <BSP_LCD_FillCircle>

	  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800824a:	f04f 30ff 	mov.w	r0, #4294967295
 800824e:	f001 fe8b 	bl	8009f68 <BSP_LCD_SetTextColor>
	  BSP_LCD_DrawCircle((BSP_LCD_GetXSize()/2)+(WINDOWS_WITH/2)-1,WINDOWS_HEIGHT+65, 15);
 8008252:	f001 fdeb 	bl	8009e2c <BSP_LCD_GetXSize>
 8008256:	4603      	mov	r3, r0
 8008258:	085b      	lsrs	r3, r3, #1
 800825a:	b29b      	uxth	r3, r3
 800825c:	3345      	adds	r3, #69	; 0x45
 800825e:	b29b      	uxth	r3, r3
 8008260:	220f      	movs	r2, #15
 8008262:	21cd      	movs	r1, #205	; 0xcd
 8008264:	4618      	mov	r0, r3
 8008266:	f002 f94d 	bl	800a504 <BSP_LCD_DrawCircle>
	  BSP_LCD_DisplayStringAt((BSP_LCD_GetXSize()/2)+(WINDOWS_WITH/2)-1-10,WINDOWS_HEIGHT+60,(uint8_t*)"CL",LEFT_MODE);
 800826a:	f001 fddf 	bl	8009e2c <BSP_LCD_GetXSize>
 800826e:	4603      	mov	r3, r0
 8008270:	085b      	lsrs	r3, r3, #1
 8008272:	b29b      	uxth	r3, r3
 8008274:	333b      	adds	r3, #59	; 0x3b
 8008276:	b298      	uxth	r0, r3
 8008278:	2303      	movs	r3, #3
 800827a:	4a66      	ldr	r2, [pc, #408]	; (8008414 <Read_TouchPanel+0x32c>)
 800827c:	21c8      	movs	r1, #200	; 0xc8
 800827e:	f001 ffd1 	bl	800a224 <BSP_LCD_DisplayStringAt>

	  HAL_Delay(100);
 8008282:	2064      	movs	r0, #100	; 0x64
 8008284:	f003 f818 	bl	800b2b8 <HAL_Delay>
	  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8008288:	f04f 30ff 	mov.w	r0, #4294967295
 800828c:	f001 fe6c 	bl	8009f68 <BSP_LCD_SetTextColor>
	  BSP_LCD_FillCircle((BSP_LCD_GetXSize()/2)+(WINDOWS_WITH/2)-1,WINDOWS_HEIGHT+65, 15);
 8008290:	f001 fdcc 	bl	8009e2c <BSP_LCD_GetXSize>
 8008294:	4603      	mov	r3, r0
 8008296:	085b      	lsrs	r3, r3, #1
 8008298:	b29b      	uxth	r3, r3
 800829a:	3345      	adds	r3, #69	; 0x45
 800829c:	b29b      	uxth	r3, r3
 800829e:	220f      	movs	r2, #15
 80082a0:	21cd      	movs	r1, #205	; 0xcd
 80082a2:	4618      	mov	r0, r3
 80082a4:	f002 fa72 	bl	800a78c <BSP_LCD_FillCircle>
	  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80082a8:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80082ac:	f001 fe5c 	bl	8009f68 <BSP_LCD_SetTextColor>
	  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 80082b0:	f04f 30ff 	mov.w	r0, #4294967295
 80082b4:	f001 fe70 	bl	8009f98 <BSP_LCD_SetBackColor>
	  BSP_LCD_DisplayStringAt((BSP_LCD_GetXSize()/2)+(WINDOWS_WITH/2)-1-10,WINDOWS_HEIGHT+60,(uint8_t*)"CL",LEFT_MODE);
 80082b8:	f001 fdb8 	bl	8009e2c <BSP_LCD_GetXSize>
 80082bc:	4603      	mov	r3, r0
 80082be:	085b      	lsrs	r3, r3, #1
 80082c0:	b29b      	uxth	r3, r3
 80082c2:	333b      	adds	r3, #59	; 0x3b
 80082c4:	b298      	uxth	r0, r3
 80082c6:	2303      	movs	r3, #3
 80082c8:	4a52      	ldr	r2, [pc, #328]	; (8008414 <Read_TouchPanel+0x32c>)
 80082ca:	21c8      	movs	r1, #200	; 0xc8
 80082cc:	f001 ffaa 	bl	800a224 <BSP_LCD_DisplayStringAt>

	  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80082d0:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80082d4:	f001 fe48 	bl	8009f68 <BSP_LCD_SetTextColor>
	  BSP_LCD_FillRect((BSP_LCD_GetXSize()/2)-(WINDOWS_WITH/2)-1, 45, WINDOWS_WITH+2, WINDOWS_HEIGHT+2);
 80082d8:	f001 fda8 	bl	8009e2c <BSP_LCD_GetXSize>
 80082dc:	4603      	mov	r3, r0
 80082de:	085b      	lsrs	r3, r3, #1
 80082e0:	b29b      	uxth	r3, r3
 80082e2:	3b47      	subs	r3, #71	; 0x47
 80082e4:	b298      	uxth	r0, r3
 80082e6:	238e      	movs	r3, #142	; 0x8e
 80082e8:	228e      	movs	r2, #142	; 0x8e
 80082ea:	212d      	movs	r1, #45	; 0x2d
 80082ec:	f002 f9f4 	bl	800a6d8 <BSP_LCD_FillRect>

	  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80082f0:	f04f 30ff 	mov.w	r0, #4294967295
 80082f4:	f001 fe38 	bl	8009f68 <BSP_LCD_SetTextColor>
	  BSP_LCD_DrawRect((BSP_LCD_GetXSize()/2)-(WINDOWS_WITH/2)-1, 45, WINDOWS_WITH+2, WINDOWS_HEIGHT+2);
 80082f8:	f001 fd98 	bl	8009e2c <BSP_LCD_GetXSize>
 80082fc:	4603      	mov	r3, r0
 80082fe:	085b      	lsrs	r3, r3, #1
 8008300:	b29b      	uxth	r3, r3
 8008302:	3b47      	subs	r3, #71	; 0x47
 8008304:	b298      	uxth	r0, r3
 8008306:	238e      	movs	r3, #142	; 0x8e
 8008308:	228e      	movs	r2, #142	; 0x8e
 800830a:	212d      	movs	r1, #45	; 0x2d
 800830c:	f002 f8c8 	bl	800a4a0 <BSP_LCD_DrawRect>

  }

  //Read OK Button
  if((x>144) && (x < 169) && (y>187)&&(y<210)){
 8008310:	4b3a      	ldr	r3, [pc, #232]	; (80083fc <Read_TouchPanel+0x314>)
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	2b90      	cmp	r3, #144	; 0x90
 8008316:	f240 808b 	bls.w	8008430 <Read_TouchPanel+0x348>
 800831a:	4b38      	ldr	r3, [pc, #224]	; (80083fc <Read_TouchPanel+0x314>)
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	2ba8      	cmp	r3, #168	; 0xa8
 8008320:	f200 8086 	bhi.w	8008430 <Read_TouchPanel+0x348>
 8008324:	4b36      	ldr	r3, [pc, #216]	; (8008400 <Read_TouchPanel+0x318>)
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	2bbb      	cmp	r3, #187	; 0xbb
 800832a:	f240 8081 	bls.w	8008430 <Read_TouchPanel+0x348>
 800832e:	4b34      	ldr	r3, [pc, #208]	; (8008400 <Read_TouchPanel+0x318>)
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	2bd1      	cmp	r3, #209	; 0xd1
 8008334:	d87c      	bhi.n	8008430 <Read_TouchPanel+0x348>
	  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8008336:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800833a:	f001 fe15 	bl	8009f68 <BSP_LCD_SetTextColor>
	  BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 800833e:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8008342:	f001 fe29 	bl	8009f98 <BSP_LCD_SetBackColor>
	  BSP_LCD_FillCircle((BSP_LCD_GetXSize()/2)+(WINDOWS_WITH/2)-1-35,WINDOWS_HEIGHT+65, 15);
 8008346:	f001 fd71 	bl	8009e2c <BSP_LCD_GetXSize>
 800834a:	4603      	mov	r3, r0
 800834c:	085b      	lsrs	r3, r3, #1
 800834e:	b29b      	uxth	r3, r3
 8008350:	3322      	adds	r3, #34	; 0x22
 8008352:	b29b      	uxth	r3, r3
 8008354:	220f      	movs	r2, #15
 8008356:	21cd      	movs	r1, #205	; 0xcd
 8008358:	4618      	mov	r0, r3
 800835a:	f002 fa17 	bl	800a78c <BSP_LCD_FillCircle>

	  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800835e:	f04f 30ff 	mov.w	r0, #4294967295
 8008362:	f001 fe01 	bl	8009f68 <BSP_LCD_SetTextColor>
	  BSP_LCD_DrawCircle((BSP_LCD_GetXSize()/2)+(WINDOWS_WITH/2)-1-35,WINDOWS_HEIGHT+65, 15);
 8008366:	f001 fd61 	bl	8009e2c <BSP_LCD_GetXSize>
 800836a:	4603      	mov	r3, r0
 800836c:	085b      	lsrs	r3, r3, #1
 800836e:	b29b      	uxth	r3, r3
 8008370:	3322      	adds	r3, #34	; 0x22
 8008372:	b29b      	uxth	r3, r3
 8008374:	220f      	movs	r2, #15
 8008376:	21cd      	movs	r1, #205	; 0xcd
 8008378:	4618      	mov	r0, r3
 800837a:	f002 f8c3 	bl	800a504 <BSP_LCD_DrawCircle>
	  BSP_LCD_DisplayStringAt((BSP_LCD_GetXSize()/2)+(WINDOWS_WITH/2)-1-45,WINDOWS_HEIGHT+60,(uint8_t*)"OK",LEFT_MODE);
 800837e:	f001 fd55 	bl	8009e2c <BSP_LCD_GetXSize>
 8008382:	4603      	mov	r3, r0
 8008384:	085b      	lsrs	r3, r3, #1
 8008386:	b29b      	uxth	r3, r3
 8008388:	3318      	adds	r3, #24
 800838a:	b298      	uxth	r0, r3
 800838c:	2303      	movs	r3, #3
 800838e:	4a22      	ldr	r2, [pc, #136]	; (8008418 <Read_TouchPanel+0x330>)
 8008390:	21c8      	movs	r1, #200	; 0xc8
 8008392:	f001 ff47 	bl	800a224 <BSP_LCD_DisplayStringAt>

	  HAL_Delay(100);
 8008396:	2064      	movs	r0, #100	; 0x64
 8008398:	f002 ff8e 	bl	800b2b8 <HAL_Delay>
	  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800839c:	f04f 30ff 	mov.w	r0, #4294967295
 80083a0:	f001 fde2 	bl	8009f68 <BSP_LCD_SetTextColor>
	  BSP_LCD_FillCircle((BSP_LCD_GetXSize()/2)+(WINDOWS_WITH/2)-1-35,WINDOWS_HEIGHT+65, 15);
 80083a4:	f001 fd42 	bl	8009e2c <BSP_LCD_GetXSize>
 80083a8:	4603      	mov	r3, r0
 80083aa:	085b      	lsrs	r3, r3, #1
 80083ac:	b29b      	uxth	r3, r3
 80083ae:	3322      	adds	r3, #34	; 0x22
 80083b0:	b29b      	uxth	r3, r3
 80083b2:	220f      	movs	r2, #15
 80083b4:	21cd      	movs	r1, #205	; 0xcd
 80083b6:	4618      	mov	r0, r3
 80083b8:	f002 f9e8 	bl	800a78c <BSP_LCD_FillCircle>
	  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80083bc:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80083c0:	f001 fdd2 	bl	8009f68 <BSP_LCD_SetTextColor>
	  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 80083c4:	f04f 30ff 	mov.w	r0, #4294967295
 80083c8:	f001 fde6 	bl	8009f98 <BSP_LCD_SetBackColor>
	  BSP_LCD_DisplayStringAt((BSP_LCD_GetXSize()/2)+(WINDOWS_WITH/2)-1-45,WINDOWS_HEIGHT+60,(uint8_t*)"OK",LEFT_MODE);
 80083cc:	f001 fd2e 	bl	8009e2c <BSP_LCD_GetXSize>
 80083d0:	4603      	mov	r3, r0
 80083d2:	085b      	lsrs	r3, r3, #1
 80083d4:	b29b      	uxth	r3, r3
 80083d6:	3318      	adds	r3, #24
 80083d8:	b298      	uxth	r0, r3
 80083da:	2303      	movs	r3, #3
 80083dc:	4a0e      	ldr	r2, [pc, #56]	; (8008418 <Read_TouchPanel+0x330>)
 80083de:	21c8      	movs	r1, #200	; 0xc8
 80083e0:	f001 ff20 	bl	800a224 <BSP_LCD_DisplayStringAt>

	  Read_Image();
 80083e4:	f000 f82a 	bl	800843c <Read_Image>
	  Convert_To_AIIn_Data();
 80083e8:	f000 f87c 	bl	80084e4 <Convert_To_AIIn_Data>
	  ai_status  = aiRun(in_data, out_data);
 80083ec:	490b      	ldr	r1, [pc, #44]	; (800841c <Read_TouchPanel+0x334>)
 80083ee:	480c      	ldr	r0, [pc, #48]	; (8008420 <Read_TouchPanel+0x338>)
 80083f0:	f008 fb7e 	bl	8010af0 <aiRun>
 80083f4:	4603      	mov	r3, r0
 80083f6:	e015      	b.n	8008424 <Read_TouchPanel+0x33c>
 80083f8:	20002974 	.word	0x20002974
 80083fc:	2000297c 	.word	0x2000297c
 8008400:	20002980 	.word	0x20002980
 8008404:	200000ac 	.word	0x200000ac
 8008408:	08016c78 	.word	0x08016c78
 800840c:	200000b4 	.word	0x200000b4
 8008410:	20000004 	.word	0x20000004
 8008414:	08016c88 	.word	0x08016c88
 8008418:	08016c8c 	.word	0x08016c8c
 800841c:	20001cb8 	.word	0x20001cb8
 8008420:	20001078 	.word	0x20001078
 8008424:	4a04      	ldr	r2, [pc, #16]	; (8008438 <Read_TouchPanel+0x350>)
 8008426:	6013      	str	r3, [r2, #0]
	  Display_AI_Output();
 8008428:	f000 f890 	bl	800854c <Display_AI_Output>
 800842c:	e000      	b.n	8008430 <Read_TouchPanel+0x348>
	  return;
 800842e:	bf00      	nop
  }


}
 8008430:	3720      	adds	r7, #32
 8008432:	46bd      	mov	sp, r7
 8008434:	bdb0      	pop	{r4, r5, r7, pc}
 8008436:	bf00      	nop
 8008438:	20002920 	.word	0x20002920

0800843c <Read_Image>:

void Read_Image(void){
 800843c:	b580      	push	{r7, lr}
 800843e:	b086      	sub	sp, #24
 8008440:	af00      	add	r7, sp, #0
	uint32_t tmp;
	float tmpflt;



	x=0;
 8008442:	2300      	movs	r3, #0
 8008444:	81fb      	strh	r3, [r7, #14]
	//	BSP_LCD_DrawRect((BSP_LCD_GetXSize()/2)-(WINDOWS_WITH/2)-1, 45, WINDOWS_WITH+2, WINDOWS_HEIGHT+2);
	for(ysrc=45+1;ysrc<45+1+WINDOWS_HEIGHT;ysrc+=5){
 8008446:	232e      	movs	r3, #46	; 0x2e
 8008448:	823b      	strh	r3, [r7, #16]
 800844a:	e03e      	b.n	80084ca <Read_Image+0x8e>
		for(xsrc=49+1;xsrc<49+1+WINDOWS_WITH;xsrc+=5){
 800844c:	2332      	movs	r3, #50	; 0x32
 800844e:	827b      	strh	r3, [r7, #18]
 8008450:	e035      	b.n	80084be <Read_Image+0x82>
			for(ypos=0;ypos<5;ypos++){
 8008452:	2300      	movs	r3, #0
 8008454:	82bb      	strh	r3, [r7, #20]
 8008456:	e019      	b.n	800848c <Read_Image+0x50>
				for(xpos=0;xpos<5;xpos++){
 8008458:	2300      	movs	r3, #0
 800845a:	82fb      	strh	r3, [r7, #22]
 800845c:	e010      	b.n	8008480 <Read_Image+0x44>
					tmp = BSP_LCD_ReadPixel(xsrc+xpos, ysrc+ypos) & 0xFF;
 800845e:	8a7a      	ldrh	r2, [r7, #18]
 8008460:	8afb      	ldrh	r3, [r7, #22]
 8008462:	4413      	add	r3, r2
 8008464:	b298      	uxth	r0, r3
 8008466:	8a3a      	ldrh	r2, [r7, #16]
 8008468:	8abb      	ldrh	r3, [r7, #20]
 800846a:	4413      	add	r3, r2
 800846c:	b29b      	uxth	r3, r3
 800846e:	4619      	mov	r1, r3
 8008470:	f001 fdc6 	bl	800a000 <BSP_LCD_ReadPixel>
 8008474:	4603      	mov	r3, r0
 8008476:	b2db      	uxtb	r3, r3
 8008478:	60bb      	str	r3, [r7, #8]
				for(xpos=0;xpos<5;xpos++){
 800847a:	8afb      	ldrh	r3, [r7, #22]
 800847c:	3301      	adds	r3, #1
 800847e:	82fb      	strh	r3, [r7, #22]
 8008480:	8afb      	ldrh	r3, [r7, #22]
 8008482:	2b04      	cmp	r3, #4
 8008484:	d9eb      	bls.n	800845e <Read_Image+0x22>
			for(ypos=0;ypos<5;ypos++){
 8008486:	8abb      	ldrh	r3, [r7, #20]
 8008488:	3301      	adds	r3, #1
 800848a:	82bb      	strh	r3, [r7, #20]
 800848c:	8abb      	ldrh	r3, [r7, #20]
 800848e:	2b04      	cmp	r3, #4
 8008490:	d9e2      	bls.n	8008458 <Read_Image+0x1c>
				}
			}
			tmpflt = tmp/255;
 8008492:	68bb      	ldr	r3, [r7, #8]
 8008494:	4a11      	ldr	r2, [pc, #68]	; (80084dc <Read_Image+0xa0>)
 8008496:	fba2 2303 	umull	r2, r3, r2, r3
 800849a:	09db      	lsrs	r3, r3, #7
 800849c:	ee07 3a90 	vmov	s15, r3
 80084a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084a4:	edc7 7a01 	vstr	s15, [r7, #4]
			Digit_Data[x++]=tmpflt;
 80084a8:	89fb      	ldrh	r3, [r7, #14]
 80084aa:	1c5a      	adds	r2, r3, #1
 80084ac:	81fa      	strh	r2, [r7, #14]
 80084ae:	4a0c      	ldr	r2, [pc, #48]	; (80084e0 <Read_Image+0xa4>)
 80084b0:	009b      	lsls	r3, r3, #2
 80084b2:	4413      	add	r3, r2
 80084b4:	687a      	ldr	r2, [r7, #4]
 80084b6:	601a      	str	r2, [r3, #0]
		for(xsrc=49+1;xsrc<49+1+WINDOWS_WITH;xsrc+=5){
 80084b8:	8a7b      	ldrh	r3, [r7, #18]
 80084ba:	3305      	adds	r3, #5
 80084bc:	827b      	strh	r3, [r7, #18]
 80084be:	8a7b      	ldrh	r3, [r7, #18]
 80084c0:	2bbd      	cmp	r3, #189	; 0xbd
 80084c2:	d9c6      	bls.n	8008452 <Read_Image+0x16>
	for(ysrc=45+1;ysrc<45+1+WINDOWS_HEIGHT;ysrc+=5){
 80084c4:	8a3b      	ldrh	r3, [r7, #16]
 80084c6:	3305      	adds	r3, #5
 80084c8:	823b      	strh	r3, [r7, #16]
 80084ca:	8a3b      	ldrh	r3, [r7, #16]
 80084cc:	2bb9      	cmp	r3, #185	; 0xb9
 80084ce:	d9bd      	bls.n	800844c <Read_Image+0x10>
		}
	}
}
 80084d0:	bf00      	nop
 80084d2:	bf00      	nop
 80084d4:	3718      	adds	r7, #24
 80084d6:	46bd      	mov	sp, r7
 80084d8:	bd80      	pop	{r7, pc}
 80084da:	bf00      	nop
 80084dc:	80808081 	.word	0x80808081
 80084e0:	20001ce0 	.word	0x20001ce0

080084e4 <Convert_To_AIIn_Data>:

void Convert_To_AIIn_Data(void){
 80084e4:	b480      	push	{r7}
 80084e6:	b085      	sub	sp, #20
 80084e8:	af00      	add	r7, sp, #0
	uint16_t i,x,j;

	x=0;
 80084ea:	2300      	movs	r3, #0
 80084ec:	81bb      	strh	r3, [r7, #12]
	for(i=0;i<784;i++){
 80084ee:	2300      	movs	r3, #0
 80084f0:	81fb      	strh	r3, [r7, #14]
 80084f2:	e01b      	b.n	800852c <Convert_To_AIIn_Data+0x48>
		uint8_t* bfr=(uint8_t*)(void*)&Digit_Data[i];
 80084f4:	89fb      	ldrh	r3, [r7, #14]
 80084f6:	009b      	lsls	r3, r3, #2
 80084f8:	4a12      	ldr	r2, [pc, #72]	; (8008544 <Convert_To_AIIn_Data+0x60>)
 80084fa:	4413      	add	r3, r2
 80084fc:	607b      	str	r3, [r7, #4]
	   	for(j=0;j<4;j++){
 80084fe:	2300      	movs	r3, #0
 8008500:	817b      	strh	r3, [r7, #10]
 8008502:	e00d      	b.n	8008520 <Convert_To_AIIn_Data+0x3c>
	   		//x++;
	   		in_data[x++]=bfr[j];
 8008504:	897b      	ldrh	r3, [r7, #10]
 8008506:	687a      	ldr	r2, [r7, #4]
 8008508:	4413      	add	r3, r2
 800850a:	7819      	ldrb	r1, [r3, #0]
 800850c:	89bb      	ldrh	r3, [r7, #12]
 800850e:	1c5a      	adds	r2, r3, #1
 8008510:	81ba      	strh	r2, [r7, #12]
 8008512:	461a      	mov	r2, r3
 8008514:	b249      	sxtb	r1, r1
 8008516:	4b0c      	ldr	r3, [pc, #48]	; (8008548 <Convert_To_AIIn_Data+0x64>)
 8008518:	5499      	strb	r1, [r3, r2]
	   	for(j=0;j<4;j++){
 800851a:	897b      	ldrh	r3, [r7, #10]
 800851c:	3301      	adds	r3, #1
 800851e:	817b      	strh	r3, [r7, #10]
 8008520:	897b      	ldrh	r3, [r7, #10]
 8008522:	2b03      	cmp	r3, #3
 8008524:	d9ee      	bls.n	8008504 <Convert_To_AIIn_Data+0x20>
	for(i=0;i<784;i++){
 8008526:	89fb      	ldrh	r3, [r7, #14]
 8008528:	3301      	adds	r3, #1
 800852a:	81fb      	strh	r3, [r7, #14]
 800852c:	89fb      	ldrh	r3, [r7, #14]
 800852e:	f5b3 7f44 	cmp.w	r3, #784	; 0x310
 8008532:	d3df      	bcc.n	80084f4 <Convert_To_AIIn_Data+0x10>
	   	}
	}
}
 8008534:	bf00      	nop
 8008536:	bf00      	nop
 8008538:	3714      	adds	r7, #20
 800853a:	46bd      	mov	sp, r7
 800853c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008540:	4770      	bx	lr
 8008542:	bf00      	nop
 8008544:	20001ce0 	.word	0x20001ce0
 8008548:	20001078 	.word	0x20001078

0800854c <Display_AI_Output>:

void Display_AI_Output(void){
 800854c:	b590      	push	{r4, r7, lr}
 800854e:	b0a9      	sub	sp, #164	; 0xa4
 8008550:	af02      	add	r7, sp, #8
	uint32_t u32dummy;
	uint16_t i,j,x=0;
 8008552:	2300      	movs	r3, #0
 8008554:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
	float dummyfloat;
	uint8_t lcdbfr[128];

	BSP_LCD_SetFont(&Font20);
 8008558:	4854      	ldr	r0, [pc, #336]	; (80086ac <Display_AI_Output+0x160>)
 800855a:	f001 fd37 	bl	8009fcc <BSP_LCD_SetFont>

	BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 800855e:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8008562:	f001 fd19 	bl	8009f98 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
 8008566:	f06f 00ff 	mvn.w	r0, #255	; 0xff
 800856a:	f001 fcfd 	bl	8009f68 <BSP_LCD_SetTextColor>

	  if(!ai_status){
 800856e:	4b50      	ldr	r3, [pc, #320]	; (80086b0 <Display_AI_Output+0x164>)
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	2b00      	cmp	r3, #0
 8008574:	f040 808f 	bne.w	8008696 <Display_AI_Output+0x14a>
		  BSP_LCD_DisplayStringAt(2, 80+WINDOWS_HEIGHT, (uint8_t*)"PREDICTION:",LEFT_MODE);
 8008578:	2303      	movs	r3, #3
 800857a:	4a4e      	ldr	r2, [pc, #312]	; (80086b4 <Display_AI_Output+0x168>)
 800857c:	21dc      	movs	r1, #220	; 0xdc
 800857e:	2002      	movs	r0, #2
 8008580:	f001 fe50 	bl	800a224 <BSP_LCD_DisplayStringAt>

			for(i=0;i<10;i++){
 8008584:	2300      	movs	r3, #0
 8008586:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 800858a:	e060      	b.n	800864e <Display_AI_Output+0x102>
				uint8_t* p = (uint8_t*)(void*)&dummyfloat;
 800858c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8008590:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
				u32dummy = (uint8_t)out_data[x+3];
 8008594:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8008598:	3303      	adds	r3, #3
 800859a:	4a47      	ldr	r2, [pc, #284]	; (80086b8 <Display_AI_Output+0x16c>)
 800859c:	56d3      	ldrsb	r3, [r2, r3]
 800859e:	b2db      	uxtb	r3, r3
 80085a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
				u32dummy = (u32dummy << 8)|(uint8_t)out_data[x+2];
 80085a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80085a8:	021b      	lsls	r3, r3, #8
 80085aa:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 80085ae:	3202      	adds	r2, #2
 80085b0:	4941      	ldr	r1, [pc, #260]	; (80086b8 <Display_AI_Output+0x16c>)
 80085b2:	568a      	ldrsb	r2, [r1, r2]
 80085b4:	b2d2      	uxtb	r2, r2
 80085b6:	4313      	orrs	r3, r2
 80085b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
				u32dummy = (u32dummy << 8)|(uint8_t)out_data[x+1];
 80085bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80085c0:	021b      	lsls	r3, r3, #8
 80085c2:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 80085c6:	3201      	adds	r2, #1
 80085c8:	493b      	ldr	r1, [pc, #236]	; (80086b8 <Display_AI_Output+0x16c>)
 80085ca:	568a      	ldrsb	r2, [r1, r2]
 80085cc:	b2d2      	uxtb	r2, r2
 80085ce:	4313      	orrs	r3, r2
 80085d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
				u32dummy = (u32dummy << 8)|(uint8_t)out_data[x];
 80085d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80085d8:	021b      	lsls	r3, r3, #8
 80085da:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 80085de:	4936      	ldr	r1, [pc, #216]	; (80086b8 <Display_AI_Output+0x16c>)
 80085e0:	568a      	ldrsb	r2, [r1, r2]
 80085e2:	b2d2      	uxtb	r2, r2
 80085e4:	4313      	orrs	r3, r2
 80085e6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
				x+=4;
 80085ea:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80085ee:	3304      	adds	r3, #4
 80085f0:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
				for(j=0;j<4;j++){
 80085f4:	2300      	movs	r3, #0
 80085f6:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 80085fa:	e012      	b.n	8008622 <Display_AI_Output+0xd6>
					p[j]=u32dummy >> (8*j);
 80085fc:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8008600:	00db      	lsls	r3, r3, #3
 8008602:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8008606:	fa22 f103 	lsr.w	r1, r2, r3
 800860a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800860e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8008612:	4413      	add	r3, r2
 8008614:	b2ca      	uxtb	r2, r1
 8008616:	701a      	strb	r2, [r3, #0]
				for(j=0;j<4;j++){
 8008618:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800861c:	3301      	adds	r3, #1
 800861e:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8008622:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8008626:	2b03      	cmp	r3, #3
 8008628:	d9e8      	bls.n	80085fc <Display_AI_Output+0xb0>
				}
		       predictionval[i]=dummyfloat*100;
 800862a:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800862e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8008632:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80086bc <Display_AI_Output+0x170>
 8008636:	ee67 7a87 	vmul.f32	s15, s15, s14
 800863a:	4a21      	ldr	r2, [pc, #132]	; (80086c0 <Display_AI_Output+0x174>)
 800863c:	009b      	lsls	r3, r3, #2
 800863e:	4413      	add	r3, r2
 8008640:	edc3 7a00 	vstr	s15, [r3]
			for(i=0;i<10;i++){
 8008644:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8008648:	3301      	adds	r3, #1
 800864a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 800864e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8008652:	2b09      	cmp	r3, #9
 8008654:	d99a      	bls.n	800858c <Display_AI_Output+0x40>

			}

			Bubblesort();
 8008656:	f000 f83d 	bl	80086d4 <Bubblesort>
			x=80+WINDOWS_HEIGHT+15;
 800865a:	23eb      	movs	r3, #235	; 0xeb
 800865c:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
			//for(i=9;i>=7;i--){
				sprintf((char*)lcdbfr,"DIGIT %s (%.2f%%)  ",digit_label[class_name_index[9]],predictionval[9]);
 8008660:	4b18      	ldr	r3, [pc, #96]	; (80086c4 <Display_AI_Output+0x178>)
 8008662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008664:	4a18      	ldr	r2, [pc, #96]	; (80086c8 <Display_AI_Output+0x17c>)
 8008666:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800866a:	4b15      	ldr	r3, [pc, #84]	; (80086c0 <Display_AI_Output+0x174>)
 800866c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800866e:	4618      	mov	r0, r3
 8008670:	f7fd ffe2 	bl	8006638 <__aeabi_f2d>
 8008674:	4602      	mov	r2, r0
 8008676:	460b      	mov	r3, r1
 8008678:	1d38      	adds	r0, r7, #4
 800867a:	e9cd 2300 	strd	r2, r3, [sp]
 800867e:	4622      	mov	r2, r4
 8008680:	4912      	ldr	r1, [pc, #72]	; (80086cc <Display_AI_Output+0x180>)
 8008682:	f009 f953 	bl	801192c <siprintf>
				BSP_LCD_DisplayStringAt(2, x, (uint8_t*)lcdbfr,LEFT_MODE);
 8008686:	1d3a      	adds	r2, r7, #4
 8008688:	f8b7 1092 	ldrh.w	r1, [r7, #146]	; 0x92
 800868c:	2303      	movs	r3, #3
 800868e:	2002      	movs	r0, #2
 8008690:	f001 fdc8 	bl	800a224 <BSP_LCD_DisplayStringAt>

	  }
	  else{
		  BSP_LCD_DisplayStringAt(2, 50+WINDOWS_HEIGHT, (uint8_t*)"AI ERROR   ",LEFT_MODE);
	  }
}
 8008694:	e005      	b.n	80086a2 <Display_AI_Output+0x156>
		  BSP_LCD_DisplayStringAt(2, 50+WINDOWS_HEIGHT, (uint8_t*)"AI ERROR   ",LEFT_MODE);
 8008696:	2303      	movs	r3, #3
 8008698:	4a0d      	ldr	r2, [pc, #52]	; (80086d0 <Display_AI_Output+0x184>)
 800869a:	21be      	movs	r1, #190	; 0xbe
 800869c:	2002      	movs	r0, #2
 800869e:	f001 fdc1 	bl	800a224 <BSP_LCD_DisplayStringAt>
}
 80086a2:	bf00      	nop
 80086a4:	379c      	adds	r7, #156	; 0x9c
 80086a6:	46bd      	mov	sp, r7
 80086a8:	bd90      	pop	{r4, r7, pc}
 80086aa:	bf00      	nop
 80086ac:	200000bc 	.word	0x200000bc
 80086b0:	20002920 	.word	0x20002920
 80086b4:	08016c90 	.word	0x08016c90
 80086b8:	20001cb8 	.word	0x20001cb8
 80086bc:	42c80000 	.word	0x42c80000
 80086c0:	20002924 	.word	0x20002924
 80086c4:	2000294c 	.word	0x2000294c
 80086c8:	20000008 	.word	0x20000008
 80086cc:	08016c9c 	.word	0x08016c9c
 80086d0:	08016cb0 	.word	0x08016cb0

080086d4 <Bubblesort>:

static void Bubblesort(void){
 80086d4:	b480      	push	{r7}
 80086d6:	b087      	sub	sp, #28
 80086d8:	af00      	add	r7, sp, #0
	int total_count, counter, counter1,swap_rank;
	float swap_var;
	 total_count=10;
 80086da:	230a      	movs	r3, #10
 80086dc:	60fb      	str	r3, [r7, #12]

	 for(counter=0;counter<10;counter++){
 80086de:	2300      	movs	r3, #0
 80086e0:	617b      	str	r3, [r7, #20]
 80086e2:	e007      	b.n	80086f4 <Bubblesort+0x20>
		 class_name_index[counter]= counter;
 80086e4:	4933      	ldr	r1, [pc, #204]	; (80087b4 <Bubblesort+0xe0>)
 80086e6:	697b      	ldr	r3, [r7, #20]
 80086e8:	697a      	ldr	r2, [r7, #20]
 80086ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	 for(counter=0;counter<10;counter++){
 80086ee:	697b      	ldr	r3, [r7, #20]
 80086f0:	3301      	adds	r3, #1
 80086f2:	617b      	str	r3, [r7, #20]
 80086f4:	697b      	ldr	r3, [r7, #20]
 80086f6:	2b09      	cmp	r3, #9
 80086f8:	ddf4      	ble.n	80086e4 <Bubblesort+0x10>
	 }

	for (counter = 0 ; counter < total_count - 1; counter++){
 80086fa:	2300      	movs	r3, #0
 80086fc:	617b      	str	r3, [r7, #20]
 80086fe:	e04d      	b.n	800879c <Bubblesort+0xc8>
		for (counter1 = 0 ; counter1 < total_count - counter - 1; counter1++){
 8008700:	2300      	movs	r3, #0
 8008702:	613b      	str	r3, [r7, #16]
 8008704:	e040      	b.n	8008788 <Bubblesort+0xb4>
			if(predictionval[counter1]>predictionval[ counter1+1]){
 8008706:	4a2c      	ldr	r2, [pc, #176]	; (80087b8 <Bubblesort+0xe4>)
 8008708:	693b      	ldr	r3, [r7, #16]
 800870a:	009b      	lsls	r3, r3, #2
 800870c:	4413      	add	r3, r2
 800870e:	ed93 7a00 	vldr	s14, [r3]
 8008712:	693b      	ldr	r3, [r7, #16]
 8008714:	3301      	adds	r3, #1
 8008716:	4a28      	ldr	r2, [pc, #160]	; (80087b8 <Bubblesort+0xe4>)
 8008718:	009b      	lsls	r3, r3, #2
 800871a:	4413      	add	r3, r2
 800871c:	edd3 7a00 	vldr	s15, [r3]
 8008720:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008724:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008728:	dd2b      	ble.n	8008782 <Bubblesort+0xae>
				swap_var = predictionval[counter1];
 800872a:	4a23      	ldr	r2, [pc, #140]	; (80087b8 <Bubblesort+0xe4>)
 800872c:	693b      	ldr	r3, [r7, #16]
 800872e:	009b      	lsls	r3, r3, #2
 8008730:	4413      	add	r3, r2
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	60bb      	str	r3, [r7, #8]
				predictionval[counter1]=predictionval[counter1+1];
 8008736:	693b      	ldr	r3, [r7, #16]
 8008738:	3301      	adds	r3, #1
 800873a:	4a1f      	ldr	r2, [pc, #124]	; (80087b8 <Bubblesort+0xe4>)
 800873c:	009b      	lsls	r3, r3, #2
 800873e:	4413      	add	r3, r2
 8008740:	681a      	ldr	r2, [r3, #0]
 8008742:	491d      	ldr	r1, [pc, #116]	; (80087b8 <Bubblesort+0xe4>)
 8008744:	693b      	ldr	r3, [r7, #16]
 8008746:	009b      	lsls	r3, r3, #2
 8008748:	440b      	add	r3, r1
 800874a:	601a      	str	r2, [r3, #0]
				predictionval[counter1+1]=swap_var;
 800874c:	693b      	ldr	r3, [r7, #16]
 800874e:	3301      	adds	r3, #1
 8008750:	4a19      	ldr	r2, [pc, #100]	; (80087b8 <Bubblesort+0xe4>)
 8008752:	009b      	lsls	r3, r3, #2
 8008754:	4413      	add	r3, r2
 8008756:	68ba      	ldr	r2, [r7, #8]
 8008758:	601a      	str	r2, [r3, #0]

				swap_rank = class_name_index[counter1];
 800875a:	4a16      	ldr	r2, [pc, #88]	; (80087b4 <Bubblesort+0xe0>)
 800875c:	693b      	ldr	r3, [r7, #16]
 800875e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008762:	607b      	str	r3, [r7, #4]
				class_name_index[counter1]=class_name_index[counter1+1];
 8008764:	693b      	ldr	r3, [r7, #16]
 8008766:	3301      	adds	r3, #1
 8008768:	4a12      	ldr	r2, [pc, #72]	; (80087b4 <Bubblesort+0xe0>)
 800876a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800876e:	4911      	ldr	r1, [pc, #68]	; (80087b4 <Bubblesort+0xe0>)
 8008770:	693b      	ldr	r3, [r7, #16]
 8008772:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				class_name_index[counter1+1]=swap_rank;
 8008776:	693b      	ldr	r3, [r7, #16]
 8008778:	3301      	adds	r3, #1
 800877a:	490e      	ldr	r1, [pc, #56]	; (80087b4 <Bubblesort+0xe0>)
 800877c:	687a      	ldr	r2, [r7, #4]
 800877e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (counter1 = 0 ; counter1 < total_count - counter - 1; counter1++){
 8008782:	693b      	ldr	r3, [r7, #16]
 8008784:	3301      	adds	r3, #1
 8008786:	613b      	str	r3, [r7, #16]
 8008788:	68fa      	ldr	r2, [r7, #12]
 800878a:	697b      	ldr	r3, [r7, #20]
 800878c:	1ad3      	subs	r3, r2, r3
 800878e:	3b01      	subs	r3, #1
 8008790:	693a      	ldr	r2, [r7, #16]
 8008792:	429a      	cmp	r2, r3
 8008794:	dbb7      	blt.n	8008706 <Bubblesort+0x32>
	for (counter = 0 ; counter < total_count - 1; counter++){
 8008796:	697b      	ldr	r3, [r7, #20]
 8008798:	3301      	adds	r3, #1
 800879a:	617b      	str	r3, [r7, #20]
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	3b01      	subs	r3, #1
 80087a0:	697a      	ldr	r2, [r7, #20]
 80087a2:	429a      	cmp	r2, r3
 80087a4:	dbac      	blt.n	8008700 <Bubblesort+0x2c>
			}
		}
	}

}
 80087a6:	bf00      	nop
 80087a8:	bf00      	nop
 80087aa:	371c      	adds	r7, #28
 80087ac:	46bd      	mov	sp, r7
 80087ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b2:	4770      	bx	lr
 80087b4:	2000294c 	.word	0x2000294c
 80087b8:	20002924 	.word	0x20002924

080087bc <LCD_Config>:


void LCD_Config(void)
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	af00      	add	r7, sp, #0
  /* Initialize the LCD */
  BSP_LCD_Init();
 80087c0:	f001 faca 	bl	8009d58 <BSP_LCD_Init>

  /* Background Layer Initialization */
  BSP_LCD_LayerDefaultInit(0, LCD_BUFFER);
 80087c4:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 80087c8:	2000      	movs	r0, #0
 80087ca:	f001 fb47 	bl	8009e5c <BSP_LCD_LayerDefaultInit>

  /* Set Foreground Layer */
  BSP_LCD_SelectLayer(0);
 80087ce:	2000      	movs	r0, #0
 80087d0:	f001 fba8 	bl	8009f24 <BSP_LCD_SelectLayer>

  /* Enable the LCD */
  BSP_LCD_DisplayOn();
 80087d4:	f002 f87a 	bl	800a8cc <BSP_LCD_DisplayOn>

  /* Set the layer window */
  //BSP_LCD_SetLayerWindow(0, 0, 0, IMAGE_WIDTH, IMAGE_HEIGHT);

  /* Clear the LCD Background layer */
  BSP_LCD_SetTransparency(0,255);
 80087d8:	21ff      	movs	r1, #255	; 0xff
 80087da:	2000      	movs	r0, #0
 80087dc:	f001 fbb2 	bl	8009f44 <BSP_LCD_SetTransparency>
  BSP_LCD_Clear(LCD_COLOR_BLUE);
 80087e0:	4808      	ldr	r0, [pc, #32]	; (8008804 <LCD_Config+0x48>)
 80087e2:	f001 fcb3 	bl	800a14c <BSP_LCD_Clear>
  BSP_LCD_SetFont(&Font16);
 80087e6:	4808      	ldr	r0, [pc, #32]	; (8008808 <LCD_Config+0x4c>)
 80087e8:	f001 fbf0 	bl	8009fcc <BSP_LCD_SetFont>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80087ec:	f04f 30ff 	mov.w	r0, #4294967295
 80087f0:	f001 fbba 	bl	8009f68 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 80087f4:	4803      	ldr	r0, [pc, #12]	; (8008804 <LCD_Config+0x48>)
 80087f6:	f001 fbcf 	bl	8009f98 <BSP_LCD_SetBackColor>
  BSP_LCD_SetFont(&Font12);
 80087fa:	4804      	ldr	r0, [pc, #16]	; (800880c <LCD_Config+0x50>)
 80087fc:	f001 fbe6 	bl	8009fcc <BSP_LCD_SetFont>
}
 8008800:	bf00      	nop
 8008802:	bd80      	pop	{r7, pc}
 8008804:	ff0000ff 	.word	0xff0000ff
 8008808:	200000b4 	.word	0x200000b4
 800880c:	200000ac 	.word	0x200000ac

08008810 <Draw_Menu>:

void Draw_Menu(void)
{
 8008810:	b580      	push	{r7, lr}
 8008812:	af00      	add	r7, sp, #0
  /* Set background Layer */
  BSP_LCD_SelectLayer(0);
 8008814:	2000      	movs	r0, #0
 8008816:	f001 fb85 	bl	8009f24 <BSP_LCD_SelectLayer>

  /* Clear the LCD */

	BSP_LCD_Clear(LCD_COLOR_BLACK);
 800881a:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800881e:	f001 fc95 	bl	800a14c <BSP_LCD_Clear>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8008822:	f04f 30ff 	mov.w	r0, #4294967295
 8008826:	f001 fb9f 	bl	8009f68 <BSP_LCD_SetTextColor>
	//BSP_LCD_DrawRect((BSP_LCD_GetXSize()/2)-(WINDOWS_WITH/2)-1, 45, WINDOWS_WITH+2, WINDOWS_HEIGHT+2);
	BSP_LCD_DrawRect(49, 45, WINDOWS_WITH+2, WINDOWS_HEIGHT+2);
 800882a:	238e      	movs	r3, #142	; 0x8e
 800882c:	228e      	movs	r2, #142	; 0x8e
 800882e:	212d      	movs	r1, #45	; 0x2d
 8008830:	2031      	movs	r0, #49	; 0x31
 8008832:	f001 fe35 	bl	800a4a0 <BSP_LCD_DrawRect>
	/* OK */
	BSP_LCD_FillCircle((BSP_LCD_GetXSize()/2)+(WINDOWS_WITH/2)-1,WINDOWS_HEIGHT+65, 15);
 8008836:	f001 faf9 	bl	8009e2c <BSP_LCD_GetXSize>
 800883a:	4603      	mov	r3, r0
 800883c:	085b      	lsrs	r3, r3, #1
 800883e:	b29b      	uxth	r3, r3
 8008840:	3345      	adds	r3, #69	; 0x45
 8008842:	b29b      	uxth	r3, r3
 8008844:	220f      	movs	r2, #15
 8008846:	21cd      	movs	r1, #205	; 0xcd
 8008848:	4618      	mov	r0, r3
 800884a:	f001 ff9f 	bl	800a78c <BSP_LCD_FillCircle>
	/* CL */
	BSP_LCD_FillCircle((BSP_LCD_GetXSize()/2)+(WINDOWS_WITH/2)-1-35,WINDOWS_HEIGHT+65, 15);
 800884e:	f001 faed 	bl	8009e2c <BSP_LCD_GetXSize>
 8008852:	4603      	mov	r3, r0
 8008854:	085b      	lsrs	r3, r3, #1
 8008856:	b29b      	uxth	r3, r3
 8008858:	3322      	adds	r3, #34	; 0x22
 800885a:	b29b      	uxth	r3, r3
 800885c:	220f      	movs	r2, #15
 800885e:	21cd      	movs	r1, #205	; 0xcd
 8008860:	4618      	mov	r0, r3
 8008862:	f001 ff93 	bl	800a78c <BSP_LCD_FillCircle>

	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8008866:	f04f 30ff 	mov.w	r0, #4294967295
 800886a:	f001 fb95 	bl	8009f98 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800886e:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8008872:	f001 fb79 	bl	8009f68 <BSP_LCD_SetTextColor>
	BSP_LCD_SetFont(&Font16);
 8008876:	4820      	ldr	r0, [pc, #128]	; (80088f8 <Draw_Menu+0xe8>)
 8008878:	f001 fba8 	bl	8009fcc <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt((BSP_LCD_GetXSize()/2)+(WINDOWS_WITH/2)-1-45,WINDOWS_HEIGHT+60,(uint8_t*)"OK",LEFT_MODE);
 800887c:	f001 fad6 	bl	8009e2c <BSP_LCD_GetXSize>
 8008880:	4603      	mov	r3, r0
 8008882:	085b      	lsrs	r3, r3, #1
 8008884:	b29b      	uxth	r3, r3
 8008886:	3318      	adds	r3, #24
 8008888:	b298      	uxth	r0, r3
 800888a:	2303      	movs	r3, #3
 800888c:	4a1b      	ldr	r2, [pc, #108]	; (80088fc <Draw_Menu+0xec>)
 800888e:	21c8      	movs	r1, #200	; 0xc8
 8008890:	f001 fcc8 	bl	800a224 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt((BSP_LCD_GetXSize()/2)+(WINDOWS_WITH/2)-1-10,WINDOWS_HEIGHT+60,(uint8_t*)"CL",LEFT_MODE);
 8008894:	f001 faca 	bl	8009e2c <BSP_LCD_GetXSize>
 8008898:	4603      	mov	r3, r0
 800889a:	085b      	lsrs	r3, r3, #1
 800889c:	b29b      	uxth	r3, r3
 800889e:	333b      	adds	r3, #59	; 0x3b
 80088a0:	b298      	uxth	r0, r3
 80088a2:	2303      	movs	r3, #3
 80088a4:	4a16      	ldr	r2, [pc, #88]	; (8008900 <Draw_Menu+0xf0>)
 80088a6:	21c8      	movs	r1, #200	; 0xc8
 80088a8:	f001 fcbc 	bl	800a224 <BSP_LCD_DisplayStringAt>
	/* msg */
	BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 80088ac:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80088b0:	f001 fb72 	bl	8009f98 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
 80088b4:	f06f 00ff 	mvn.w	r0, #255	; 0xff
 80088b8:	f001 fb56 	bl	8009f68 <BSP_LCD_SetTextColor>
	BSP_LCD_SetFont(&Font12);
 80088bc:	4811      	ldr	r0, [pc, #68]	; (8008904 <Draw_Menu+0xf4>)
 80088be:	f001 fb85 	bl	8009fcc <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(3, 3, (uint8_t*)"Handwritten Recognition", CENTER_MODE);
 80088c2:	2301      	movs	r3, #1
 80088c4:	4a10      	ldr	r2, [pc, #64]	; (8008908 <Draw_Menu+0xf8>)
 80088c6:	2103      	movs	r1, #3
 80088c8:	2003      	movs	r0, #3
 80088ca:	f001 fcab 	bl	800a224 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(3, 15, (uint8_t*)"www.karedox.com", CENTER_MODE);
 80088ce:	2301      	movs	r3, #1
 80088d0:	4a0e      	ldr	r2, [pc, #56]	; (800890c <Draw_Menu+0xfc>)
 80088d2:	210f      	movs	r1, #15
 80088d4:	2003      	movs	r0, #3
 80088d6:	f001 fca5 	bl	800a224 <BSP_LCD_DisplayStringAt>

	BSP_LCD_DisplayStringAt((BSP_LCD_GetXSize()/2)-(WINDOWS_WITH/2)-1, 32,(uint8_t*)"Write a number in the box",LEFT_MODE);
 80088da:	f001 faa7 	bl	8009e2c <BSP_LCD_GetXSize>
 80088de:	4603      	mov	r3, r0
 80088e0:	085b      	lsrs	r3, r3, #1
 80088e2:	b29b      	uxth	r3, r3
 80088e4:	3b47      	subs	r3, #71	; 0x47
 80088e6:	b298      	uxth	r0, r3
 80088e8:	2303      	movs	r3, #3
 80088ea:	4a09      	ldr	r2, [pc, #36]	; (8008910 <Draw_Menu+0x100>)
 80088ec:	2120      	movs	r1, #32
 80088ee:	f001 fc99 	bl	800a224 <BSP_LCD_DisplayStringAt>
	//BSP_LCD_DisplayStringAt((BSP_LCD_GetXSize()/2)+(WINDOWS_WITH/2)-1, 32,(uint8_t*)"Click OK",LEFT_MODE);

}
 80088f2:	bf00      	nop
 80088f4:	bd80      	pop	{r7, pc}
 80088f6:	bf00      	nop
 80088f8:	200000b4 	.word	0x200000b4
 80088fc:	08016c8c 	.word	0x08016c8c
 8008900:	08016c88 	.word	0x08016c88
 8008904:	200000ac 	.word	0x200000ac
 8008908:	08016cbc 	.word	0x08016cbc
 800890c:	08016cd4 	.word	0x08016cd4
 8008910:	08016ce4 	.word	0x08016ce4

08008914 <Touchscreen_Calibration>:
  * @brief  Performs the TS calibration
  * @param  None
  * @retval None
  */
void Touchscreen_Calibration(void)
{
 8008914:	b590      	push	{r4, r7, lr}
 8008916:	b083      	sub	sp, #12
 8008918:	af00      	add	r7, sp, #0
  uint8_t status = 0;
 800891a:	2300      	movs	r3, #0
 800891c:	71bb      	strb	r3, [r7, #6]
  uint8_t i = 0;
 800891e:	2300      	movs	r3, #0
 8008920:	71fb      	strb	r3, [r7, #7]

  TouchscreenCalibration_SetHint();
 8008922:	f000 f8f1 	bl	8008b08 <TouchscreenCalibration_SetHint>

  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  status = BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 8008926:	f001 fa81 	bl	8009e2c <BSP_LCD_GetXSize>
 800892a:	4603      	mov	r3, r0
 800892c:	b29c      	uxth	r4, r3
 800892e:	f001 fa89 	bl	8009e44 <BSP_LCD_GetYSize>
 8008932:	4603      	mov	r3, r0
 8008934:	b29b      	uxth	r3, r3
 8008936:	4619      	mov	r1, r3
 8008938:	4620      	mov	r0, r4
 800893a:	f002 fb8f 	bl	800b05c <BSP_TS_Init>
 800893e:	4603      	mov	r3, r0
 8008940:	71bb      	strb	r3, [r7, #6]

  if (status != TS_OK)
 8008942:	79bb      	ldrb	r3, [r7, #6]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d01c      	beq.n	8008982 <Touchscreen_Calibration+0x6e>
  {
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8008948:	f04f 30ff 	mov.w	r0, #4294967295
 800894c:	f001 fb24 	bl	8009f98 <BSP_LCD_SetBackColor>
    BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8008950:	4861      	ldr	r0, [pc, #388]	; (8008ad8 <Touchscreen_Calibration+0x1c4>)
 8008952:	f001 fb09 	bl	8009f68 <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()- 95, (uint8_t*)"ERROR", CENTER_MODE);
 8008956:	f001 fa75 	bl	8009e44 <BSP_LCD_GetYSize>
 800895a:	4603      	mov	r3, r0
 800895c:	b29b      	uxth	r3, r3
 800895e:	3b5f      	subs	r3, #95	; 0x5f
 8008960:	b299      	uxth	r1, r3
 8008962:	2301      	movs	r3, #1
 8008964:	4a5d      	ldr	r2, [pc, #372]	; (8008adc <Touchscreen_Calibration+0x1c8>)
 8008966:	2000      	movs	r0, #0
 8008968:	f001 fc5c 	bl	800a224 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()- 80, (uint8_t*)"Touchscreen cannot be initialized", CENTER_MODE);
 800896c:	f001 fa6a 	bl	8009e44 <BSP_LCD_GetYSize>
 8008970:	4603      	mov	r3, r0
 8008972:	b29b      	uxth	r3, r3
 8008974:	3b50      	subs	r3, #80	; 0x50
 8008976:	b299      	uxth	r1, r3
 8008978:	2301      	movs	r3, #1
 800897a:	4a59      	ldr	r2, [pc, #356]	; (8008ae0 <Touchscreen_Calibration+0x1cc>)
 800897c:	2000      	movs	r0, #0
 800897e:	f001 fc51 	bl	800a224 <BSP_LCD_DisplayStringAt>
  }

  while (1)
  {
    if (status == TS_OK)
 8008982:	79bb      	ldrb	r3, [r7, #6]
 8008984:	2b00      	cmp	r3, #0
 8008986:	f040 809f 	bne.w	8008ac8 <Touchscreen_Calibration+0x1b4>
    {
      aLogX[0] = 15;
 800898a:	4b56      	ldr	r3, [pc, #344]	; (8008ae4 <Touchscreen_Calibration+0x1d0>)
 800898c:	220f      	movs	r2, #15
 800898e:	801a      	strh	r2, [r3, #0]
      aLogY[0] = 15;
 8008990:	4b55      	ldr	r3, [pc, #340]	; (8008ae8 <Touchscreen_Calibration+0x1d4>)
 8008992:	220f      	movs	r2, #15
 8008994:	801a      	strh	r2, [r3, #0]
      aLogX[1] = BSP_LCD_GetXSize() - 15;
 8008996:	f001 fa49 	bl	8009e2c <BSP_LCD_GetXSize>
 800899a:	4603      	mov	r3, r0
 800899c:	b29b      	uxth	r3, r3
 800899e:	3b0f      	subs	r3, #15
 80089a0:	b29b      	uxth	r3, r3
 80089a2:	b21a      	sxth	r2, r3
 80089a4:	4b4f      	ldr	r3, [pc, #316]	; (8008ae4 <Touchscreen_Calibration+0x1d0>)
 80089a6:	805a      	strh	r2, [r3, #2]
      aLogY[1] = BSP_LCD_GetYSize() - 15;
 80089a8:	f001 fa4c 	bl	8009e44 <BSP_LCD_GetYSize>
 80089ac:	4603      	mov	r3, r0
 80089ae:	b29b      	uxth	r3, r3
 80089b0:	3b0f      	subs	r3, #15
 80089b2:	b29b      	uxth	r3, r3
 80089b4:	b21a      	sxth	r2, r3
 80089b6:	4b4c      	ldr	r3, [pc, #304]	; (8008ae8 <Touchscreen_Calibration+0x1d4>)
 80089b8:	805a      	strh	r2, [r3, #2]

      for (i = 0; i < 2; i++)
 80089ba:	2300      	movs	r3, #0
 80089bc:	71fb      	strb	r3, [r7, #7]
 80089be:	e014      	b.n	80089ea <Touchscreen_Calibration+0xd6>
      {
        GetPhysValues(aLogX[i], aLogY[i], &aPhysX[i], &aPhysY[i]);
 80089c0:	79fb      	ldrb	r3, [r7, #7]
 80089c2:	4a48      	ldr	r2, [pc, #288]	; (8008ae4 <Touchscreen_Calibration+0x1d0>)
 80089c4:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 80089c8:	79fb      	ldrb	r3, [r7, #7]
 80089ca:	4a47      	ldr	r2, [pc, #284]	; (8008ae8 <Touchscreen_Calibration+0x1d4>)
 80089cc:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 80089d0:	79fb      	ldrb	r3, [r7, #7]
 80089d2:	005b      	lsls	r3, r3, #1
 80089d4:	4a45      	ldr	r2, [pc, #276]	; (8008aec <Touchscreen_Calibration+0x1d8>)
 80089d6:	441a      	add	r2, r3
 80089d8:	79fb      	ldrb	r3, [r7, #7]
 80089da:	005b      	lsls	r3, r3, #1
 80089dc:	4c44      	ldr	r4, [pc, #272]	; (8008af0 <Touchscreen_Calibration+0x1dc>)
 80089de:	4423      	add	r3, r4
 80089e0:	f000 f8d2 	bl	8008b88 <GetPhysValues>
      for (i = 0; i < 2; i++)
 80089e4:	79fb      	ldrb	r3, [r7, #7]
 80089e6:	3301      	adds	r3, #1
 80089e8:	71fb      	strb	r3, [r7, #7]
 80089ea:	79fb      	ldrb	r3, [r7, #7]
 80089ec:	2b01      	cmp	r3, #1
 80089ee:	d9e7      	bls.n	80089c0 <Touchscreen_Calibration+0xac>
      }
      A1 = (1000 * ( aLogX[1] - aLogX[0]))/ ( aPhysX[1] - aPhysX[0]);
 80089f0:	4b3c      	ldr	r3, [pc, #240]	; (8008ae4 <Touchscreen_Calibration+0x1d0>)
 80089f2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80089f6:	461a      	mov	r2, r3
 80089f8:	4b3a      	ldr	r3, [pc, #232]	; (8008ae4 <Touchscreen_Calibration+0x1d0>)
 80089fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80089fe:	1ad3      	subs	r3, r2, r3
 8008a00:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008a04:	fb03 f202 	mul.w	r2, r3, r2
 8008a08:	4b38      	ldr	r3, [pc, #224]	; (8008aec <Touchscreen_Calibration+0x1d8>)
 8008a0a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8008a0e:	4619      	mov	r1, r3
 8008a10:	4b36      	ldr	r3, [pc, #216]	; (8008aec <Touchscreen_Calibration+0x1d8>)
 8008a12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008a16:	1acb      	subs	r3, r1, r3
 8008a18:	fb92 f3f3 	sdiv	r3, r2, r3
 8008a1c:	b21a      	sxth	r2, r3
 8008a1e:	4b35      	ldr	r3, [pc, #212]	; (8008af4 <Touchscreen_Calibration+0x1e0>)
 8008a20:	801a      	strh	r2, [r3, #0]
      B1 = (1000 * aLogX[0]) - A1 * aPhysX[0];
 8008a22:	4b30      	ldr	r3, [pc, #192]	; (8008ae4 <Touchscreen_Calibration+0x1d0>)
 8008a24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008a28:	b29b      	uxth	r3, r3
 8008a2a:	461a      	mov	r2, r3
 8008a2c:	0152      	lsls	r2, r2, #5
 8008a2e:	1ad2      	subs	r2, r2, r3
 8008a30:	0092      	lsls	r2, r2, #2
 8008a32:	4413      	add	r3, r2
 8008a34:	00db      	lsls	r3, r3, #3
 8008a36:	b29a      	uxth	r2, r3
 8008a38:	4b2c      	ldr	r3, [pc, #176]	; (8008aec <Touchscreen_Calibration+0x1d8>)
 8008a3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008a3e:	b299      	uxth	r1, r3
 8008a40:	4b2c      	ldr	r3, [pc, #176]	; (8008af4 <Touchscreen_Calibration+0x1e0>)
 8008a42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008a46:	b29b      	uxth	r3, r3
 8008a48:	fb11 f303 	smulbb	r3, r1, r3
 8008a4c:	b29b      	uxth	r3, r3
 8008a4e:	1ad3      	subs	r3, r2, r3
 8008a50:	b29b      	uxth	r3, r3
 8008a52:	b21a      	sxth	r2, r3
 8008a54:	4b28      	ldr	r3, [pc, #160]	; (8008af8 <Touchscreen_Calibration+0x1e4>)
 8008a56:	801a      	strh	r2, [r3, #0]

      A2 = (1000 * ( aLogY[1] - aLogY[0]))/ ( aPhysY[1] - aPhysY[0]);
 8008a58:	4b23      	ldr	r3, [pc, #140]	; (8008ae8 <Touchscreen_Calibration+0x1d4>)
 8008a5a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8008a5e:	461a      	mov	r2, r3
 8008a60:	4b21      	ldr	r3, [pc, #132]	; (8008ae8 <Touchscreen_Calibration+0x1d4>)
 8008a62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008a66:	1ad3      	subs	r3, r2, r3
 8008a68:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008a6c:	fb03 f202 	mul.w	r2, r3, r2
 8008a70:	4b1f      	ldr	r3, [pc, #124]	; (8008af0 <Touchscreen_Calibration+0x1dc>)
 8008a72:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8008a76:	4619      	mov	r1, r3
 8008a78:	4b1d      	ldr	r3, [pc, #116]	; (8008af0 <Touchscreen_Calibration+0x1dc>)
 8008a7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008a7e:	1acb      	subs	r3, r1, r3
 8008a80:	fb92 f3f3 	sdiv	r3, r2, r3
 8008a84:	b21a      	sxth	r2, r3
 8008a86:	4b1d      	ldr	r3, [pc, #116]	; (8008afc <Touchscreen_Calibration+0x1e8>)
 8008a88:	801a      	strh	r2, [r3, #0]
      B2 = (1000 * aLogY[0]) - A2 * aPhysY[0];
 8008a8a:	4b17      	ldr	r3, [pc, #92]	; (8008ae8 <Touchscreen_Calibration+0x1d4>)
 8008a8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008a90:	b29b      	uxth	r3, r3
 8008a92:	461a      	mov	r2, r3
 8008a94:	0152      	lsls	r2, r2, #5
 8008a96:	1ad2      	subs	r2, r2, r3
 8008a98:	0092      	lsls	r2, r2, #2
 8008a9a:	4413      	add	r3, r2
 8008a9c:	00db      	lsls	r3, r3, #3
 8008a9e:	b29a      	uxth	r2, r3
 8008aa0:	4b13      	ldr	r3, [pc, #76]	; (8008af0 <Touchscreen_Calibration+0x1dc>)
 8008aa2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008aa6:	b299      	uxth	r1, r3
 8008aa8:	4b14      	ldr	r3, [pc, #80]	; (8008afc <Touchscreen_Calibration+0x1e8>)
 8008aaa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008aae:	b29b      	uxth	r3, r3
 8008ab0:	fb11 f303 	smulbb	r3, r1, r3
 8008ab4:	b29b      	uxth	r3, r3
 8008ab6:	1ad3      	subs	r3, r2, r3
 8008ab8:	b29b      	uxth	r3, r3
 8008aba:	b21a      	sxth	r2, r3
 8008abc:	4b10      	ldr	r3, [pc, #64]	; (8008b00 <Touchscreen_Calibration+0x1ec>)
 8008abe:	801a      	strh	r2, [r3, #0]

      Calibration_Done = 1;
 8008ac0:	4b10      	ldr	r3, [pc, #64]	; (8008b04 <Touchscreen_Calibration+0x1f0>)
 8008ac2:	2201      	movs	r2, #1
 8008ac4:	701a      	strb	r2, [r3, #0]
      return;
 8008ac6:	e003      	b.n	8008ad0 <Touchscreen_Calibration+0x1bc>
    }

    HAL_Delay(5);
 8008ac8:	2005      	movs	r0, #5
 8008aca:	f002 fbf5 	bl	800b2b8 <HAL_Delay>
    if (status == TS_OK)
 8008ace:	e758      	b.n	8008982 <Touchscreen_Calibration+0x6e>
  }
}
 8008ad0:	370c      	adds	r7, #12
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	bd90      	pop	{r4, r7, pc}
 8008ad6:	bf00      	nop
 8008ad8:	ffff0000 	.word	0xffff0000
 8008adc:	08016d00 	.word	0x08016d00
 8008ae0:	08016d08 	.word	0x08016d08
 8008ae4:	20002998 	.word	0x20002998
 8008ae8:	2000299c 	.word	0x2000299c
 8008aec:	20002990 	.word	0x20002990
 8008af0:	20002994 	.word	0x20002994
 8008af4:	20002986 	.word	0x20002986
 8008af8:	2000298a 	.word	0x2000298a
 8008afc:	20002988 	.word	0x20002988
 8008b00:	2000298c 	.word	0x2000298c
 8008b04:	20002984 	.word	0x20002984

08008b08 <TouchscreenCalibration_SetHint>:
  * @brief  Display calibration hint
  * @param  None
  * @retval None
  */
static void TouchscreenCalibration_SetHint(void)
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	af00      	add	r7, sp, #0
  /* Clear the LCD */
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 8008b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8008b10:	f001 fb1c 	bl	800a14c <BSP_LCD_Clear>

  /* Set Touchscreen Demo description */
  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8008b14:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8008b18:	f001 fa26 	bl	8009f68 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8008b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8008b20:	f001 fa3a 	bl	8009f98 <BSP_LCD_SetBackColor>

  BSP_LCD_SetFont(&Font12);
 8008b24:	4814      	ldr	r0, [pc, #80]	; (8008b78 <TouchscreenCalibration_SetHint+0x70>)
 8008b26:	f001 fa51 	bl	8009fcc <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 - 27, (uint8_t*)"Before using the Touchscreen", CENTER_MODE);
 8008b2a:	f001 f98b 	bl	8009e44 <BSP_LCD_GetYSize>
 8008b2e:	4603      	mov	r3, r0
 8008b30:	085b      	lsrs	r3, r3, #1
 8008b32:	b29b      	uxth	r3, r3
 8008b34:	3b1b      	subs	r3, #27
 8008b36:	b299      	uxth	r1, r3
 8008b38:	2301      	movs	r3, #1
 8008b3a:	4a10      	ldr	r2, [pc, #64]	; (8008b7c <TouchscreenCalibration_SetHint+0x74>)
 8008b3c:	2000      	movs	r0, #0
 8008b3e:	f001 fb71 	bl	800a224 <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 - 12, (uint8_t*)"you need to calibrate it.", CENTER_MODE);
 8008b42:	f001 f97f 	bl	8009e44 <BSP_LCD_GetYSize>
 8008b46:	4603      	mov	r3, r0
 8008b48:	085b      	lsrs	r3, r3, #1
 8008b4a:	b29b      	uxth	r3, r3
 8008b4c:	3b0c      	subs	r3, #12
 8008b4e:	b299      	uxth	r1, r3
 8008b50:	2301      	movs	r3, #1
 8008b52:	4a0b      	ldr	r2, [pc, #44]	; (8008b80 <TouchscreenCalibration_SetHint+0x78>)
 8008b54:	2000      	movs	r0, #0
 8008b56:	f001 fb65 	bl	800a224 <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 + 3, (uint8_t*)"Press on the black circles", CENTER_MODE);
 8008b5a:	f001 f973 	bl	8009e44 <BSP_LCD_GetYSize>
 8008b5e:	4603      	mov	r3, r0
 8008b60:	085b      	lsrs	r3, r3, #1
 8008b62:	b29b      	uxth	r3, r3
 8008b64:	3303      	adds	r3, #3
 8008b66:	b299      	uxth	r1, r3
 8008b68:	2301      	movs	r3, #1
 8008b6a:	4a06      	ldr	r2, [pc, #24]	; (8008b84 <TouchscreenCalibration_SetHint+0x7c>)
 8008b6c:	2000      	movs	r0, #0
 8008b6e:	f001 fb59 	bl	800a224 <BSP_LCD_DisplayStringAt>
}
 8008b72:	bf00      	nop
 8008b74:	bd80      	pop	{r7, pc}
 8008b76:	bf00      	nop
 8008b78:	200000ac 	.word	0x200000ac
 8008b7c:	08016d2c 	.word	0x08016d2c
 8008b80:	08016d4c 	.word	0x08016d4c
 8008b84:	08016d68 	.word	0x08016d68

08008b88 <GetPhysValues>:
  * @param  pPhysX : Physical X position
  * @param  pPhysY : Physical Y position
  * @retval None
  */
static void GetPhysValues(int16_t LogX, int16_t LogY, int16_t * pPhysX, int16_t * pPhysY)
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b084      	sub	sp, #16
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	60ba      	str	r2, [r7, #8]
 8008b90:	607b      	str	r3, [r7, #4]
 8008b92:	4603      	mov	r3, r0
 8008b94:	81fb      	strh	r3, [r7, #14]
 8008b96:	460b      	mov	r3, r1
 8008b98:	81bb      	strh	r3, [r7, #12]
  /* Draw the ring */
  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8008b9a:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8008b9e:	f001 f9e3 	bl	8009f68 <BSP_LCD_SetTextColor>
  BSP_LCD_FillCircle(LogX, LogY, 5);
 8008ba2:	89fb      	ldrh	r3, [r7, #14]
 8008ba4:	89b9      	ldrh	r1, [r7, #12]
 8008ba6:	2205      	movs	r2, #5
 8008ba8:	4618      	mov	r0, r3
 8008baa:	f001 fdef 	bl	800a78c <BSP_LCD_FillCircle>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8008bae:	f04f 30ff 	mov.w	r0, #4294967295
 8008bb2:	f001 f9d9 	bl	8009f68 <BSP_LCD_SetTextColor>
  BSP_LCD_FillCircle(LogX, LogY, 2);
 8008bb6:	89fb      	ldrh	r3, [r7, #14]
 8008bb8:	89b9      	ldrh	r1, [r7, #12]
 8008bba:	2202      	movs	r2, #2
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	f001 fde5 	bl	800a78c <BSP_LCD_FillCircle>

  /* Wait until touch is pressed */
  WaitForPressedState(1);
 8008bc2:	2001      	movs	r0, #1
 8008bc4:	f000 f820 	bl	8008c08 <WaitForPressedState>

  BSP_TS_GetState(&TS_State);
 8008bc8:	480e      	ldr	r0, [pc, #56]	; (8008c04 <GetPhysValues+0x7c>)
 8008bca:	f002 fa81 	bl	800b0d0 <BSP_TS_GetState>
  *pPhysX = TS_State.X;
 8008bce:	4b0d      	ldr	r3, [pc, #52]	; (8008c04 <GetPhysValues+0x7c>)
 8008bd0:	885b      	ldrh	r3, [r3, #2]
 8008bd2:	b21a      	sxth	r2, r3
 8008bd4:	68bb      	ldr	r3, [r7, #8]
 8008bd6:	801a      	strh	r2, [r3, #0]
  *pPhysY = TS_State.Y;
 8008bd8:	4b0a      	ldr	r3, [pc, #40]	; (8008c04 <GetPhysValues+0x7c>)
 8008bda:	889b      	ldrh	r3, [r3, #4]
 8008bdc:	b21a      	sxth	r2, r3
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	801a      	strh	r2, [r3, #0]

  /* Wait until touch is released */
  WaitForPressedState(0);
 8008be2:	2000      	movs	r0, #0
 8008be4:	f000 f810 	bl	8008c08 <WaitForPressedState>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8008be8:	f04f 30ff 	mov.w	r0, #4294967295
 8008bec:	f001 f9bc 	bl	8009f68 <BSP_LCD_SetTextColor>
  BSP_LCD_FillCircle(LogX, LogY, 5);
 8008bf0:	89fb      	ldrh	r3, [r7, #14]
 8008bf2:	89b9      	ldrh	r1, [r7, #12]
 8008bf4:	2205      	movs	r2, #5
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	f001 fdc8 	bl	800a78c <BSP_LCD_FillCircle>
}
 8008bfc:	bf00      	nop
 8008bfe:	3710      	adds	r7, #16
 8008c00:	46bd      	mov	sp, r7
 8008c02:	bd80      	pop	{r7, pc}
 8008c04:	200029a0 	.word	0x200029a0

08008c08 <WaitForPressedState>:
  * @brief  Wait For Pressed State
  * @param  Pressed: Pressed State
  * @retval None
  */
static void WaitForPressedState(uint8_t Pressed)
{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	b086      	sub	sp, #24
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	4603      	mov	r3, r0
 8008c10:	71fb      	strb	r3, [r7, #7]
  TS_StateTypeDef  State;

  do
  {
    BSP_TS_GetState(&State);
 8008c12:	f107 030c 	add.w	r3, r7, #12
 8008c16:	4618      	mov	r0, r3
 8008c18:	f002 fa5a 	bl	800b0d0 <BSP_TS_GetState>
    HAL_Delay(10);
 8008c1c:	200a      	movs	r0, #10
 8008c1e:	f002 fb4b 	bl	800b2b8 <HAL_Delay>
    if (State.TouchDetected == Pressed)
 8008c22:	89ba      	ldrh	r2, [r7, #12]
 8008c24:	79fb      	ldrb	r3, [r7, #7]
 8008c26:	b29b      	uxth	r3, r3
 8008c28:	429a      	cmp	r2, r3
 8008c2a:	d1f2      	bne.n	8008c12 <WaitForPressedState+0xa>
    {
      uint16_t TimeStart = HAL_GetTick();
 8008c2c:	f002 fb38 	bl	800b2a0 <HAL_GetTick>
 8008c30:	4603      	mov	r3, r0
 8008c32:	82fb      	strh	r3, [r7, #22]
      do {
        BSP_TS_GetState(&State);
 8008c34:	f107 030c 	add.w	r3, r7, #12
 8008c38:	4618      	mov	r0, r3
 8008c3a:	f002 fa49 	bl	800b0d0 <BSP_TS_GetState>
        HAL_Delay(10);
 8008c3e:	200a      	movs	r0, #10
 8008c40:	f002 fb3a 	bl	800b2b8 <HAL_Delay>
        if (State.TouchDetected != Pressed)
 8008c44:	89ba      	ldrh	r2, [r7, #12]
 8008c46:	79fb      	ldrb	r3, [r7, #7]
 8008c48:	b29b      	uxth	r3, r3
 8008c4a:	429a      	cmp	r2, r3
 8008c4c:	d108      	bne.n	8008c60 <WaitForPressedState+0x58>
        {
          break;
        } else if ((HAL_GetTick() - 100) > TimeStart)
 8008c4e:	f002 fb27 	bl	800b2a0 <HAL_GetTick>
 8008c52:	4603      	mov	r3, r0
 8008c54:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8008c58:	8afb      	ldrh	r3, [r7, #22]
 8008c5a:	429a      	cmp	r2, r3
 8008c5c:	d802      	bhi.n	8008c64 <WaitForPressedState+0x5c>
        BSP_TS_GetState(&State);
 8008c5e:	e7e9      	b.n	8008c34 <WaitForPressedState+0x2c>
          break;
 8008c60:	bf00      	nop
    BSP_TS_GetState(&State);
 8008c62:	e7d6      	b.n	8008c12 <WaitForPressedState+0xa>
        {
          return;
 8008c64:	bf00      	nop
        }
      } while (1);
    }
  } while (1);
}
 8008c66:	3718      	adds	r7, #24
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	bd80      	pop	{r7, pc}

08008c6c <Calibration_GetX>:
  * @brief  Calibrate X position
  * @param  x: X position
  * @retval calibrated x
  */
uint16_t Calibration_GetX(uint16_t x)
{
 8008c6c:	b480      	push	{r7}
 8008c6e:	b083      	sub	sp, #12
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	4603      	mov	r3, r0
 8008c74:	80fb      	strh	r3, [r7, #6]
  return (((A1 * x) + B1)/1000);
 8008c76:	4b0c      	ldr	r3, [pc, #48]	; (8008ca8 <Calibration_GetX+0x3c>)
 8008c78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008c7c:	461a      	mov	r2, r3
 8008c7e:	88fb      	ldrh	r3, [r7, #6]
 8008c80:	fb02 f303 	mul.w	r3, r2, r3
 8008c84:	4a09      	ldr	r2, [pc, #36]	; (8008cac <Calibration_GetX+0x40>)
 8008c86:	f9b2 2000 	ldrsh.w	r2, [r2]
 8008c8a:	4413      	add	r3, r2
 8008c8c:	4a08      	ldr	r2, [pc, #32]	; (8008cb0 <Calibration_GetX+0x44>)
 8008c8e:	fb82 1203 	smull	r1, r2, r2, r3
 8008c92:	1192      	asrs	r2, r2, #6
 8008c94:	17db      	asrs	r3, r3, #31
 8008c96:	1ad3      	subs	r3, r2, r3
 8008c98:	b29b      	uxth	r3, r3
}
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	370c      	adds	r7, #12
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca4:	4770      	bx	lr
 8008ca6:	bf00      	nop
 8008ca8:	20002986 	.word	0x20002986
 8008cac:	2000298a 	.word	0x2000298a
 8008cb0:	10624dd3 	.word	0x10624dd3

08008cb4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8008cb8:	4b11      	ldr	r3, [pc, #68]	; (8008d00 <MX_USART1_UART_Init+0x4c>)
 8008cba:	4a12      	ldr	r2, [pc, #72]	; (8008d04 <MX_USART1_UART_Init+0x50>)
 8008cbc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8008cbe:	4b10      	ldr	r3, [pc, #64]	; (8008d00 <MX_USART1_UART_Init+0x4c>)
 8008cc0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008cc4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8008cc6:	4b0e      	ldr	r3, [pc, #56]	; (8008d00 <MX_USART1_UART_Init+0x4c>)
 8008cc8:	2200      	movs	r2, #0
 8008cca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8008ccc:	4b0c      	ldr	r3, [pc, #48]	; (8008d00 <MX_USART1_UART_Init+0x4c>)
 8008cce:	2200      	movs	r2, #0
 8008cd0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8008cd2:	4b0b      	ldr	r3, [pc, #44]	; (8008d00 <MX_USART1_UART_Init+0x4c>)
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8008cd8:	4b09      	ldr	r3, [pc, #36]	; (8008d00 <MX_USART1_UART_Init+0x4c>)
 8008cda:	220c      	movs	r2, #12
 8008cdc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008cde:	4b08      	ldr	r3, [pc, #32]	; (8008d00 <MX_USART1_UART_Init+0x4c>)
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8008ce4:	4b06      	ldr	r3, [pc, #24]	; (8008d00 <MX_USART1_UART_Init+0x4c>)
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8008cea:	4805      	ldr	r0, [pc, #20]	; (8008d00 <MX_USART1_UART_Init+0x4c>)
 8008cec:	f007 f844 	bl	800fd78 <HAL_UART_Init>
 8008cf0:	4603      	mov	r3, r0
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d001      	beq.n	8008cfa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8008cf6:	f7fe ff51 	bl	8007b9c <Error_Handler>
  }

}
 8008cfa:	bf00      	nop
 8008cfc:	bd80      	pop	{r7, pc}
 8008cfe:	bf00      	nop
 8008d00:	200029a8 	.word	0x200029a8
 8008d04:	40011000 	.word	0x40011000

08008d08 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b08a      	sub	sp, #40	; 0x28
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008d10:	f107 0314 	add.w	r3, r7, #20
 8008d14:	2200      	movs	r2, #0
 8008d16:	601a      	str	r2, [r3, #0]
 8008d18:	605a      	str	r2, [r3, #4]
 8008d1a:	609a      	str	r2, [r3, #8]
 8008d1c:	60da      	str	r2, [r3, #12]
 8008d1e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	4a19      	ldr	r2, [pc, #100]	; (8008d8c <HAL_UART_MspInit+0x84>)
 8008d26:	4293      	cmp	r3, r2
 8008d28:	d12c      	bne.n	8008d84 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	613b      	str	r3, [r7, #16]
 8008d2e:	4b18      	ldr	r3, [pc, #96]	; (8008d90 <HAL_UART_MspInit+0x88>)
 8008d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d32:	4a17      	ldr	r2, [pc, #92]	; (8008d90 <HAL_UART_MspInit+0x88>)
 8008d34:	f043 0310 	orr.w	r3, r3, #16
 8008d38:	6453      	str	r3, [r2, #68]	; 0x44
 8008d3a:	4b15      	ldr	r3, [pc, #84]	; (8008d90 <HAL_UART_MspInit+0x88>)
 8008d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d3e:	f003 0310 	and.w	r3, r3, #16
 8008d42:	613b      	str	r3, [r7, #16]
 8008d44:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008d46:	2300      	movs	r3, #0
 8008d48:	60fb      	str	r3, [r7, #12]
 8008d4a:	4b11      	ldr	r3, [pc, #68]	; (8008d90 <HAL_UART_MspInit+0x88>)
 8008d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d4e:	4a10      	ldr	r2, [pc, #64]	; (8008d90 <HAL_UART_MspInit+0x88>)
 8008d50:	f043 0301 	orr.w	r3, r3, #1
 8008d54:	6313      	str	r3, [r2, #48]	; 0x30
 8008d56:	4b0e      	ldr	r3, [pc, #56]	; (8008d90 <HAL_UART_MspInit+0x88>)
 8008d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d5a:	f003 0301 	and.w	r3, r3, #1
 8008d5e:	60fb      	str	r3, [r7, #12]
 8008d60:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8008d62:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8008d66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008d68:	2302      	movs	r3, #2
 8008d6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008d70:	2303      	movs	r3, #3
 8008d72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8008d74:	2307      	movs	r3, #7
 8008d76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008d78:	f107 0314 	add.w	r3, r7, #20
 8008d7c:	4619      	mov	r1, r3
 8008d7e:	4805      	ldr	r0, [pc, #20]	; (8008d94 <HAL_UART_MspInit+0x8c>)
 8008d80:	f003 f916 	bl	800bfb0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8008d84:	bf00      	nop
 8008d86:	3728      	adds	r7, #40	; 0x28
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	bd80      	pop	{r7, pc}
 8008d8c:	40011000 	.word	0x40011000
 8008d90:	40023800 	.word	0x40023800
 8008d94:	40020000 	.word	0x40020000

08008d98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8008d98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008dd0 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8008d9c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8008d9e:	e003      	b.n	8008da8 <LoopCopyDataInit>

08008da0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8008da0:	4b0c      	ldr	r3, [pc, #48]	; (8008dd4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8008da2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8008da4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8008da6:	3104      	adds	r1, #4

08008da8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8008da8:	480b      	ldr	r0, [pc, #44]	; (8008dd8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8008daa:	4b0c      	ldr	r3, [pc, #48]	; (8008ddc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8008dac:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8008dae:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8008db0:	d3f6      	bcc.n	8008da0 <CopyDataInit>
  ldr  r2, =_sbss
 8008db2:	4a0b      	ldr	r2, [pc, #44]	; (8008de0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8008db4:	e002      	b.n	8008dbc <LoopFillZerobss>

08008db6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8008db6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8008db8:	f842 3b04 	str.w	r3, [r2], #4

08008dbc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8008dbc:	4b09      	ldr	r3, [pc, #36]	; (8008de4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8008dbe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8008dc0:	d3f9      	bcc.n	8008db6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8008dc2:	f7ff f909 	bl	8007fd8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008dc6:	f008 f8fd 	bl	8010fc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008dca:	f7fe fe1f 	bl	8007a0c <main>
  bx  lr    
 8008dce:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8008dd0:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8008dd4:	0807d46c 	.word	0x0807d46c
  ldr  r0, =_sdata
 8008dd8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8008ddc:	20000e04 	.word	0x20000e04
  ldr  r2, =_sbss
 8008de0:	20000e04 	.word	0x20000e04
  ldr  r3, = _ebss
 8008de4:	20019e1c 	.word	0x20019e1c

08008de8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008de8:	e7fe      	b.n	8008de8 <ADC_IRQHandler>

08008dea <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8008dea:	b580      	push	{r7, lr}
 8008dec:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8008dee:	f000 fe65 	bl	8009abc <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 8008df2:	20ca      	movs	r0, #202	; 0xca
 8008df4:	f000 f95d 	bl	80090b2 <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8008df8:	20c3      	movs	r0, #195	; 0xc3
 8008dfa:	f000 f967 	bl	80090cc <ili9341_WriteData>
  ili9341_WriteData(0x08);
 8008dfe:	2008      	movs	r0, #8
 8008e00:	f000 f964 	bl	80090cc <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8008e04:	2050      	movs	r0, #80	; 0x50
 8008e06:	f000 f961 	bl	80090cc <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 8008e0a:	20cf      	movs	r0, #207	; 0xcf
 8008e0c:	f000 f951 	bl	80090b2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8008e10:	2000      	movs	r0, #0
 8008e12:	f000 f95b 	bl	80090cc <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 8008e16:	20c1      	movs	r0, #193	; 0xc1
 8008e18:	f000 f958 	bl	80090cc <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8008e1c:	2030      	movs	r0, #48	; 0x30
 8008e1e:	f000 f955 	bl	80090cc <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 8008e22:	20ed      	movs	r0, #237	; 0xed
 8008e24:	f000 f945 	bl	80090b2 <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8008e28:	2064      	movs	r0, #100	; 0x64
 8008e2a:	f000 f94f 	bl	80090cc <ili9341_WriteData>
  ili9341_WriteData(0x03);
 8008e2e:	2003      	movs	r0, #3
 8008e30:	f000 f94c 	bl	80090cc <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8008e34:	2012      	movs	r0, #18
 8008e36:	f000 f949 	bl	80090cc <ili9341_WriteData>
  ili9341_WriteData(0x81);
 8008e3a:	2081      	movs	r0, #129	; 0x81
 8008e3c:	f000 f946 	bl	80090cc <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 8008e40:	20e8      	movs	r0, #232	; 0xe8
 8008e42:	f000 f936 	bl	80090b2 <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8008e46:	2085      	movs	r0, #133	; 0x85
 8008e48:	f000 f940 	bl	80090cc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8008e4c:	2000      	movs	r0, #0
 8008e4e:	f000 f93d 	bl	80090cc <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8008e52:	2078      	movs	r0, #120	; 0x78
 8008e54:	f000 f93a 	bl	80090cc <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8008e58:	20cb      	movs	r0, #203	; 0xcb
 8008e5a:	f000 f92a 	bl	80090b2 <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 8008e5e:	2039      	movs	r0, #57	; 0x39
 8008e60:	f000 f934 	bl	80090cc <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8008e64:	202c      	movs	r0, #44	; 0x2c
 8008e66:	f000 f931 	bl	80090cc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8008e6a:	2000      	movs	r0, #0
 8008e6c:	f000 f92e 	bl	80090cc <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8008e70:	2034      	movs	r0, #52	; 0x34
 8008e72:	f000 f92b 	bl	80090cc <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8008e76:	2002      	movs	r0, #2
 8008e78:	f000 f928 	bl	80090cc <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8008e7c:	20f7      	movs	r0, #247	; 0xf7
 8008e7e:	f000 f918 	bl	80090b2 <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 8008e82:	2020      	movs	r0, #32
 8008e84:	f000 f922 	bl	80090cc <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8008e88:	20ea      	movs	r0, #234	; 0xea
 8008e8a:	f000 f912 	bl	80090b2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8008e8e:	2000      	movs	r0, #0
 8008e90:	f000 f91c 	bl	80090cc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8008e94:	2000      	movs	r0, #0
 8008e96:	f000 f919 	bl	80090cc <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8008e9a:	20b1      	movs	r0, #177	; 0xb1
 8008e9c:	f000 f909 	bl	80090b2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8008ea0:	2000      	movs	r0, #0
 8008ea2:	f000 f913 	bl	80090cc <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8008ea6:	201b      	movs	r0, #27
 8008ea8:	f000 f910 	bl	80090cc <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8008eac:	20b6      	movs	r0, #182	; 0xb6
 8008eae:	f000 f900 	bl	80090b2 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8008eb2:	200a      	movs	r0, #10
 8008eb4:	f000 f90a 	bl	80090cc <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8008eb8:	20a2      	movs	r0, #162	; 0xa2
 8008eba:	f000 f907 	bl	80090cc <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 8008ebe:	20c0      	movs	r0, #192	; 0xc0
 8008ec0:	f000 f8f7 	bl	80090b2 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8008ec4:	2010      	movs	r0, #16
 8008ec6:	f000 f901 	bl	80090cc <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8008eca:	20c1      	movs	r0, #193	; 0xc1
 8008ecc:	f000 f8f1 	bl	80090b2 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8008ed0:	2010      	movs	r0, #16
 8008ed2:	f000 f8fb 	bl	80090cc <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8008ed6:	20c5      	movs	r0, #197	; 0xc5
 8008ed8:	f000 f8eb 	bl	80090b2 <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8008edc:	2045      	movs	r0, #69	; 0x45
 8008ede:	f000 f8f5 	bl	80090cc <ili9341_WriteData>
  ili9341_WriteData(0x15);
 8008ee2:	2015      	movs	r0, #21
 8008ee4:	f000 f8f2 	bl	80090cc <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8008ee8:	20c7      	movs	r0, #199	; 0xc7
 8008eea:	f000 f8e2 	bl	80090b2 <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 8008eee:	2090      	movs	r0, #144	; 0x90
 8008ef0:	f000 f8ec 	bl	80090cc <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8008ef4:	2036      	movs	r0, #54	; 0x36
 8008ef6:	f000 f8dc 	bl	80090b2 <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8008efa:	20c8      	movs	r0, #200	; 0xc8
 8008efc:	f000 f8e6 	bl	80090cc <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8008f00:	20f2      	movs	r0, #242	; 0xf2
 8008f02:	f000 f8d6 	bl	80090b2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8008f06:	2000      	movs	r0, #0
 8008f08:	f000 f8e0 	bl	80090cc <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 8008f0c:	20b0      	movs	r0, #176	; 0xb0
 8008f0e:	f000 f8d0 	bl	80090b2 <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 8008f12:	20c2      	movs	r0, #194	; 0xc2
 8008f14:	f000 f8da 	bl	80090cc <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8008f18:	20b6      	movs	r0, #182	; 0xb6
 8008f1a:	f000 f8ca 	bl	80090b2 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8008f1e:	200a      	movs	r0, #10
 8008f20:	f000 f8d4 	bl	80090cc <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8008f24:	20a7      	movs	r0, #167	; 0xa7
 8008f26:	f000 f8d1 	bl	80090cc <ili9341_WriteData>
  ili9341_WriteData(0x27);
 8008f2a:	2027      	movs	r0, #39	; 0x27
 8008f2c:	f000 f8ce 	bl	80090cc <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8008f30:	2004      	movs	r0, #4
 8008f32:	f000 f8cb 	bl	80090cc <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8008f36:	202a      	movs	r0, #42	; 0x2a
 8008f38:	f000 f8bb 	bl	80090b2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8008f3c:	2000      	movs	r0, #0
 8008f3e:	f000 f8c5 	bl	80090cc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8008f42:	2000      	movs	r0, #0
 8008f44:	f000 f8c2 	bl	80090cc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8008f48:	2000      	movs	r0, #0
 8008f4a:	f000 f8bf 	bl	80090cc <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 8008f4e:	20ef      	movs	r0, #239	; 0xef
 8008f50:	f000 f8bc 	bl	80090cc <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8008f54:	202b      	movs	r0, #43	; 0x2b
 8008f56:	f000 f8ac 	bl	80090b2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8008f5a:	2000      	movs	r0, #0
 8008f5c:	f000 f8b6 	bl	80090cc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8008f60:	2000      	movs	r0, #0
 8008f62:	f000 f8b3 	bl	80090cc <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8008f66:	2001      	movs	r0, #1
 8008f68:	f000 f8b0 	bl	80090cc <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8008f6c:	203f      	movs	r0, #63	; 0x3f
 8008f6e:	f000 f8ad 	bl	80090cc <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8008f72:	20f6      	movs	r0, #246	; 0xf6
 8008f74:	f000 f89d 	bl	80090b2 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8008f78:	2001      	movs	r0, #1
 8008f7a:	f000 f8a7 	bl	80090cc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8008f7e:	2000      	movs	r0, #0
 8008f80:	f000 f8a4 	bl	80090cc <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8008f84:	2006      	movs	r0, #6
 8008f86:	f000 f8a1 	bl	80090cc <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 8008f8a:	202c      	movs	r0, #44	; 0x2c
 8008f8c:	f000 f891 	bl	80090b2 <ili9341_WriteReg>
  LCD_Delay(200);
 8008f90:	20c8      	movs	r0, #200	; 0xc8
 8008f92:	f000 fe81 	bl	8009c98 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 8008f96:	2026      	movs	r0, #38	; 0x26
 8008f98:	f000 f88b 	bl	80090b2 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8008f9c:	2001      	movs	r0, #1
 8008f9e:	f000 f895 	bl	80090cc <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 8008fa2:	20e0      	movs	r0, #224	; 0xe0
 8008fa4:	f000 f885 	bl	80090b2 <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8008fa8:	200f      	movs	r0, #15
 8008faa:	f000 f88f 	bl	80090cc <ili9341_WriteData>
  ili9341_WriteData(0x29);
 8008fae:	2029      	movs	r0, #41	; 0x29
 8008fb0:	f000 f88c 	bl	80090cc <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8008fb4:	2024      	movs	r0, #36	; 0x24
 8008fb6:	f000 f889 	bl	80090cc <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8008fba:	200c      	movs	r0, #12
 8008fbc:	f000 f886 	bl	80090cc <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 8008fc0:	200e      	movs	r0, #14
 8008fc2:	f000 f883 	bl	80090cc <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8008fc6:	2009      	movs	r0, #9
 8008fc8:	f000 f880 	bl	80090cc <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8008fcc:	204e      	movs	r0, #78	; 0x4e
 8008fce:	f000 f87d 	bl	80090cc <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8008fd2:	2078      	movs	r0, #120	; 0x78
 8008fd4:	f000 f87a 	bl	80090cc <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8008fd8:	203c      	movs	r0, #60	; 0x3c
 8008fda:	f000 f877 	bl	80090cc <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8008fde:	2009      	movs	r0, #9
 8008fe0:	f000 f874 	bl	80090cc <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8008fe4:	2013      	movs	r0, #19
 8008fe6:	f000 f871 	bl	80090cc <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8008fea:	2005      	movs	r0, #5
 8008fec:	f000 f86e 	bl	80090cc <ili9341_WriteData>
  ili9341_WriteData(0x17);
 8008ff0:	2017      	movs	r0, #23
 8008ff2:	f000 f86b 	bl	80090cc <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8008ff6:	2011      	movs	r0, #17
 8008ff8:	f000 f868 	bl	80090cc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8008ffc:	2000      	movs	r0, #0
 8008ffe:	f000 f865 	bl	80090cc <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 8009002:	20e1      	movs	r0, #225	; 0xe1
 8009004:	f000 f855 	bl	80090b2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8009008:	2000      	movs	r0, #0
 800900a:	f000 f85f 	bl	80090cc <ili9341_WriteData>
  ili9341_WriteData(0x16);
 800900e:	2016      	movs	r0, #22
 8009010:	f000 f85c 	bl	80090cc <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8009014:	201b      	movs	r0, #27
 8009016:	f000 f859 	bl	80090cc <ili9341_WriteData>
  ili9341_WriteData(0x04);
 800901a:	2004      	movs	r0, #4
 800901c:	f000 f856 	bl	80090cc <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8009020:	2011      	movs	r0, #17
 8009022:	f000 f853 	bl	80090cc <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8009026:	2007      	movs	r0, #7
 8009028:	f000 f850 	bl	80090cc <ili9341_WriteData>
  ili9341_WriteData(0x31);
 800902c:	2031      	movs	r0, #49	; 0x31
 800902e:	f000 f84d 	bl	80090cc <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8009032:	2033      	movs	r0, #51	; 0x33
 8009034:	f000 f84a 	bl	80090cc <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8009038:	2042      	movs	r0, #66	; 0x42
 800903a:	f000 f847 	bl	80090cc <ili9341_WriteData>
  ili9341_WriteData(0x05);
 800903e:	2005      	movs	r0, #5
 8009040:	f000 f844 	bl	80090cc <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8009044:	200c      	movs	r0, #12
 8009046:	f000 f841 	bl	80090cc <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 800904a:	200a      	movs	r0, #10
 800904c:	f000 f83e 	bl	80090cc <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8009050:	2028      	movs	r0, #40	; 0x28
 8009052:	f000 f83b 	bl	80090cc <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8009056:	202f      	movs	r0, #47	; 0x2f
 8009058:	f000 f838 	bl	80090cc <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 800905c:	200f      	movs	r0, #15
 800905e:	f000 f835 	bl	80090cc <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8009062:	2011      	movs	r0, #17
 8009064:	f000 f825 	bl	80090b2 <ili9341_WriteReg>
  LCD_Delay(200);
 8009068:	20c8      	movs	r0, #200	; 0xc8
 800906a:	f000 fe15 	bl	8009c98 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 800906e:	2029      	movs	r0, #41	; 0x29
 8009070:	f000 f81f 	bl	80090b2 <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8009074:	202c      	movs	r0, #44	; 0x2c
 8009076:	f000 f81c 	bl	80090b2 <ili9341_WriteReg>
}
 800907a:	bf00      	nop
 800907c:	bd80      	pop	{r7, pc}

0800907e <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 800907e:	b580      	push	{r7, lr}
 8009080:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8009082:	f000 fd1b 	bl	8009abc <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8009086:	2103      	movs	r1, #3
 8009088:	20d3      	movs	r0, #211	; 0xd3
 800908a:	f000 f82c 	bl	80090e6 <ili9341_ReadData>
 800908e:	4603      	mov	r3, r0
 8009090:	b29b      	uxth	r3, r3
}
 8009092:	4618      	mov	r0, r3
 8009094:	bd80      	pop	{r7, pc}

08009096 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8009096:	b580      	push	{r7, lr}
 8009098:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 800909a:	2029      	movs	r0, #41	; 0x29
 800909c:	f000 f809 	bl	80090b2 <ili9341_WriteReg>
}
 80090a0:	bf00      	nop
 80090a2:	bd80      	pop	{r7, pc}

080090a4 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 80090a8:	2028      	movs	r0, #40	; 0x28
 80090aa:	f000 f802 	bl	80090b2 <ili9341_WriteReg>
}
 80090ae:	bf00      	nop
 80090b0:	bd80      	pop	{r7, pc}

080090b2 <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 80090b2:	b580      	push	{r7, lr}
 80090b4:	b082      	sub	sp, #8
 80090b6:	af00      	add	r7, sp, #0
 80090b8:	4603      	mov	r3, r0
 80090ba:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 80090bc:	79fb      	ldrb	r3, [r7, #7]
 80090be:	4618      	mov	r0, r3
 80090c0:	f000 fd96 	bl	8009bf0 <LCD_IO_WriteReg>
}
 80090c4:	bf00      	nop
 80090c6:	3708      	adds	r7, #8
 80090c8:	46bd      	mov	sp, r7
 80090ca:	bd80      	pop	{r7, pc}

080090cc <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b082      	sub	sp, #8
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	4603      	mov	r3, r0
 80090d4:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 80090d6:	88fb      	ldrh	r3, [r7, #6]
 80090d8:	4618      	mov	r0, r3
 80090da:	f000 fd67 	bl	8009bac <LCD_IO_WriteData>
}
 80090de:	bf00      	nop
 80090e0:	3708      	adds	r7, #8
 80090e2:	46bd      	mov	sp, r7
 80090e4:	bd80      	pop	{r7, pc}

080090e6 <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 80090e6:	b580      	push	{r7, lr}
 80090e8:	b082      	sub	sp, #8
 80090ea:	af00      	add	r7, sp, #0
 80090ec:	4603      	mov	r3, r0
 80090ee:	460a      	mov	r2, r1
 80090f0:	80fb      	strh	r3, [r7, #6]
 80090f2:	4613      	mov	r3, r2
 80090f4:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 80090f6:	797a      	ldrb	r2, [r7, #5]
 80090f8:	88fb      	ldrh	r3, [r7, #6]
 80090fa:	4611      	mov	r1, r2
 80090fc:	4618      	mov	r0, r3
 80090fe:	f000 fd99 	bl	8009c34 <LCD_IO_ReadData>
 8009102:	4603      	mov	r3, r0
}
 8009104:	4618      	mov	r0, r3
 8009106:	3708      	adds	r7, #8
 8009108:	46bd      	mov	sp, r7
 800910a:	bd80      	pop	{r7, pc}

0800910c <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 800910c:	b480      	push	{r7}
 800910e:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 8009110:	23f0      	movs	r3, #240	; 0xf0
}
 8009112:	4618      	mov	r0, r3
 8009114:	46bd      	mov	sp, r7
 8009116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911a:	4770      	bx	lr

0800911c <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 800911c:	b480      	push	{r7}
 800911e:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 8009120:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8009124:	4618      	mov	r0, r3
 8009126:	46bd      	mov	sp, r7
 8009128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912c:	4770      	bx	lr
	...

08009130 <stmpe811_Init>:
  * @brief  Initialize the stmpe811 and configure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void stmpe811_Init(uint16_t DeviceAddr)
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b084      	sub	sp, #16
 8009134:	af00      	add	r7, sp, #0
 8009136:	4603      	mov	r3, r0
 8009138:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = stmpe811_GetInstance(DeviceAddr);
 800913a:	88fb      	ldrh	r3, [r7, #6]
 800913c:	4618      	mov	r0, r3
 800913e:	f000 fa59 	bl	80095f4 <stmpe811_GetInstance>
 8009142:	4603      	mov	r3, r0
 8009144:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 8009146:	7bfb      	ldrb	r3, [r7, #15]
 8009148:	2bff      	cmp	r3, #255	; 0xff
 800914a:	d112      	bne.n	8009172 <stmpe811_Init+0x42>
  {
    /* Look for empty instance */
    empty = stmpe811_GetInstance(0);
 800914c:	2000      	movs	r0, #0
 800914e:	f000 fa51 	bl	80095f4 <stmpe811_GetInstance>
 8009152:	4603      	mov	r3, r0
 8009154:	73bb      	strb	r3, [r7, #14]
    
    if(empty < STMPE811_MAX_INSTANCE)
 8009156:	7bbb      	ldrb	r3, [r7, #14]
 8009158:	2b01      	cmp	r3, #1
 800915a:	d80a      	bhi.n	8009172 <stmpe811_Init+0x42>
    {
      /* Register the current device instance */
      stmpe811[empty] = DeviceAddr;
 800915c:	7bbb      	ldrb	r3, [r7, #14]
 800915e:	88fa      	ldrh	r2, [r7, #6]
 8009160:	b2d1      	uxtb	r1, r2
 8009162:	4a06      	ldr	r2, [pc, #24]	; (800917c <stmpe811_Init+0x4c>)
 8009164:	54d1      	strb	r1, [r2, r3]
      
      /* Initialize IO BUS layer */
      IOE_Init(); 
 8009166:	f000 fda2 	bl	8009cae <IOE_Init>
      
      /* Generate stmpe811 Software reset */
      stmpe811_Reset(DeviceAddr);
 800916a:	88fb      	ldrh	r3, [r7, #6]
 800916c:	4618      	mov	r0, r3
 800916e:	f000 f807 	bl	8009180 <stmpe811_Reset>
    }
  }
}
 8009172:	bf00      	nop
 8009174:	3710      	adds	r7, #16
 8009176:	46bd      	mov	sp, r7
 8009178:	bd80      	pop	{r7, pc}
 800917a:	bf00      	nop
 800917c:	200029e8 	.word	0x200029e8

08009180 <stmpe811_Reset>:
  * @brief  Reset the stmpe811 by Software.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_Reset(uint16_t DeviceAddr)
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b082      	sub	sp, #8
 8009184:	af00      	add	r7, sp, #0
 8009186:	4603      	mov	r3, r0
 8009188:	80fb      	strh	r3, [r7, #6]
  /* Power Down the stmpe811 */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 2);
 800918a:	88fb      	ldrh	r3, [r7, #6]
 800918c:	b2db      	uxtb	r3, r3
 800918e:	2202      	movs	r2, #2
 8009190:	2103      	movs	r1, #3
 8009192:	4618      	mov	r0, r3
 8009194:	f000 fd97 	bl	8009cc6 <IOE_Write>

  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(10); 
 8009198:	200a      	movs	r0, #10
 800919a:	f000 fdd1 	bl	8009d40 <IOE_Delay>
  
  /* Power On the Codec after the power off => all registers are reinitialized */
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 0);
 800919e:	88fb      	ldrh	r3, [r7, #6]
 80091a0:	b2db      	uxtb	r3, r3
 80091a2:	2200      	movs	r2, #0
 80091a4:	2103      	movs	r1, #3
 80091a6:	4618      	mov	r0, r3
 80091a8:	f000 fd8d 	bl	8009cc6 <IOE_Write>
  
  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(2); 
 80091ac:	2002      	movs	r0, #2
 80091ae:	f000 fdc7 	bl	8009d40 <IOE_Delay>
}
 80091b2:	bf00      	nop
 80091b4:	3708      	adds	r7, #8
 80091b6:	46bd      	mov	sp, r7
 80091b8:	bd80      	pop	{r7, pc}

080091ba <stmpe811_ReadID>:
  * @brief  Read the stmpe811 IO Expander device ID.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval The Device ID (two bytes).
  */
uint16_t stmpe811_ReadID(uint16_t DeviceAddr)
{
 80091ba:	b590      	push	{r4, r7, lr}
 80091bc:	b083      	sub	sp, #12
 80091be:	af00      	add	r7, sp, #0
 80091c0:	4603      	mov	r3, r0
 80091c2:	80fb      	strh	r3, [r7, #6]
  /* Initialize IO BUS layer */
  IOE_Init(); 
 80091c4:	f000 fd73 	bl	8009cae <IOE_Init>
  
  /* Return the device ID value */
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 80091c8:	88fb      	ldrh	r3, [r7, #6]
 80091ca:	b2db      	uxtb	r3, r3
 80091cc:	2100      	movs	r1, #0
 80091ce:	4618      	mov	r0, r3
 80091d0:	f000 fd8c 	bl	8009cec <IOE_Read>
 80091d4:	4603      	mov	r3, r0
 80091d6:	021b      	lsls	r3, r3, #8
 80091d8:	b21c      	sxth	r4, r3
          (IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_MSB)));
 80091da:	88fb      	ldrh	r3, [r7, #6]
 80091dc:	b2db      	uxtb	r3, r3
 80091de:	2101      	movs	r1, #1
 80091e0:	4618      	mov	r0, r3
 80091e2:	f000 fd83 	bl	8009cec <IOE_Read>
 80091e6:	4603      	mov	r3, r0
 80091e8:	b21b      	sxth	r3, r3
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 80091ea:	4323      	orrs	r3, r4
 80091ec:	b21b      	sxth	r3, r3
 80091ee:	b29b      	uxth	r3, r3
}
 80091f0:	4618      	mov	r0, r3
 80091f2:	370c      	adds	r7, #12
 80091f4:	46bd      	mov	sp, r7
 80091f6:	bd90      	pop	{r4, r7, pc}

080091f8 <stmpe811_EnableGlobalIT>:
  * @brief  Enable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.       
  * @retval None
  */
void stmpe811_EnableGlobalIT(uint16_t DeviceAddr)
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b084      	sub	sp, #16
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	4603      	mov	r3, r0
 8009200:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8009202:	2300      	movs	r3, #0
 8009204:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8009206:	88fb      	ldrh	r3, [r7, #6]
 8009208:	b2db      	uxtb	r3, r3
 800920a:	2109      	movs	r1, #9
 800920c:	4618      	mov	r0, r3
 800920e:	f000 fd6d 	bl	8009cec <IOE_Read>
 8009212:	4603      	mov	r3, r0
 8009214:	73fb      	strb	r3, [r7, #15]
  
  /* Set the global interrupts to be Enabled */    
  tmp |= (uint8_t)STMPE811_GIT_EN;
 8009216:	7bfb      	ldrb	r3, [r7, #15]
 8009218:	f043 0301 	orr.w	r3, r3, #1
 800921c:	73fb      	strb	r3, [r7, #15]
  
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp); 
 800921e:	88fb      	ldrh	r3, [r7, #6]
 8009220:	b2db      	uxtb	r3, r3
 8009222:	7bfa      	ldrb	r2, [r7, #15]
 8009224:	2109      	movs	r1, #9
 8009226:	4618      	mov	r0, r3
 8009228:	f000 fd4d 	bl	8009cc6 <IOE_Write>
}
 800922c:	bf00      	nop
 800922e:	3710      	adds	r7, #16
 8009230:	46bd      	mov	sp, r7
 8009232:	bd80      	pop	{r7, pc}

08009234 <stmpe811_DisableGlobalIT>:
  * @brief  Disable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.      
  * @retval None
  */
void stmpe811_DisableGlobalIT(uint16_t DeviceAddr)
{
 8009234:	b580      	push	{r7, lr}
 8009236:	b084      	sub	sp, #16
 8009238:	af00      	add	r7, sp, #0
 800923a:	4603      	mov	r3, r0
 800923c:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 800923e:	2300      	movs	r3, #0
 8009240:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8009242:	88fb      	ldrh	r3, [r7, #6]
 8009244:	b2db      	uxtb	r3, r3
 8009246:	2109      	movs	r1, #9
 8009248:	4618      	mov	r0, r3
 800924a:	f000 fd4f 	bl	8009cec <IOE_Read>
 800924e:	4603      	mov	r3, r0
 8009250:	73fb      	strb	r3, [r7, #15]

  /* Set the global interrupts to be Disabled */    
  tmp &= ~(uint8_t)STMPE811_GIT_EN;
 8009252:	7bfb      	ldrb	r3, [r7, #15]
 8009254:	f023 0301 	bic.w	r3, r3, #1
 8009258:	73fb      	strb	r3, [r7, #15]
 
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 800925a:	88fb      	ldrh	r3, [r7, #6]
 800925c:	b2db      	uxtb	r3, r3
 800925e:	7bfa      	ldrb	r2, [r7, #15]
 8009260:	2109      	movs	r1, #9
 8009262:	4618      	mov	r0, r3
 8009264:	f000 fd2f 	bl	8009cc6 <IOE_Write>
    
}
 8009268:	bf00      	nop
 800926a:	3710      	adds	r7, #16
 800926c:	46bd      	mov	sp, r7
 800926e:	bd80      	pop	{r7, pc}

08009270 <stmpe811_EnableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_EnableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8009270:	b580      	push	{r7, lr}
 8009272:	b084      	sub	sp, #16
 8009274:	af00      	add	r7, sp, #0
 8009276:	4603      	mov	r3, r0
 8009278:	460a      	mov	r2, r1
 800927a:	80fb      	strh	r3, [r7, #6]
 800927c:	4613      	mov	r3, r2
 800927e:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8009280:	2300      	movs	r3, #0
 8009282:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8009284:	88fb      	ldrh	r3, [r7, #6]
 8009286:	b2db      	uxtb	r3, r3
 8009288:	210a      	movs	r1, #10
 800928a:	4618      	mov	r0, r3
 800928c:	f000 fd2e 	bl	8009cec <IOE_Read>
 8009290:	4603      	mov	r3, r0
 8009292:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp |= Source; 
 8009294:	7bfa      	ldrb	r2, [r7, #15]
 8009296:	797b      	ldrb	r3, [r7, #5]
 8009298:	4313      	orrs	r3, r2
 800929a:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 800929c:	88fb      	ldrh	r3, [r7, #6]
 800929e:	b2db      	uxtb	r3, r3
 80092a0:	7bfa      	ldrb	r2, [r7, #15]
 80092a2:	210a      	movs	r1, #10
 80092a4:	4618      	mov	r0, r3
 80092a6:	f000 fd0e 	bl	8009cc6 <IOE_Write>
}
 80092aa:	bf00      	nop
 80092ac:	3710      	adds	r7, #16
 80092ae:	46bd      	mov	sp, r7
 80092b0:	bd80      	pop	{r7, pc}

080092b2 <stmpe811_DisableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_DisableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 80092b2:	b580      	push	{r7, lr}
 80092b4:	b084      	sub	sp, #16
 80092b6:	af00      	add	r7, sp, #0
 80092b8:	4603      	mov	r3, r0
 80092ba:	460a      	mov	r2, r1
 80092bc:	80fb      	strh	r3, [r7, #6]
 80092be:	4613      	mov	r3, r2
 80092c0:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 80092c2:	2300      	movs	r3, #0
 80092c4:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 80092c6:	88fb      	ldrh	r3, [r7, #6]
 80092c8:	b2db      	uxtb	r3, r3
 80092ca:	210a      	movs	r1, #10
 80092cc:	4618      	mov	r0, r3
 80092ce:	f000 fd0d 	bl	8009cec <IOE_Read>
 80092d2:	4603      	mov	r3, r0
 80092d4:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp &= ~Source; 
 80092d6:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80092da:	43db      	mvns	r3, r3
 80092dc:	b25a      	sxtb	r2, r3
 80092de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80092e2:	4013      	ands	r3, r2
 80092e4:	b25b      	sxtb	r3, r3
 80092e6:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 80092e8:	88fb      	ldrh	r3, [r7, #6]
 80092ea:	b2db      	uxtb	r3, r3
 80092ec:	7bfa      	ldrb	r2, [r7, #15]
 80092ee:	210a      	movs	r1, #10
 80092f0:	4618      	mov	r0, r3
 80092f2:	f000 fce8 	bl	8009cc6 <IOE_Write>
}
 80092f6:	bf00      	nop
 80092f8:	3710      	adds	r7, #16
 80092fa:	46bd      	mov	sp, r7
 80092fc:	bd80      	pop	{r7, pc}

080092fe <stmpe811_ReadGITStatus>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt      
  * @retval The checked Global interrupt source status.
  */
uint8_t stmpe811_ReadGITStatus(uint16_t DeviceAddr, uint8_t Source)
{
 80092fe:	b580      	push	{r7, lr}
 8009300:	b082      	sub	sp, #8
 8009302:	af00      	add	r7, sp, #0
 8009304:	4603      	mov	r3, r0
 8009306:	460a      	mov	r2, r1
 8009308:	80fb      	strh	r3, [r7, #6]
 800930a:	4613      	mov	r3, r2
 800930c:	717b      	strb	r3, [r7, #5]
  /* Return the global IT source status */
  return((IOE_Read(DeviceAddr, STMPE811_REG_INT_STA) & Source));
 800930e:	88fb      	ldrh	r3, [r7, #6]
 8009310:	b2db      	uxtb	r3, r3
 8009312:	210b      	movs	r1, #11
 8009314:	4618      	mov	r0, r3
 8009316:	f000 fce9 	bl	8009cec <IOE_Read>
 800931a:	4603      	mov	r3, r0
 800931c:	461a      	mov	r2, r3
 800931e:	797b      	ldrb	r3, [r7, #5]
 8009320:	4013      	ands	r3, r2
 8009322:	b2db      	uxtb	r3, r3
}
 8009324:	4618      	mov	r0, r3
 8009326:	3708      	adds	r7, #8
 8009328:	46bd      	mov	sp, r7
 800932a:	bd80      	pop	{r7, pc}

0800932c <stmpe811_ClearGlobalIT>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt 
  * @retval None
  */
void stmpe811_ClearGlobalIT(uint16_t DeviceAddr, uint8_t Source)
{
 800932c:	b580      	push	{r7, lr}
 800932e:	b082      	sub	sp, #8
 8009330:	af00      	add	r7, sp, #0
 8009332:	4603      	mov	r3, r0
 8009334:	460a      	mov	r2, r1
 8009336:	80fb      	strh	r3, [r7, #6]
 8009338:	4613      	mov	r3, r2
 800933a:	717b      	strb	r3, [r7, #5]
  /* Write 1 to the bits that have to be cleared */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, Source);
 800933c:	88fb      	ldrh	r3, [r7, #6]
 800933e:	b2db      	uxtb	r3, r3
 8009340:	797a      	ldrb	r2, [r7, #5]
 8009342:	210b      	movs	r1, #11
 8009344:	4618      	mov	r0, r3
 8009346:	f000 fcbe 	bl	8009cc6 <IOE_Write>
}
 800934a:	bf00      	nop
 800934c:	3708      	adds	r7, #8
 800934e:	46bd      	mov	sp, r7
 8009350:	bd80      	pop	{r7, pc}

08009352 <stmpe811_IO_EnableAF>:
  *         combination of the following values:
  *   @arg  STMPE811_PIN_x: Where x can be from 0 to 7.       
  * @retval None
  */
void stmpe811_IO_EnableAF(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8009352:	b580      	push	{r7, lr}
 8009354:	b084      	sub	sp, #16
 8009356:	af00      	add	r7, sp, #0
 8009358:	4603      	mov	r3, r0
 800935a:	6039      	str	r1, [r7, #0]
 800935c:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 800935e:	2300      	movs	r3, #0
 8009360:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current register value */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 8009362:	88fb      	ldrh	r3, [r7, #6]
 8009364:	b2db      	uxtb	r3, r3
 8009366:	2117      	movs	r1, #23
 8009368:	4618      	mov	r0, r3
 800936a:	f000 fcbf 	bl	8009cec <IOE_Read>
 800936e:	4603      	mov	r3, r0
 8009370:	73fb      	strb	r3, [r7, #15]

  /* Enable the selected pins alternate function */   
  tmp &= ~(uint8_t)IO_Pin;   
 8009372:	683b      	ldr	r3, [r7, #0]
 8009374:	b25b      	sxtb	r3, r3
 8009376:	43db      	mvns	r3, r3
 8009378:	b25a      	sxtb	r2, r3
 800937a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800937e:	4013      	ands	r3, r2
 8009380:	b25b      	sxtb	r3, r3
 8009382:	73fb      	strb	r3, [r7, #15]
  
  /* Write back the new register value */
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp); 
 8009384:	88fb      	ldrh	r3, [r7, #6]
 8009386:	b2db      	uxtb	r3, r3
 8009388:	7bfa      	ldrb	r2, [r7, #15]
 800938a:	2117      	movs	r1, #23
 800938c:	4618      	mov	r0, r3
 800938e:	f000 fc9a 	bl	8009cc6 <IOE_Write>
}
 8009392:	bf00      	nop
 8009394:	3710      	adds	r7, #16
 8009396:	46bd      	mov	sp, r7
 8009398:	bd80      	pop	{r7, pc}

0800939a <stmpe811_TS_Start>:
  * @brief  Configures the touch Screen Controller (Single point detection)
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void stmpe811_TS_Start(uint16_t DeviceAddr)
{
 800939a:	b580      	push	{r7, lr}
 800939c:	b084      	sub	sp, #16
 800939e:	af00      	add	r7, sp, #0
 80093a0:	4603      	mov	r3, r0
 80093a2:	80fb      	strh	r3, [r7, #6]
  uint8_t mode;
  
  /* Get the current register value */
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 80093a4:	88fb      	ldrh	r3, [r7, #6]
 80093a6:	b2db      	uxtb	r3, r3
 80093a8:	2104      	movs	r1, #4
 80093aa:	4618      	mov	r0, r3
 80093ac:	f000 fc9e 	bl	8009cec <IOE_Read>
 80093b0:	4603      	mov	r3, r0
 80093b2:	73fb      	strb	r3, [r7, #15]
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_IO_FCT);  
 80093b4:	7bfb      	ldrb	r3, [r7, #15]
 80093b6:	f023 0304 	bic.w	r3, r3, #4
 80093ba:	73fb      	strb	r3, [r7, #15]
  
  /* Write the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 80093bc:	88fb      	ldrh	r3, [r7, #6]
 80093be:	b2db      	uxtb	r3, r3
 80093c0:	7bfa      	ldrb	r2, [r7, #15]
 80093c2:	2104      	movs	r1, #4
 80093c4:	4618      	mov	r0, r3
 80093c6:	f000 fc7e 	bl	8009cc6 <IOE_Write>

  /* Select TSC pins in TSC alternate mode */  
  stmpe811_IO_EnableAF(DeviceAddr, STMPE811_TOUCH_IO_ALL);
 80093ca:	88fb      	ldrh	r3, [r7, #6]
 80093cc:	21f0      	movs	r1, #240	; 0xf0
 80093ce:	4618      	mov	r0, r3
 80093d0:	f7ff ffbf 	bl	8009352 <stmpe811_IO_EnableAF>
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_TS_FCT | STMPE811_ADC_FCT);  
 80093d4:	7bfb      	ldrb	r3, [r7, #15]
 80093d6:	f023 0303 	bic.w	r3, r3, #3
 80093da:	73fb      	strb	r3, [r7, #15]
  
  /* Set the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 80093dc:	88fb      	ldrh	r3, [r7, #6]
 80093de:	b2db      	uxtb	r3, r3
 80093e0:	7bfa      	ldrb	r2, [r7, #15]
 80093e2:	2104      	movs	r1, #4
 80093e4:	4618      	mov	r0, r3
 80093e6:	f000 fc6e 	bl	8009cc6 <IOE_Write>
  
  /* Select Sample Time, bit number and ADC Reference */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL1, 0x49);
 80093ea:	88fb      	ldrh	r3, [r7, #6]
 80093ec:	b2db      	uxtb	r3, r3
 80093ee:	2249      	movs	r2, #73	; 0x49
 80093f0:	2120      	movs	r1, #32
 80093f2:	4618      	mov	r0, r3
 80093f4:	f000 fc67 	bl	8009cc6 <IOE_Write>
  
  /* Wait for 2 ms */
  IOE_Delay(2); 
 80093f8:	2002      	movs	r0, #2
 80093fa:	f000 fca1 	bl	8009d40 <IOE_Delay>
  
  /* Select the ADC clock speed: 3.25 MHz */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL2, 0x01);
 80093fe:	88fb      	ldrh	r3, [r7, #6]
 8009400:	b2db      	uxtb	r3, r3
 8009402:	2201      	movs	r2, #1
 8009404:	2121      	movs	r1, #33	; 0x21
 8009406:	4618      	mov	r0, r3
 8009408:	f000 fc5d 	bl	8009cc6 <IOE_Write>
  /* Configuration: 
     - Touch average control    : 4 samples
     - Touch delay time         : 500 uS
     - Panel driver setting time: 500 uS 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CFG, 0x9A); 
 800940c:	88fb      	ldrh	r3, [r7, #6]
 800940e:	b2db      	uxtb	r3, r3
 8009410:	229a      	movs	r2, #154	; 0x9a
 8009412:	2141      	movs	r1, #65	; 0x41
 8009414:	4618      	mov	r0, r3
 8009416:	f000 fc56 	bl	8009cc6 <IOE_Write>
  
  /* Configure the Touch FIFO threshold: single point reading */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_TH, 0x01);
 800941a:	88fb      	ldrh	r3, [r7, #6]
 800941c:	b2db      	uxtb	r3, r3
 800941e:	2201      	movs	r2, #1
 8009420:	214a      	movs	r1, #74	; 0x4a
 8009422:	4618      	mov	r0, r3
 8009424:	f000 fc4f 	bl	8009cc6 <IOE_Write>
  
  /* Clear the FIFO memory content. */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8009428:	88fb      	ldrh	r3, [r7, #6]
 800942a:	b2db      	uxtb	r3, r3
 800942c:	2201      	movs	r2, #1
 800942e:	214b      	movs	r1, #75	; 0x4b
 8009430:	4618      	mov	r0, r3
 8009432:	f000 fc48 	bl	8009cc6 <IOE_Write>
  
  /* Put the FIFO back into operation mode  */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8009436:	88fb      	ldrh	r3, [r7, #6]
 8009438:	b2db      	uxtb	r3, r3
 800943a:	2200      	movs	r2, #0
 800943c:	214b      	movs	r1, #75	; 0x4b
 800943e:	4618      	mov	r0, r3
 8009440:	f000 fc41 	bl	8009cc6 <IOE_Write>
  
  /* Set the range and accuracy pf the pressure measurement (Z) : 
     - Fractional part :7 
     - Whole part      :1 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_FRACT_XYZ, 0x01);
 8009444:	88fb      	ldrh	r3, [r7, #6]
 8009446:	b2db      	uxtb	r3, r3
 8009448:	2201      	movs	r2, #1
 800944a:	2156      	movs	r1, #86	; 0x56
 800944c:	4618      	mov	r0, r3
 800944e:	f000 fc3a 	bl	8009cc6 <IOE_Write>
  
  /* Set the driving capability (limit) of the device for TSC pins: 50mA */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_I_DRIVE, 0x01);
 8009452:	88fb      	ldrh	r3, [r7, #6]
 8009454:	b2db      	uxtb	r3, r3
 8009456:	2201      	movs	r2, #1
 8009458:	2158      	movs	r1, #88	; 0x58
 800945a:	4618      	mov	r0, r3
 800945c:	f000 fc33 	bl	8009cc6 <IOE_Write>
  
  /* Touch screen control configuration (enable TSC):
     - No window tracking index
     - XYZ acquisition mode
   */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CTRL, 0x01);
 8009460:	88fb      	ldrh	r3, [r7, #6]
 8009462:	b2db      	uxtb	r3, r3
 8009464:	2201      	movs	r2, #1
 8009466:	2140      	movs	r1, #64	; 0x40
 8009468:	4618      	mov	r0, r3
 800946a:	f000 fc2c 	bl	8009cc6 <IOE_Write>
  
  /*  Clear all the status pending bits if any */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, 0xFF);
 800946e:	88fb      	ldrh	r3, [r7, #6]
 8009470:	b2db      	uxtb	r3, r3
 8009472:	22ff      	movs	r2, #255	; 0xff
 8009474:	210b      	movs	r1, #11
 8009476:	4618      	mov	r0, r3
 8009478:	f000 fc25 	bl	8009cc6 <IOE_Write>

  /* Wait for 2 ms delay */
  IOE_Delay(2); 
 800947c:	2002      	movs	r0, #2
 800947e:	f000 fc5f 	bl	8009d40 <IOE_Delay>
}
 8009482:	bf00      	nop
 8009484:	3710      	adds	r7, #16
 8009486:	46bd      	mov	sp, r7
 8009488:	bd80      	pop	{r7, pc}

0800948a <stmpe811_TS_DetectTouch>:
  * @brief  Return if there is touch detected or not.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Touch detected state.
  */
uint8_t stmpe811_TS_DetectTouch(uint16_t DeviceAddr)
{
 800948a:	b580      	push	{r7, lr}
 800948c:	b084      	sub	sp, #16
 800948e:	af00      	add	r7, sp, #0
 8009490:	4603      	mov	r3, r0
 8009492:	80fb      	strh	r3, [r7, #6]
  uint8_t state;
  uint8_t ret = 0;
 8009494:	2300      	movs	r3, #0
 8009496:	73fb      	strb	r3, [r7, #15]
  
  state = ((IOE_Read(DeviceAddr, STMPE811_REG_TSC_CTRL) & (uint8_t)STMPE811_TS_CTRL_STATUS) == (uint8_t)0x80);
 8009498:	88fb      	ldrh	r3, [r7, #6]
 800949a:	b2db      	uxtb	r3, r3
 800949c:	2140      	movs	r1, #64	; 0x40
 800949e:	4618      	mov	r0, r3
 80094a0:	f000 fc24 	bl	8009cec <IOE_Read>
 80094a4:	4603      	mov	r3, r0
 80094a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094aa:	2b80      	cmp	r3, #128	; 0x80
 80094ac:	bf0c      	ite	eq
 80094ae:	2301      	moveq	r3, #1
 80094b0:	2300      	movne	r3, #0
 80094b2:	b2db      	uxtb	r3, r3
 80094b4:	73bb      	strb	r3, [r7, #14]
  
  if(state > 0)
 80094b6:	7bbb      	ldrb	r3, [r7, #14]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d00b      	beq.n	80094d4 <stmpe811_TS_DetectTouch+0x4a>
  {
    if(IOE_Read(DeviceAddr, STMPE811_REG_FIFO_SIZE) > 0)
 80094bc:	88fb      	ldrh	r3, [r7, #6]
 80094be:	b2db      	uxtb	r3, r3
 80094c0:	214c      	movs	r1, #76	; 0x4c
 80094c2:	4618      	mov	r0, r3
 80094c4:	f000 fc12 	bl	8009cec <IOE_Read>
 80094c8:	4603      	mov	r3, r0
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d010      	beq.n	80094f0 <stmpe811_TS_DetectTouch+0x66>
    {
      ret = 1;
 80094ce:	2301      	movs	r3, #1
 80094d0:	73fb      	strb	r3, [r7, #15]
 80094d2:	e00d      	b.n	80094f0 <stmpe811_TS_DetectTouch+0x66>
    }
  }
  else
  {
    /* Reset FIFO */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 80094d4:	88fb      	ldrh	r3, [r7, #6]
 80094d6:	b2db      	uxtb	r3, r3
 80094d8:	2201      	movs	r2, #1
 80094da:	214b      	movs	r1, #75	; 0x4b
 80094dc:	4618      	mov	r0, r3
 80094de:	f000 fbf2 	bl	8009cc6 <IOE_Write>
    /* Enable the FIFO again */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 80094e2:	88fb      	ldrh	r3, [r7, #6]
 80094e4:	b2db      	uxtb	r3, r3
 80094e6:	2200      	movs	r2, #0
 80094e8:	214b      	movs	r1, #75	; 0x4b
 80094ea:	4618      	mov	r0, r3
 80094ec:	f000 fbeb 	bl	8009cc6 <IOE_Write>
  }
  
  return ret;
 80094f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80094f2:	4618      	mov	r0, r3
 80094f4:	3710      	adds	r7, #16
 80094f6:	46bd      	mov	sp, r7
 80094f8:	bd80      	pop	{r7, pc}

080094fa <stmpe811_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value   
  * @retval None.
  */
void stmpe811_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 80094fa:	b580      	push	{r7, lr}
 80094fc:	b086      	sub	sp, #24
 80094fe:	af00      	add	r7, sp, #0
 8009500:	4603      	mov	r3, r0
 8009502:	60b9      	str	r1, [r7, #8]
 8009504:	607a      	str	r2, [r7, #4]
 8009506:	81fb      	strh	r3, [r7, #14]
  uint8_t  dataXYZ[4];
  uint32_t uldataXYZ;
  
  IOE_ReadMultiple(DeviceAddr, STMPE811_REG_TSC_DATA_NON_INC, dataXYZ, sizeof(dataXYZ)) ;
 8009508:	89fb      	ldrh	r3, [r7, #14]
 800950a:	b2d8      	uxtb	r0, r3
 800950c:	f107 0210 	add.w	r2, r7, #16
 8009510:	2304      	movs	r3, #4
 8009512:	21d7      	movs	r1, #215	; 0xd7
 8009514:	f000 fbfd 	bl	8009d12 <IOE_ReadMultiple>
  
  /* Calculate positions values */
  uldataXYZ = (dataXYZ[0] << 24)|(dataXYZ[1] << 16)|(dataXYZ[2] << 8)|(dataXYZ[3] << 0);     
 8009518:	7c3b      	ldrb	r3, [r7, #16]
 800951a:	061a      	lsls	r2, r3, #24
 800951c:	7c7b      	ldrb	r3, [r7, #17]
 800951e:	041b      	lsls	r3, r3, #16
 8009520:	431a      	orrs	r2, r3
 8009522:	7cbb      	ldrb	r3, [r7, #18]
 8009524:	021b      	lsls	r3, r3, #8
 8009526:	4313      	orrs	r3, r2
 8009528:	7cfa      	ldrb	r2, [r7, #19]
 800952a:	4313      	orrs	r3, r2
 800952c:	617b      	str	r3, [r7, #20]
  *X = (uldataXYZ >> 20) & 0x00000FFF;     
 800952e:	697b      	ldr	r3, [r7, #20]
 8009530:	0d1b      	lsrs	r3, r3, #20
 8009532:	b29a      	uxth	r2, r3
 8009534:	68bb      	ldr	r3, [r7, #8]
 8009536:	801a      	strh	r2, [r3, #0]
  *Y = (uldataXYZ >>  8) & 0x00000FFF;     
 8009538:	697b      	ldr	r3, [r7, #20]
 800953a:	0a1b      	lsrs	r3, r3, #8
 800953c:	b29b      	uxth	r3, r3
 800953e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009542:	b29a      	uxth	r2, r3
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	801a      	strh	r2, [r3, #0]
  
  /* Reset FIFO */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8009548:	89fb      	ldrh	r3, [r7, #14]
 800954a:	b2db      	uxtb	r3, r3
 800954c:	2201      	movs	r2, #1
 800954e:	214b      	movs	r1, #75	; 0x4b
 8009550:	4618      	mov	r0, r3
 8009552:	f000 fbb8 	bl	8009cc6 <IOE_Write>
  /* Enable the FIFO again */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8009556:	89fb      	ldrh	r3, [r7, #14]
 8009558:	b2db      	uxtb	r3, r3
 800955a:	2200      	movs	r2, #0
 800955c:	214b      	movs	r1, #75	; 0x4b
 800955e:	4618      	mov	r0, r3
 8009560:	f000 fbb1 	bl	8009cc6 <IOE_Write>
}
 8009564:	bf00      	nop
 8009566:	3718      	adds	r7, #24
 8009568:	46bd      	mov	sp, r7
 800956a:	bd80      	pop	{r7, pc}

0800956c <stmpe811_TS_EnableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_EnableIT(uint16_t DeviceAddr)
{
 800956c:	b580      	push	{r7, lr}
 800956e:	b082      	sub	sp, #8
 8009570:	af00      	add	r7, sp, #0
 8009572:	4603      	mov	r3, r0
 8009574:	80fb      	strh	r3, [r7, #6]
  IOE_ITConfig();
 8009576:	f000 fba0 	bl	8009cba <IOE_ITConfig>
  
  /* Enable global TS IT source */
  stmpe811_EnableITSource(DeviceAddr, STMPE811_TS_IT); 
 800957a:	88fb      	ldrh	r3, [r7, #6]
 800957c:	211f      	movs	r1, #31
 800957e:	4618      	mov	r0, r3
 8009580:	f7ff fe76 	bl	8009270 <stmpe811_EnableITSource>
  
  /* Enable global interrupt */
  stmpe811_EnableGlobalIT(DeviceAddr);
 8009584:	88fb      	ldrh	r3, [r7, #6]
 8009586:	4618      	mov	r0, r3
 8009588:	f7ff fe36 	bl	80091f8 <stmpe811_EnableGlobalIT>
}
 800958c:	bf00      	nop
 800958e:	3708      	adds	r7, #8
 8009590:	46bd      	mov	sp, r7
 8009592:	bd80      	pop	{r7, pc}

08009594 <stmpe811_TS_DisableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval None
  */
void stmpe811_TS_DisableIT(uint16_t DeviceAddr)
{
 8009594:	b580      	push	{r7, lr}
 8009596:	b082      	sub	sp, #8
 8009598:	af00      	add	r7, sp, #0
 800959a:	4603      	mov	r3, r0
 800959c:	80fb      	strh	r3, [r7, #6]
  /* Disable global interrupt */
  stmpe811_DisableGlobalIT(DeviceAddr);
 800959e:	88fb      	ldrh	r3, [r7, #6]
 80095a0:	4618      	mov	r0, r3
 80095a2:	f7ff fe47 	bl	8009234 <stmpe811_DisableGlobalIT>
  
  /* Disable global TS IT source */
  stmpe811_DisableITSource(DeviceAddr, STMPE811_TS_IT); 
 80095a6:	88fb      	ldrh	r3, [r7, #6]
 80095a8:	211f      	movs	r1, #31
 80095aa:	4618      	mov	r0, r3
 80095ac:	f7ff fe81 	bl	80092b2 <stmpe811_DisableITSource>
}
 80095b0:	bf00      	nop
 80095b2:	3708      	adds	r7, #8
 80095b4:	46bd      	mov	sp, r7
 80095b6:	bd80      	pop	{r7, pc}

080095b8 <stmpe811_TS_ITStatus>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval TS interrupts status
  */
uint8_t stmpe811_TS_ITStatus(uint16_t DeviceAddr)
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b082      	sub	sp, #8
 80095bc:	af00      	add	r7, sp, #0
 80095be:	4603      	mov	r3, r0
 80095c0:	80fb      	strh	r3, [r7, #6]
  /* Return TS interrupts status */
  return(stmpe811_ReadGITStatus(DeviceAddr, STMPE811_TS_IT));
 80095c2:	88fb      	ldrh	r3, [r7, #6]
 80095c4:	211f      	movs	r1, #31
 80095c6:	4618      	mov	r0, r3
 80095c8:	f7ff fe99 	bl	80092fe <stmpe811_ReadGITStatus>
 80095cc:	4603      	mov	r3, r0
}
 80095ce:	4618      	mov	r0, r3
 80095d0:	3708      	adds	r7, #8
 80095d2:	46bd      	mov	sp, r7
 80095d4:	bd80      	pop	{r7, pc}

080095d6 <stmpe811_TS_ClearIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_ClearIT(uint16_t DeviceAddr)
{
 80095d6:	b580      	push	{r7, lr}
 80095d8:	b082      	sub	sp, #8
 80095da:	af00      	add	r7, sp, #0
 80095dc:	4603      	mov	r3, r0
 80095de:	80fb      	strh	r3, [r7, #6]
  /* Clear the global TS IT source */
  stmpe811_ClearGlobalIT(DeviceAddr, STMPE811_TS_IT);
 80095e0:	88fb      	ldrh	r3, [r7, #6]
 80095e2:	211f      	movs	r1, #31
 80095e4:	4618      	mov	r0, r3
 80095e6:	f7ff fea1 	bl	800932c <stmpe811_ClearGlobalIT>
}
 80095ea:	bf00      	nop
 80095ec:	3708      	adds	r7, #8
 80095ee:	46bd      	mov	sp, r7
 80095f0:	bd80      	pop	{r7, pc}
	...

080095f4 <stmpe811_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t stmpe811_GetInstance(uint16_t DeviceAddr)
{
 80095f4:	b480      	push	{r7}
 80095f6:	b085      	sub	sp, #20
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	4603      	mov	r3, r0
 80095fc:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 80095fe:	2300      	movs	r3, #0
 8009600:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 8009602:	2300      	movs	r3, #0
 8009604:	73fb      	strb	r3, [r7, #15]
 8009606:	e00b      	b.n	8009620 <stmpe811_GetInstance+0x2c>
  {
    if(stmpe811[idx] == DeviceAddr)
 8009608:	7bfb      	ldrb	r3, [r7, #15]
 800960a:	4a0a      	ldr	r2, [pc, #40]	; (8009634 <stmpe811_GetInstance+0x40>)
 800960c:	5cd3      	ldrb	r3, [r2, r3]
 800960e:	b29b      	uxth	r3, r3
 8009610:	88fa      	ldrh	r2, [r7, #6]
 8009612:	429a      	cmp	r2, r3
 8009614:	d101      	bne.n	800961a <stmpe811_GetInstance+0x26>
    {
      return idx; 
 8009616:	7bfb      	ldrb	r3, [r7, #15]
 8009618:	e006      	b.n	8009628 <stmpe811_GetInstance+0x34>
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 800961a:	7bfb      	ldrb	r3, [r7, #15]
 800961c:	3301      	adds	r3, #1
 800961e:	73fb      	strb	r3, [r7, #15]
 8009620:	7bfb      	ldrb	r3, [r7, #15]
 8009622:	2b01      	cmp	r3, #1
 8009624:	d9f0      	bls.n	8009608 <stmpe811_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 8009626:	23ff      	movs	r3, #255	; 0xff
}
 8009628:	4618      	mov	r0, r3
 800962a:	3714      	adds	r7, #20
 800962c:	46bd      	mov	sp, r7
 800962e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009632:	4770      	bx	lr
 8009634:	200029e8 	.word	0x200029e8

08009638 <BSP_LED_Off>:
  *   This parameter can be one of following parameters:
  *     @arg LED3
  *     @arg LED4
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8009638:	b580      	push	{r7, lr}
 800963a:	b082      	sub	sp, #8
 800963c:	af00      	add	r7, sp, #0
 800963e:	4603      	mov	r3, r0
 8009640:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8009642:	79fb      	ldrb	r3, [r7, #7]
 8009644:	4a07      	ldr	r2, [pc, #28]	; (8009664 <BSP_LED_Off+0x2c>)
 8009646:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800964a:	79fb      	ldrb	r3, [r7, #7]
 800964c:	4a06      	ldr	r2, [pc, #24]	; (8009668 <BSP_LED_Off+0x30>)
 800964e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009652:	2200      	movs	r2, #0
 8009654:	4619      	mov	r1, r3
 8009656:	f002 ff63 	bl	800c520 <HAL_GPIO_WritePin>
}
 800965a:	bf00      	nop
 800965c:	3708      	adds	r7, #8
 800965e:	46bd      	mov	sp, r7
 8009660:	bd80      	pop	{r7, pc}
 8009662:	bf00      	nop
 8009664:	20000090 	.word	0x20000090
 8009668:	08016e3c 	.word	0x08016e3c

0800966c <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Initialization
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 800966c:	b580      	push	{r7, lr}
 800966e:	b08a      	sub	sp, #40	; 0x28
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
  
  I2C_HandleTypeDef* pI2cHandle;
  pI2cHandle = &I2cHandle;
#endif /* EE_M24LR64 */

  if (hi2c->Instance == DISCOVERY_I2Cx)
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	4a33      	ldr	r2, [pc, #204]	; (8009748 <I2Cx_MspInit+0xdc>)
 800967a:	4293      	cmp	r3, r2
 800967c:	d15f      	bne.n	800973e <I2Cx_MspInit+0xd2>
  {
    /* Configure the GPIOs ---------------------------------------------------*/ 
    /* Enable GPIO clock */
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
 800967e:	2300      	movs	r3, #0
 8009680:	613b      	str	r3, [r7, #16]
 8009682:	4b32      	ldr	r3, [pc, #200]	; (800974c <I2Cx_MspInit+0xe0>)
 8009684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009686:	4a31      	ldr	r2, [pc, #196]	; (800974c <I2Cx_MspInit+0xe0>)
 8009688:	f043 0304 	orr.w	r3, r3, #4
 800968c:	6313      	str	r3, [r2, #48]	; 0x30
 800968e:	4b2f      	ldr	r3, [pc, #188]	; (800974c <I2Cx_MspInit+0xe0>)
 8009690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009692:	f003 0304 	and.w	r3, r3, #4
 8009696:	613b      	str	r3, [r7, #16]
 8009698:	693b      	ldr	r3, [r7, #16]
    DISCOVERY_I2Cx_SCL_GPIO_CLK_ENABLE();
 800969a:	2300      	movs	r3, #0
 800969c:	60fb      	str	r3, [r7, #12]
 800969e:	4b2b      	ldr	r3, [pc, #172]	; (800974c <I2Cx_MspInit+0xe0>)
 80096a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096a2:	4a2a      	ldr	r2, [pc, #168]	; (800974c <I2Cx_MspInit+0xe0>)
 80096a4:	f043 0301 	orr.w	r3, r3, #1
 80096a8:	6313      	str	r3, [r2, #48]	; 0x30
 80096aa:	4b28      	ldr	r3, [pc, #160]	; (800974c <I2Cx_MspInit+0xe0>)
 80096ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096ae:	f003 0301 	and.w	r3, r3, #1
 80096b2:	60fb      	str	r3, [r7, #12]
 80096b4:	68fb      	ldr	r3, [r7, #12]
      
    /* Configure I2C Tx as alternate function  */
    GPIO_InitStruct.Pin       = DISCOVERY_I2Cx_SCL_PIN;
 80096b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80096ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
 80096bc:	2312      	movs	r3, #18
 80096be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 80096c0:	2300      	movs	r3, #0
 80096c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 80096c4:	2302      	movs	r3, #2
 80096c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 80096c8:	2304      	movs	r3, #4
 80096ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 80096cc:	f107 0314 	add.w	r3, r7, #20
 80096d0:	4619      	mov	r1, r3
 80096d2:	481f      	ldr	r0, [pc, #124]	; (8009750 <I2Cx_MspInit+0xe4>)
 80096d4:	f002 fc6c 	bl	800bfb0 <HAL_GPIO_Init>
      
    /* Configure I2C Rx as alternate function  */
    GPIO_InitStruct.Pin = DISCOVERY_I2Cx_SDA_PIN;
 80096d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80096dc:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(DISCOVERY_I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 80096de:	f107 0314 	add.w	r3, r7, #20
 80096e2:	4619      	mov	r1, r3
 80096e4:	481b      	ldr	r0, [pc, #108]	; (8009754 <I2Cx_MspInit+0xe8>)
 80096e6:	f002 fc63 	bl	800bfb0 <HAL_GPIO_Init>
    
    
    /* Configure the Discovery I2Cx peripheral -------------------------------*/ 
    /* Enable I2C3 clock */
    DISCOVERY_I2Cx_CLOCK_ENABLE();
 80096ea:	2300      	movs	r3, #0
 80096ec:	60bb      	str	r3, [r7, #8]
 80096ee:	4b17      	ldr	r3, [pc, #92]	; (800974c <I2Cx_MspInit+0xe0>)
 80096f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096f2:	4a16      	ldr	r2, [pc, #88]	; (800974c <I2Cx_MspInit+0xe0>)
 80096f4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80096f8:	6413      	str	r3, [r2, #64]	; 0x40
 80096fa:	4b14      	ldr	r3, [pc, #80]	; (800974c <I2Cx_MspInit+0xe0>)
 80096fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009702:	60bb      	str	r3, [r7, #8]
 8009704:	68bb      	ldr	r3, [r7, #8]
    
    /* Force the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_FORCE_RESET();
 8009706:	4b11      	ldr	r3, [pc, #68]	; (800974c <I2Cx_MspInit+0xe0>)
 8009708:	6a1b      	ldr	r3, [r3, #32]
 800970a:	4a10      	ldr	r2, [pc, #64]	; (800974c <I2Cx_MspInit+0xe0>)
 800970c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009710:	6213      	str	r3, [r2, #32]
      
    /* Release the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_RELEASE_RESET(); 
 8009712:	4b0e      	ldr	r3, [pc, #56]	; (800974c <I2Cx_MspInit+0xe0>)
 8009714:	6a1b      	ldr	r3, [r3, #32]
 8009716:	4a0d      	ldr	r2, [pc, #52]	; (800974c <I2Cx_MspInit+0xe0>)
 8009718:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800971c:	6213      	str	r3, [r2, #32]
    
    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 800971e:	2200      	movs	r2, #0
 8009720:	210f      	movs	r1, #15
 8009722:	2048      	movs	r0, #72	; 0x48
 8009724:	f001 fea4 	bl	800b470 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8009728:	2048      	movs	r0, #72	; 0x48
 800972a:	f001 febd 	bl	800b4a8 <HAL_NVIC_EnableIRQ>
    
    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 800972e:	2200      	movs	r2, #0
 8009730:	210f      	movs	r1, #15
 8009732:	2049      	movs	r0, #73	; 0x49
 8009734:	f001 fe9c 	bl	800b470 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);  
 8009738:	2049      	movs	r0, #73	; 0x49
 800973a:	f001 feb5 	bl	800b4a8 <HAL_NVIC_EnableIRQ>
    /* Configure and enable I2C DMA RX Channel interrupt */
    HAL_NVIC_SetPriority((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn), EEPROM_I2C_DMA_PREPRIO, 0);
    HAL_NVIC_EnableIRQ((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn));
#endif /* EE_M24LR64 */
  }
}
 800973e:	bf00      	nop
 8009740:	3728      	adds	r7, #40	; 0x28
 8009742:	46bd      	mov	sp, r7
 8009744:	bd80      	pop	{r7, pc}
 8009746:	bf00      	nop
 8009748:	40005c00 	.word	0x40005c00
 800974c:	40023800 	.word	0x40023800
 8009750:	40020000 	.word	0x40020000
 8009754:	40020800 	.word	0x40020800

08009758 <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 8009758:	b580      	push	{r7, lr}
 800975a:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 800975c:	4814      	ldr	r0, [pc, #80]	; (80097b0 <I2Cx_Init+0x58>)
 800975e:	f003 fb8d 	bl	800ce7c <HAL_I2C_GetState>
 8009762:	4603      	mov	r3, r0
 8009764:	2b00      	cmp	r3, #0
 8009766:	d121      	bne.n	80097ac <I2Cx_Init+0x54>
  {
    I2cHandle.Instance              = DISCOVERY_I2Cx;
 8009768:	4b11      	ldr	r3, [pc, #68]	; (80097b0 <I2Cx_Init+0x58>)
 800976a:	4a12      	ldr	r2, [pc, #72]	; (80097b4 <I2Cx_Init+0x5c>)
 800976c:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
 800976e:	4b10      	ldr	r3, [pc, #64]	; (80097b0 <I2Cx_Init+0x58>)
 8009770:	4a11      	ldr	r2, [pc, #68]	; (80097b8 <I2Cx_Init+0x60>)
 8009772:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle        = I2C_DUTYCYCLE_2;
 8009774:	4b0e      	ldr	r3, [pc, #56]	; (80097b0 <I2Cx_Init+0x58>)
 8009776:	2200      	movs	r2, #0
 8009778:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.OwnAddress1      = 0;
 800977a:	4b0d      	ldr	r3, [pc, #52]	; (80097b0 <I2Cx_Init+0x58>)
 800977c:	2200      	movs	r2, #0
 800977e:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8009780:	4b0b      	ldr	r3, [pc, #44]	; (80097b0 <I2Cx_Init+0x58>)
 8009782:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8009786:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLED;
 8009788:	4b09      	ldr	r3, [pc, #36]	; (80097b0 <I2Cx_Init+0x58>)
 800978a:	2200      	movs	r2, #0
 800978c:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2      = 0;
 800978e:	4b08      	ldr	r3, [pc, #32]	; (80097b0 <I2Cx_Init+0x58>)
 8009790:	2200      	movs	r2, #0
 8009792:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLED;
 8009794:	4b06      	ldr	r3, [pc, #24]	; (80097b0 <I2Cx_Init+0x58>)
 8009796:	2200      	movs	r2, #0
 8009798:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLED;  
 800979a:	4b05      	ldr	r3, [pc, #20]	; (80097b0 <I2Cx_Init+0x58>)
 800979c:	2200      	movs	r2, #0
 800979e:	621a      	str	r2, [r3, #32]
    
    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 80097a0:	4803      	ldr	r0, [pc, #12]	; (80097b0 <I2Cx_Init+0x58>)
 80097a2:	f7ff ff63 	bl	800966c <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 80097a6:	4802      	ldr	r0, [pc, #8]	; (80097b0 <I2Cx_Init+0x58>)
 80097a8:	f002 fed4 	bl	800c554 <HAL_I2C_Init>
  }
}
 80097ac:	bf00      	nop
 80097ae:	bd80      	pop	{r7, pc}
 80097b0:	200029ec 	.word	0x200029ec
 80097b4:	40005c00 	.word	0x40005c00
 80097b8:	000186a0 	.word	0x000186a0

080097bc <I2Cx_ITConfig>:

/**
  * @brief  Configures Interruption pin for I2C communication.
  */
static void I2Cx_ITConfig(void)
{
 80097bc:	b580      	push	{r7, lr}
 80097be:	b086      	sub	sp, #24
 80097c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;
    
  /* Enable the GPIO EXTI Clock */
  STMPE811_INT_CLK_ENABLE();
 80097c2:	2300      	movs	r3, #0
 80097c4:	603b      	str	r3, [r7, #0]
 80097c6:	4b13      	ldr	r3, [pc, #76]	; (8009814 <I2Cx_ITConfig+0x58>)
 80097c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097ca:	4a12      	ldr	r2, [pc, #72]	; (8009814 <I2Cx_ITConfig+0x58>)
 80097cc:	f043 0301 	orr.w	r3, r3, #1
 80097d0:	6313      	str	r3, [r2, #48]	; 0x30
 80097d2:	4b10      	ldr	r3, [pc, #64]	; (8009814 <I2Cx_ITConfig+0x58>)
 80097d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097d6:	f003 0301 	and.w	r3, r3, #1
 80097da:	603b      	str	r3, [r7, #0]
 80097dc:	683b      	ldr	r3, [r7, #0]
  
  GPIO_InitStruct.Pin   = STMPE811_INT_PIN;
 80097de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80097e2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 80097e4:	2301      	movs	r3, #1
 80097e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 80097e8:	2300      	movs	r3, #0
 80097ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode  = GPIO_MODE_IT_FALLING;
 80097ec:	4b0a      	ldr	r3, [pc, #40]	; (8009818 <I2Cx_ITConfig+0x5c>)
 80097ee:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(STMPE811_INT_GPIO_PORT, &GPIO_InitStruct);
 80097f0:	1d3b      	adds	r3, r7, #4
 80097f2:	4619      	mov	r1, r3
 80097f4:	4809      	ldr	r0, [pc, #36]	; (800981c <I2Cx_ITConfig+0x60>)
 80097f6:	f002 fbdb 	bl	800bfb0 <HAL_GPIO_Init>
    
  /* Enable and set GPIO EXTI Interrupt to the highest priority */
  HAL_NVIC_SetPriority((IRQn_Type)(STMPE811_INT_EXTI), 0x0F, 0x00);
 80097fa:	2200      	movs	r2, #0
 80097fc:	210f      	movs	r1, #15
 80097fe:	2028      	movs	r0, #40	; 0x28
 8009800:	f001 fe36 	bl	800b470 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(STMPE811_INT_EXTI));
 8009804:	2028      	movs	r0, #40	; 0x28
 8009806:	f001 fe4f 	bl	800b4a8 <HAL_NVIC_EnableIRQ>
}
 800980a:	bf00      	nop
 800980c:	3718      	adds	r7, #24
 800980e:	46bd      	mov	sp, r7
 8009810:	bd80      	pop	{r7, pc}
 8009812:	bf00      	nop
 8009814:	40023800 	.word	0x40023800
 8009818:	10210000 	.word	0x10210000
 800981c:	40020000 	.word	0x40020000

08009820 <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  */
static void I2Cx_WriteData(uint8_t Addr, uint8_t Reg, uint8_t Value)
  {
 8009820:	b580      	push	{r7, lr}
 8009822:	b088      	sub	sp, #32
 8009824:	af04      	add	r7, sp, #16
 8009826:	4603      	mov	r3, r0
 8009828:	71fb      	strb	r3, [r7, #7]
 800982a:	460b      	mov	r3, r1
 800982c:	71bb      	strb	r3, [r7, #6]
 800982e:	4613      	mov	r3, r2
 8009830:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8009832:	2300      	movs	r3, #0
 8009834:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout); 
 8009836:	79fb      	ldrb	r3, [r7, #7]
 8009838:	b299      	uxth	r1, r3
 800983a:	79bb      	ldrb	r3, [r7, #6]
 800983c:	b29a      	uxth	r2, r3
 800983e:	4b0b      	ldr	r3, [pc, #44]	; (800986c <I2Cx_WriteData+0x4c>)
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	9302      	str	r3, [sp, #8]
 8009844:	2301      	movs	r3, #1
 8009846:	9301      	str	r3, [sp, #4]
 8009848:	1d7b      	adds	r3, r7, #5
 800984a:	9300      	str	r3, [sp, #0]
 800984c:	2301      	movs	r3, #1
 800984e:	4808      	ldr	r0, [pc, #32]	; (8009870 <I2Cx_WriteData+0x50>)
 8009850:	f002 fff4 	bl	800c83c <HAL_I2C_Mem_Write>
 8009854:	4603      	mov	r3, r0
 8009856:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8009858:	7bfb      	ldrb	r3, [r7, #15]
 800985a:	2b00      	cmp	r3, #0
 800985c:	d001      	beq.n	8009862 <I2Cx_WriteData+0x42>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 800985e:	f000 f863 	bl	8009928 <I2Cx_Error>
  }        
}
 8009862:	bf00      	nop
 8009864:	3710      	adds	r7, #16
 8009866:	46bd      	mov	sp, r7
 8009868:	bd80      	pop	{r7, pc}
 800986a:	bf00      	nop
 800986c:	20000098 	.word	0x20000098
 8009870:	200029ec 	.word	0x200029ec

08009874 <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint8_t Addr, uint8_t Reg)
{
 8009874:	b580      	push	{r7, lr}
 8009876:	b088      	sub	sp, #32
 8009878:	af04      	add	r7, sp, #16
 800987a:	4603      	mov	r3, r0
 800987c:	460a      	mov	r2, r1
 800987e:	71fb      	strb	r3, [r7, #7]
 8009880:	4613      	mov	r3, r2
 8009882:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8009884:	2300      	movs	r3, #0
 8009886:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 8009888:	2300      	movs	r3, #0
 800988a:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 800988c:	79fb      	ldrb	r3, [r7, #7]
 800988e:	b299      	uxth	r1, r3
 8009890:	79bb      	ldrb	r3, [r7, #6]
 8009892:	b29a      	uxth	r2, r3
 8009894:	4b0b      	ldr	r3, [pc, #44]	; (80098c4 <I2Cx_ReadData+0x50>)
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	9302      	str	r3, [sp, #8]
 800989a:	2301      	movs	r3, #1
 800989c:	9301      	str	r3, [sp, #4]
 800989e:	f107 030e 	add.w	r3, r7, #14
 80098a2:	9300      	str	r3, [sp, #0]
 80098a4:	2301      	movs	r3, #1
 80098a6:	4808      	ldr	r0, [pc, #32]	; (80098c8 <I2Cx_ReadData+0x54>)
 80098a8:	f003 f8c2 	bl	800ca30 <HAL_I2C_Mem_Read>
 80098ac:	4603      	mov	r3, r0
 80098ae:	73fb      	strb	r3, [r7, #15]
 
  /* Check the communication status */
  if(status != HAL_OK)
 80098b0:	7bfb      	ldrb	r3, [r7, #15]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d001      	beq.n	80098ba <I2Cx_ReadData+0x46>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 80098b6:	f000 f837 	bl	8009928 <I2Cx_Error>
  
  }
  return value;
 80098ba:	7bbb      	ldrb	r3, [r7, #14]
}
 80098bc:	4618      	mov	r0, r3
 80098be:	3710      	adds	r7, #16
 80098c0:	46bd      	mov	sp, r7
 80098c2:	bd80      	pop	{r7, pc}
 80098c4:	20000098 	.word	0x20000098
 80098c8:	200029ec 	.word	0x200029ec

080098cc <I2Cx_ReadBuffer>:
  * @param  pBuffer: pointer to read data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
static uint8_t I2Cx_ReadBuffer(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 80098cc:	b580      	push	{r7, lr}
 80098ce:	b088      	sub	sp, #32
 80098d0:	af04      	add	r7, sp, #16
 80098d2:	603a      	str	r2, [r7, #0]
 80098d4:	461a      	mov	r2, r3
 80098d6:	4603      	mov	r3, r0
 80098d8:	71fb      	strb	r3, [r7, #7]
 80098da:	460b      	mov	r3, r1
 80098dc:	71bb      	strb	r3, [r7, #6]
 80098de:	4613      	mov	r3, r2
 80098e0:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80098e2:	2300      	movs	r3, #0
 80098e4:	73fb      	strb	r3, [r7, #15]

  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, pBuffer, Length, I2cxTimeout);
 80098e6:	79fb      	ldrb	r3, [r7, #7]
 80098e8:	b299      	uxth	r1, r3
 80098ea:	79bb      	ldrb	r3, [r7, #6]
 80098ec:	b29a      	uxth	r2, r3
 80098ee:	4b0c      	ldr	r3, [pc, #48]	; (8009920 <I2Cx_ReadBuffer+0x54>)
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	9302      	str	r3, [sp, #8]
 80098f4:	88bb      	ldrh	r3, [r7, #4]
 80098f6:	9301      	str	r3, [sp, #4]
 80098f8:	683b      	ldr	r3, [r7, #0]
 80098fa:	9300      	str	r3, [sp, #0]
 80098fc:	2301      	movs	r3, #1
 80098fe:	4809      	ldr	r0, [pc, #36]	; (8009924 <I2Cx_ReadBuffer+0x58>)
 8009900:	f003 f896 	bl	800ca30 <HAL_I2C_Mem_Read>
 8009904:	4603      	mov	r3, r0
 8009906:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status == HAL_OK)
 8009908:	7bfb      	ldrb	r3, [r7, #15]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d101      	bne.n	8009912 <I2Cx_ReadBuffer+0x46>
  {
    return 0;
 800990e:	2300      	movs	r3, #0
 8009910:	e002      	b.n	8009918 <I2Cx_ReadBuffer+0x4c>
  }
  else
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8009912:	f000 f809 	bl	8009928 <I2Cx_Error>

    return 1;
 8009916:	2301      	movs	r3, #1
  }
}
 8009918:	4618      	mov	r0, r3
 800991a:	3710      	adds	r7, #16
 800991c:	46bd      	mov	sp, r7
 800991e:	bd80      	pop	{r7, pc}
 8009920:	20000098 	.word	0x20000098
 8009924:	200029ec 	.word	0x200029ec

08009928 <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function
  */
static void I2Cx_Error(void)
{
 8009928:	b580      	push	{r7, lr}
 800992a:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 800992c:	4803      	ldr	r0, [pc, #12]	; (800993c <I2Cx_Error+0x14>)
 800992e:	f002 ff55 	bl	800c7dc <HAL_I2C_DeInit>
  
  /* Re-Initialize the SPI communication BUS */
  I2Cx_Init();
 8009932:	f7ff ff11 	bl	8009758 <I2Cx_Init>
}
 8009936:	bf00      	nop
 8009938:	bd80      	pop	{r7, pc}
 800993a:	bf00      	nop
 800993c:	200029ec 	.word	0x200029ec

08009940 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8009940:	b580      	push	{r7, lr}
 8009942:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8009944:	4819      	ldr	r0, [pc, #100]	; (80099ac <SPIx_Init+0x6c>)
 8009946:	f005 fce9 	bl	800f31c <HAL_SPI_GetState>
 800994a:	4603      	mov	r3, r0
 800994c:	2b00      	cmp	r3, #0
 800994e:	d12b      	bne.n	80099a8 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8009950:	4b16      	ldr	r3, [pc, #88]	; (80099ac <SPIx_Init+0x6c>)
 8009952:	4a17      	ldr	r2, [pc, #92]	; (80099b0 <SPIx_Init+0x70>)
 8009954:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8009956:	4b15      	ldr	r3, [pc, #84]	; (80099ac <SPIx_Init+0x6c>)
 8009958:	2218      	movs	r2, #24
 800995a:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 800995c:	4b13      	ldr	r3, [pc, #76]	; (80099ac <SPIx_Init+0x6c>)
 800995e:	2200      	movs	r2, #0
 8009960:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8009962:	4b12      	ldr	r3, [pc, #72]	; (80099ac <SPIx_Init+0x6c>)
 8009964:	2200      	movs	r2, #0
 8009966:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8009968:	4b10      	ldr	r3, [pc, #64]	; (80099ac <SPIx_Init+0x6c>)
 800996a:	2200      	movs	r2, #0
 800996c:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 800996e:	4b0f      	ldr	r3, [pc, #60]	; (80099ac <SPIx_Init+0x6c>)
 8009970:	2200      	movs	r2, #0
 8009972:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8009974:	4b0d      	ldr	r3, [pc, #52]	; (80099ac <SPIx_Init+0x6c>)
 8009976:	2207      	movs	r2, #7
 8009978:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 800997a:	4b0c      	ldr	r3, [pc, #48]	; (80099ac <SPIx_Init+0x6c>)
 800997c:	2200      	movs	r2, #0
 800997e:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8009980:	4b0a      	ldr	r3, [pc, #40]	; (80099ac <SPIx_Init+0x6c>)
 8009982:	2200      	movs	r2, #0
 8009984:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8009986:	4b09      	ldr	r3, [pc, #36]	; (80099ac <SPIx_Init+0x6c>)
 8009988:	f44f 7200 	mov.w	r2, #512	; 0x200
 800998c:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 800998e:	4b07      	ldr	r3, [pc, #28]	; (80099ac <SPIx_Init+0x6c>)
 8009990:	2200      	movs	r2, #0
 8009992:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8009994:	4b05      	ldr	r3, [pc, #20]	; (80099ac <SPIx_Init+0x6c>)
 8009996:	f44f 7282 	mov.w	r2, #260	; 0x104
 800999a:	605a      	str	r2, [r3, #4]

    SPIx_MspInit(&SpiHandle);
 800999c:	4803      	ldr	r0, [pc, #12]	; (80099ac <SPIx_Init+0x6c>)
 800999e:	f000 f853 	bl	8009a48 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 80099a2:	4802      	ldr	r0, [pc, #8]	; (80099ac <SPIx_Init+0x6c>)
 80099a4:	f005 f84f 	bl	800ea46 <HAL_SPI_Init>
  }
}
 80099a8:	bf00      	nop
 80099aa:	bd80      	pop	{r7, pc}
 80099ac:	20002a40 	.word	0x20002a40
 80099b0:	40015000 	.word	0x40015000

080099b4 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b084      	sub	sp, #16
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	4603      	mov	r3, r0
 80099bc:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 80099be:	2300      	movs	r3, #0
 80099c0:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 80099c2:	79fb      	ldrb	r3, [r7, #7]
 80099c4:	b29a      	uxth	r2, r3
 80099c6:	4b09      	ldr	r3, [pc, #36]	; (80099ec <SPIx_Read+0x38>)
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	f107 0108 	add.w	r1, r7, #8
 80099ce:	4808      	ldr	r0, [pc, #32]	; (80099f0 <SPIx_Read+0x3c>)
 80099d0:	f005 f9f9 	bl	800edc6 <HAL_SPI_Receive>
 80099d4:	4603      	mov	r3, r0
 80099d6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80099d8:	7bfb      	ldrb	r3, [r7, #15]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d001      	beq.n	80099e2 <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 80099de:	f000 f827 	bl	8009a30 <SPIx_Error>
  }
  
  return readvalue;
 80099e2:	68bb      	ldr	r3, [r7, #8]
}
 80099e4:	4618      	mov	r0, r3
 80099e6:	3710      	adds	r7, #16
 80099e8:	46bd      	mov	sp, r7
 80099ea:	bd80      	pop	{r7, pc}
 80099ec:	2000009c 	.word	0x2000009c
 80099f0:	20002a40 	.word	0x20002a40

080099f4 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	b084      	sub	sp, #16
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	4603      	mov	r3, r0
 80099fc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80099fe:	2300      	movs	r3, #0
 8009a00:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8009a02:	4b09      	ldr	r3, [pc, #36]	; (8009a28 <SPIx_Write+0x34>)
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	1db9      	adds	r1, r7, #6
 8009a08:	2201      	movs	r2, #1
 8009a0a:	4808      	ldr	r0, [pc, #32]	; (8009a2c <SPIx_Write+0x38>)
 8009a0c:	f005 f8a7 	bl	800eb5e <HAL_SPI_Transmit>
 8009a10:	4603      	mov	r3, r0
 8009a12:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8009a14:	7bfb      	ldrb	r3, [r7, #15]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d001      	beq.n	8009a1e <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8009a1a:	f000 f809 	bl	8009a30 <SPIx_Error>
  }
}
 8009a1e:	bf00      	nop
 8009a20:	3710      	adds	r7, #16
 8009a22:	46bd      	mov	sp, r7
 8009a24:	bd80      	pop	{r7, pc}
 8009a26:	bf00      	nop
 8009a28:	2000009c 	.word	0x2000009c
 8009a2c:	20002a40 	.word	0x20002a40

08009a30 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8009a30:	b580      	push	{r7, lr}
 8009a32:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8009a34:	4803      	ldr	r0, [pc, #12]	; (8009a44 <SPIx_Error+0x14>)
 8009a36:	f005 f86a 	bl	800eb0e <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 8009a3a:	f7ff ff81 	bl	8009940 <SPIx_Init>
}
 8009a3e:	bf00      	nop
 8009a40:	bd80      	pop	{r7, pc}
 8009a42:	bf00      	nop
 8009a44:	20002a40 	.word	0x20002a40

08009a48 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	b08a      	sub	sp, #40	; 0x28
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8009a50:	2300      	movs	r3, #0
 8009a52:	613b      	str	r3, [r7, #16]
 8009a54:	4b17      	ldr	r3, [pc, #92]	; (8009ab4 <SPIx_MspInit+0x6c>)
 8009a56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a58:	4a16      	ldr	r2, [pc, #88]	; (8009ab4 <SPIx_MspInit+0x6c>)
 8009a5a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009a5e:	6453      	str	r3, [r2, #68]	; 0x44
 8009a60:	4b14      	ldr	r3, [pc, #80]	; (8009ab4 <SPIx_MspInit+0x6c>)
 8009a62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009a68:	613b      	str	r3, [r7, #16]
 8009a6a:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	60fb      	str	r3, [r7, #12]
 8009a70:	4b10      	ldr	r3, [pc, #64]	; (8009ab4 <SPIx_MspInit+0x6c>)
 8009a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a74:	4a0f      	ldr	r2, [pc, #60]	; (8009ab4 <SPIx_MspInit+0x6c>)
 8009a76:	f043 0320 	orr.w	r3, r3, #32
 8009a7a:	6313      	str	r3, [r2, #48]	; 0x30
 8009a7c:	4b0d      	ldr	r3, [pc, #52]	; (8009ab4 <SPIx_MspInit+0x6c>)
 8009a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a80:	f003 0320 	and.w	r3, r3, #32
 8009a84:	60fb      	str	r3, [r7, #12]
 8009a86:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8009a88:	f44f 7360 	mov.w	r3, #896	; 0x380
 8009a8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8009a8e:	2302      	movs	r3, #2
 8009a90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8009a92:	2302      	movs	r3, #2
 8009a94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8009a96:	2301      	movs	r3, #1
 8009a98:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8009a9a:	2305      	movs	r3, #5
 8009a9c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);
 8009a9e:	f107 0314 	add.w	r3, r7, #20
 8009aa2:	4619      	mov	r1, r3
 8009aa4:	4804      	ldr	r0, [pc, #16]	; (8009ab8 <SPIx_MspInit+0x70>)
 8009aa6:	f002 fa83 	bl	800bfb0 <HAL_GPIO_Init>
}
 8009aaa:	bf00      	nop
 8009aac:	3728      	adds	r7, #40	; 0x28
 8009aae:	46bd      	mov	sp, r7
 8009ab0:	bd80      	pop	{r7, pc}
 8009ab2:	bf00      	nop
 8009ab4:	40023800 	.word	0x40023800
 8009ab8:	40021400 	.word	0x40021400

08009abc <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b088      	sub	sp, #32
 8009ac0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 8009ac2:	4b36      	ldr	r3, [pc, #216]	; (8009b9c <LCD_IO_Init+0xe0>)
 8009ac4:	781b      	ldrb	r3, [r3, #0]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d164      	bne.n	8009b94 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 8009aca:	4b34      	ldr	r3, [pc, #208]	; (8009b9c <LCD_IO_Init+0xe0>)
 8009acc:	2201      	movs	r2, #1
 8009ace:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8009ad0:	2300      	movs	r3, #0
 8009ad2:	60bb      	str	r3, [r7, #8]
 8009ad4:	4b32      	ldr	r3, [pc, #200]	; (8009ba0 <LCD_IO_Init+0xe4>)
 8009ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ad8:	4a31      	ldr	r2, [pc, #196]	; (8009ba0 <LCD_IO_Init+0xe4>)
 8009ada:	f043 0308 	orr.w	r3, r3, #8
 8009ade:	6313      	str	r3, [r2, #48]	; 0x30
 8009ae0:	4b2f      	ldr	r3, [pc, #188]	; (8009ba0 <LCD_IO_Init+0xe4>)
 8009ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ae4:	f003 0308 	and.w	r3, r3, #8
 8009ae8:	60bb      	str	r3, [r7, #8]
 8009aea:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8009aec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009af0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8009af2:	2301      	movs	r3, #1
 8009af4:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8009af6:	2300      	movs	r3, #0
 8009af8:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8009afa:	2302      	movs	r3, #2
 8009afc:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8009afe:	f107 030c 	add.w	r3, r7, #12
 8009b02:	4619      	mov	r1, r3
 8009b04:	4827      	ldr	r0, [pc, #156]	; (8009ba4 <LCD_IO_Init+0xe8>)
 8009b06:	f002 fa53 	bl	800bfb0 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	607b      	str	r3, [r7, #4]
 8009b0e:	4b24      	ldr	r3, [pc, #144]	; (8009ba0 <LCD_IO_Init+0xe4>)
 8009b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b12:	4a23      	ldr	r2, [pc, #140]	; (8009ba0 <LCD_IO_Init+0xe4>)
 8009b14:	f043 0308 	orr.w	r3, r3, #8
 8009b18:	6313      	str	r3, [r2, #48]	; 0x30
 8009b1a:	4b21      	ldr	r3, [pc, #132]	; (8009ba0 <LCD_IO_Init+0xe4>)
 8009b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b1e:	f003 0308 	and.w	r3, r3, #8
 8009b22:	607b      	str	r3, [r7, #4]
 8009b24:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8009b26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009b2a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8009b2c:	2301      	movs	r3, #1
 8009b2e:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8009b30:	2300      	movs	r3, #0
 8009b32:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8009b34:	2302      	movs	r3, #2
 8009b36:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8009b38:	f107 030c 	add.w	r3, r7, #12
 8009b3c:	4619      	mov	r1, r3
 8009b3e:	4819      	ldr	r0, [pc, #100]	; (8009ba4 <LCD_IO_Init+0xe8>)
 8009b40:	f002 fa36 	bl	800bfb0 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8009b44:	2300      	movs	r3, #0
 8009b46:	603b      	str	r3, [r7, #0]
 8009b48:	4b15      	ldr	r3, [pc, #84]	; (8009ba0 <LCD_IO_Init+0xe4>)
 8009b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b4c:	4a14      	ldr	r2, [pc, #80]	; (8009ba0 <LCD_IO_Init+0xe4>)
 8009b4e:	f043 0304 	orr.w	r3, r3, #4
 8009b52:	6313      	str	r3, [r2, #48]	; 0x30
 8009b54:	4b12      	ldr	r3, [pc, #72]	; (8009ba0 <LCD_IO_Init+0xe4>)
 8009b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b58:	f003 0304 	and.w	r3, r3, #4
 8009b5c:	603b      	str	r3, [r7, #0]
 8009b5e:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8009b60:	2304      	movs	r3, #4
 8009b62:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8009b64:	2301      	movs	r3, #1
 8009b66:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8009b68:	2300      	movs	r3, #0
 8009b6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8009b6c:	2302      	movs	r3, #2
 8009b6e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8009b70:	f107 030c 	add.w	r3, r7, #12
 8009b74:	4619      	mov	r1, r3
 8009b76:	480c      	ldr	r0, [pc, #48]	; (8009ba8 <LCD_IO_Init+0xec>)
 8009b78:	f002 fa1a 	bl	800bfb0 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8009b7c:	2200      	movs	r2, #0
 8009b7e:	2104      	movs	r1, #4
 8009b80:	4809      	ldr	r0, [pc, #36]	; (8009ba8 <LCD_IO_Init+0xec>)
 8009b82:	f002 fccd 	bl	800c520 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8009b86:	2201      	movs	r2, #1
 8009b88:	2104      	movs	r1, #4
 8009b8a:	4807      	ldr	r0, [pc, #28]	; (8009ba8 <LCD_IO_Init+0xec>)
 8009b8c:	f002 fcc8 	bl	800c520 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 8009b90:	f7ff fed6 	bl	8009940 <SPIx_Init>
  }
}
 8009b94:	bf00      	nop
 8009b96:	3720      	adds	r7, #32
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	bd80      	pop	{r7, pc}
 8009b9c:	20002a98 	.word	0x20002a98
 8009ba0:	40023800 	.word	0x40023800
 8009ba4:	40020c00 	.word	0x40020c00
 8009ba8:	40020800 	.word	0x40020800

08009bac <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8009bac:	b580      	push	{r7, lr}
 8009bae:	b082      	sub	sp, #8
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	4603      	mov	r3, r0
 8009bb4:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8009bb6:	2201      	movs	r2, #1
 8009bb8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009bbc:	480a      	ldr	r0, [pc, #40]	; (8009be8 <LCD_IO_WriteData+0x3c>)
 8009bbe:	f002 fcaf 	bl	800c520 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 8009bc2:	2200      	movs	r2, #0
 8009bc4:	2104      	movs	r1, #4
 8009bc6:	4809      	ldr	r0, [pc, #36]	; (8009bec <LCD_IO_WriteData+0x40>)
 8009bc8:	f002 fcaa 	bl	800c520 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8009bcc:	88fb      	ldrh	r3, [r7, #6]
 8009bce:	4618      	mov	r0, r3
 8009bd0:	f7ff ff10 	bl	80099f4 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8009bd4:	2201      	movs	r2, #1
 8009bd6:	2104      	movs	r1, #4
 8009bd8:	4804      	ldr	r0, [pc, #16]	; (8009bec <LCD_IO_WriteData+0x40>)
 8009bda:	f002 fca1 	bl	800c520 <HAL_GPIO_WritePin>
}
 8009bde:	bf00      	nop
 8009be0:	3708      	adds	r7, #8
 8009be2:	46bd      	mov	sp, r7
 8009be4:	bd80      	pop	{r7, pc}
 8009be6:	bf00      	nop
 8009be8:	40020c00 	.word	0x40020c00
 8009bec:	40020800 	.word	0x40020800

08009bf0 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b082      	sub	sp, #8
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	4603      	mov	r3, r0
 8009bf8:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8009bfa:	2200      	movs	r2, #0
 8009bfc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009c00:	480a      	ldr	r0, [pc, #40]	; (8009c2c <LCD_IO_WriteReg+0x3c>)
 8009c02:	f002 fc8d 	bl	800c520 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8009c06:	2200      	movs	r2, #0
 8009c08:	2104      	movs	r1, #4
 8009c0a:	4809      	ldr	r0, [pc, #36]	; (8009c30 <LCD_IO_WriteReg+0x40>)
 8009c0c:	f002 fc88 	bl	800c520 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8009c10:	79fb      	ldrb	r3, [r7, #7]
 8009c12:	b29b      	uxth	r3, r3
 8009c14:	4618      	mov	r0, r3
 8009c16:	f7ff feed 	bl	80099f4 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8009c1a:	2201      	movs	r2, #1
 8009c1c:	2104      	movs	r1, #4
 8009c1e:	4804      	ldr	r0, [pc, #16]	; (8009c30 <LCD_IO_WriteReg+0x40>)
 8009c20:	f002 fc7e 	bl	800c520 <HAL_GPIO_WritePin>
}
 8009c24:	bf00      	nop
 8009c26:	3708      	adds	r7, #8
 8009c28:	46bd      	mov	sp, r7
 8009c2a:	bd80      	pop	{r7, pc}
 8009c2c:	40020c00 	.word	0x40020c00
 8009c30:	40020800 	.word	0x40020800

08009c34 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 8009c34:	b580      	push	{r7, lr}
 8009c36:	b084      	sub	sp, #16
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	4603      	mov	r3, r0
 8009c3c:	460a      	mov	r2, r1
 8009c3e:	80fb      	strh	r3, [r7, #6]
 8009c40:	4613      	mov	r3, r2
 8009c42:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8009c44:	2300      	movs	r3, #0
 8009c46:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8009c48:	2200      	movs	r2, #0
 8009c4a:	2104      	movs	r1, #4
 8009c4c:	4810      	ldr	r0, [pc, #64]	; (8009c90 <LCD_IO_ReadData+0x5c>)
 8009c4e:	f002 fc67 	bl	800c520 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8009c52:	2200      	movs	r2, #0
 8009c54:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009c58:	480e      	ldr	r0, [pc, #56]	; (8009c94 <LCD_IO_ReadData+0x60>)
 8009c5a:	f002 fc61 	bl	800c520 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 8009c5e:	88fb      	ldrh	r3, [r7, #6]
 8009c60:	4618      	mov	r0, r3
 8009c62:	f7ff fec7 	bl	80099f4 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 8009c66:	797b      	ldrb	r3, [r7, #5]
 8009c68:	4618      	mov	r0, r3
 8009c6a:	f7ff fea3 	bl	80099b4 <SPIx_Read>
 8009c6e:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8009c70:	2201      	movs	r2, #1
 8009c72:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009c76:	4807      	ldr	r0, [pc, #28]	; (8009c94 <LCD_IO_ReadData+0x60>)
 8009c78:	f002 fc52 	bl	800c520 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8009c7c:	2201      	movs	r2, #1
 8009c7e:	2104      	movs	r1, #4
 8009c80:	4803      	ldr	r0, [pc, #12]	; (8009c90 <LCD_IO_ReadData+0x5c>)
 8009c82:	f002 fc4d 	bl	800c520 <HAL_GPIO_WritePin>
  
  return readvalue;
 8009c86:	68fb      	ldr	r3, [r7, #12]
}
 8009c88:	4618      	mov	r0, r3
 8009c8a:	3710      	adds	r7, #16
 8009c8c:	46bd      	mov	sp, r7
 8009c8e:	bd80      	pop	{r7, pc}
 8009c90:	40020800 	.word	0x40020800
 8009c94:	40020c00 	.word	0x40020c00

08009c98 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8009c98:	b580      	push	{r7, lr}
 8009c9a:	b082      	sub	sp, #8
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8009ca0:	6878      	ldr	r0, [r7, #4]
 8009ca2:	f001 fb09 	bl	800b2b8 <HAL_Delay>
}
 8009ca6:	bf00      	nop
 8009ca8:	3708      	adds	r7, #8
 8009caa:	46bd      	mov	sp, r7
 8009cac:	bd80      	pop	{r7, pc}

08009cae <IOE_Init>:

/**
  * @brief  IOE Low Level Initialization.
  */
void IOE_Init(void) 
{
 8009cae:	b580      	push	{r7, lr}
 8009cb0:	af00      	add	r7, sp, #0
  I2Cx_Init();
 8009cb2:	f7ff fd51 	bl	8009758 <I2Cx_Init>
}
 8009cb6:	bf00      	nop
 8009cb8:	bd80      	pop	{r7, pc}

08009cba <IOE_ITConfig>:

/**
  * @brief  IOE Low Level Interrupt configuration.
  */
void IOE_ITConfig(void)
{
 8009cba:	b580      	push	{r7, lr}
 8009cbc:	af00      	add	r7, sp, #0
  I2Cx_ITConfig();
 8009cbe:	f7ff fd7d 	bl	80097bc <I2Cx_ITConfig>
}
 8009cc2:	bf00      	nop
 8009cc4:	bd80      	pop	{r7, pc}

08009cc6 <IOE_Write>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @param  Value: Data to be written
  */
void IOE_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8009cc6:	b580      	push	{r7, lr}
 8009cc8:	b082      	sub	sp, #8
 8009cca:	af00      	add	r7, sp, #0
 8009ccc:	4603      	mov	r3, r0
 8009cce:	71fb      	strb	r3, [r7, #7]
 8009cd0:	460b      	mov	r3, r1
 8009cd2:	71bb      	strb	r3, [r7, #6]
 8009cd4:	4613      	mov	r3, r2
 8009cd6:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteData(Addr, Reg, Value);
 8009cd8:	797a      	ldrb	r2, [r7, #5]
 8009cda:	79b9      	ldrb	r1, [r7, #6]
 8009cdc:	79fb      	ldrb	r3, [r7, #7]
 8009cde:	4618      	mov	r0, r3
 8009ce0:	f7ff fd9e 	bl	8009820 <I2Cx_WriteData>
}
 8009ce4:	bf00      	nop
 8009ce6:	3708      	adds	r7, #8
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	bd80      	pop	{r7, pc}

08009cec <IOE_Read>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @retval The read data
  */
uint8_t IOE_Read(uint8_t Addr, uint8_t Reg)
{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	b082      	sub	sp, #8
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	4603      	mov	r3, r0
 8009cf4:	460a      	mov	r2, r1
 8009cf6:	71fb      	strb	r3, [r7, #7]
 8009cf8:	4613      	mov	r3, r2
 8009cfa:	71bb      	strb	r3, [r7, #6]
  return I2Cx_ReadData(Addr, Reg);
 8009cfc:	79ba      	ldrb	r2, [r7, #6]
 8009cfe:	79fb      	ldrb	r3, [r7, #7]
 8009d00:	4611      	mov	r1, r2
 8009d02:	4618      	mov	r0, r3
 8009d04:	f7ff fdb6 	bl	8009874 <I2Cx_ReadData>
 8009d08:	4603      	mov	r3, r0
}
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	3708      	adds	r7, #8
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	bd80      	pop	{r7, pc}

08009d12 <IOE_ReadMultiple>:
  * @param  pBuffer: pointer to data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
uint16_t IOE_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 8009d12:	b580      	push	{r7, lr}
 8009d14:	b082      	sub	sp, #8
 8009d16:	af00      	add	r7, sp, #0
 8009d18:	603a      	str	r2, [r7, #0]
 8009d1a:	461a      	mov	r2, r3
 8009d1c:	4603      	mov	r3, r0
 8009d1e:	71fb      	strb	r3, [r7, #7]
 8009d20:	460b      	mov	r3, r1
 8009d22:	71bb      	strb	r3, [r7, #6]
 8009d24:	4613      	mov	r3, r2
 8009d26:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadBuffer(Addr, Reg, pBuffer, Length);
 8009d28:	88bb      	ldrh	r3, [r7, #4]
 8009d2a:	79b9      	ldrb	r1, [r7, #6]
 8009d2c:	79f8      	ldrb	r0, [r7, #7]
 8009d2e:	683a      	ldr	r2, [r7, #0]
 8009d30:	f7ff fdcc 	bl	80098cc <I2Cx_ReadBuffer>
 8009d34:	4603      	mov	r3, r0
 8009d36:	b29b      	uxth	r3, r3
}
 8009d38:	4618      	mov	r0, r3
 8009d3a:	3708      	adds	r7, #8
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	bd80      	pop	{r7, pc}

08009d40 <IOE_Delay>:
/**
  * @brief  IOE Delay.
  * @param  Delay in ms
  */
void IOE_Delay(uint32_t Delay)
{
 8009d40:	b580      	push	{r7, lr}
 8009d42:	b082      	sub	sp, #8
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8009d48:	6878      	ldr	r0, [r7, #4]
 8009d4a:	f001 fab5 	bl	800b2b8 <HAL_Delay>
}
 8009d4e:	bf00      	nop
 8009d50:	3708      	adds	r7, #8
 8009d52:	46bd      	mov	sp, r7
 8009d54:	bd80      	pop	{r7, pc}
	...

08009d58 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 8009d5c:	4b2d      	ldr	r3, [pc, #180]	; (8009e14 <BSP_LCD_Init+0xbc>)
 8009d5e:	4a2e      	ldr	r2, [pc, #184]	; (8009e18 <BSP_LCD_Init+0xc0>)
 8009d60:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 8009d62:	4b2c      	ldr	r3, [pc, #176]	; (8009e14 <BSP_LCD_Init+0xbc>)
 8009d64:	2209      	movs	r2, #9
 8009d66:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8009d68:	4b2a      	ldr	r3, [pc, #168]	; (8009e14 <BSP_LCD_Init+0xbc>)
 8009d6a:	2201      	movs	r2, #1
 8009d6c:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 8009d6e:	4b29      	ldr	r3, [pc, #164]	; (8009e14 <BSP_LCD_Init+0xbc>)
 8009d70:	221d      	movs	r2, #29
 8009d72:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8009d74:	4b27      	ldr	r3, [pc, #156]	; (8009e14 <BSP_LCD_Init+0xbc>)
 8009d76:	2203      	movs	r2, #3
 8009d78:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 8009d7a:	4b26      	ldr	r3, [pc, #152]	; (8009e14 <BSP_LCD_Init+0xbc>)
 8009d7c:	f240 120d 	movw	r2, #269	; 0x10d
 8009d80:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 8009d82:	4b24      	ldr	r3, [pc, #144]	; (8009e14 <BSP_LCD_Init+0xbc>)
 8009d84:	f240 1243 	movw	r2, #323	; 0x143
 8009d88:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 8009d8a:	4b22      	ldr	r3, [pc, #136]	; (8009e14 <BSP_LCD_Init+0xbc>)
 8009d8c:	f240 1217 	movw	r2, #279	; 0x117
 8009d90:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 8009d92:	4b20      	ldr	r3, [pc, #128]	; (8009e14 <BSP_LCD_Init+0xbc>)
 8009d94:	f240 1247 	movw	r2, #327	; 0x147
 8009d98:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 8009d9a:	4b1e      	ldr	r3, [pc, #120]	; (8009e14 <BSP_LCD_Init+0xbc>)
 8009d9c:	2200      	movs	r2, #0
 8009d9e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 8009da2:	4b1c      	ldr	r3, [pc, #112]	; (8009e14 <BSP_LCD_Init+0xbc>)
 8009da4:	2200      	movs	r2, #0
 8009da6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 8009daa:	4b1a      	ldr	r3, [pc, #104]	; (8009e14 <BSP_LCD_Init+0xbc>)
 8009dac:	2200      	movs	r2, #0
 8009dae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8009db2:	4b1a      	ldr	r3, [pc, #104]	; (8009e1c <BSP_LCD_Init+0xc4>)
 8009db4:	2208      	movs	r2, #8
 8009db6:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8009db8:	4b18      	ldr	r3, [pc, #96]	; (8009e1c <BSP_LCD_Init+0xc4>)
 8009dba:	22c0      	movs	r2, #192	; 0xc0
 8009dbc:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8009dbe:	4b17      	ldr	r3, [pc, #92]	; (8009e1c <BSP_LCD_Init+0xc4>)
 8009dc0:	2204      	movs	r2, #4
 8009dc2:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8009dc4:	4b15      	ldr	r3, [pc, #84]	; (8009e1c <BSP_LCD_Init+0xc4>)
 8009dc6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8009dca:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 8009dcc:	4813      	ldr	r0, [pc, #76]	; (8009e1c <BSP_LCD_Init+0xc4>)
 8009dce:	f004 fbfb 	bl	800e5c8 <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8009dd2:	4b10      	ldr	r3, [pc, #64]	; (8009e14 <BSP_LCD_Init+0xbc>)
 8009dd4:	2200      	movs	r2, #0
 8009dd6:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8009dd8:	4b0e      	ldr	r3, [pc, #56]	; (8009e14 <BSP_LCD_Init+0xbc>)
 8009dda:	2200      	movs	r2, #0
 8009ddc:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8009dde:	4b0d      	ldr	r3, [pc, #52]	; (8009e14 <BSP_LCD_Init+0xbc>)
 8009de0:	2200      	movs	r2, #0
 8009de2:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8009de4:	4b0b      	ldr	r3, [pc, #44]	; (8009e14 <BSP_LCD_Init+0xbc>)
 8009de6:	2200      	movs	r2, #0
 8009de8:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 8009dea:	f000 fd7f 	bl	800a8ec <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 8009dee:	4809      	ldr	r0, [pc, #36]	; (8009e14 <BSP_LCD_Init+0xbc>)
 8009df0:	f003 fc24 	bl	800d63c <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 8009df4:	4b0a      	ldr	r3, [pc, #40]	; (8009e20 <BSP_LCD_Init+0xc8>)
 8009df6:	4a0b      	ldr	r2, [pc, #44]	; (8009e24 <BSP_LCD_Init+0xcc>)
 8009df8:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 8009dfa:	4b09      	ldr	r3, [pc, #36]	; (8009e20 <BSP_LCD_Init+0xc8>)
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 8009e02:	f000 ff61 	bl	800acc8 <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8009e06:	4808      	ldr	r0, [pc, #32]	; (8009e28 <BSP_LCD_Init+0xd0>)
 8009e08:	f000 f8e0 	bl	8009fcc <BSP_LCD_SetFont>

  return LCD_OK;
 8009e0c:	2300      	movs	r3, #0
}  
 8009e0e:	4618      	mov	r0, r3
 8009e10:	bd80      	pop	{r7, pc}
 8009e12:	bf00      	nop
 8009e14:	20002a9c 	.word	0x20002a9c
 8009e18:	40016800 	.word	0x40016800
 8009e1c:	20002b84 	.word	0x20002b84
 8009e20:	20002bd0 	.word	0x20002bd0
 8009e24:	20000030 	.word	0x20000030
 8009e28:	200000c4 	.word	0x200000c4

08009e2c <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8009e30:	4b03      	ldr	r3, [pc, #12]	; (8009e40 <BSP_LCD_GetXSize+0x14>)
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e36:	4798      	blx	r3
 8009e38:	4603      	mov	r3, r0
}
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	bd80      	pop	{r7, pc}
 8009e3e:	bf00      	nop
 8009e40:	20002bd0 	.word	0x20002bd0

08009e44 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8009e44:	b580      	push	{r7, lr}
 8009e46:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 8009e48:	4b03      	ldr	r3, [pc, #12]	; (8009e58 <BSP_LCD_GetYSize+0x14>)
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e4e:	4798      	blx	r3
 8009e50:	4603      	mov	r3, r0
}
 8009e52:	4618      	mov	r0, r3
 8009e54:	bd80      	pop	{r7, pc}
 8009e56:	bf00      	nop
 8009e58:	20002bd0 	.word	0x20002bd0

08009e5c <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8009e5c:	b580      	push	{r7, lr}
 8009e5e:	b090      	sub	sp, #64	; 0x40
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	4603      	mov	r3, r0
 8009e64:	6039      	str	r1, [r7, #0]
 8009e66:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 8009e68:	2300      	movs	r3, #0
 8009e6a:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8009e6c:	f7ff ffde 	bl	8009e2c <BSP_LCD_GetXSize>
 8009e70:	4603      	mov	r3, r0
 8009e72:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8009e74:	2300      	movs	r3, #0
 8009e76:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8009e78:	f7ff ffe4 	bl	8009e44 <BSP_LCD_GetYSize>
 8009e7c:	4603      	mov	r3, r0
 8009e7e:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8009e80:	2300      	movs	r3, #0
 8009e82:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8009e84:	683b      	ldr	r3, [r7, #0]
 8009e86:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 8009e88:	23ff      	movs	r3, #255	; 0xff
 8009e8a:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8009e90:	2300      	movs	r3, #0
 8009e92:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 8009e96:	2300      	movs	r3, #0
 8009e98:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 8009e9c:	2300      	movs	r3, #0
 8009e9e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8009ea2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8009ea6:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8009ea8:	2307      	movs	r3, #7
 8009eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8009eac:	f7ff ffbe 	bl	8009e2c <BSP_LCD_GetXSize>
 8009eb0:	4603      	mov	r3, r0
 8009eb2:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8009eb4:	f7ff ffc6 	bl	8009e44 <BSP_LCD_GetYSize>
 8009eb8:	4603      	mov	r3, r0
 8009eba:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 8009ebc:	88fa      	ldrh	r2, [r7, #6]
 8009ebe:	f107 030c 	add.w	r3, r7, #12
 8009ec2:	4619      	mov	r1, r3
 8009ec4:	4814      	ldr	r0, [pc, #80]	; (8009f18 <BSP_LCD_LayerDefaultInit+0xbc>)
 8009ec6:	f003 fc89 	bl	800d7dc <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8009eca:	88fa      	ldrh	r2, [r7, #6]
 8009ecc:	4913      	ldr	r1, [pc, #76]	; (8009f1c <BSP_LCD_LayerDefaultInit+0xc0>)
 8009ece:	4613      	mov	r3, r2
 8009ed0:	005b      	lsls	r3, r3, #1
 8009ed2:	4413      	add	r3, r2
 8009ed4:	009b      	lsls	r3, r3, #2
 8009ed6:	440b      	add	r3, r1
 8009ed8:	3304      	adds	r3, #4
 8009eda:	f04f 32ff 	mov.w	r2, #4294967295
 8009ede:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8009ee0:	88fa      	ldrh	r2, [r7, #6]
 8009ee2:	490e      	ldr	r1, [pc, #56]	; (8009f1c <BSP_LCD_LayerDefaultInit+0xc0>)
 8009ee4:	4613      	mov	r3, r2
 8009ee6:	005b      	lsls	r3, r3, #1
 8009ee8:	4413      	add	r3, r2
 8009eea:	009b      	lsls	r3, r3, #2
 8009eec:	440b      	add	r3, r1
 8009eee:	3308      	adds	r3, #8
 8009ef0:	4a0b      	ldr	r2, [pc, #44]	; (8009f20 <BSP_LCD_LayerDefaultInit+0xc4>)
 8009ef2:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8009ef4:	88fa      	ldrh	r2, [r7, #6]
 8009ef6:	4909      	ldr	r1, [pc, #36]	; (8009f1c <BSP_LCD_LayerDefaultInit+0xc0>)
 8009ef8:	4613      	mov	r3, r2
 8009efa:	005b      	lsls	r3, r3, #1
 8009efc:	4413      	add	r3, r2
 8009efe:	009b      	lsls	r3, r3, #2
 8009f00:	440b      	add	r3, r1
 8009f02:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8009f06:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 8009f08:	4803      	ldr	r0, [pc, #12]	; (8009f18 <BSP_LCD_LayerDefaultInit+0xbc>)
 8009f0a:	f003 fca5 	bl	800d858 <HAL_LTDC_EnableDither>
}
 8009f0e:	bf00      	nop
 8009f10:	3740      	adds	r7, #64	; 0x40
 8009f12:	46bd      	mov	sp, r7
 8009f14:	bd80      	pop	{r7, pc}
 8009f16:	bf00      	nop
 8009f18:	20002a9c 	.word	0x20002a9c
 8009f1c:	20002bb8 	.word	0x20002bb8
 8009f20:	200000c4 	.word	0x200000c4

08009f24 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8009f24:	b480      	push	{r7}
 8009f26:	b083      	sub	sp, #12
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8009f2c:	4a04      	ldr	r2, [pc, #16]	; (8009f40 <BSP_LCD_SelectLayer+0x1c>)
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	6013      	str	r3, [r2, #0]
}
 8009f32:	bf00      	nop
 8009f34:	370c      	adds	r7, #12
 8009f36:	46bd      	mov	sp, r7
 8009f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3c:	4770      	bx	lr
 8009f3e:	bf00      	nop
 8009f40:	20002bb4 	.word	0x20002bb4

08009f44 <BSP_LCD_SetTransparency>:
  * @param  LayerIndex: the Layer foreground or background.
  * @param  Transparency: the Transparency, 
  *    This parameter must range from 0x00 to 0xFF.
  */
void BSP_LCD_SetTransparency(uint32_t LayerIndex, uint8_t Transparency)
{     
 8009f44:	b580      	push	{r7, lr}
 8009f46:	b082      	sub	sp, #8
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	6078      	str	r0, [r7, #4]
 8009f4c:	460b      	mov	r3, r1
 8009f4e:	70fb      	strb	r3, [r7, #3]
  HAL_LTDC_SetAlpha(&LtdcHandler, Transparency, LayerIndex);
 8009f50:	78fb      	ldrb	r3, [r7, #3]
 8009f52:	687a      	ldr	r2, [r7, #4]
 8009f54:	4619      	mov	r1, r3
 8009f56:	4803      	ldr	r0, [pc, #12]	; (8009f64 <BSP_LCD_SetTransparency+0x20>)
 8009f58:	f003 fca8 	bl	800d8ac <HAL_LTDC_SetAlpha>
}
 8009f5c:	bf00      	nop
 8009f5e:	3708      	adds	r7, #8
 8009f60:	46bd      	mov	sp, r7
 8009f62:	bd80      	pop	{r7, pc}
 8009f64:	20002a9c 	.word	0x20002a9c

08009f68 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8009f68:	b480      	push	{r7}
 8009f6a:	b083      	sub	sp, #12
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8009f70:	4b07      	ldr	r3, [pc, #28]	; (8009f90 <BSP_LCD_SetTextColor+0x28>)
 8009f72:	681a      	ldr	r2, [r3, #0]
 8009f74:	4907      	ldr	r1, [pc, #28]	; (8009f94 <BSP_LCD_SetTextColor+0x2c>)
 8009f76:	4613      	mov	r3, r2
 8009f78:	005b      	lsls	r3, r3, #1
 8009f7a:	4413      	add	r3, r2
 8009f7c:	009b      	lsls	r3, r3, #2
 8009f7e:	440b      	add	r3, r1
 8009f80:	687a      	ldr	r2, [r7, #4]
 8009f82:	601a      	str	r2, [r3, #0]
}
 8009f84:	bf00      	nop
 8009f86:	370c      	adds	r7, #12
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8e:	4770      	bx	lr
 8009f90:	20002bb4 	.word	0x20002bb4
 8009f94:	20002bb8 	.word	0x20002bb8

08009f98 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8009f98:	b480      	push	{r7}
 8009f9a:	b083      	sub	sp, #12
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8009fa0:	4b08      	ldr	r3, [pc, #32]	; (8009fc4 <BSP_LCD_SetBackColor+0x2c>)
 8009fa2:	681a      	ldr	r2, [r3, #0]
 8009fa4:	4908      	ldr	r1, [pc, #32]	; (8009fc8 <BSP_LCD_SetBackColor+0x30>)
 8009fa6:	4613      	mov	r3, r2
 8009fa8:	005b      	lsls	r3, r3, #1
 8009faa:	4413      	add	r3, r2
 8009fac:	009b      	lsls	r3, r3, #2
 8009fae:	440b      	add	r3, r1
 8009fb0:	3304      	adds	r3, #4
 8009fb2:	687a      	ldr	r2, [r7, #4]
 8009fb4:	601a      	str	r2, [r3, #0]
}
 8009fb6:	bf00      	nop
 8009fb8:	370c      	adds	r7, #12
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc0:	4770      	bx	lr
 8009fc2:	bf00      	nop
 8009fc4:	20002bb4 	.word	0x20002bb4
 8009fc8:	20002bb8 	.word	0x20002bb8

08009fcc <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 8009fcc:	b480      	push	{r7}
 8009fce:	b083      	sub	sp, #12
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 8009fd4:	4b08      	ldr	r3, [pc, #32]	; (8009ff8 <BSP_LCD_SetFont+0x2c>)
 8009fd6:	681a      	ldr	r2, [r3, #0]
 8009fd8:	4908      	ldr	r1, [pc, #32]	; (8009ffc <BSP_LCD_SetFont+0x30>)
 8009fda:	4613      	mov	r3, r2
 8009fdc:	005b      	lsls	r3, r3, #1
 8009fde:	4413      	add	r3, r2
 8009fe0:	009b      	lsls	r3, r3, #2
 8009fe2:	440b      	add	r3, r1
 8009fe4:	3308      	adds	r3, #8
 8009fe6:	687a      	ldr	r2, [r7, #4]
 8009fe8:	601a      	str	r2, [r3, #0]
}
 8009fea:	bf00      	nop
 8009fec:	370c      	adds	r7, #12
 8009fee:	46bd      	mov	sp, r7
 8009ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff4:	4770      	bx	lr
 8009ff6:	bf00      	nop
 8009ff8:	20002bb4 	.word	0x20002bb4
 8009ffc:	20002bb8 	.word	0x20002bb8

0800a000 <BSP_LCD_ReadPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position 
  * @retval RGB pixel color
  */
uint32_t BSP_LCD_ReadPixel(uint16_t Xpos, uint16_t Ypos)
{
 800a000:	b5b0      	push	{r4, r5, r7, lr}
 800a002:	b084      	sub	sp, #16
 800a004:	af00      	add	r7, sp, #0
 800a006:	4603      	mov	r3, r0
 800a008:	460a      	mov	r2, r1
 800a00a:	80fb      	strh	r3, [r7, #6]
 800a00c:	4613      	mov	r3, r2
 800a00e:	80bb      	strh	r3, [r7, #4]
  uint32_t ret = 0;
 800a010:	2300      	movs	r3, #0
 800a012:	60fb      	str	r3, [r7, #12]
  
  if(LtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800a014:	4b4b      	ldr	r3, [pc, #300]	; (800a144 <BSP_LCD_ReadPixel+0x144>)
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	4a4b      	ldr	r2, [pc, #300]	; (800a148 <BSP_LCD_ReadPixel+0x148>)
 800a01a:	2134      	movs	r1, #52	; 0x34
 800a01c:	fb01 f303 	mul.w	r3, r1, r3
 800a020:	4413      	add	r3, r2
 800a022:	3348      	adds	r3, #72	; 0x48
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	2b00      	cmp	r3, #0
 800a028:	d115      	bne.n	800a056 <BSP_LCD_ReadPixel+0x56>
  {
    /* Read data value from SDRAM memory */
    ret = *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos)));
 800a02a:	4b46      	ldr	r3, [pc, #280]	; (800a144 <BSP_LCD_ReadPixel+0x144>)
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	4a46      	ldr	r2, [pc, #280]	; (800a148 <BSP_LCD_ReadPixel+0x148>)
 800a030:	2134      	movs	r1, #52	; 0x34
 800a032:	fb01 f303 	mul.w	r3, r1, r3
 800a036:	4413      	add	r3, r2
 800a038:	335c      	adds	r3, #92	; 0x5c
 800a03a:	681c      	ldr	r4, [r3, #0]
 800a03c:	88bd      	ldrh	r5, [r7, #4]
 800a03e:	f7ff fef5 	bl	8009e2c <BSP_LCD_GetXSize>
 800a042:	4603      	mov	r3, r0
 800a044:	fb03 f205 	mul.w	r2, r3, r5
 800a048:	88fb      	ldrh	r3, [r7, #6]
 800a04a:	4413      	add	r3, r2
 800a04c:	009b      	lsls	r3, r3, #2
 800a04e:	4423      	add	r3, r4
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	60fb      	str	r3, [r7, #12]
 800a054:	e070      	b.n	800a138 <BSP_LCD_ReadPixel+0x138>
  }
  else if(LtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800a056:	4b3b      	ldr	r3, [pc, #236]	; (800a144 <BSP_LCD_ReadPixel+0x144>)
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	4a3b      	ldr	r2, [pc, #236]	; (800a148 <BSP_LCD_ReadPixel+0x148>)
 800a05c:	2134      	movs	r1, #52	; 0x34
 800a05e:	fb01 f303 	mul.w	r3, r1, r3
 800a062:	4413      	add	r3, r2
 800a064:	3348      	adds	r3, #72	; 0x48
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	2b01      	cmp	r3, #1
 800a06a:	d117      	bne.n	800a09c <BSP_LCD_ReadPixel+0x9c>
  {
    /* Read data value from SDRAM memory */
    ret = (*(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) & 0x00FFFFFF);
 800a06c:	4b35      	ldr	r3, [pc, #212]	; (800a144 <BSP_LCD_ReadPixel+0x144>)
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	4a35      	ldr	r2, [pc, #212]	; (800a148 <BSP_LCD_ReadPixel+0x148>)
 800a072:	2134      	movs	r1, #52	; 0x34
 800a074:	fb01 f303 	mul.w	r3, r1, r3
 800a078:	4413      	add	r3, r2
 800a07a:	335c      	adds	r3, #92	; 0x5c
 800a07c:	681c      	ldr	r4, [r3, #0]
 800a07e:	88bd      	ldrh	r5, [r7, #4]
 800a080:	f7ff fed4 	bl	8009e2c <BSP_LCD_GetXSize>
 800a084:	4603      	mov	r3, r0
 800a086:	fb03 f205 	mul.w	r2, r3, r5
 800a08a:	88fb      	ldrh	r3, [r7, #6]
 800a08c:	4413      	add	r3, r2
 800a08e:	009b      	lsls	r3, r3, #2
 800a090:	4423      	add	r3, r4
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a098:	60fb      	str	r3, [r7, #12]
 800a09a:	e04d      	b.n	800a138 <BSP_LCD_ReadPixel+0x138>
  }
  else if((LtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565) || \
 800a09c:	4b29      	ldr	r3, [pc, #164]	; (800a144 <BSP_LCD_ReadPixel+0x144>)
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	4a29      	ldr	r2, [pc, #164]	; (800a148 <BSP_LCD_ReadPixel+0x148>)
 800a0a2:	2134      	movs	r1, #52	; 0x34
 800a0a4:	fb01 f303 	mul.w	r3, r1, r3
 800a0a8:	4413      	add	r3, r2
 800a0aa:	3348      	adds	r3, #72	; 0x48
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	2b02      	cmp	r3, #2
 800a0b0:	d015      	beq.n	800a0de <BSP_LCD_ReadPixel+0xde>
          (LtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800a0b2:	4b24      	ldr	r3, [pc, #144]	; (800a144 <BSP_LCD_ReadPixel+0x144>)
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	4a24      	ldr	r2, [pc, #144]	; (800a148 <BSP_LCD_ReadPixel+0x148>)
 800a0b8:	2134      	movs	r1, #52	; 0x34
 800a0ba:	fb01 f303 	mul.w	r3, r1, r3
 800a0be:	4413      	add	r3, r2
 800a0c0:	3348      	adds	r3, #72	; 0x48
 800a0c2:	681b      	ldr	r3, [r3, #0]
  else if((LtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565) || \
 800a0c4:	2b04      	cmp	r3, #4
 800a0c6:	d00a      	beq.n	800a0de <BSP_LCD_ReadPixel+0xde>
          (LtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_AL88))  
 800a0c8:	4b1e      	ldr	r3, [pc, #120]	; (800a144 <BSP_LCD_ReadPixel+0x144>)
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	4a1e      	ldr	r2, [pc, #120]	; (800a148 <BSP_LCD_ReadPixel+0x148>)
 800a0ce:	2134      	movs	r1, #52	; 0x34
 800a0d0:	fb01 f303 	mul.w	r3, r1, r3
 800a0d4:	4413      	add	r3, r2
 800a0d6:	3348      	adds	r3, #72	; 0x48
 800a0d8:	681b      	ldr	r3, [r3, #0]
          (LtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800a0da:	2b07      	cmp	r3, #7
 800a0dc:	d116      	bne.n	800a10c <BSP_LCD_ReadPixel+0x10c>
  {
    /* Read data value from SDRAM memory */
    ret = *(__IO uint16_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos)));    
 800a0de:	4b19      	ldr	r3, [pc, #100]	; (800a144 <BSP_LCD_ReadPixel+0x144>)
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	4a19      	ldr	r2, [pc, #100]	; (800a148 <BSP_LCD_ReadPixel+0x148>)
 800a0e4:	2134      	movs	r1, #52	; 0x34
 800a0e6:	fb01 f303 	mul.w	r3, r1, r3
 800a0ea:	4413      	add	r3, r2
 800a0ec:	335c      	adds	r3, #92	; 0x5c
 800a0ee:	681c      	ldr	r4, [r3, #0]
 800a0f0:	88bd      	ldrh	r5, [r7, #4]
 800a0f2:	f7ff fe9b 	bl	8009e2c <BSP_LCD_GetXSize>
 800a0f6:	4603      	mov	r3, r0
 800a0f8:	fb03 f205 	mul.w	r2, r3, r5
 800a0fc:	88fb      	ldrh	r3, [r7, #6]
 800a0fe:	4413      	add	r3, r2
 800a100:	005b      	lsls	r3, r3, #1
 800a102:	4423      	add	r3, r4
 800a104:	881b      	ldrh	r3, [r3, #0]
 800a106:	b29b      	uxth	r3, r3
 800a108:	60fb      	str	r3, [r7, #12]
 800a10a:	e015      	b.n	800a138 <BSP_LCD_ReadPixel+0x138>
  }
  else
  {
    /* Read data value from SDRAM memory */
    ret = *(__IO uint8_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos)));    
 800a10c:	4b0d      	ldr	r3, [pc, #52]	; (800a144 <BSP_LCD_ReadPixel+0x144>)
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	4a0d      	ldr	r2, [pc, #52]	; (800a148 <BSP_LCD_ReadPixel+0x148>)
 800a112:	2134      	movs	r1, #52	; 0x34
 800a114:	fb01 f303 	mul.w	r3, r1, r3
 800a118:	4413      	add	r3, r2
 800a11a:	335c      	adds	r3, #92	; 0x5c
 800a11c:	681c      	ldr	r4, [r3, #0]
 800a11e:	88bd      	ldrh	r5, [r7, #4]
 800a120:	f7ff fe84 	bl	8009e2c <BSP_LCD_GetXSize>
 800a124:	4603      	mov	r3, r0
 800a126:	fb03 f205 	mul.w	r2, r3, r5
 800a12a:	88fb      	ldrh	r3, [r7, #6]
 800a12c:	4413      	add	r3, r2
 800a12e:	005b      	lsls	r3, r3, #1
 800a130:	4423      	add	r3, r4
 800a132:	781b      	ldrb	r3, [r3, #0]
 800a134:	b2db      	uxtb	r3, r3
 800a136:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800a138:	68fb      	ldr	r3, [r7, #12]
}
 800a13a:	4618      	mov	r0, r3
 800a13c:	3710      	adds	r7, #16
 800a13e:	46bd      	mov	sp, r7
 800a140:	bdb0      	pop	{r4, r5, r7, pc}
 800a142:	bf00      	nop
 800a144:	20002bb4 	.word	0x20002bb4
 800a148:	20002a9c 	.word	0x20002a9c

0800a14c <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 800a14c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a14e:	b085      	sub	sp, #20
 800a150:	af02      	add	r7, sp, #8
 800a152:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 800a154:	4b0f      	ldr	r3, [pc, #60]	; (800a194 <BSP_LCD_Clear+0x48>)
 800a156:	681c      	ldr	r4, [r3, #0]
 800a158:	4b0e      	ldr	r3, [pc, #56]	; (800a194 <BSP_LCD_Clear+0x48>)
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	4a0e      	ldr	r2, [pc, #56]	; (800a198 <BSP_LCD_Clear+0x4c>)
 800a15e:	2134      	movs	r1, #52	; 0x34
 800a160:	fb01 f303 	mul.w	r3, r1, r3
 800a164:	4413      	add	r3, r2
 800a166:	335c      	adds	r3, #92	; 0x5c
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	461e      	mov	r6, r3
 800a16c:	f7ff fe5e 	bl	8009e2c <BSP_LCD_GetXSize>
 800a170:	4605      	mov	r5, r0
 800a172:	f7ff fe67 	bl	8009e44 <BSP_LCD_GetYSize>
 800a176:	4602      	mov	r2, r0
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	9301      	str	r3, [sp, #4]
 800a17c:	2300      	movs	r3, #0
 800a17e:	9300      	str	r3, [sp, #0]
 800a180:	4613      	mov	r3, r2
 800a182:	462a      	mov	r2, r5
 800a184:	4631      	mov	r1, r6
 800a186:	4620      	mov	r0, r4
 800a188:	f000 fd66 	bl	800ac58 <FillBuffer>
}
 800a18c:	bf00      	nop
 800a18e:	370c      	adds	r7, #12
 800a190:	46bd      	mov	sp, r7
 800a192:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a194:	20002bb4 	.word	0x20002bb4
 800a198:	20002a9c 	.word	0x20002a9c

0800a19c <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 800a19c:	b590      	push	{r4, r7, lr}
 800a19e:	b083      	sub	sp, #12
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	4603      	mov	r3, r0
 800a1a4:	80fb      	strh	r3, [r7, #6]
 800a1a6:	460b      	mov	r3, r1
 800a1a8:	80bb      	strh	r3, [r7, #4]
 800a1aa:	4613      	mov	r3, r2
 800a1ac:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800a1ae:	4b1b      	ldr	r3, [pc, #108]	; (800a21c <BSP_LCD_DisplayChar+0x80>)
 800a1b0:	681a      	ldr	r2, [r3, #0]
 800a1b2:	491b      	ldr	r1, [pc, #108]	; (800a220 <BSP_LCD_DisplayChar+0x84>)
 800a1b4:	4613      	mov	r3, r2
 800a1b6:	005b      	lsls	r3, r3, #1
 800a1b8:	4413      	add	r3, r2
 800a1ba:	009b      	lsls	r3, r3, #2
 800a1bc:	440b      	add	r3, r1
 800a1be:	3308      	adds	r3, #8
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	6819      	ldr	r1, [r3, #0]
 800a1c4:	78fb      	ldrb	r3, [r7, #3]
 800a1c6:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 800a1ca:	4b14      	ldr	r3, [pc, #80]	; (800a21c <BSP_LCD_DisplayChar+0x80>)
 800a1cc:	681a      	ldr	r2, [r3, #0]
 800a1ce:	4c14      	ldr	r4, [pc, #80]	; (800a220 <BSP_LCD_DisplayChar+0x84>)
 800a1d0:	4613      	mov	r3, r2
 800a1d2:	005b      	lsls	r3, r3, #1
 800a1d4:	4413      	add	r3, r2
 800a1d6:	009b      	lsls	r3, r3, #2
 800a1d8:	4423      	add	r3, r4
 800a1da:	3308      	adds	r3, #8
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800a1e0:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 800a1e4:	4b0d      	ldr	r3, [pc, #52]	; (800a21c <BSP_LCD_DisplayChar+0x80>)
 800a1e6:	681a      	ldr	r2, [r3, #0]
 800a1e8:	4c0d      	ldr	r4, [pc, #52]	; (800a220 <BSP_LCD_DisplayChar+0x84>)
 800a1ea:	4613      	mov	r3, r2
 800a1ec:	005b      	lsls	r3, r3, #1
 800a1ee:	4413      	add	r3, r2
 800a1f0:	009b      	lsls	r3, r3, #2
 800a1f2:	4423      	add	r3, r4
 800a1f4:	3308      	adds	r3, #8
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	889b      	ldrh	r3, [r3, #4]
 800a1fa:	3307      	adds	r3, #7
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	da00      	bge.n	800a202 <BSP_LCD_DisplayChar+0x66>
 800a200:	3307      	adds	r3, #7
 800a202:	10db      	asrs	r3, r3, #3
 800a204:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800a208:	18ca      	adds	r2, r1, r3
 800a20a:	88b9      	ldrh	r1, [r7, #4]
 800a20c:	88fb      	ldrh	r3, [r7, #6]
 800a20e:	4618      	mov	r0, r3
 800a210:	f000 fc68 	bl	800aae4 <DrawChar>
}
 800a214:	bf00      	nop
 800a216:	370c      	adds	r7, #12
 800a218:	46bd      	mov	sp, r7
 800a21a:	bd90      	pop	{r4, r7, pc}
 800a21c:	20002bb4 	.word	0x20002bb4
 800a220:	20002bb8 	.word	0x20002bb8

0800a224 <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE 
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 800a224:	b5b0      	push	{r4, r5, r7, lr}
 800a226:	b088      	sub	sp, #32
 800a228:	af00      	add	r7, sp, #0
 800a22a:	60ba      	str	r2, [r7, #8]
 800a22c:	461a      	mov	r2, r3
 800a22e:	4603      	mov	r3, r0
 800a230:	81fb      	strh	r3, [r7, #14]
 800a232:	460b      	mov	r3, r1
 800a234:	81bb      	strh	r3, [r7, #12]
 800a236:	4613      	mov	r3, r2
 800a238:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 800a23a:	2301      	movs	r3, #1
 800a23c:	83fb      	strh	r3, [r7, #30]
 800a23e:	2300      	movs	r3, #0
 800a240:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 800a242:	2300      	movs	r3, #0
 800a244:	61bb      	str	r3, [r7, #24]
 800a246:	2300      	movs	r3, #0
 800a248:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 800a24a:	68bb      	ldr	r3, [r7, #8]
 800a24c:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 800a24e:	e002      	b.n	800a256 <BSP_LCD_DisplayStringAt+0x32>
 800a250:	69bb      	ldr	r3, [r7, #24]
 800a252:	3301      	adds	r3, #1
 800a254:	61bb      	str	r3, [r7, #24]
 800a256:	697b      	ldr	r3, [r7, #20]
 800a258:	1c5a      	adds	r2, r3, #1
 800a25a:	617a      	str	r2, [r7, #20]
 800a25c:	781b      	ldrb	r3, [r3, #0]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d1f6      	bne.n	800a250 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 800a262:	f7ff fde3 	bl	8009e2c <BSP_LCD_GetXSize>
 800a266:	4601      	mov	r1, r0
 800a268:	4b4b      	ldr	r3, [pc, #300]	; (800a398 <BSP_LCD_DisplayStringAt+0x174>)
 800a26a:	681a      	ldr	r2, [r3, #0]
 800a26c:	484b      	ldr	r0, [pc, #300]	; (800a39c <BSP_LCD_DisplayStringAt+0x178>)
 800a26e:	4613      	mov	r3, r2
 800a270:	005b      	lsls	r3, r3, #1
 800a272:	4413      	add	r3, r2
 800a274:	009b      	lsls	r3, r3, #2
 800a276:	4403      	add	r3, r0
 800a278:	3308      	adds	r3, #8
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	889b      	ldrh	r3, [r3, #4]
 800a27e:	fbb1 f3f3 	udiv	r3, r1, r3
 800a282:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 800a284:	79fb      	ldrb	r3, [r7, #7]
 800a286:	2b03      	cmp	r3, #3
 800a288:	d01c      	beq.n	800a2c4 <BSP_LCD_DisplayStringAt+0xa0>
 800a28a:	2b03      	cmp	r3, #3
 800a28c:	dc33      	bgt.n	800a2f6 <BSP_LCD_DisplayStringAt+0xd2>
 800a28e:	2b01      	cmp	r3, #1
 800a290:	d002      	beq.n	800a298 <BSP_LCD_DisplayStringAt+0x74>
 800a292:	2b02      	cmp	r3, #2
 800a294:	d019      	beq.n	800a2ca <BSP_LCD_DisplayStringAt+0xa6>
 800a296:	e02e      	b.n	800a2f6 <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 800a298:	693a      	ldr	r2, [r7, #16]
 800a29a:	69bb      	ldr	r3, [r7, #24]
 800a29c:	1ad1      	subs	r1, r2, r3
 800a29e:	4b3e      	ldr	r3, [pc, #248]	; (800a398 <BSP_LCD_DisplayStringAt+0x174>)
 800a2a0:	681a      	ldr	r2, [r3, #0]
 800a2a2:	483e      	ldr	r0, [pc, #248]	; (800a39c <BSP_LCD_DisplayStringAt+0x178>)
 800a2a4:	4613      	mov	r3, r2
 800a2a6:	005b      	lsls	r3, r3, #1
 800a2a8:	4413      	add	r3, r2
 800a2aa:	009b      	lsls	r3, r3, #2
 800a2ac:	4403      	add	r3, r0
 800a2ae:	3308      	adds	r3, #8
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	889b      	ldrh	r3, [r3, #4]
 800a2b4:	fb01 f303 	mul.w	r3, r1, r3
 800a2b8:	085b      	lsrs	r3, r3, #1
 800a2ba:	b29a      	uxth	r2, r3
 800a2bc:	89fb      	ldrh	r3, [r7, #14]
 800a2be:	4413      	add	r3, r2
 800a2c0:	83fb      	strh	r3, [r7, #30]
      break;
 800a2c2:	e01b      	b.n	800a2fc <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 800a2c4:	89fb      	ldrh	r3, [r7, #14]
 800a2c6:	83fb      	strh	r3, [r7, #30]
      break;
 800a2c8:	e018      	b.n	800a2fc <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 800a2ca:	693a      	ldr	r2, [r7, #16]
 800a2cc:	69bb      	ldr	r3, [r7, #24]
 800a2ce:	1ad3      	subs	r3, r2, r3
 800a2d0:	b299      	uxth	r1, r3
 800a2d2:	4b31      	ldr	r3, [pc, #196]	; (800a398 <BSP_LCD_DisplayStringAt+0x174>)
 800a2d4:	681a      	ldr	r2, [r3, #0]
 800a2d6:	4831      	ldr	r0, [pc, #196]	; (800a39c <BSP_LCD_DisplayStringAt+0x178>)
 800a2d8:	4613      	mov	r3, r2
 800a2da:	005b      	lsls	r3, r3, #1
 800a2dc:	4413      	add	r3, r2
 800a2de:	009b      	lsls	r3, r3, #2
 800a2e0:	4403      	add	r3, r0
 800a2e2:	3308      	adds	r3, #8
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	889b      	ldrh	r3, [r3, #4]
 800a2e8:	fb11 f303 	smulbb	r3, r1, r3
 800a2ec:	b29a      	uxth	r2, r3
 800a2ee:	89fb      	ldrh	r3, [r7, #14]
 800a2f0:	4413      	add	r3, r2
 800a2f2:	83fb      	strh	r3, [r7, #30]
      break;
 800a2f4:	e002      	b.n	800a2fc <BSP_LCD_DisplayStringAt+0xd8>
    }
  default:
    {
      refcolumn = X;
 800a2f6:	89fb      	ldrh	r3, [r7, #14]
 800a2f8:	83fb      	strh	r3, [r7, #30]
      break;
 800a2fa:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 800a2fc:	e01a      	b.n	800a334 <BSP_LCD_DisplayStringAt+0x110>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 800a2fe:	68bb      	ldr	r3, [r7, #8]
 800a300:	781a      	ldrb	r2, [r3, #0]
 800a302:	89b9      	ldrh	r1, [r7, #12]
 800a304:	8bfb      	ldrh	r3, [r7, #30]
 800a306:	4618      	mov	r0, r3
 800a308:	f7ff ff48 	bl	800a19c <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 800a30c:	4b22      	ldr	r3, [pc, #136]	; (800a398 <BSP_LCD_DisplayStringAt+0x174>)
 800a30e:	681a      	ldr	r2, [r3, #0]
 800a310:	4922      	ldr	r1, [pc, #136]	; (800a39c <BSP_LCD_DisplayStringAt+0x178>)
 800a312:	4613      	mov	r3, r2
 800a314:	005b      	lsls	r3, r3, #1
 800a316:	4413      	add	r3, r2
 800a318:	009b      	lsls	r3, r3, #2
 800a31a:	440b      	add	r3, r1
 800a31c:	3308      	adds	r3, #8
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	889a      	ldrh	r2, [r3, #4]
 800a322:	8bfb      	ldrh	r3, [r7, #30]
 800a324:	4413      	add	r3, r2
 800a326:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 800a328:	68bb      	ldr	r3, [r7, #8]
 800a32a:	3301      	adds	r3, #1
 800a32c:	60bb      	str	r3, [r7, #8]
    i++;
 800a32e:	8bbb      	ldrh	r3, [r7, #28]
 800a330:	3301      	adds	r3, #1
 800a332:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 800a334:	68bb      	ldr	r3, [r7, #8]
 800a336:	781b      	ldrb	r3, [r3, #0]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	bf14      	ite	ne
 800a33c:	2301      	movne	r3, #1
 800a33e:	2300      	moveq	r3, #0
 800a340:	b2dc      	uxtb	r4, r3
 800a342:	f7ff fd73 	bl	8009e2c <BSP_LCD_GetXSize>
 800a346:	8bb9      	ldrh	r1, [r7, #28]
 800a348:	4b13      	ldr	r3, [pc, #76]	; (800a398 <BSP_LCD_DisplayStringAt+0x174>)
 800a34a:	681a      	ldr	r2, [r3, #0]
 800a34c:	4d13      	ldr	r5, [pc, #76]	; (800a39c <BSP_LCD_DisplayStringAt+0x178>)
 800a34e:	4613      	mov	r3, r2
 800a350:	005b      	lsls	r3, r3, #1
 800a352:	4413      	add	r3, r2
 800a354:	009b      	lsls	r3, r3, #2
 800a356:	442b      	add	r3, r5
 800a358:	3308      	adds	r3, #8
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	889b      	ldrh	r3, [r3, #4]
 800a35e:	fb01 f303 	mul.w	r3, r1, r3
 800a362:	1ac3      	subs	r3, r0, r3
 800a364:	b299      	uxth	r1, r3
 800a366:	4b0c      	ldr	r3, [pc, #48]	; (800a398 <BSP_LCD_DisplayStringAt+0x174>)
 800a368:	681a      	ldr	r2, [r3, #0]
 800a36a:	480c      	ldr	r0, [pc, #48]	; (800a39c <BSP_LCD_DisplayStringAt+0x178>)
 800a36c:	4613      	mov	r3, r2
 800a36e:	005b      	lsls	r3, r3, #1
 800a370:	4413      	add	r3, r2
 800a372:	009b      	lsls	r3, r3, #2
 800a374:	4403      	add	r3, r0
 800a376:	3308      	adds	r3, #8
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	889b      	ldrh	r3, [r3, #4]
 800a37c:	4299      	cmp	r1, r3
 800a37e:	bf2c      	ite	cs
 800a380:	2301      	movcs	r3, #1
 800a382:	2300      	movcc	r3, #0
 800a384:	b2db      	uxtb	r3, r3
 800a386:	4023      	ands	r3, r4
 800a388:	b2db      	uxtb	r3, r3
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d1b7      	bne.n	800a2fe <BSP_LCD_DisplayStringAt+0xda>
  }  
}
 800a38e:	bf00      	nop
 800a390:	bf00      	nop
 800a392:	3720      	adds	r7, #32
 800a394:	46bd      	mov	sp, r7
 800a396:	bdb0      	pop	{r4, r5, r7, pc}
 800a398:	20002bb4 	.word	0x20002bb4
 800a39c:	20002bb8 	.word	0x20002bb8

0800a3a0 <BSP_LCD_DrawHLine>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Length: line length
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 800a3a0:	b5b0      	push	{r4, r5, r7, lr}
 800a3a2:	b086      	sub	sp, #24
 800a3a4:	af02      	add	r7, sp, #8
 800a3a6:	4603      	mov	r3, r0
 800a3a8:	80fb      	strh	r3, [r7, #6]
 800a3aa:	460b      	mov	r3, r1
 800a3ac:	80bb      	strh	r3, [r7, #4]
 800a3ae:	4613      	mov	r3, r2
 800a3b0:	807b      	strh	r3, [r7, #2]
  uint32_t xaddress = 0;
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800a3b6:	4b16      	ldr	r3, [pc, #88]	; (800a410 <BSP_LCD_DrawHLine+0x70>)
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	4a16      	ldr	r2, [pc, #88]	; (800a414 <BSP_LCD_DrawHLine+0x74>)
 800a3bc:	2134      	movs	r1, #52	; 0x34
 800a3be:	fb01 f303 	mul.w	r3, r1, r3
 800a3c2:	4413      	add	r3, r2
 800a3c4:	335c      	adds	r3, #92	; 0x5c
 800a3c6:	681c      	ldr	r4, [r3, #0]
 800a3c8:	f7ff fd30 	bl	8009e2c <BSP_LCD_GetXSize>
 800a3cc:	4602      	mov	r2, r0
 800a3ce:	88bb      	ldrh	r3, [r7, #4]
 800a3d0:	fb03 f202 	mul.w	r2, r3, r2
 800a3d4:	88fb      	ldrh	r3, [r7, #6]
 800a3d6:	4413      	add	r3, r2
 800a3d8:	009b      	lsls	r3, r3, #2
 800a3da:	4423      	add	r3, r4
 800a3dc:	60fb      	str	r3, [r7, #12]

  /* Write line */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 800a3de:	4b0c      	ldr	r3, [pc, #48]	; (800a410 <BSP_LCD_DrawHLine+0x70>)
 800a3e0:	6818      	ldr	r0, [r3, #0]
 800a3e2:	68f9      	ldr	r1, [r7, #12]
 800a3e4:	887c      	ldrh	r4, [r7, #2]
 800a3e6:	4b0a      	ldr	r3, [pc, #40]	; (800a410 <BSP_LCD_DrawHLine+0x70>)
 800a3e8:	681a      	ldr	r2, [r3, #0]
 800a3ea:	4d0b      	ldr	r5, [pc, #44]	; (800a418 <BSP_LCD_DrawHLine+0x78>)
 800a3ec:	4613      	mov	r3, r2
 800a3ee:	005b      	lsls	r3, r3, #1
 800a3f0:	4413      	add	r3, r2
 800a3f2:	009b      	lsls	r3, r3, #2
 800a3f4:	442b      	add	r3, r5
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	9301      	str	r3, [sp, #4]
 800a3fa:	2300      	movs	r3, #0
 800a3fc:	9300      	str	r3, [sp, #0]
 800a3fe:	2301      	movs	r3, #1
 800a400:	4622      	mov	r2, r4
 800a402:	f000 fc29 	bl	800ac58 <FillBuffer>
}
 800a406:	bf00      	nop
 800a408:	3710      	adds	r7, #16
 800a40a:	46bd      	mov	sp, r7
 800a40c:	bdb0      	pop	{r4, r5, r7, pc}
 800a40e:	bf00      	nop
 800a410:	20002bb4 	.word	0x20002bb4
 800a414:	20002a9c 	.word	0x20002a9c
 800a418:	20002bb8 	.word	0x20002bb8

0800a41c <BSP_LCD_DrawVLine>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Length: line length
  */
void BSP_LCD_DrawVLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 800a41c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a41e:	b087      	sub	sp, #28
 800a420:	af02      	add	r7, sp, #8
 800a422:	4603      	mov	r3, r0
 800a424:	80fb      	strh	r3, [r7, #6]
 800a426:	460b      	mov	r3, r1
 800a428:	80bb      	strh	r3, [r7, #4]
 800a42a:	4613      	mov	r3, r2
 800a42c:	807b      	strh	r3, [r7, #2]
  uint32_t xaddress = 0;
 800a42e:	2300      	movs	r3, #0
 800a430:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800a432:	4b18      	ldr	r3, [pc, #96]	; (800a494 <BSP_LCD_DrawVLine+0x78>)
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	4a18      	ldr	r2, [pc, #96]	; (800a498 <BSP_LCD_DrawVLine+0x7c>)
 800a438:	2134      	movs	r1, #52	; 0x34
 800a43a:	fb01 f303 	mul.w	r3, r1, r3
 800a43e:	4413      	add	r3, r2
 800a440:	335c      	adds	r3, #92	; 0x5c
 800a442:	681c      	ldr	r4, [r3, #0]
 800a444:	f7ff fcf2 	bl	8009e2c <BSP_LCD_GetXSize>
 800a448:	4602      	mov	r2, r0
 800a44a:	88bb      	ldrh	r3, [r7, #4]
 800a44c:	fb03 f202 	mul.w	r2, r3, r2
 800a450:	88fb      	ldrh	r3, [r7, #6]
 800a452:	4413      	add	r3, r2
 800a454:	009b      	lsls	r3, r3, #2
 800a456:	4423      	add	r3, r4
 800a458:	60fb      	str	r3, [r7, #12]
  
  /* Write line */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 800a45a:	4b0e      	ldr	r3, [pc, #56]	; (800a494 <BSP_LCD_DrawVLine+0x78>)
 800a45c:	681c      	ldr	r4, [r3, #0]
 800a45e:	68fd      	ldr	r5, [r7, #12]
 800a460:	887e      	ldrh	r6, [r7, #2]
 800a462:	f7ff fce3 	bl	8009e2c <BSP_LCD_GetXSize>
 800a466:	4603      	mov	r3, r0
 800a468:	1e59      	subs	r1, r3, #1
 800a46a:	4b0a      	ldr	r3, [pc, #40]	; (800a494 <BSP_LCD_DrawVLine+0x78>)
 800a46c:	681a      	ldr	r2, [r3, #0]
 800a46e:	480b      	ldr	r0, [pc, #44]	; (800a49c <BSP_LCD_DrawVLine+0x80>)
 800a470:	4613      	mov	r3, r2
 800a472:	005b      	lsls	r3, r3, #1
 800a474:	4413      	add	r3, r2
 800a476:	009b      	lsls	r3, r3, #2
 800a478:	4403      	add	r3, r0
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	9301      	str	r3, [sp, #4]
 800a47e:	9100      	str	r1, [sp, #0]
 800a480:	4633      	mov	r3, r6
 800a482:	2201      	movs	r2, #1
 800a484:	4629      	mov	r1, r5
 800a486:	4620      	mov	r0, r4
 800a488:	f000 fbe6 	bl	800ac58 <FillBuffer>
}
 800a48c:	bf00      	nop
 800a48e:	3714      	adds	r7, #20
 800a490:	46bd      	mov	sp, r7
 800a492:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a494:	20002bb4 	.word	0x20002bb4
 800a498:	20002a9c 	.word	0x20002a9c
 800a49c:	20002bb8 	.word	0x20002bb8

0800a4a0 <BSP_LCD_DrawRect>:
  * @param  Ypos: the Y position
  * @param  Height: display rectangle height
  * @param  Width: display rectangle width
  */
void BSP_LCD_DrawRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 800a4a0:	b590      	push	{r4, r7, lr}
 800a4a2:	b083      	sub	sp, #12
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	4604      	mov	r4, r0
 800a4a8:	4608      	mov	r0, r1
 800a4aa:	4611      	mov	r1, r2
 800a4ac:	461a      	mov	r2, r3
 800a4ae:	4623      	mov	r3, r4
 800a4b0:	80fb      	strh	r3, [r7, #6]
 800a4b2:	4603      	mov	r3, r0
 800a4b4:	80bb      	strh	r3, [r7, #4]
 800a4b6:	460b      	mov	r3, r1
 800a4b8:	807b      	strh	r3, [r7, #2]
 800a4ba:	4613      	mov	r3, r2
 800a4bc:	803b      	strh	r3, [r7, #0]
  /* Draw horizontal lines */
  BSP_LCD_DrawHLine(Xpos, Ypos, Width);
 800a4be:	887a      	ldrh	r2, [r7, #2]
 800a4c0:	88b9      	ldrh	r1, [r7, #4]
 800a4c2:	88fb      	ldrh	r3, [r7, #6]
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	f7ff ff6b 	bl	800a3a0 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(Xpos, (Ypos+ Height), Width);
 800a4ca:	88ba      	ldrh	r2, [r7, #4]
 800a4cc:	883b      	ldrh	r3, [r7, #0]
 800a4ce:	4413      	add	r3, r2
 800a4d0:	b299      	uxth	r1, r3
 800a4d2:	887a      	ldrh	r2, [r7, #2]
 800a4d4:	88fb      	ldrh	r3, [r7, #6]
 800a4d6:	4618      	mov	r0, r3
 800a4d8:	f7ff ff62 	bl	800a3a0 <BSP_LCD_DrawHLine>
  
  /* Draw vertical lines */
  BSP_LCD_DrawVLine(Xpos, Ypos, Height);
 800a4dc:	883a      	ldrh	r2, [r7, #0]
 800a4de:	88b9      	ldrh	r1, [r7, #4]
 800a4e0:	88fb      	ldrh	r3, [r7, #6]
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	f7ff ff9a 	bl	800a41c <BSP_LCD_DrawVLine>
  BSP_LCD_DrawVLine((Xpos + Width), Ypos, Height);
 800a4e8:	88fa      	ldrh	r2, [r7, #6]
 800a4ea:	887b      	ldrh	r3, [r7, #2]
 800a4ec:	4413      	add	r3, r2
 800a4ee:	b29b      	uxth	r3, r3
 800a4f0:	883a      	ldrh	r2, [r7, #0]
 800a4f2:	88b9      	ldrh	r1, [r7, #4]
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	f7ff ff91 	bl	800a41c <BSP_LCD_DrawVLine>
}
 800a4fa:	bf00      	nop
 800a4fc:	370c      	adds	r7, #12
 800a4fe:	46bd      	mov	sp, r7
 800a500:	bd90      	pop	{r4, r7, pc}
	...

0800a504 <BSP_LCD_DrawCircle>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Radius: the circle radius
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 800a504:	b590      	push	{r4, r7, lr}
 800a506:	b087      	sub	sp, #28
 800a508:	af00      	add	r7, sp, #0
 800a50a:	4603      	mov	r3, r0
 800a50c:	80fb      	strh	r3, [r7, #6]
 800a50e:	460b      	mov	r3, r1
 800a510:	80bb      	strh	r3, [r7, #4]
 800a512:	4613      	mov	r3, r2
 800a514:	807b      	strh	r3, [r7, #2]
  int32_t  d;/* Decision Variable */ 
  uint32_t  curx;/* Current X Value */
  uint32_t  cury;/* Current Y Value */ 
  
  d = 3 - (Radius << 1);
 800a516:	887b      	ldrh	r3, [r7, #2]
 800a518:	005b      	lsls	r3, r3, #1
 800a51a:	f1c3 0303 	rsb	r3, r3, #3
 800a51e:	617b      	str	r3, [r7, #20]
  curx = 0;
 800a520:	2300      	movs	r3, #0
 800a522:	613b      	str	r3, [r7, #16]
  cury = Radius;
 800a524:	887b      	ldrh	r3, [r7, #2]
 800a526:	60fb      	str	r3, [r7, #12]
  
  while (curx <= cury)
 800a528:	e0c7      	b.n	800a6ba <BSP_LCD_DrawCircle+0x1b6>
  {
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 800a52a:	693b      	ldr	r3, [r7, #16]
 800a52c:	b29a      	uxth	r2, r3
 800a52e:	88fb      	ldrh	r3, [r7, #6]
 800a530:	4413      	add	r3, r2
 800a532:	b298      	uxth	r0, r3
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	b29b      	uxth	r3, r3
 800a538:	88ba      	ldrh	r2, [r7, #4]
 800a53a:	1ad3      	subs	r3, r2, r3
 800a53c:	b299      	uxth	r1, r3
 800a53e:	4b64      	ldr	r3, [pc, #400]	; (800a6d0 <BSP_LCD_DrawCircle+0x1cc>)
 800a540:	681a      	ldr	r2, [r3, #0]
 800a542:	4c64      	ldr	r4, [pc, #400]	; (800a6d4 <BSP_LCD_DrawCircle+0x1d0>)
 800a544:	4613      	mov	r3, r2
 800a546:	005b      	lsls	r3, r3, #1
 800a548:	4413      	add	r3, r2
 800a54a:	009b      	lsls	r3, r3, #2
 800a54c:	4423      	add	r3, r4
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	461a      	mov	r2, r3
 800a552:	f000 faa1 	bl	800aa98 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 800a556:	693b      	ldr	r3, [r7, #16]
 800a558:	b29b      	uxth	r3, r3
 800a55a:	88fa      	ldrh	r2, [r7, #6]
 800a55c:	1ad3      	subs	r3, r2, r3
 800a55e:	b298      	uxth	r0, r3
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	b29b      	uxth	r3, r3
 800a564:	88ba      	ldrh	r2, [r7, #4]
 800a566:	1ad3      	subs	r3, r2, r3
 800a568:	b299      	uxth	r1, r3
 800a56a:	4b59      	ldr	r3, [pc, #356]	; (800a6d0 <BSP_LCD_DrawCircle+0x1cc>)
 800a56c:	681a      	ldr	r2, [r3, #0]
 800a56e:	4c59      	ldr	r4, [pc, #356]	; (800a6d4 <BSP_LCD_DrawCircle+0x1d0>)
 800a570:	4613      	mov	r3, r2
 800a572:	005b      	lsls	r3, r3, #1
 800a574:	4413      	add	r3, r2
 800a576:	009b      	lsls	r3, r3, #2
 800a578:	4423      	add	r3, r4
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	461a      	mov	r2, r3
 800a57e:	f000 fa8b 	bl	800aa98 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	b29a      	uxth	r2, r3
 800a586:	88fb      	ldrh	r3, [r7, #6]
 800a588:	4413      	add	r3, r2
 800a58a:	b298      	uxth	r0, r3
 800a58c:	693b      	ldr	r3, [r7, #16]
 800a58e:	b29b      	uxth	r3, r3
 800a590:	88ba      	ldrh	r2, [r7, #4]
 800a592:	1ad3      	subs	r3, r2, r3
 800a594:	b299      	uxth	r1, r3
 800a596:	4b4e      	ldr	r3, [pc, #312]	; (800a6d0 <BSP_LCD_DrawCircle+0x1cc>)
 800a598:	681a      	ldr	r2, [r3, #0]
 800a59a:	4c4e      	ldr	r4, [pc, #312]	; (800a6d4 <BSP_LCD_DrawCircle+0x1d0>)
 800a59c:	4613      	mov	r3, r2
 800a59e:	005b      	lsls	r3, r3, #1
 800a5a0:	4413      	add	r3, r2
 800a5a2:	009b      	lsls	r3, r3, #2
 800a5a4:	4423      	add	r3, r4
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	461a      	mov	r2, r3
 800a5aa:	f000 fa75 	bl	800aa98 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	b29b      	uxth	r3, r3
 800a5b2:	88fa      	ldrh	r2, [r7, #6]
 800a5b4:	1ad3      	subs	r3, r2, r3
 800a5b6:	b298      	uxth	r0, r3
 800a5b8:	693b      	ldr	r3, [r7, #16]
 800a5ba:	b29b      	uxth	r3, r3
 800a5bc:	88ba      	ldrh	r2, [r7, #4]
 800a5be:	1ad3      	subs	r3, r2, r3
 800a5c0:	b299      	uxth	r1, r3
 800a5c2:	4b43      	ldr	r3, [pc, #268]	; (800a6d0 <BSP_LCD_DrawCircle+0x1cc>)
 800a5c4:	681a      	ldr	r2, [r3, #0]
 800a5c6:	4c43      	ldr	r4, [pc, #268]	; (800a6d4 <BSP_LCD_DrawCircle+0x1d0>)
 800a5c8:	4613      	mov	r3, r2
 800a5ca:	005b      	lsls	r3, r3, #1
 800a5cc:	4413      	add	r3, r2
 800a5ce:	009b      	lsls	r3, r3, #2
 800a5d0:	4423      	add	r3, r4
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	461a      	mov	r2, r3
 800a5d6:	f000 fa5f 	bl	800aa98 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 800a5da:	693b      	ldr	r3, [r7, #16]
 800a5dc:	b29a      	uxth	r2, r3
 800a5de:	88fb      	ldrh	r3, [r7, #6]
 800a5e0:	4413      	add	r3, r2
 800a5e2:	b298      	uxth	r0, r3
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	b29a      	uxth	r2, r3
 800a5e8:	88bb      	ldrh	r3, [r7, #4]
 800a5ea:	4413      	add	r3, r2
 800a5ec:	b299      	uxth	r1, r3
 800a5ee:	4b38      	ldr	r3, [pc, #224]	; (800a6d0 <BSP_LCD_DrawCircle+0x1cc>)
 800a5f0:	681a      	ldr	r2, [r3, #0]
 800a5f2:	4c38      	ldr	r4, [pc, #224]	; (800a6d4 <BSP_LCD_DrawCircle+0x1d0>)
 800a5f4:	4613      	mov	r3, r2
 800a5f6:	005b      	lsls	r3, r3, #1
 800a5f8:	4413      	add	r3, r2
 800a5fa:	009b      	lsls	r3, r3, #2
 800a5fc:	4423      	add	r3, r4
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	461a      	mov	r2, r3
 800a602:	f000 fa49 	bl	800aa98 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 800a606:	693b      	ldr	r3, [r7, #16]
 800a608:	b29b      	uxth	r3, r3
 800a60a:	88fa      	ldrh	r2, [r7, #6]
 800a60c:	1ad3      	subs	r3, r2, r3
 800a60e:	b298      	uxth	r0, r3
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	b29a      	uxth	r2, r3
 800a614:	88bb      	ldrh	r3, [r7, #4]
 800a616:	4413      	add	r3, r2
 800a618:	b299      	uxth	r1, r3
 800a61a:	4b2d      	ldr	r3, [pc, #180]	; (800a6d0 <BSP_LCD_DrawCircle+0x1cc>)
 800a61c:	681a      	ldr	r2, [r3, #0]
 800a61e:	4c2d      	ldr	r4, [pc, #180]	; (800a6d4 <BSP_LCD_DrawCircle+0x1d0>)
 800a620:	4613      	mov	r3, r2
 800a622:	005b      	lsls	r3, r3, #1
 800a624:	4413      	add	r3, r2
 800a626:	009b      	lsls	r3, r3, #2
 800a628:	4423      	add	r3, r4
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	461a      	mov	r2, r3
 800a62e:	f000 fa33 	bl	800aa98 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	b29a      	uxth	r2, r3
 800a636:	88fb      	ldrh	r3, [r7, #6]
 800a638:	4413      	add	r3, r2
 800a63a:	b298      	uxth	r0, r3
 800a63c:	693b      	ldr	r3, [r7, #16]
 800a63e:	b29a      	uxth	r2, r3
 800a640:	88bb      	ldrh	r3, [r7, #4]
 800a642:	4413      	add	r3, r2
 800a644:	b299      	uxth	r1, r3
 800a646:	4b22      	ldr	r3, [pc, #136]	; (800a6d0 <BSP_LCD_DrawCircle+0x1cc>)
 800a648:	681a      	ldr	r2, [r3, #0]
 800a64a:	4c22      	ldr	r4, [pc, #136]	; (800a6d4 <BSP_LCD_DrawCircle+0x1d0>)
 800a64c:	4613      	mov	r3, r2
 800a64e:	005b      	lsls	r3, r3, #1
 800a650:	4413      	add	r3, r2
 800a652:	009b      	lsls	r3, r3, #2
 800a654:	4423      	add	r3, r4
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	461a      	mov	r2, r3
 800a65a:	f000 fa1d 	bl	800aa98 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);   
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	b29b      	uxth	r3, r3
 800a662:	88fa      	ldrh	r2, [r7, #6]
 800a664:	1ad3      	subs	r3, r2, r3
 800a666:	b298      	uxth	r0, r3
 800a668:	693b      	ldr	r3, [r7, #16]
 800a66a:	b29a      	uxth	r2, r3
 800a66c:	88bb      	ldrh	r3, [r7, #4]
 800a66e:	4413      	add	r3, r2
 800a670:	b299      	uxth	r1, r3
 800a672:	4b17      	ldr	r3, [pc, #92]	; (800a6d0 <BSP_LCD_DrawCircle+0x1cc>)
 800a674:	681a      	ldr	r2, [r3, #0]
 800a676:	4c17      	ldr	r4, [pc, #92]	; (800a6d4 <BSP_LCD_DrawCircle+0x1d0>)
 800a678:	4613      	mov	r3, r2
 800a67a:	005b      	lsls	r3, r3, #1
 800a67c:	4413      	add	r3, r2
 800a67e:	009b      	lsls	r3, r3, #2
 800a680:	4423      	add	r3, r4
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	461a      	mov	r2, r3
 800a686:	f000 fa07 	bl	800aa98 <BSP_LCD_DrawPixel>

    if (d < 0)
 800a68a:	697b      	ldr	r3, [r7, #20]
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	da06      	bge.n	800a69e <BSP_LCD_DrawCircle+0x19a>
    { 
      d += (curx << 2) + 6;
 800a690:	693b      	ldr	r3, [r7, #16]
 800a692:	009a      	lsls	r2, r3, #2
 800a694:	697b      	ldr	r3, [r7, #20]
 800a696:	4413      	add	r3, r2
 800a698:	3306      	adds	r3, #6
 800a69a:	617b      	str	r3, [r7, #20]
 800a69c:	e00a      	b.n	800a6b4 <BSP_LCD_DrawCircle+0x1b0>
    }
    else
    {
      d += ((curx - cury) << 2) + 10;
 800a69e:	693a      	ldr	r2, [r7, #16]
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	1ad3      	subs	r3, r2, r3
 800a6a4:	009a      	lsls	r2, r3, #2
 800a6a6:	697b      	ldr	r3, [r7, #20]
 800a6a8:	4413      	add	r3, r2
 800a6aa:	330a      	adds	r3, #10
 800a6ac:	617b      	str	r3, [r7, #20]
      cury--;
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	3b01      	subs	r3, #1
 800a6b2:	60fb      	str	r3, [r7, #12]
    }
    curx++;
 800a6b4:	693b      	ldr	r3, [r7, #16]
 800a6b6:	3301      	adds	r3, #1
 800a6b8:	613b      	str	r3, [r7, #16]
  while (curx <= cury)
 800a6ba:	693a      	ldr	r2, [r7, #16]
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	429a      	cmp	r2, r3
 800a6c0:	f67f af33 	bls.w	800a52a <BSP_LCD_DrawCircle+0x26>
  } 
}
 800a6c4:	bf00      	nop
 800a6c6:	bf00      	nop
 800a6c8:	371c      	adds	r7, #28
 800a6ca:	46bd      	mov	sp, r7
 800a6cc:	bd90      	pop	{r4, r7, pc}
 800a6ce:	bf00      	nop
 800a6d0:	20002bb4 	.word	0x20002bb4
 800a6d4:	20002bb8 	.word	0x20002bb8

0800a6d8 <BSP_LCD_FillRect>:
  * @param  Ypos: the Y position
  * @param  Height: rectangle height
  * @param  Width: rectangle width
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 800a6d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6dc:	b086      	sub	sp, #24
 800a6de:	af02      	add	r7, sp, #8
 800a6e0:	4604      	mov	r4, r0
 800a6e2:	4608      	mov	r0, r1
 800a6e4:	4611      	mov	r1, r2
 800a6e6:	461a      	mov	r2, r3
 800a6e8:	4623      	mov	r3, r4
 800a6ea:	80fb      	strh	r3, [r7, #6]
 800a6ec:	4603      	mov	r3, r0
 800a6ee:	80bb      	strh	r3, [r7, #4]
 800a6f0:	460b      	mov	r3, r1
 800a6f2:	807b      	strh	r3, [r7, #2]
 800a6f4:	4613      	mov	r3, r2
 800a6f6:	803b      	strh	r3, [r7, #0]
  uint32_t xaddress = 0;
 800a6f8:	2300      	movs	r3, #0
 800a6fa:	60fb      	str	r3, [r7, #12]

  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 800a6fc:	4b20      	ldr	r3, [pc, #128]	; (800a780 <BSP_LCD_FillRect+0xa8>)
 800a6fe:	681a      	ldr	r2, [r3, #0]
 800a700:	4920      	ldr	r1, [pc, #128]	; (800a784 <BSP_LCD_FillRect+0xac>)
 800a702:	4613      	mov	r3, r2
 800a704:	005b      	lsls	r3, r3, #1
 800a706:	4413      	add	r3, r2
 800a708:	009b      	lsls	r3, r3, #2
 800a70a:	440b      	add	r3, r1
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	4618      	mov	r0, r3
 800a710:	f7ff fc2a 	bl	8009f68 <BSP_LCD_SetTextColor>

  /* Get the rectangle start address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800a714:	4b1a      	ldr	r3, [pc, #104]	; (800a780 <BSP_LCD_FillRect+0xa8>)
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	4a1b      	ldr	r2, [pc, #108]	; (800a788 <BSP_LCD_FillRect+0xb0>)
 800a71a:	2134      	movs	r1, #52	; 0x34
 800a71c:	fb01 f303 	mul.w	r3, r1, r3
 800a720:	4413      	add	r3, r2
 800a722:	335c      	adds	r3, #92	; 0x5c
 800a724:	681c      	ldr	r4, [r3, #0]
 800a726:	f7ff fb81 	bl	8009e2c <BSP_LCD_GetXSize>
 800a72a:	4602      	mov	r2, r0
 800a72c:	88bb      	ldrh	r3, [r7, #4]
 800a72e:	fb03 f202 	mul.w	r2, r3, r2
 800a732:	88fb      	ldrh	r3, [r7, #6]
 800a734:	4413      	add	r3, r2
 800a736:	009b      	lsls	r3, r3, #2
 800a738:	4423      	add	r3, r4
 800a73a:	60fb      	str	r3, [r7, #12]

  /* Fill the rectangle */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 800a73c:	4b10      	ldr	r3, [pc, #64]	; (800a780 <BSP_LCD_FillRect+0xa8>)
 800a73e:	681c      	ldr	r4, [r3, #0]
 800a740:	68fd      	ldr	r5, [r7, #12]
 800a742:	887e      	ldrh	r6, [r7, #2]
 800a744:	f8b7 8000 	ldrh.w	r8, [r7]
 800a748:	f7ff fb70 	bl	8009e2c <BSP_LCD_GetXSize>
 800a74c:	4602      	mov	r2, r0
 800a74e:	887b      	ldrh	r3, [r7, #2]
 800a750:	1ad1      	subs	r1, r2, r3
 800a752:	4b0b      	ldr	r3, [pc, #44]	; (800a780 <BSP_LCD_FillRect+0xa8>)
 800a754:	681a      	ldr	r2, [r3, #0]
 800a756:	480b      	ldr	r0, [pc, #44]	; (800a784 <BSP_LCD_FillRect+0xac>)
 800a758:	4613      	mov	r3, r2
 800a75a:	005b      	lsls	r3, r3, #1
 800a75c:	4413      	add	r3, r2
 800a75e:	009b      	lsls	r3, r3, #2
 800a760:	4403      	add	r3, r0
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	9301      	str	r3, [sp, #4]
 800a766:	9100      	str	r1, [sp, #0]
 800a768:	4643      	mov	r3, r8
 800a76a:	4632      	mov	r2, r6
 800a76c:	4629      	mov	r1, r5
 800a76e:	4620      	mov	r0, r4
 800a770:	f000 fa72 	bl	800ac58 <FillBuffer>
}
 800a774:	bf00      	nop
 800a776:	3710      	adds	r7, #16
 800a778:	46bd      	mov	sp, r7
 800a77a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a77e:	bf00      	nop
 800a780:	20002bb4 	.word	0x20002bb4
 800a784:	20002bb8 	.word	0x20002bb8
 800a788:	20002a9c 	.word	0x20002a9c

0800a78c <BSP_LCD_FillCircle>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Radius: the circle radius
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 800a78c:	b580      	push	{r7, lr}
 800a78e:	b086      	sub	sp, #24
 800a790:	af00      	add	r7, sp, #0
 800a792:	4603      	mov	r3, r0
 800a794:	80fb      	strh	r3, [r7, #6]
 800a796:	460b      	mov	r3, r1
 800a798:	80bb      	strh	r3, [r7, #4]
 800a79a:	4613      	mov	r3, r2
 800a79c:	807b      	strh	r3, [r7, #2]
  int32_t  d;    /* Decision Variable */ 
  uint32_t  curx;/* Current X Value */
  uint32_t  cury;/* Current Y Value */ 
  
  d = 3 - (Radius << 1);
 800a79e:	887b      	ldrh	r3, [r7, #2]
 800a7a0:	005b      	lsls	r3, r3, #1
 800a7a2:	f1c3 0303 	rsb	r3, r3, #3
 800a7a6:	617b      	str	r3, [r7, #20]

  curx = 0;
 800a7a8:	2300      	movs	r3, #0
 800a7aa:	613b      	str	r3, [r7, #16]
  cury = Radius;
 800a7ac:	887b      	ldrh	r3, [r7, #2]
 800a7ae:	60fb      	str	r3, [r7, #12]
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 800a7b0:	4b44      	ldr	r3, [pc, #272]	; (800a8c4 <BSP_LCD_FillCircle+0x138>)
 800a7b2:	681a      	ldr	r2, [r3, #0]
 800a7b4:	4944      	ldr	r1, [pc, #272]	; (800a8c8 <BSP_LCD_FillCircle+0x13c>)
 800a7b6:	4613      	mov	r3, r2
 800a7b8:	005b      	lsls	r3, r3, #1
 800a7ba:	4413      	add	r3, r2
 800a7bc:	009b      	lsls	r3, r3, #2
 800a7be:	440b      	add	r3, r1
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	f7ff fbd0 	bl	8009f68 <BSP_LCD_SetTextColor>

  while (curx <= cury)
 800a7c8:	e061      	b.n	800a88e <BSP_LCD_FillCircle+0x102>
  {
    if(cury > 0) 
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d021      	beq.n	800a814 <BSP_LCD_FillCircle+0x88>
    {
      BSP_LCD_DrawHLine(Xpos - cury, Ypos + curx, 2*cury);
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	b29b      	uxth	r3, r3
 800a7d4:	88fa      	ldrh	r2, [r7, #6]
 800a7d6:	1ad3      	subs	r3, r2, r3
 800a7d8:	b298      	uxth	r0, r3
 800a7da:	693b      	ldr	r3, [r7, #16]
 800a7dc:	b29a      	uxth	r2, r3
 800a7de:	88bb      	ldrh	r3, [r7, #4]
 800a7e0:	4413      	add	r3, r2
 800a7e2:	b299      	uxth	r1, r3
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	b29b      	uxth	r3, r3
 800a7e8:	005b      	lsls	r3, r3, #1
 800a7ea:	b29b      	uxth	r3, r3
 800a7ec:	461a      	mov	r2, r3
 800a7ee:	f7ff fdd7 	bl	800a3a0 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - cury, Ypos - curx, 2*cury);
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	b29b      	uxth	r3, r3
 800a7f6:	88fa      	ldrh	r2, [r7, #6]
 800a7f8:	1ad3      	subs	r3, r2, r3
 800a7fa:	b298      	uxth	r0, r3
 800a7fc:	693b      	ldr	r3, [r7, #16]
 800a7fe:	b29b      	uxth	r3, r3
 800a800:	88ba      	ldrh	r2, [r7, #4]
 800a802:	1ad3      	subs	r3, r2, r3
 800a804:	b299      	uxth	r1, r3
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	b29b      	uxth	r3, r3
 800a80a:	005b      	lsls	r3, r3, #1
 800a80c:	b29b      	uxth	r3, r3
 800a80e:	461a      	mov	r2, r3
 800a810:	f7ff fdc6 	bl	800a3a0 <BSP_LCD_DrawHLine>
    }

    if(curx > 0) 
 800a814:	693b      	ldr	r3, [r7, #16]
 800a816:	2b00      	cmp	r3, #0
 800a818:	d021      	beq.n	800a85e <BSP_LCD_FillCircle+0xd2>
    {
      BSP_LCD_DrawHLine(Xpos - curx, Ypos - cury, 2*curx);
 800a81a:	693b      	ldr	r3, [r7, #16]
 800a81c:	b29b      	uxth	r3, r3
 800a81e:	88fa      	ldrh	r2, [r7, #6]
 800a820:	1ad3      	subs	r3, r2, r3
 800a822:	b298      	uxth	r0, r3
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	b29b      	uxth	r3, r3
 800a828:	88ba      	ldrh	r2, [r7, #4]
 800a82a:	1ad3      	subs	r3, r2, r3
 800a82c:	b299      	uxth	r1, r3
 800a82e:	693b      	ldr	r3, [r7, #16]
 800a830:	b29b      	uxth	r3, r3
 800a832:	005b      	lsls	r3, r3, #1
 800a834:	b29b      	uxth	r3, r3
 800a836:	461a      	mov	r2, r3
 800a838:	f7ff fdb2 	bl	800a3a0 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - curx, Ypos + cury, 2*curx);
 800a83c:	693b      	ldr	r3, [r7, #16]
 800a83e:	b29b      	uxth	r3, r3
 800a840:	88fa      	ldrh	r2, [r7, #6]
 800a842:	1ad3      	subs	r3, r2, r3
 800a844:	b298      	uxth	r0, r3
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	b29a      	uxth	r2, r3
 800a84a:	88bb      	ldrh	r3, [r7, #4]
 800a84c:	4413      	add	r3, r2
 800a84e:	b299      	uxth	r1, r3
 800a850:	693b      	ldr	r3, [r7, #16]
 800a852:	b29b      	uxth	r3, r3
 800a854:	005b      	lsls	r3, r3, #1
 800a856:	b29b      	uxth	r3, r3
 800a858:	461a      	mov	r2, r3
 800a85a:	f7ff fda1 	bl	800a3a0 <BSP_LCD_DrawHLine>
    }
    if (d < 0)
 800a85e:	697b      	ldr	r3, [r7, #20]
 800a860:	2b00      	cmp	r3, #0
 800a862:	da06      	bge.n	800a872 <BSP_LCD_FillCircle+0xe6>
    { 
      d += (curx << 2) + 6;
 800a864:	693b      	ldr	r3, [r7, #16]
 800a866:	009a      	lsls	r2, r3, #2
 800a868:	697b      	ldr	r3, [r7, #20]
 800a86a:	4413      	add	r3, r2
 800a86c:	3306      	adds	r3, #6
 800a86e:	617b      	str	r3, [r7, #20]
 800a870:	e00a      	b.n	800a888 <BSP_LCD_FillCircle+0xfc>
    }
    else
    {
      d += ((curx - cury) << 2) + 10;
 800a872:	693a      	ldr	r2, [r7, #16]
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	1ad3      	subs	r3, r2, r3
 800a878:	009a      	lsls	r2, r3, #2
 800a87a:	697b      	ldr	r3, [r7, #20]
 800a87c:	4413      	add	r3, r2
 800a87e:	330a      	adds	r3, #10
 800a880:	617b      	str	r3, [r7, #20]
      cury--;
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	3b01      	subs	r3, #1
 800a886:	60fb      	str	r3, [r7, #12]
    }
    curx++;
 800a888:	693b      	ldr	r3, [r7, #16]
 800a88a:	3301      	adds	r3, #1
 800a88c:	613b      	str	r3, [r7, #16]
  while (curx <= cury)
 800a88e:	693a      	ldr	r2, [r7, #16]
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	429a      	cmp	r2, r3
 800a894:	d999      	bls.n	800a7ca <BSP_LCD_FillCircle+0x3e>
  }

  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 800a896:	4b0b      	ldr	r3, [pc, #44]	; (800a8c4 <BSP_LCD_FillCircle+0x138>)
 800a898:	681a      	ldr	r2, [r3, #0]
 800a89a:	490b      	ldr	r1, [pc, #44]	; (800a8c8 <BSP_LCD_FillCircle+0x13c>)
 800a89c:	4613      	mov	r3, r2
 800a89e:	005b      	lsls	r3, r3, #1
 800a8a0:	4413      	add	r3, r2
 800a8a2:	009b      	lsls	r3, r3, #2
 800a8a4:	440b      	add	r3, r1
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	4618      	mov	r0, r3
 800a8aa:	f7ff fb5d 	bl	8009f68 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 800a8ae:	887a      	ldrh	r2, [r7, #2]
 800a8b0:	88b9      	ldrh	r1, [r7, #4]
 800a8b2:	88fb      	ldrh	r3, [r7, #6]
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	f7ff fe25 	bl	800a504 <BSP_LCD_DrawCircle>
}
 800a8ba:	bf00      	nop
 800a8bc:	3718      	adds	r7, #24
 800a8be:	46bd      	mov	sp, r7
 800a8c0:	bd80      	pop	{r7, pc}
 800a8c2:	bf00      	nop
 800a8c4:	20002bb4 	.word	0x20002bb4
 800a8c8:	20002bb8 	.word	0x20002bb8

0800a8cc <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 800a8cc:	b580      	push	{r7, lr}
 800a8ce:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 800a8d0:	4b05      	ldr	r3, [pc, #20]	; (800a8e8 <BSP_LCD_DisplayOn+0x1c>)
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	689b      	ldr	r3, [r3, #8]
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d003      	beq.n	800a8e2 <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 800a8da:	4b03      	ldr	r3, [pc, #12]	; (800a8e8 <BSP_LCD_DisplayOn+0x1c>)
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	689b      	ldr	r3, [r3, #8]
 800a8e0:	4798      	blx	r3
  }
}
 800a8e2:	bf00      	nop
 800a8e4:	bd80      	pop	{r7, pc}
 800a8e6:	bf00      	nop
 800a8e8:	20002bd0 	.word	0x20002bd0

0800a8ec <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 800a8ec:	b580      	push	{r7, lr}
 800a8ee:	b08e      	sub	sp, #56	; 0x38
 800a8f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	623b      	str	r3, [r7, #32]
 800a8f6:	4b61      	ldr	r3, [pc, #388]	; (800aa7c <BSP_LCD_MspInit+0x190>)
 800a8f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a8fa:	4a60      	ldr	r2, [pc, #384]	; (800aa7c <BSP_LCD_MspInit+0x190>)
 800a8fc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a900:	6453      	str	r3, [r2, #68]	; 0x44
 800a902:	4b5e      	ldr	r3, [pc, #376]	; (800aa7c <BSP_LCD_MspInit+0x190>)
 800a904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a906:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a90a:	623b      	str	r3, [r7, #32]
 800a90c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 800a90e:	2300      	movs	r3, #0
 800a910:	61fb      	str	r3, [r7, #28]
 800a912:	4b5a      	ldr	r3, [pc, #360]	; (800aa7c <BSP_LCD_MspInit+0x190>)
 800a914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a916:	4a59      	ldr	r2, [pc, #356]	; (800aa7c <BSP_LCD_MspInit+0x190>)
 800a918:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a91c:	6313      	str	r3, [r2, #48]	; 0x30
 800a91e:	4b57      	ldr	r3, [pc, #348]	; (800aa7c <BSP_LCD_MspInit+0x190>)
 800a920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a922:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a926:	61fb      	str	r3, [r7, #28]
 800a928:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800a92a:	2300      	movs	r3, #0
 800a92c:	61bb      	str	r3, [r7, #24]
 800a92e:	4b53      	ldr	r3, [pc, #332]	; (800aa7c <BSP_LCD_MspInit+0x190>)
 800a930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a932:	4a52      	ldr	r2, [pc, #328]	; (800aa7c <BSP_LCD_MspInit+0x190>)
 800a934:	f043 0301 	orr.w	r3, r3, #1
 800a938:	6313      	str	r3, [r2, #48]	; 0x30
 800a93a:	4b50      	ldr	r3, [pc, #320]	; (800aa7c <BSP_LCD_MspInit+0x190>)
 800a93c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a93e:	f003 0301 	and.w	r3, r3, #1
 800a942:	61bb      	str	r3, [r7, #24]
 800a944:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800a946:	2300      	movs	r3, #0
 800a948:	617b      	str	r3, [r7, #20]
 800a94a:	4b4c      	ldr	r3, [pc, #304]	; (800aa7c <BSP_LCD_MspInit+0x190>)
 800a94c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a94e:	4a4b      	ldr	r2, [pc, #300]	; (800aa7c <BSP_LCD_MspInit+0x190>)
 800a950:	f043 0302 	orr.w	r3, r3, #2
 800a954:	6313      	str	r3, [r2, #48]	; 0x30
 800a956:	4b49      	ldr	r3, [pc, #292]	; (800aa7c <BSP_LCD_MspInit+0x190>)
 800a958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a95a:	f003 0302 	and.w	r3, r3, #2
 800a95e:	617b      	str	r3, [r7, #20]
 800a960:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800a962:	2300      	movs	r3, #0
 800a964:	613b      	str	r3, [r7, #16]
 800a966:	4b45      	ldr	r3, [pc, #276]	; (800aa7c <BSP_LCD_MspInit+0x190>)
 800a968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a96a:	4a44      	ldr	r2, [pc, #272]	; (800aa7c <BSP_LCD_MspInit+0x190>)
 800a96c:	f043 0304 	orr.w	r3, r3, #4
 800a970:	6313      	str	r3, [r2, #48]	; 0x30
 800a972:	4b42      	ldr	r3, [pc, #264]	; (800aa7c <BSP_LCD_MspInit+0x190>)
 800a974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a976:	f003 0304 	and.w	r3, r3, #4
 800a97a:	613b      	str	r3, [r7, #16]
 800a97c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800a97e:	2300      	movs	r3, #0
 800a980:	60fb      	str	r3, [r7, #12]
 800a982:	4b3e      	ldr	r3, [pc, #248]	; (800aa7c <BSP_LCD_MspInit+0x190>)
 800a984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a986:	4a3d      	ldr	r2, [pc, #244]	; (800aa7c <BSP_LCD_MspInit+0x190>)
 800a988:	f043 0308 	orr.w	r3, r3, #8
 800a98c:	6313      	str	r3, [r2, #48]	; 0x30
 800a98e:	4b3b      	ldr	r3, [pc, #236]	; (800aa7c <BSP_LCD_MspInit+0x190>)
 800a990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a992:	f003 0308 	and.w	r3, r3, #8
 800a996:	60fb      	str	r3, [r7, #12]
 800a998:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800a99a:	2300      	movs	r3, #0
 800a99c:	60bb      	str	r3, [r7, #8]
 800a99e:	4b37      	ldr	r3, [pc, #220]	; (800aa7c <BSP_LCD_MspInit+0x190>)
 800a9a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9a2:	4a36      	ldr	r2, [pc, #216]	; (800aa7c <BSP_LCD_MspInit+0x190>)
 800a9a4:	f043 0320 	orr.w	r3, r3, #32
 800a9a8:	6313      	str	r3, [r2, #48]	; 0x30
 800a9aa:	4b34      	ldr	r3, [pc, #208]	; (800aa7c <BSP_LCD_MspInit+0x190>)
 800a9ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9ae:	f003 0320 	and.w	r3, r3, #32
 800a9b2:	60bb      	str	r3, [r7, #8]
 800a9b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	607b      	str	r3, [r7, #4]
 800a9ba:	4b30      	ldr	r3, [pc, #192]	; (800aa7c <BSP_LCD_MspInit+0x190>)
 800a9bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9be:	4a2f      	ldr	r2, [pc, #188]	; (800aa7c <BSP_LCD_MspInit+0x190>)
 800a9c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a9c4:	6313      	str	r3, [r2, #48]	; 0x30
 800a9c6:	4b2d      	ldr	r3, [pc, #180]	; (800aa7c <BSP_LCD_MspInit+0x190>)
 800a9c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9ce:	607b      	str	r3, [r7, #4]
 800a9d0:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 800a9d2:	f641 0358 	movw	r3, #6232	; 0x1858
 800a9d6:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 800a9d8:	2302      	movs	r3, #2
 800a9da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 800a9dc:	2300      	movs	r3, #0
 800a9de:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 800a9e0:	2302      	movs	r3, #2
 800a9e2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 800a9e4:	230e      	movs	r3, #14
 800a9e6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 800a9e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a9ec:	4619      	mov	r1, r3
 800a9ee:	4824      	ldr	r0, [pc, #144]	; (800aa80 <BSP_LCD_MspInit+0x194>)
 800a9f0:	f001 fade 	bl	800bfb0 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 800a9f4:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800a9f8:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800a9fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a9fe:	4619      	mov	r1, r3
 800aa00:	4820      	ldr	r0, [pc, #128]	; (800aa84 <BSP_LCD_MspInit+0x198>)
 800aa02:	f001 fad5 	bl	800bfb0 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 800aa06:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 800aa0a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 800aa0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aa10:	4619      	mov	r1, r3
 800aa12:	481d      	ldr	r0, [pc, #116]	; (800aa88 <BSP_LCD_MspInit+0x19c>)
 800aa14:	f001 facc 	bl	800bfb0 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 800aa18:	2348      	movs	r3, #72	; 0x48
 800aa1a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 800aa1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aa20:	4619      	mov	r1, r3
 800aa22:	481a      	ldr	r0, [pc, #104]	; (800aa8c <BSP_LCD_MspInit+0x1a0>)
 800aa24:	f001 fac4 	bl	800bfb0 <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 800aa28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aa2c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 800aa2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aa32:	4619      	mov	r1, r3
 800aa34:	4816      	ldr	r0, [pc, #88]	; (800aa90 <BSP_LCD_MspInit+0x1a4>)
 800aa36:	f001 fabb 	bl	800bfb0 <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 800aa3a:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 800aa3e:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800aa40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aa44:	4619      	mov	r1, r3
 800aa46:	4813      	ldr	r0, [pc, #76]	; (800aa94 <BSP_LCD_MspInit+0x1a8>)
 800aa48:	f001 fab2 	bl	800bfb0 <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 800aa4c:	2303      	movs	r3, #3
 800aa4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 800aa50:	2309      	movs	r3, #9
 800aa52:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800aa54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aa58:	4619      	mov	r1, r3
 800aa5a:	480a      	ldr	r0, [pc, #40]	; (800aa84 <BSP_LCD_MspInit+0x198>)
 800aa5c:	f001 faa8 	bl	800bfb0 <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 800aa60:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800aa64:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800aa66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aa6a:	4619      	mov	r1, r3
 800aa6c:	4809      	ldr	r0, [pc, #36]	; (800aa94 <BSP_LCD_MspInit+0x1a8>)
 800aa6e:	f001 fa9f 	bl	800bfb0 <HAL_GPIO_Init>
}
 800aa72:	bf00      	nop
 800aa74:	3738      	adds	r7, #56	; 0x38
 800aa76:	46bd      	mov	sp, r7
 800aa78:	bd80      	pop	{r7, pc}
 800aa7a:	bf00      	nop
 800aa7c:	40023800 	.word	0x40023800
 800aa80:	40020000 	.word	0x40020000
 800aa84:	40020400 	.word	0x40020400
 800aa88:	40020800 	.word	0x40020800
 800aa8c:	40020c00 	.word	0x40020c00
 800aa90:	40021400 	.word	0x40021400
 800aa94:	40021800 	.word	0x40021800

0800aa98 <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 800aa98:	b5b0      	push	{r4, r5, r7, lr}
 800aa9a:	b082      	sub	sp, #8
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	4603      	mov	r3, r0
 800aaa0:	603a      	str	r2, [r7, #0]
 800aaa2:	80fb      	strh	r3, [r7, #6]
 800aaa4:	460b      	mov	r3, r1
 800aaa6:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 800aaa8:	4b0c      	ldr	r3, [pc, #48]	; (800aadc <BSP_LCD_DrawPixel+0x44>)
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	4a0c      	ldr	r2, [pc, #48]	; (800aae0 <BSP_LCD_DrawPixel+0x48>)
 800aaae:	2134      	movs	r1, #52	; 0x34
 800aab0:	fb01 f303 	mul.w	r3, r1, r3
 800aab4:	4413      	add	r3, r2
 800aab6:	335c      	adds	r3, #92	; 0x5c
 800aab8:	681c      	ldr	r4, [r3, #0]
 800aaba:	88bd      	ldrh	r5, [r7, #4]
 800aabc:	f7ff f9b6 	bl	8009e2c <BSP_LCD_GetXSize>
 800aac0:	4603      	mov	r3, r0
 800aac2:	fb03 f205 	mul.w	r2, r3, r5
 800aac6:	88fb      	ldrh	r3, [r7, #6]
 800aac8:	4413      	add	r3, r2
 800aaca:	009b      	lsls	r3, r3, #2
 800aacc:	4423      	add	r3, r4
 800aace:	461a      	mov	r2, r3
 800aad0:	683b      	ldr	r3, [r7, #0]
 800aad2:	6013      	str	r3, [r2, #0]
}
 800aad4:	bf00      	nop
 800aad6:	3708      	adds	r7, #8
 800aad8:	46bd      	mov	sp, r7
 800aada:	bdb0      	pop	{r4, r5, r7, pc}
 800aadc:	20002bb4 	.word	0x20002bb4
 800aae0:	20002a9c 	.word	0x20002a9c

0800aae4 <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 800aae4:	b580      	push	{r7, lr}
 800aae6:	b088      	sub	sp, #32
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	4603      	mov	r3, r0
 800aaec:	603a      	str	r2, [r7, #0]
 800aaee:	80fb      	strh	r3, [r7, #6]
 800aaf0:	460b      	mov	r3, r1
 800aaf2:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 800aaf4:	2300      	movs	r3, #0
 800aaf6:	61fb      	str	r3, [r7, #28]
 800aaf8:	2300      	movs	r3, #0
 800aafa:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 800aafc:	2300      	movs	r3, #0
 800aafe:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 800ab00:	4b53      	ldr	r3, [pc, #332]	; (800ac50 <DrawChar+0x16c>)
 800ab02:	681a      	ldr	r2, [r3, #0]
 800ab04:	4953      	ldr	r1, [pc, #332]	; (800ac54 <DrawChar+0x170>)
 800ab06:	4613      	mov	r3, r2
 800ab08:	005b      	lsls	r3, r3, #1
 800ab0a:	4413      	add	r3, r2
 800ab0c:	009b      	lsls	r3, r3, #2
 800ab0e:	440b      	add	r3, r1
 800ab10:	3308      	adds	r3, #8
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	88db      	ldrh	r3, [r3, #6]
 800ab16:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 800ab18:	4b4d      	ldr	r3, [pc, #308]	; (800ac50 <DrawChar+0x16c>)
 800ab1a:	681a      	ldr	r2, [r3, #0]
 800ab1c:	494d      	ldr	r1, [pc, #308]	; (800ac54 <DrawChar+0x170>)
 800ab1e:	4613      	mov	r3, r2
 800ab20:	005b      	lsls	r3, r3, #1
 800ab22:	4413      	add	r3, r2
 800ab24:	009b      	lsls	r3, r3, #2
 800ab26:	440b      	add	r3, r1
 800ab28:	3308      	adds	r3, #8
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	889b      	ldrh	r3, [r3, #4]
 800ab2e:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 800ab30:	8a3b      	ldrh	r3, [r7, #16]
 800ab32:	3307      	adds	r3, #7
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	da00      	bge.n	800ab3a <DrawChar+0x56>
 800ab38:	3307      	adds	r3, #7
 800ab3a:	10db      	asrs	r3, r3, #3
 800ab3c:	b2db      	uxtb	r3, r3
 800ab3e:	00db      	lsls	r3, r3, #3
 800ab40:	b2da      	uxtb	r2, r3
 800ab42:	8a3b      	ldrh	r3, [r7, #16]
 800ab44:	b2db      	uxtb	r3, r3
 800ab46:	1ad3      	subs	r3, r2, r3
 800ab48:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 800ab4a:	2300      	movs	r3, #0
 800ab4c:	61fb      	str	r3, [r7, #28]
 800ab4e:	e076      	b.n	800ac3e <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 800ab50:	8a3b      	ldrh	r3, [r7, #16]
 800ab52:	3307      	adds	r3, #7
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	da00      	bge.n	800ab5a <DrawChar+0x76>
 800ab58:	3307      	adds	r3, #7
 800ab5a:	10db      	asrs	r3, r3, #3
 800ab5c:	461a      	mov	r2, r3
 800ab5e:	69fb      	ldr	r3, [r7, #28]
 800ab60:	fb02 f303 	mul.w	r3, r2, r3
 800ab64:	683a      	ldr	r2, [r7, #0]
 800ab66:	4413      	add	r3, r2
 800ab68:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 800ab6a:	8a3b      	ldrh	r3, [r7, #16]
 800ab6c:	3307      	adds	r3, #7
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	da00      	bge.n	800ab74 <DrawChar+0x90>
 800ab72:	3307      	adds	r3, #7
 800ab74:	10db      	asrs	r3, r3, #3
 800ab76:	2b01      	cmp	r3, #1
 800ab78:	d002      	beq.n	800ab80 <DrawChar+0x9c>
 800ab7a:	2b02      	cmp	r3, #2
 800ab7c:	d004      	beq.n	800ab88 <DrawChar+0xa4>
 800ab7e:	e00c      	b.n	800ab9a <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 800ab80:	68bb      	ldr	r3, [r7, #8]
 800ab82:	781b      	ldrb	r3, [r3, #0]
 800ab84:	617b      	str	r3, [r7, #20]
      break;
 800ab86:	e016      	b.n	800abb6 <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 800ab88:	68bb      	ldr	r3, [r7, #8]
 800ab8a:	781b      	ldrb	r3, [r3, #0]
 800ab8c:	021b      	lsls	r3, r3, #8
 800ab8e:	68ba      	ldr	r2, [r7, #8]
 800ab90:	3201      	adds	r2, #1
 800ab92:	7812      	ldrb	r2, [r2, #0]
 800ab94:	4313      	orrs	r3, r2
 800ab96:	617b      	str	r3, [r7, #20]
      break;
 800ab98:	e00d      	b.n	800abb6 <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 800ab9a:	68bb      	ldr	r3, [r7, #8]
 800ab9c:	781b      	ldrb	r3, [r3, #0]
 800ab9e:	041a      	lsls	r2, r3, #16
 800aba0:	68bb      	ldr	r3, [r7, #8]
 800aba2:	3301      	adds	r3, #1
 800aba4:	781b      	ldrb	r3, [r3, #0]
 800aba6:	021b      	lsls	r3, r3, #8
 800aba8:	4313      	orrs	r3, r2
 800abaa:	68ba      	ldr	r2, [r7, #8]
 800abac:	3202      	adds	r2, #2
 800abae:	7812      	ldrb	r2, [r2, #0]
 800abb0:	4313      	orrs	r3, r2
 800abb2:	617b      	str	r3, [r7, #20]
      break;
 800abb4:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 800abb6:	2300      	movs	r3, #0
 800abb8:	61bb      	str	r3, [r7, #24]
 800abba:	e036      	b.n	800ac2a <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 800abbc:	8a3a      	ldrh	r2, [r7, #16]
 800abbe:	69bb      	ldr	r3, [r7, #24]
 800abc0:	1ad2      	subs	r2, r2, r3
 800abc2:	7bfb      	ldrb	r3, [r7, #15]
 800abc4:	4413      	add	r3, r2
 800abc6:	3b01      	subs	r3, #1
 800abc8:	2201      	movs	r2, #1
 800abca:	fa02 f303 	lsl.w	r3, r2, r3
 800abce:	461a      	mov	r2, r3
 800abd0:	697b      	ldr	r3, [r7, #20]
 800abd2:	4013      	ands	r3, r2
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d012      	beq.n	800abfe <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 800abd8:	69bb      	ldr	r3, [r7, #24]
 800abda:	b29a      	uxth	r2, r3
 800abdc:	88fb      	ldrh	r3, [r7, #6]
 800abde:	4413      	add	r3, r2
 800abe0:	b298      	uxth	r0, r3
 800abe2:	4b1b      	ldr	r3, [pc, #108]	; (800ac50 <DrawChar+0x16c>)
 800abe4:	681a      	ldr	r2, [r3, #0]
 800abe6:	491b      	ldr	r1, [pc, #108]	; (800ac54 <DrawChar+0x170>)
 800abe8:	4613      	mov	r3, r2
 800abea:	005b      	lsls	r3, r3, #1
 800abec:	4413      	add	r3, r2
 800abee:	009b      	lsls	r3, r3, #2
 800abf0:	440b      	add	r3, r1
 800abf2:	681a      	ldr	r2, [r3, #0]
 800abf4:	88bb      	ldrh	r3, [r7, #4]
 800abf6:	4619      	mov	r1, r3
 800abf8:	f7ff ff4e 	bl	800aa98 <BSP_LCD_DrawPixel>
 800abfc:	e012      	b.n	800ac24 <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 800abfe:	69bb      	ldr	r3, [r7, #24]
 800ac00:	b29a      	uxth	r2, r3
 800ac02:	88fb      	ldrh	r3, [r7, #6]
 800ac04:	4413      	add	r3, r2
 800ac06:	b298      	uxth	r0, r3
 800ac08:	4b11      	ldr	r3, [pc, #68]	; (800ac50 <DrawChar+0x16c>)
 800ac0a:	681a      	ldr	r2, [r3, #0]
 800ac0c:	4911      	ldr	r1, [pc, #68]	; (800ac54 <DrawChar+0x170>)
 800ac0e:	4613      	mov	r3, r2
 800ac10:	005b      	lsls	r3, r3, #1
 800ac12:	4413      	add	r3, r2
 800ac14:	009b      	lsls	r3, r3, #2
 800ac16:	440b      	add	r3, r1
 800ac18:	3304      	adds	r3, #4
 800ac1a:	681a      	ldr	r2, [r3, #0]
 800ac1c:	88bb      	ldrh	r3, [r7, #4]
 800ac1e:	4619      	mov	r1, r3
 800ac20:	f7ff ff3a 	bl	800aa98 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 800ac24:	69bb      	ldr	r3, [r7, #24]
 800ac26:	3301      	adds	r3, #1
 800ac28:	61bb      	str	r3, [r7, #24]
 800ac2a:	8a3b      	ldrh	r3, [r7, #16]
 800ac2c:	69ba      	ldr	r2, [r7, #24]
 800ac2e:	429a      	cmp	r2, r3
 800ac30:	d3c4      	bcc.n	800abbc <DrawChar+0xd8>
      } 
    }
    Ypos++;
 800ac32:	88bb      	ldrh	r3, [r7, #4]
 800ac34:	3301      	adds	r3, #1
 800ac36:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 800ac38:	69fb      	ldr	r3, [r7, #28]
 800ac3a:	3301      	adds	r3, #1
 800ac3c:	61fb      	str	r3, [r7, #28]
 800ac3e:	8a7b      	ldrh	r3, [r7, #18]
 800ac40:	69fa      	ldr	r2, [r7, #28]
 800ac42:	429a      	cmp	r2, r3
 800ac44:	d384      	bcc.n	800ab50 <DrawChar+0x6c>
  }
}
 800ac46:	bf00      	nop
 800ac48:	bf00      	nop
 800ac4a:	3720      	adds	r7, #32
 800ac4c:	46bd      	mov	sp, r7
 800ac4e:	bd80      	pop	{r7, pc}
 800ac50:	20002bb4 	.word	0x20002bb4
 800ac54:	20002bb8 	.word	0x20002bb8

0800ac58 <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 800ac58:	b580      	push	{r7, lr}
 800ac5a:	b086      	sub	sp, #24
 800ac5c:	af02      	add	r7, sp, #8
 800ac5e:	60f8      	str	r0, [r7, #12]
 800ac60:	60b9      	str	r1, [r7, #8]
 800ac62:	607a      	str	r2, [r7, #4]
 800ac64:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 800ac66:	4b16      	ldr	r3, [pc, #88]	; (800acc0 <FillBuffer+0x68>)
 800ac68:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800ac6c:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 800ac6e:	4b14      	ldr	r3, [pc, #80]	; (800acc0 <FillBuffer+0x68>)
 800ac70:	2200      	movs	r2, #0
 800ac72:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 800ac74:	4a12      	ldr	r2, [pc, #72]	; (800acc0 <FillBuffer+0x68>)
 800ac76:	69bb      	ldr	r3, [r7, #24]
 800ac78:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 800ac7a:	4b11      	ldr	r3, [pc, #68]	; (800acc0 <FillBuffer+0x68>)
 800ac7c:	4a11      	ldr	r2, [pc, #68]	; (800acc4 <FillBuffer+0x6c>)
 800ac7e:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 800ac80:	480f      	ldr	r0, [pc, #60]	; (800acc0 <FillBuffer+0x68>)
 800ac82:	f000 fdf9 	bl	800b878 <HAL_DMA2D_Init>
 800ac86:	4603      	mov	r3, r0
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d115      	bne.n	800acb8 <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 800ac8c:	68f9      	ldr	r1, [r7, #12]
 800ac8e:	480c      	ldr	r0, [pc, #48]	; (800acc0 <FillBuffer+0x68>)
 800ac90:	f001 f860 	bl	800bd54 <HAL_DMA2D_ConfigLayer>
 800ac94:	4603      	mov	r3, r0
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d10e      	bne.n	800acb8 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 800ac9a:	68ba      	ldr	r2, [r7, #8]
 800ac9c:	683b      	ldr	r3, [r7, #0]
 800ac9e:	9300      	str	r3, [sp, #0]
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	69f9      	ldr	r1, [r7, #28]
 800aca4:	4806      	ldr	r0, [pc, #24]	; (800acc0 <FillBuffer+0x68>)
 800aca6:	f000 fe30 	bl	800b90a <HAL_DMA2D_Start>
 800acaa:	4603      	mov	r3, r0
 800acac:	2b00      	cmp	r3, #0
 800acae:	d103      	bne.n	800acb8 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 800acb0:	210a      	movs	r1, #10
 800acb2:	4803      	ldr	r0, [pc, #12]	; (800acc0 <FillBuffer+0x68>)
 800acb4:	f000 fe54 	bl	800b960 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 800acb8:	bf00      	nop
 800acba:	3710      	adds	r7, #16
 800acbc:	46bd      	mov	sp, r7
 800acbe:	bd80      	pop	{r7, pc}
 800acc0:	20002b44 	.word	0x20002b44
 800acc4:	4002b000 	.word	0x4002b000

0800acc8 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 800acc8:	b580      	push	{r7, lr}
 800acca:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 800accc:	4b29      	ldr	r3, [pc, #164]	; (800ad74 <BSP_SDRAM_Init+0xac>)
 800acce:	4a2a      	ldr	r2, [pc, #168]	; (800ad78 <BSP_SDRAM_Init+0xb0>)
 800acd0:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 800acd2:	4b2a      	ldr	r3, [pc, #168]	; (800ad7c <BSP_SDRAM_Init+0xb4>)
 800acd4:	2202      	movs	r2, #2
 800acd6:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 800acd8:	4b28      	ldr	r3, [pc, #160]	; (800ad7c <BSP_SDRAM_Init+0xb4>)
 800acda:	2207      	movs	r2, #7
 800acdc:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 800acde:	4b27      	ldr	r3, [pc, #156]	; (800ad7c <BSP_SDRAM_Init+0xb4>)
 800ace0:	2204      	movs	r2, #4
 800ace2:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 800ace4:	4b25      	ldr	r3, [pc, #148]	; (800ad7c <BSP_SDRAM_Init+0xb4>)
 800ace6:	2207      	movs	r2, #7
 800ace8:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 800acea:	4b24      	ldr	r3, [pc, #144]	; (800ad7c <BSP_SDRAM_Init+0xb4>)
 800acec:	2202      	movs	r2, #2
 800acee:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 800acf0:	4b22      	ldr	r3, [pc, #136]	; (800ad7c <BSP_SDRAM_Init+0xb4>)
 800acf2:	2202      	movs	r2, #2
 800acf4:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 800acf6:	4b21      	ldr	r3, [pc, #132]	; (800ad7c <BSP_SDRAM_Init+0xb4>)
 800acf8:	2202      	movs	r2, #2
 800acfa:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 800acfc:	4b1d      	ldr	r3, [pc, #116]	; (800ad74 <BSP_SDRAM_Init+0xac>)
 800acfe:	2201      	movs	r2, #1
 800ad00:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800ad02:	4b1c      	ldr	r3, [pc, #112]	; (800ad74 <BSP_SDRAM_Init+0xac>)
 800ad04:	2200      	movs	r2, #0
 800ad06:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 800ad08:	4b1a      	ldr	r3, [pc, #104]	; (800ad74 <BSP_SDRAM_Init+0xac>)
 800ad0a:	2204      	movs	r2, #4
 800ad0c:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 800ad0e:	4b19      	ldr	r3, [pc, #100]	; (800ad74 <BSP_SDRAM_Init+0xac>)
 800ad10:	2210      	movs	r2, #16
 800ad12:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800ad14:	4b17      	ldr	r3, [pc, #92]	; (800ad74 <BSP_SDRAM_Init+0xac>)
 800ad16:	2240      	movs	r2, #64	; 0x40
 800ad18:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 800ad1a:	4b16      	ldr	r3, [pc, #88]	; (800ad74 <BSP_SDRAM_Init+0xac>)
 800ad1c:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800ad20:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800ad22:	4b14      	ldr	r3, [pc, #80]	; (800ad74 <BSP_SDRAM_Init+0xac>)
 800ad24:	2200      	movs	r2, #0
 800ad26:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 800ad28:	4b12      	ldr	r3, [pc, #72]	; (800ad74 <BSP_SDRAM_Init+0xac>)
 800ad2a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ad2e:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 800ad30:	4b10      	ldr	r3, [pc, #64]	; (800ad74 <BSP_SDRAM_Init+0xac>)
 800ad32:	2200      	movs	r2, #0
 800ad34:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 800ad36:	4b0f      	ldr	r3, [pc, #60]	; (800ad74 <BSP_SDRAM_Init+0xac>)
 800ad38:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800ad3c:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 800ad3e:	2100      	movs	r1, #0
 800ad40:	480c      	ldr	r0, [pc, #48]	; (800ad74 <BSP_SDRAM_Init+0xac>)
 800ad42:	f000 f87f 	bl	800ae44 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 800ad46:	490d      	ldr	r1, [pc, #52]	; (800ad7c <BSP_SDRAM_Init+0xb4>)
 800ad48:	480a      	ldr	r0, [pc, #40]	; (800ad74 <BSP_SDRAM_Init+0xac>)
 800ad4a:	f003 fdfd 	bl	800e948 <HAL_SDRAM_Init>
 800ad4e:	4603      	mov	r3, r0
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d003      	beq.n	800ad5c <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 800ad54:	4b0a      	ldr	r3, [pc, #40]	; (800ad80 <BSP_SDRAM_Init+0xb8>)
 800ad56:	2201      	movs	r2, #1
 800ad58:	701a      	strb	r2, [r3, #0]
 800ad5a:	e002      	b.n	800ad62 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 800ad5c:	4b08      	ldr	r3, [pc, #32]	; (800ad80 <BSP_SDRAM_Init+0xb8>)
 800ad5e:	2200      	movs	r2, #0
 800ad60:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 800ad62:	f240 506a 	movw	r0, #1386	; 0x56a
 800ad66:	f000 f80d 	bl	800ad84 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 800ad6a:	4b05      	ldr	r3, [pc, #20]	; (800ad80 <BSP_SDRAM_Init+0xb8>)
 800ad6c:	781b      	ldrb	r3, [r3, #0]
}
 800ad6e:	4618      	mov	r0, r3
 800ad70:	bd80      	pop	{r7, pc}
 800ad72:	bf00      	nop
 800ad74:	20002bd4 	.word	0x20002bd4
 800ad78:	a0000140 	.word	0xa0000140
 800ad7c:	20002c08 	.word	0x20002c08
 800ad80:	200000a0 	.word	0x200000a0

0800ad84 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 800ad84:	b580      	push	{r7, lr}
 800ad86:	b084      	sub	sp, #16
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 800ad8c:	2300      	movs	r3, #0
 800ad8e:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 800ad90:	4b2a      	ldr	r3, [pc, #168]	; (800ae3c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800ad92:	2201      	movs	r2, #1
 800ad94:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800ad96:	4b29      	ldr	r3, [pc, #164]	; (800ae3c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800ad98:	2208      	movs	r2, #8
 800ad9a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 800ad9c:	4b27      	ldr	r3, [pc, #156]	; (800ae3c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800ad9e:	2201      	movs	r2, #1
 800ada0:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 800ada2:	4b26      	ldr	r3, [pc, #152]	; (800ae3c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800ada4:	2200      	movs	r2, #0
 800ada6:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 800ada8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800adac:	4923      	ldr	r1, [pc, #140]	; (800ae3c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800adae:	4824      	ldr	r0, [pc, #144]	; (800ae40 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800adb0:	f003 fdfe 	bl	800e9b0 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 800adb4:	2001      	movs	r0, #1
 800adb6:	f000 fa7f 	bl	800b2b8 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 800adba:	4b20      	ldr	r3, [pc, #128]	; (800ae3c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800adbc:	2202      	movs	r2, #2
 800adbe:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800adc0:	4b1e      	ldr	r3, [pc, #120]	; (800ae3c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800adc2:	2208      	movs	r2, #8
 800adc4:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 800adc6:	4b1d      	ldr	r3, [pc, #116]	; (800ae3c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800adc8:	2201      	movs	r2, #1
 800adca:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 800adcc:	4b1b      	ldr	r3, [pc, #108]	; (800ae3c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800adce:	2200      	movs	r2, #0
 800add0:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 800add2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800add6:	4919      	ldr	r1, [pc, #100]	; (800ae3c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800add8:	4819      	ldr	r0, [pc, #100]	; (800ae40 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800adda:	f003 fde9 	bl	800e9b0 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800adde:	4b17      	ldr	r3, [pc, #92]	; (800ae3c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800ade0:	2203      	movs	r2, #3
 800ade2:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800ade4:	4b15      	ldr	r3, [pc, #84]	; (800ae3c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800ade6:	2208      	movs	r2, #8
 800ade8:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 800adea:	4b14      	ldr	r3, [pc, #80]	; (800ae3c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800adec:	2204      	movs	r2, #4
 800adee:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 800adf0:	4b12      	ldr	r3, [pc, #72]	; (800ae3c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800adf2:	2200      	movs	r2, #0
 800adf4:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 800adf6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800adfa:	4910      	ldr	r1, [pc, #64]	; (800ae3c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800adfc:	4810      	ldr	r0, [pc, #64]	; (800ae40 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800adfe:	f003 fdd7 	bl	800e9b0 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 800ae02:	f44f 730c 	mov.w	r3, #560	; 0x230
 800ae06:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 800ae08:	4b0c      	ldr	r3, [pc, #48]	; (800ae3c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800ae0a:	2204      	movs	r2, #4
 800ae0c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800ae0e:	4b0b      	ldr	r3, [pc, #44]	; (800ae3c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800ae10:	2208      	movs	r2, #8
 800ae12:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 800ae14:	4b09      	ldr	r3, [pc, #36]	; (800ae3c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800ae16:	2201      	movs	r2, #1
 800ae18:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	4a07      	ldr	r2, [pc, #28]	; (800ae3c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800ae1e:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 800ae20:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ae24:	4905      	ldr	r1, [pc, #20]	; (800ae3c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800ae26:	4806      	ldr	r0, [pc, #24]	; (800ae40 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800ae28:	f003 fdc2 	bl	800e9b0 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 800ae2c:	6879      	ldr	r1, [r7, #4]
 800ae2e:	4804      	ldr	r0, [pc, #16]	; (800ae40 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800ae30:	f003 fde9 	bl	800ea06 <HAL_SDRAM_ProgramRefreshRate>
}
 800ae34:	bf00      	nop
 800ae36:	3710      	adds	r7, #16
 800ae38:	46bd      	mov	sp, r7
 800ae3a:	bd80      	pop	{r7, pc}
 800ae3c:	20002c24 	.word	0x20002c24
 800ae40:	20002bd4 	.word	0x20002bd4

0800ae44 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 800ae44:	b580      	push	{r7, lr}
 800ae46:	b090      	sub	sp, #64	; 0x40
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	6078      	str	r0, [r7, #4]
 800ae4c:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	f000 80ec 	beq.w	800b02e <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 800ae56:	2300      	movs	r3, #0
 800ae58:	62bb      	str	r3, [r7, #40]	; 0x28
 800ae5a:	4b77      	ldr	r3, [pc, #476]	; (800b038 <BSP_SDRAM_MspInit+0x1f4>)
 800ae5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae5e:	4a76      	ldr	r2, [pc, #472]	; (800b038 <BSP_SDRAM_MspInit+0x1f4>)
 800ae60:	f043 0301 	orr.w	r3, r3, #1
 800ae64:	6393      	str	r3, [r2, #56]	; 0x38
 800ae66:	4b74      	ldr	r3, [pc, #464]	; (800b038 <BSP_SDRAM_MspInit+0x1f4>)
 800ae68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae6a:	f003 0301 	and.w	r3, r3, #1
 800ae6e:	62bb      	str	r3, [r7, #40]	; 0x28
 800ae70:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 800ae72:	2300      	movs	r3, #0
 800ae74:	627b      	str	r3, [r7, #36]	; 0x24
 800ae76:	4b70      	ldr	r3, [pc, #448]	; (800b038 <BSP_SDRAM_MspInit+0x1f4>)
 800ae78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae7a:	4a6f      	ldr	r2, [pc, #444]	; (800b038 <BSP_SDRAM_MspInit+0x1f4>)
 800ae7c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800ae80:	6313      	str	r3, [r2, #48]	; 0x30
 800ae82:	4b6d      	ldr	r3, [pc, #436]	; (800b038 <BSP_SDRAM_MspInit+0x1f4>)
 800ae84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ae8a:	627b      	str	r3, [r7, #36]	; 0x24
 800ae8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800ae8e:	2300      	movs	r3, #0
 800ae90:	623b      	str	r3, [r7, #32]
 800ae92:	4b69      	ldr	r3, [pc, #420]	; (800b038 <BSP_SDRAM_MspInit+0x1f4>)
 800ae94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae96:	4a68      	ldr	r2, [pc, #416]	; (800b038 <BSP_SDRAM_MspInit+0x1f4>)
 800ae98:	f043 0302 	orr.w	r3, r3, #2
 800ae9c:	6313      	str	r3, [r2, #48]	; 0x30
 800ae9e:	4b66      	ldr	r3, [pc, #408]	; (800b038 <BSP_SDRAM_MspInit+0x1f4>)
 800aea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aea2:	f003 0302 	and.w	r3, r3, #2
 800aea6:	623b      	str	r3, [r7, #32]
 800aea8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800aeaa:	2300      	movs	r3, #0
 800aeac:	61fb      	str	r3, [r7, #28]
 800aeae:	4b62      	ldr	r3, [pc, #392]	; (800b038 <BSP_SDRAM_MspInit+0x1f4>)
 800aeb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aeb2:	4a61      	ldr	r2, [pc, #388]	; (800b038 <BSP_SDRAM_MspInit+0x1f4>)
 800aeb4:	f043 0304 	orr.w	r3, r3, #4
 800aeb8:	6313      	str	r3, [r2, #48]	; 0x30
 800aeba:	4b5f      	ldr	r3, [pc, #380]	; (800b038 <BSP_SDRAM_MspInit+0x1f4>)
 800aebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aebe:	f003 0304 	and.w	r3, r3, #4
 800aec2:	61fb      	str	r3, [r7, #28]
 800aec4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800aec6:	2300      	movs	r3, #0
 800aec8:	61bb      	str	r3, [r7, #24]
 800aeca:	4b5b      	ldr	r3, [pc, #364]	; (800b038 <BSP_SDRAM_MspInit+0x1f4>)
 800aecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aece:	4a5a      	ldr	r2, [pc, #360]	; (800b038 <BSP_SDRAM_MspInit+0x1f4>)
 800aed0:	f043 0308 	orr.w	r3, r3, #8
 800aed4:	6313      	str	r3, [r2, #48]	; 0x30
 800aed6:	4b58      	ldr	r3, [pc, #352]	; (800b038 <BSP_SDRAM_MspInit+0x1f4>)
 800aed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aeda:	f003 0308 	and.w	r3, r3, #8
 800aede:	61bb      	str	r3, [r7, #24]
 800aee0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800aee2:	2300      	movs	r3, #0
 800aee4:	617b      	str	r3, [r7, #20]
 800aee6:	4b54      	ldr	r3, [pc, #336]	; (800b038 <BSP_SDRAM_MspInit+0x1f4>)
 800aee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aeea:	4a53      	ldr	r2, [pc, #332]	; (800b038 <BSP_SDRAM_MspInit+0x1f4>)
 800aeec:	f043 0310 	orr.w	r3, r3, #16
 800aef0:	6313      	str	r3, [r2, #48]	; 0x30
 800aef2:	4b51      	ldr	r3, [pc, #324]	; (800b038 <BSP_SDRAM_MspInit+0x1f4>)
 800aef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aef6:	f003 0310 	and.w	r3, r3, #16
 800aefa:	617b      	str	r3, [r7, #20]
 800aefc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800aefe:	2300      	movs	r3, #0
 800af00:	613b      	str	r3, [r7, #16]
 800af02:	4b4d      	ldr	r3, [pc, #308]	; (800b038 <BSP_SDRAM_MspInit+0x1f4>)
 800af04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af06:	4a4c      	ldr	r2, [pc, #304]	; (800b038 <BSP_SDRAM_MspInit+0x1f4>)
 800af08:	f043 0320 	orr.w	r3, r3, #32
 800af0c:	6313      	str	r3, [r2, #48]	; 0x30
 800af0e:	4b4a      	ldr	r3, [pc, #296]	; (800b038 <BSP_SDRAM_MspInit+0x1f4>)
 800af10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af12:	f003 0320 	and.w	r3, r3, #32
 800af16:	613b      	str	r3, [r7, #16]
 800af18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800af1a:	2300      	movs	r3, #0
 800af1c:	60fb      	str	r3, [r7, #12]
 800af1e:	4b46      	ldr	r3, [pc, #280]	; (800b038 <BSP_SDRAM_MspInit+0x1f4>)
 800af20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af22:	4a45      	ldr	r2, [pc, #276]	; (800b038 <BSP_SDRAM_MspInit+0x1f4>)
 800af24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af28:	6313      	str	r3, [r2, #48]	; 0x30
 800af2a:	4b43      	ldr	r3, [pc, #268]	; (800b038 <BSP_SDRAM_MspInit+0x1f4>)
 800af2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af32:	60fb      	str	r3, [r7, #12]
 800af34:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 800af36:	2302      	movs	r3, #2
 800af38:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 800af3a:	2302      	movs	r3, #2
 800af3c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 800af3e:	2300      	movs	r3, #0
 800af40:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 800af42:	230c      	movs	r3, #12
 800af44:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 800af46:	2360      	movs	r3, #96	; 0x60
 800af48:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 800af4a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800af4e:	4619      	mov	r1, r3
 800af50:	483a      	ldr	r0, [pc, #232]	; (800b03c <BSP_SDRAM_MspInit+0x1f8>)
 800af52:	f001 f82d 	bl	800bfb0 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 800af56:	2301      	movs	r3, #1
 800af58:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 800af5a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800af5e:	4619      	mov	r1, r3
 800af60:	4837      	ldr	r0, [pc, #220]	; (800b040 <BSP_SDRAM_MspInit+0x1fc>)
 800af62:	f001 f825 	bl	800bfb0 <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 800af66:	f24c 7303 	movw	r3, #50947	; 0xc703
 800af6a:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 800af6c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800af70:	4619      	mov	r1, r3
 800af72:	4834      	ldr	r0, [pc, #208]	; (800b044 <BSP_SDRAM_MspInit+0x200>)
 800af74:	f001 f81c 	bl	800bfb0 <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 800af78:	f64f 7383 	movw	r3, #65411	; 0xff83
 800af7c:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 800af7e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800af82:	4619      	mov	r1, r3
 800af84:	4830      	ldr	r0, [pc, #192]	; (800b048 <BSP_SDRAM_MspInit+0x204>)
 800af86:	f001 f813 	bl	800bfb0 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 800af8a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800af8e:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 800af90:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800af94:	4619      	mov	r1, r3
 800af96:	482d      	ldr	r0, [pc, #180]	; (800b04c <BSP_SDRAM_MspInit+0x208>)
 800af98:	f001 f80a 	bl	800bfb0 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 800af9c:	f248 1333 	movw	r3, #33075	; 0x8133
 800afa0:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800afa2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800afa6:	4619      	mov	r1, r3
 800afa8:	4829      	ldr	r0, [pc, #164]	; (800b050 <BSP_SDRAM_MspInit+0x20c>)
 800afaa:	f001 f801 	bl	800bfb0 <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 800afae:	4b29      	ldr	r3, [pc, #164]	; (800b054 <BSP_SDRAM_MspInit+0x210>)
 800afb0:	2200      	movs	r2, #0
 800afb2:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 800afb4:	4b27      	ldr	r3, [pc, #156]	; (800b054 <BSP_SDRAM_MspInit+0x210>)
 800afb6:	2280      	movs	r2, #128	; 0x80
 800afb8:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 800afba:	4b26      	ldr	r3, [pc, #152]	; (800b054 <BSP_SDRAM_MspInit+0x210>)
 800afbc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800afc0:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 800afc2:	4b24      	ldr	r3, [pc, #144]	; (800b054 <BSP_SDRAM_MspInit+0x210>)
 800afc4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800afc8:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800afca:	4b22      	ldr	r3, [pc, #136]	; (800b054 <BSP_SDRAM_MspInit+0x210>)
 800afcc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800afd0:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800afd2:	4b20      	ldr	r3, [pc, #128]	; (800b054 <BSP_SDRAM_MspInit+0x210>)
 800afd4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800afd8:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 800afda:	4b1e      	ldr	r3, [pc, #120]	; (800b054 <BSP_SDRAM_MspInit+0x210>)
 800afdc:	2200      	movs	r2, #0
 800afde:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 800afe0:	4b1c      	ldr	r3, [pc, #112]	; (800b054 <BSP_SDRAM_MspInit+0x210>)
 800afe2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800afe6:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 800afe8:	4b1a      	ldr	r3, [pc, #104]	; (800b054 <BSP_SDRAM_MspInit+0x210>)
 800afea:	2200      	movs	r2, #0
 800afec:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800afee:	4b19      	ldr	r3, [pc, #100]	; (800b054 <BSP_SDRAM_MspInit+0x210>)
 800aff0:	2203      	movs	r2, #3
 800aff2:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 800aff4:	4b17      	ldr	r3, [pc, #92]	; (800b054 <BSP_SDRAM_MspInit+0x210>)
 800aff6:	2200      	movs	r2, #0
 800aff8:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 800affa:	4b16      	ldr	r3, [pc, #88]	; (800b054 <BSP_SDRAM_MspInit+0x210>)
 800affc:	2200      	movs	r2, #0
 800affe:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 800b000:	4b14      	ldr	r3, [pc, #80]	; (800b054 <BSP_SDRAM_MspInit+0x210>)
 800b002:	4a15      	ldr	r2, [pc, #84]	; (800b058 <BSP_SDRAM_MspInit+0x214>)
 800b004:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	4a12      	ldr	r2, [pc, #72]	; (800b054 <BSP_SDRAM_MspInit+0x210>)
 800b00a:	631a      	str	r2, [r3, #48]	; 0x30
 800b00c:	4a11      	ldr	r2, [pc, #68]	; (800b054 <BSP_SDRAM_MspInit+0x210>)
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 800b012:	4810      	ldr	r0, [pc, #64]	; (800b054 <BSP_SDRAM_MspInit+0x210>)
 800b014:	f000 fb20 	bl	800b658 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 800b018:	480e      	ldr	r0, [pc, #56]	; (800b054 <BSP_SDRAM_MspInit+0x210>)
 800b01a:	f000 fa6f 	bl	800b4fc <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 800b01e:	2200      	movs	r2, #0
 800b020:	210f      	movs	r1, #15
 800b022:	2038      	movs	r0, #56	; 0x38
 800b024:	f000 fa24 	bl	800b470 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 800b028:	2038      	movs	r0, #56	; 0x38
 800b02a:	f000 fa3d 	bl	800b4a8 <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 800b02e:	bf00      	nop
 800b030:	3740      	adds	r7, #64	; 0x40
 800b032:	46bd      	mov	sp, r7
 800b034:	bd80      	pop	{r7, pc}
 800b036:	bf00      	nop
 800b038:	40023800 	.word	0x40023800
 800b03c:	40020400 	.word	0x40020400
 800b040:	40020800 	.word	0x40020800
 800b044:	40020c00 	.word	0x40020c00
 800b048:	40021000 	.word	0x40021000
 800b04c:	40021400 	.word	0x40021400
 800b050:	40021800 	.word	0x40021800
 800b054:	20002c34 	.word	0x20002c34
 800b058:	40026410 	.word	0x40026410

0800b05c <BSP_TS_Init>:
  * @param  XSize: The maximum X size of the TS area on LCD
  * @param  YSize: The maximum Y size of the TS area on LCD  
  * @retval TS_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t XSize, uint16_t YSize)
{
 800b05c:	b580      	push	{r7, lr}
 800b05e:	b084      	sub	sp, #16
 800b060:	af00      	add	r7, sp, #0
 800b062:	4603      	mov	r3, r0
 800b064:	460a      	mov	r2, r1
 800b066:	80fb      	strh	r3, [r7, #6]
 800b068:	4613      	mov	r3, r2
 800b06a:	80bb      	strh	r3, [r7, #4]
  uint8_t ret = TS_ERROR;
 800b06c:	2301      	movs	r3, #1
 800b06e:	73fb      	strb	r3, [r7, #15]

  /* Initialize x and y positions boundaries */
  TsXBoundary = XSize;
 800b070:	4a13      	ldr	r2, [pc, #76]	; (800b0c0 <BSP_TS_Init+0x64>)
 800b072:	88fb      	ldrh	r3, [r7, #6]
 800b074:	8013      	strh	r3, [r2, #0]
  TsYBoundary = YSize;
 800b076:	4a13      	ldr	r2, [pc, #76]	; (800b0c4 <BSP_TS_Init+0x68>)
 800b078:	88bb      	ldrh	r3, [r7, #4]
 800b07a:	8013      	strh	r3, [r2, #0]

  /* Read ID and verify if the IO expander is ready */
  if(stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 800b07c:	4b12      	ldr	r3, [pc, #72]	; (800b0c8 <BSP_TS_Init+0x6c>)
 800b07e:	685b      	ldr	r3, [r3, #4]
 800b080:	2082      	movs	r0, #130	; 0x82
 800b082:	4798      	blx	r3
 800b084:	4603      	mov	r3, r0
 800b086:	461a      	mov	r2, r3
 800b088:	f640 0311 	movw	r3, #2065	; 0x811
 800b08c:	429a      	cmp	r2, r3
 800b08e:	d104      	bne.n	800b09a <BSP_TS_Init+0x3e>
  {
    /* Initialize the TS driver structure */
    TsDrv = &stmpe811_ts_drv;
 800b090:	4b0e      	ldr	r3, [pc, #56]	; (800b0cc <BSP_TS_Init+0x70>)
 800b092:	4a0d      	ldr	r2, [pc, #52]	; (800b0c8 <BSP_TS_Init+0x6c>)
 800b094:	601a      	str	r2, [r3, #0]

    ret = TS_OK;
 800b096:	2300      	movs	r3, #0
 800b098:	73fb      	strb	r3, [r7, #15]
  }

  if(ret == TS_OK)
 800b09a:	7bfb      	ldrb	r3, [r7, #15]
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d109      	bne.n	800b0b4 <BSP_TS_Init+0x58>
  {
    /* Initialize the LL TS Driver */
    TsDrv->Init(TS_I2C_ADDRESS);
 800b0a0:	4b0a      	ldr	r3, [pc, #40]	; (800b0cc <BSP_TS_Init+0x70>)
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	2082      	movs	r0, #130	; 0x82
 800b0a8:	4798      	blx	r3
    TsDrv->Start(TS_I2C_ADDRESS);
 800b0aa:	4b08      	ldr	r3, [pc, #32]	; (800b0cc <BSP_TS_Init+0x70>)
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	68db      	ldr	r3, [r3, #12]
 800b0b0:	2082      	movs	r0, #130	; 0x82
 800b0b2:	4798      	blx	r3
  }

  return ret;
 800b0b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	3710      	adds	r7, #16
 800b0ba:	46bd      	mov	sp, r7
 800b0bc:	bd80      	pop	{r7, pc}
 800b0be:	bf00      	nop
 800b0c0:	20002c98 	.word	0x20002c98
 800b0c4:	20002c9a 	.word	0x20002c9a
 800b0c8:	20000068 	.word	0x20000068
 800b0cc:	20002c94 	.word	0x20002c94

0800b0d0 <BSP_TS_GetState>:
/**
  * @brief  Returns status and positions of the touch screen.
  * @param  TsState: Pointer to touch screen current state structure
  */
void BSP_TS_GetState(TS_StateTypeDef* TsState)
{
 800b0d0:	b580      	push	{r7, lr}
 800b0d2:	b086      	sub	sp, #24
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	6078      	str	r0, [r7, #4]
  static uint32_t _x = 0, _y = 0;
  uint16_t xDiff, yDiff , x , y, xr, yr;
  
  TsState->TouchDetected = TsDrv->DetectTouch(TS_I2C_ADDRESS);
 800b0d8:	4b4f      	ldr	r3, [pc, #316]	; (800b218 <BSP_TS_GetState+0x148>)
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	691b      	ldr	r3, [r3, #16]
 800b0de:	2082      	movs	r0, #130	; 0x82
 800b0e0:	4798      	blx	r3
 800b0e2:	4603      	mov	r3, r0
 800b0e4:	b29a      	uxth	r2, r3
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	801a      	strh	r2, [r3, #0]
  
  if(TsState->TouchDetected)
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	881b      	ldrh	r3, [r3, #0]
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	f000 808d 	beq.w	800b20e <BSP_TS_GetState+0x13e>
  {
    TsDrv->GetXY(TS_I2C_ADDRESS, &x, &y);
 800b0f4:	4b48      	ldr	r3, [pc, #288]	; (800b218 <BSP_TS_GetState+0x148>)
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	695b      	ldr	r3, [r3, #20]
 800b0fa:	f107 020c 	add.w	r2, r7, #12
 800b0fe:	f107 010e 	add.w	r1, r7, #14
 800b102:	2082      	movs	r0, #130	; 0x82
 800b104:	4798      	blx	r3
    
    /* Y value first correction */
    y -= 360;  
 800b106:	89bb      	ldrh	r3, [r7, #12]
 800b108:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800b10c:	b29b      	uxth	r3, r3
 800b10e:	81bb      	strh	r3, [r7, #12]
    
    /* Y value second correction */
    yr = y / 11;
 800b110:	89bb      	ldrh	r3, [r7, #12]
 800b112:	4a42      	ldr	r2, [pc, #264]	; (800b21c <BSP_TS_GetState+0x14c>)
 800b114:	fba2 2303 	umull	r2, r3, r2, r3
 800b118:	08db      	lsrs	r3, r3, #3
 800b11a:	82bb      	strh	r3, [r7, #20]
    
    /* Return y position value */
    if(yr <= 0)
 800b11c:	8abb      	ldrh	r3, [r7, #20]
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d102      	bne.n	800b128 <BSP_TS_GetState+0x58>
    {
      yr = 0;
 800b122:	2300      	movs	r3, #0
 800b124:	82bb      	strh	r3, [r7, #20]
 800b126:	e008      	b.n	800b13a <BSP_TS_GetState+0x6a>
    }
    else if (yr > TsYBoundary)
 800b128:	4b3d      	ldr	r3, [pc, #244]	; (800b220 <BSP_TS_GetState+0x150>)
 800b12a:	881b      	ldrh	r3, [r3, #0]
 800b12c:	8aba      	ldrh	r2, [r7, #20]
 800b12e:	429a      	cmp	r2, r3
 800b130:	d903      	bls.n	800b13a <BSP_TS_GetState+0x6a>
    {
      yr = TsYBoundary - 1;
 800b132:	4b3b      	ldr	r3, [pc, #236]	; (800b220 <BSP_TS_GetState+0x150>)
 800b134:	881b      	ldrh	r3, [r3, #0]
 800b136:	3b01      	subs	r3, #1
 800b138:	82bb      	strh	r3, [r7, #20]
    }
    else
    {}
    y = yr;
 800b13a:	8abb      	ldrh	r3, [r7, #20]
 800b13c:	81bb      	strh	r3, [r7, #12]
    
    /* X value first correction */
    if(x <= 3000)
 800b13e:	89fb      	ldrh	r3, [r7, #14]
 800b140:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800b144:	4293      	cmp	r3, r2
 800b146:	d806      	bhi.n	800b156 <BSP_TS_GetState+0x86>
    {
      x = 3870 - x;
 800b148:	89fb      	ldrh	r3, [r7, #14]
 800b14a:	f5c3 6371 	rsb	r3, r3, #3856	; 0xf10
 800b14e:	330e      	adds	r3, #14
 800b150:	b29b      	uxth	r3, r3
 800b152:	81fb      	strh	r3, [r7, #14]
 800b154:	e005      	b.n	800b162 <BSP_TS_GetState+0x92>
    }
    else
    {
      x = 3800 - x;
 800b156:	89fb      	ldrh	r3, [r7, #14]
 800b158:	f5c3 636d 	rsb	r3, r3, #3792	; 0xed0
 800b15c:	3308      	adds	r3, #8
 800b15e:	b29b      	uxth	r3, r3
 800b160:	81fb      	strh	r3, [r7, #14]
    }
    
    /* X value second correction */  
    xr = x / 15;
 800b162:	89fb      	ldrh	r3, [r7, #14]
 800b164:	4a2f      	ldr	r2, [pc, #188]	; (800b224 <BSP_TS_GetState+0x154>)
 800b166:	fba2 2303 	umull	r2, r3, r2, r3
 800b16a:	08db      	lsrs	r3, r3, #3
 800b16c:	82fb      	strh	r3, [r7, #22]
    
    /* Return X position value */
    if(xr <= 0)
 800b16e:	8afb      	ldrh	r3, [r7, #22]
 800b170:	2b00      	cmp	r3, #0
 800b172:	d102      	bne.n	800b17a <BSP_TS_GetState+0xaa>
    {
      xr = 0;
 800b174:	2300      	movs	r3, #0
 800b176:	82fb      	strh	r3, [r7, #22]
 800b178:	e008      	b.n	800b18c <BSP_TS_GetState+0xbc>
    }
    else if (xr > TsXBoundary)
 800b17a:	4b2b      	ldr	r3, [pc, #172]	; (800b228 <BSP_TS_GetState+0x158>)
 800b17c:	881b      	ldrh	r3, [r3, #0]
 800b17e:	8afa      	ldrh	r2, [r7, #22]
 800b180:	429a      	cmp	r2, r3
 800b182:	d903      	bls.n	800b18c <BSP_TS_GetState+0xbc>
    {
      xr = TsXBoundary - 1;
 800b184:	4b28      	ldr	r3, [pc, #160]	; (800b228 <BSP_TS_GetState+0x158>)
 800b186:	881b      	ldrh	r3, [r3, #0]
 800b188:	3b01      	subs	r3, #1
 800b18a:	82fb      	strh	r3, [r7, #22]
    }
    else 
    {}
    
    x = xr;
 800b18c:	8afb      	ldrh	r3, [r7, #22]
 800b18e:	81fb      	strh	r3, [r7, #14]
    xDiff = x > _x? (x - _x): (_x - x);
 800b190:	89fb      	ldrh	r3, [r7, #14]
 800b192:	461a      	mov	r2, r3
 800b194:	4b25      	ldr	r3, [pc, #148]	; (800b22c <BSP_TS_GetState+0x15c>)
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	429a      	cmp	r2, r3
 800b19a:	d906      	bls.n	800b1aa <BSP_TS_GetState+0xda>
 800b19c:	89fa      	ldrh	r2, [r7, #14]
 800b19e:	4b23      	ldr	r3, [pc, #140]	; (800b22c <BSP_TS_GetState+0x15c>)
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	b29b      	uxth	r3, r3
 800b1a4:	1ad3      	subs	r3, r2, r3
 800b1a6:	b29b      	uxth	r3, r3
 800b1a8:	e005      	b.n	800b1b6 <BSP_TS_GetState+0xe6>
 800b1aa:	4b20      	ldr	r3, [pc, #128]	; (800b22c <BSP_TS_GetState+0x15c>)
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	b29a      	uxth	r2, r3
 800b1b0:	89fb      	ldrh	r3, [r7, #14]
 800b1b2:	1ad3      	subs	r3, r2, r3
 800b1b4:	b29b      	uxth	r3, r3
 800b1b6:	827b      	strh	r3, [r7, #18]
    yDiff = y > _y? (y - _y): (_y - y); 
 800b1b8:	89bb      	ldrh	r3, [r7, #12]
 800b1ba:	461a      	mov	r2, r3
 800b1bc:	4b1c      	ldr	r3, [pc, #112]	; (800b230 <BSP_TS_GetState+0x160>)
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	429a      	cmp	r2, r3
 800b1c2:	d906      	bls.n	800b1d2 <BSP_TS_GetState+0x102>
 800b1c4:	89ba      	ldrh	r2, [r7, #12]
 800b1c6:	4b1a      	ldr	r3, [pc, #104]	; (800b230 <BSP_TS_GetState+0x160>)
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	b29b      	uxth	r3, r3
 800b1cc:	1ad3      	subs	r3, r2, r3
 800b1ce:	b29b      	uxth	r3, r3
 800b1d0:	e005      	b.n	800b1de <BSP_TS_GetState+0x10e>
 800b1d2:	4b17      	ldr	r3, [pc, #92]	; (800b230 <BSP_TS_GetState+0x160>)
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	b29a      	uxth	r2, r3
 800b1d8:	89bb      	ldrh	r3, [r7, #12]
 800b1da:	1ad3      	subs	r3, r2, r3
 800b1dc:	b29b      	uxth	r3, r3
 800b1de:	823b      	strh	r3, [r7, #16]
    
    if (xDiff + yDiff > 5)
 800b1e0:	8a7a      	ldrh	r2, [r7, #18]
 800b1e2:	8a3b      	ldrh	r3, [r7, #16]
 800b1e4:	4413      	add	r3, r2
 800b1e6:	2b05      	cmp	r3, #5
 800b1e8:	dd07      	ble.n	800b1fa <BSP_TS_GetState+0x12a>
    {
      _x = x;
 800b1ea:	89fb      	ldrh	r3, [r7, #14]
 800b1ec:	461a      	mov	r2, r3
 800b1ee:	4b0f      	ldr	r3, [pc, #60]	; (800b22c <BSP_TS_GetState+0x15c>)
 800b1f0:	601a      	str	r2, [r3, #0]
      _y = y; 
 800b1f2:	89bb      	ldrh	r3, [r7, #12]
 800b1f4:	461a      	mov	r2, r3
 800b1f6:	4b0e      	ldr	r3, [pc, #56]	; (800b230 <BSP_TS_GetState+0x160>)
 800b1f8:	601a      	str	r2, [r3, #0]
    }
    
    /* Update the X position */
    TsState->X = _x;
 800b1fa:	4b0c      	ldr	r3, [pc, #48]	; (800b22c <BSP_TS_GetState+0x15c>)
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	b29a      	uxth	r2, r3
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	805a      	strh	r2, [r3, #2]
    
    /* Update the Y position */  
    TsState->Y = _y;
 800b204:	4b0a      	ldr	r3, [pc, #40]	; (800b230 <BSP_TS_GetState+0x160>)
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	b29a      	uxth	r2, r3
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	809a      	strh	r2, [r3, #4]
  }
}
 800b20e:	bf00      	nop
 800b210:	3718      	adds	r7, #24
 800b212:	46bd      	mov	sp, r7
 800b214:	bd80      	pop	{r7, pc}
 800b216:	bf00      	nop
 800b218:	20002c94 	.word	0x20002c94
 800b21c:	ba2e8ba3 	.word	0xba2e8ba3
 800b220:	20002c9a 	.word	0x20002c9a
 800b224:	88888889 	.word	0x88888889
 800b228:	20002c98 	.word	0x20002c98
 800b22c:	20002c9c 	.word	0x20002c9c
 800b230:	20002ca0 	.word	0x20002ca0

0800b234 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800b234:	b580      	push	{r7, lr}
 800b236:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800b238:	4b0e      	ldr	r3, [pc, #56]	; (800b274 <HAL_Init+0x40>)
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	4a0d      	ldr	r2, [pc, #52]	; (800b274 <HAL_Init+0x40>)
 800b23e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b242:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800b244:	4b0b      	ldr	r3, [pc, #44]	; (800b274 <HAL_Init+0x40>)
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	4a0a      	ldr	r2, [pc, #40]	; (800b274 <HAL_Init+0x40>)
 800b24a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b24e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800b250:	4b08      	ldr	r3, [pc, #32]	; (800b274 <HAL_Init+0x40>)
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	4a07      	ldr	r2, [pc, #28]	; (800b274 <HAL_Init+0x40>)
 800b256:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b25a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800b25c:	2003      	movs	r0, #3
 800b25e:	f000 f8fc 	bl	800b45a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800b262:	2000      	movs	r0, #0
 800b264:	f7fc fd66 	bl	8007d34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800b268:	f7fc fd3c 	bl	8007ce4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800b26c:	2300      	movs	r3, #0
}
 800b26e:	4618      	mov	r0, r3
 800b270:	bd80      	pop	{r7, pc}
 800b272:	bf00      	nop
 800b274:	40023c00 	.word	0x40023c00

0800b278 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800b278:	b480      	push	{r7}
 800b27a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800b27c:	4b06      	ldr	r3, [pc, #24]	; (800b298 <HAL_IncTick+0x20>)
 800b27e:	781b      	ldrb	r3, [r3, #0]
 800b280:	461a      	mov	r2, r3
 800b282:	4b06      	ldr	r3, [pc, #24]	; (800b29c <HAL_IncTick+0x24>)
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	4413      	add	r3, r2
 800b288:	4a04      	ldr	r2, [pc, #16]	; (800b29c <HAL_IncTick+0x24>)
 800b28a:	6013      	str	r3, [r2, #0]
}
 800b28c:	bf00      	nop
 800b28e:	46bd      	mov	sp, r7
 800b290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b294:	4770      	bx	lr
 800b296:	bf00      	nop
 800b298:	200000a8 	.word	0x200000a8
 800b29c:	20002ca4 	.word	0x20002ca4

0800b2a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800b2a0:	b480      	push	{r7}
 800b2a2:	af00      	add	r7, sp, #0
  return uwTick;
 800b2a4:	4b03      	ldr	r3, [pc, #12]	; (800b2b4 <HAL_GetTick+0x14>)
 800b2a6:	681b      	ldr	r3, [r3, #0]
}
 800b2a8:	4618      	mov	r0, r3
 800b2aa:	46bd      	mov	sp, r7
 800b2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b0:	4770      	bx	lr
 800b2b2:	bf00      	nop
 800b2b4:	20002ca4 	.word	0x20002ca4

0800b2b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800b2b8:	b580      	push	{r7, lr}
 800b2ba:	b084      	sub	sp, #16
 800b2bc:	af00      	add	r7, sp, #0
 800b2be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800b2c0:	f7ff ffee 	bl	800b2a0 <HAL_GetTick>
 800b2c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2d0:	d005      	beq.n	800b2de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800b2d2:	4b0a      	ldr	r3, [pc, #40]	; (800b2fc <HAL_Delay+0x44>)
 800b2d4:	781b      	ldrb	r3, [r3, #0]
 800b2d6:	461a      	mov	r2, r3
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	4413      	add	r3, r2
 800b2dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800b2de:	bf00      	nop
 800b2e0:	f7ff ffde 	bl	800b2a0 <HAL_GetTick>
 800b2e4:	4602      	mov	r2, r0
 800b2e6:	68bb      	ldr	r3, [r7, #8]
 800b2e8:	1ad3      	subs	r3, r2, r3
 800b2ea:	68fa      	ldr	r2, [r7, #12]
 800b2ec:	429a      	cmp	r2, r3
 800b2ee:	d8f7      	bhi.n	800b2e0 <HAL_Delay+0x28>
  {
  }
}
 800b2f0:	bf00      	nop
 800b2f2:	bf00      	nop
 800b2f4:	3710      	adds	r7, #16
 800b2f6:	46bd      	mov	sp, r7
 800b2f8:	bd80      	pop	{r7, pc}
 800b2fa:	bf00      	nop
 800b2fc:	200000a8 	.word	0x200000a8

0800b300 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b300:	b480      	push	{r7}
 800b302:	b085      	sub	sp, #20
 800b304:	af00      	add	r7, sp, #0
 800b306:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	f003 0307 	and.w	r3, r3, #7
 800b30e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800b310:	4b0c      	ldr	r3, [pc, #48]	; (800b344 <__NVIC_SetPriorityGrouping+0x44>)
 800b312:	68db      	ldr	r3, [r3, #12]
 800b314:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800b316:	68ba      	ldr	r2, [r7, #8]
 800b318:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800b31c:	4013      	ands	r3, r2
 800b31e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800b324:	68bb      	ldr	r3, [r7, #8]
 800b326:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800b328:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800b32c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b330:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800b332:	4a04      	ldr	r2, [pc, #16]	; (800b344 <__NVIC_SetPriorityGrouping+0x44>)
 800b334:	68bb      	ldr	r3, [r7, #8]
 800b336:	60d3      	str	r3, [r2, #12]
}
 800b338:	bf00      	nop
 800b33a:	3714      	adds	r7, #20
 800b33c:	46bd      	mov	sp, r7
 800b33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b342:	4770      	bx	lr
 800b344:	e000ed00 	.word	0xe000ed00

0800b348 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800b348:	b480      	push	{r7}
 800b34a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800b34c:	4b04      	ldr	r3, [pc, #16]	; (800b360 <__NVIC_GetPriorityGrouping+0x18>)
 800b34e:	68db      	ldr	r3, [r3, #12]
 800b350:	0a1b      	lsrs	r3, r3, #8
 800b352:	f003 0307 	and.w	r3, r3, #7
}
 800b356:	4618      	mov	r0, r3
 800b358:	46bd      	mov	sp, r7
 800b35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b35e:	4770      	bx	lr
 800b360:	e000ed00 	.word	0xe000ed00

0800b364 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b364:	b480      	push	{r7}
 800b366:	b083      	sub	sp, #12
 800b368:	af00      	add	r7, sp, #0
 800b36a:	4603      	mov	r3, r0
 800b36c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b36e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b372:	2b00      	cmp	r3, #0
 800b374:	db0b      	blt.n	800b38e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b376:	79fb      	ldrb	r3, [r7, #7]
 800b378:	f003 021f 	and.w	r2, r3, #31
 800b37c:	4907      	ldr	r1, [pc, #28]	; (800b39c <__NVIC_EnableIRQ+0x38>)
 800b37e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b382:	095b      	lsrs	r3, r3, #5
 800b384:	2001      	movs	r0, #1
 800b386:	fa00 f202 	lsl.w	r2, r0, r2
 800b38a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800b38e:	bf00      	nop
 800b390:	370c      	adds	r7, #12
 800b392:	46bd      	mov	sp, r7
 800b394:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b398:	4770      	bx	lr
 800b39a:	bf00      	nop
 800b39c:	e000e100 	.word	0xe000e100

0800b3a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800b3a0:	b480      	push	{r7}
 800b3a2:	b083      	sub	sp, #12
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	4603      	mov	r3, r0
 800b3a8:	6039      	str	r1, [r7, #0]
 800b3aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b3ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	db0a      	blt.n	800b3ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b3b4:	683b      	ldr	r3, [r7, #0]
 800b3b6:	b2da      	uxtb	r2, r3
 800b3b8:	490c      	ldr	r1, [pc, #48]	; (800b3ec <__NVIC_SetPriority+0x4c>)
 800b3ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b3be:	0112      	lsls	r2, r2, #4
 800b3c0:	b2d2      	uxtb	r2, r2
 800b3c2:	440b      	add	r3, r1
 800b3c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800b3c8:	e00a      	b.n	800b3e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b3ca:	683b      	ldr	r3, [r7, #0]
 800b3cc:	b2da      	uxtb	r2, r3
 800b3ce:	4908      	ldr	r1, [pc, #32]	; (800b3f0 <__NVIC_SetPriority+0x50>)
 800b3d0:	79fb      	ldrb	r3, [r7, #7]
 800b3d2:	f003 030f 	and.w	r3, r3, #15
 800b3d6:	3b04      	subs	r3, #4
 800b3d8:	0112      	lsls	r2, r2, #4
 800b3da:	b2d2      	uxtb	r2, r2
 800b3dc:	440b      	add	r3, r1
 800b3de:	761a      	strb	r2, [r3, #24]
}
 800b3e0:	bf00      	nop
 800b3e2:	370c      	adds	r7, #12
 800b3e4:	46bd      	mov	sp, r7
 800b3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ea:	4770      	bx	lr
 800b3ec:	e000e100 	.word	0xe000e100
 800b3f0:	e000ed00 	.word	0xe000ed00

0800b3f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800b3f4:	b480      	push	{r7}
 800b3f6:	b089      	sub	sp, #36	; 0x24
 800b3f8:	af00      	add	r7, sp, #0
 800b3fa:	60f8      	str	r0, [r7, #12]
 800b3fc:	60b9      	str	r1, [r7, #8]
 800b3fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	f003 0307 	and.w	r3, r3, #7
 800b406:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800b408:	69fb      	ldr	r3, [r7, #28]
 800b40a:	f1c3 0307 	rsb	r3, r3, #7
 800b40e:	2b04      	cmp	r3, #4
 800b410:	bf28      	it	cs
 800b412:	2304      	movcs	r3, #4
 800b414:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b416:	69fb      	ldr	r3, [r7, #28]
 800b418:	3304      	adds	r3, #4
 800b41a:	2b06      	cmp	r3, #6
 800b41c:	d902      	bls.n	800b424 <NVIC_EncodePriority+0x30>
 800b41e:	69fb      	ldr	r3, [r7, #28]
 800b420:	3b03      	subs	r3, #3
 800b422:	e000      	b.n	800b426 <NVIC_EncodePriority+0x32>
 800b424:	2300      	movs	r3, #0
 800b426:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b428:	f04f 32ff 	mov.w	r2, #4294967295
 800b42c:	69bb      	ldr	r3, [r7, #24]
 800b42e:	fa02 f303 	lsl.w	r3, r2, r3
 800b432:	43da      	mvns	r2, r3
 800b434:	68bb      	ldr	r3, [r7, #8]
 800b436:	401a      	ands	r2, r3
 800b438:	697b      	ldr	r3, [r7, #20]
 800b43a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800b43c:	f04f 31ff 	mov.w	r1, #4294967295
 800b440:	697b      	ldr	r3, [r7, #20]
 800b442:	fa01 f303 	lsl.w	r3, r1, r3
 800b446:	43d9      	mvns	r1, r3
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b44c:	4313      	orrs	r3, r2
         );
}
 800b44e:	4618      	mov	r0, r3
 800b450:	3724      	adds	r7, #36	; 0x24
 800b452:	46bd      	mov	sp, r7
 800b454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b458:	4770      	bx	lr

0800b45a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b45a:	b580      	push	{r7, lr}
 800b45c:	b082      	sub	sp, #8
 800b45e:	af00      	add	r7, sp, #0
 800b460:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800b462:	6878      	ldr	r0, [r7, #4]
 800b464:	f7ff ff4c 	bl	800b300 <__NVIC_SetPriorityGrouping>
}
 800b468:	bf00      	nop
 800b46a:	3708      	adds	r7, #8
 800b46c:	46bd      	mov	sp, r7
 800b46e:	bd80      	pop	{r7, pc}

0800b470 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800b470:	b580      	push	{r7, lr}
 800b472:	b086      	sub	sp, #24
 800b474:	af00      	add	r7, sp, #0
 800b476:	4603      	mov	r3, r0
 800b478:	60b9      	str	r1, [r7, #8]
 800b47a:	607a      	str	r2, [r7, #4]
 800b47c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800b47e:	2300      	movs	r3, #0
 800b480:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800b482:	f7ff ff61 	bl	800b348 <__NVIC_GetPriorityGrouping>
 800b486:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800b488:	687a      	ldr	r2, [r7, #4]
 800b48a:	68b9      	ldr	r1, [r7, #8]
 800b48c:	6978      	ldr	r0, [r7, #20]
 800b48e:	f7ff ffb1 	bl	800b3f4 <NVIC_EncodePriority>
 800b492:	4602      	mov	r2, r0
 800b494:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b498:	4611      	mov	r1, r2
 800b49a:	4618      	mov	r0, r3
 800b49c:	f7ff ff80 	bl	800b3a0 <__NVIC_SetPriority>
}
 800b4a0:	bf00      	nop
 800b4a2:	3718      	adds	r7, #24
 800b4a4:	46bd      	mov	sp, r7
 800b4a6:	bd80      	pop	{r7, pc}

0800b4a8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b4a8:	b580      	push	{r7, lr}
 800b4aa:	b082      	sub	sp, #8
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	4603      	mov	r3, r0
 800b4b0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800b4b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b4b6:	4618      	mov	r0, r3
 800b4b8:	f7ff ff54 	bl	800b364 <__NVIC_EnableIRQ>
}
 800b4bc:	bf00      	nop
 800b4be:	3708      	adds	r7, #8
 800b4c0:	46bd      	mov	sp, r7
 800b4c2:	bd80      	pop	{r7, pc}

0800b4c4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800b4c4:	b580      	push	{r7, lr}
 800b4c6:	b082      	sub	sp, #8
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d101      	bne.n	800b4d6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800b4d2:	2301      	movs	r3, #1
 800b4d4:	e00e      	b.n	800b4f4 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	795b      	ldrb	r3, [r3, #5]
 800b4da:	b2db      	uxtb	r3, r3
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d105      	bne.n	800b4ec <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	2200      	movs	r2, #0
 800b4e4:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800b4e6:	6878      	ldr	r0, [r7, #4]
 800b4e8:	f7fb fd6c 	bl	8006fc4 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	2201      	movs	r2, #1
 800b4f0:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800b4f2:	2300      	movs	r3, #0
}
 800b4f4:	4618      	mov	r0, r3
 800b4f6:	3708      	adds	r7, #8
 800b4f8:	46bd      	mov	sp, r7
 800b4fa:	bd80      	pop	{r7, pc}

0800b4fc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800b4fc:	b580      	push	{r7, lr}
 800b4fe:	b086      	sub	sp, #24
 800b500:	af00      	add	r7, sp, #0
 800b502:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800b504:	2300      	movs	r3, #0
 800b506:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800b508:	f7ff feca 	bl	800b2a0 <HAL_GetTick>
 800b50c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	2b00      	cmp	r3, #0
 800b512:	d101      	bne.n	800b518 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800b514:	2301      	movs	r3, #1
 800b516:	e099      	b.n	800b64c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	2200      	movs	r2, #0
 800b51c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	2202      	movs	r2, #2
 800b524:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	681a      	ldr	r2, [r3, #0]
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	f022 0201 	bic.w	r2, r2, #1
 800b536:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800b538:	e00f      	b.n	800b55a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800b53a:	f7ff feb1 	bl	800b2a0 <HAL_GetTick>
 800b53e:	4602      	mov	r2, r0
 800b540:	693b      	ldr	r3, [r7, #16]
 800b542:	1ad3      	subs	r3, r2, r3
 800b544:	2b05      	cmp	r3, #5
 800b546:	d908      	bls.n	800b55a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	2220      	movs	r2, #32
 800b54c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	2203      	movs	r2, #3
 800b552:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800b556:	2303      	movs	r3, #3
 800b558:	e078      	b.n	800b64c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	f003 0301 	and.w	r3, r3, #1
 800b564:	2b00      	cmp	r3, #0
 800b566:	d1e8      	bne.n	800b53a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800b570:	697a      	ldr	r2, [r7, #20]
 800b572:	4b38      	ldr	r3, [pc, #224]	; (800b654 <HAL_DMA_Init+0x158>)
 800b574:	4013      	ands	r3, r2
 800b576:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	685a      	ldr	r2, [r3, #4]
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	689b      	ldr	r3, [r3, #8]
 800b580:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b586:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	691b      	ldr	r3, [r3, #16]
 800b58c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b592:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	699b      	ldr	r3, [r3, #24]
 800b598:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b59e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	6a1b      	ldr	r3, [r3, #32]
 800b5a4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b5a6:	697a      	ldr	r2, [r7, #20]
 800b5a8:	4313      	orrs	r3, r2
 800b5aa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5b0:	2b04      	cmp	r3, #4
 800b5b2:	d107      	bne.n	800b5c4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5bc:	4313      	orrs	r3, r2
 800b5be:	697a      	ldr	r2, [r7, #20]
 800b5c0:	4313      	orrs	r3, r2
 800b5c2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	697a      	ldr	r2, [r7, #20]
 800b5ca:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	695b      	ldr	r3, [r3, #20]
 800b5d2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800b5d4:	697b      	ldr	r3, [r7, #20]
 800b5d6:	f023 0307 	bic.w	r3, r3, #7
 800b5da:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5e0:	697a      	ldr	r2, [r7, #20]
 800b5e2:	4313      	orrs	r3, r2
 800b5e4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5ea:	2b04      	cmp	r3, #4
 800b5ec:	d117      	bne.n	800b61e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5f2:	697a      	ldr	r2, [r7, #20]
 800b5f4:	4313      	orrs	r3, r2
 800b5f6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d00e      	beq.n	800b61e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800b600:	6878      	ldr	r0, [r7, #4]
 800b602:	f000 f8bd 	bl	800b780 <DMA_CheckFifoParam>
 800b606:	4603      	mov	r3, r0
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d008      	beq.n	800b61e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	2240      	movs	r2, #64	; 0x40
 800b610:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	2201      	movs	r2, #1
 800b616:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800b61a:	2301      	movs	r3, #1
 800b61c:	e016      	b.n	800b64c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	697a      	ldr	r2, [r7, #20]
 800b624:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800b626:	6878      	ldr	r0, [r7, #4]
 800b628:	f000 f874 	bl	800b714 <DMA_CalcBaseAndBitshift>
 800b62c:	4603      	mov	r3, r0
 800b62e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b634:	223f      	movs	r2, #63	; 0x3f
 800b636:	409a      	lsls	r2, r3
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	2200      	movs	r2, #0
 800b640:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	2201      	movs	r2, #1
 800b646:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800b64a:	2300      	movs	r3, #0
}
 800b64c:	4618      	mov	r0, r3
 800b64e:	3718      	adds	r7, #24
 800b650:	46bd      	mov	sp, r7
 800b652:	bd80      	pop	{r7, pc}
 800b654:	f010803f 	.word	0xf010803f

0800b658 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800b658:	b580      	push	{r7, lr}
 800b65a:	b084      	sub	sp, #16
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	2b00      	cmp	r3, #0
 800b664:	d101      	bne.n	800b66a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800b666:	2301      	movs	r3, #1
 800b668:	e050      	b.n	800b70c <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b670:	b2db      	uxtb	r3, r3
 800b672:	2b02      	cmp	r3, #2
 800b674:	d101      	bne.n	800b67a <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800b676:	2302      	movs	r3, #2
 800b678:	e048      	b.n	800b70c <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	681a      	ldr	r2, [r3, #0]
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	f022 0201 	bic.w	r2, r2, #1
 800b688:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	2200      	movs	r2, #0
 800b690:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	2200      	movs	r2, #0
 800b698:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	2200      	movs	r2, #0
 800b6a0:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	2200      	movs	r2, #0
 800b6a8:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	2200      	movs	r2, #0
 800b6b0:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	2221      	movs	r2, #33	; 0x21
 800b6b8:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800b6ba:	6878      	ldr	r0, [r7, #4]
 800b6bc:	f000 f82a 	bl	800b714 <DMA_CalcBaseAndBitshift>
 800b6c0:	4603      	mov	r3, r0
 800b6c2:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	2200      	movs	r2, #0
 800b6c8:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	2200      	movs	r2, #0
 800b6ce:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	2200      	movs	r2, #0
 800b6d4:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	2200      	movs	r2, #0
 800b6da:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	2200      	movs	r2, #0
 800b6e0:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	2200      	movs	r2, #0
 800b6e6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b6ec:	223f      	movs	r2, #63	; 0x3f
 800b6ee:	409a      	lsls	r2, r3
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	2200      	movs	r2, #0
 800b6f8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	2200      	movs	r2, #0
 800b6fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	2200      	movs	r2, #0
 800b706:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800b70a:	2300      	movs	r3, #0
}
 800b70c:	4618      	mov	r0, r3
 800b70e:	3710      	adds	r7, #16
 800b710:	46bd      	mov	sp, r7
 800b712:	bd80      	pop	{r7, pc}

0800b714 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800b714:	b480      	push	{r7}
 800b716:	b085      	sub	sp, #20
 800b718:	af00      	add	r7, sp, #0
 800b71a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	b2db      	uxtb	r3, r3
 800b722:	3b10      	subs	r3, #16
 800b724:	4a14      	ldr	r2, [pc, #80]	; (800b778 <DMA_CalcBaseAndBitshift+0x64>)
 800b726:	fba2 2303 	umull	r2, r3, r2, r3
 800b72a:	091b      	lsrs	r3, r3, #4
 800b72c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800b72e:	4a13      	ldr	r2, [pc, #76]	; (800b77c <DMA_CalcBaseAndBitshift+0x68>)
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	4413      	add	r3, r2
 800b734:	781b      	ldrb	r3, [r3, #0]
 800b736:	461a      	mov	r2, r3
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	2b03      	cmp	r3, #3
 800b740:	d909      	bls.n	800b756 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800b74a:	f023 0303 	bic.w	r3, r3, #3
 800b74e:	1d1a      	adds	r2, r3, #4
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	659a      	str	r2, [r3, #88]	; 0x58
 800b754:	e007      	b.n	800b766 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800b75e:	f023 0303 	bic.w	r3, r3, #3
 800b762:	687a      	ldr	r2, [r7, #4]
 800b764:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800b76a:	4618      	mov	r0, r3
 800b76c:	3714      	adds	r7, #20
 800b76e:	46bd      	mov	sp, r7
 800b770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b774:	4770      	bx	lr
 800b776:	bf00      	nop
 800b778:	aaaaaaab 	.word	0xaaaaaaab
 800b77c:	08016e40 	.word	0x08016e40

0800b780 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800b780:	b480      	push	{r7}
 800b782:	b085      	sub	sp, #20
 800b784:	af00      	add	r7, sp, #0
 800b786:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b788:	2300      	movs	r3, #0
 800b78a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b790:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	699b      	ldr	r3, [r3, #24]
 800b796:	2b00      	cmp	r3, #0
 800b798:	d11f      	bne.n	800b7da <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800b79a:	68bb      	ldr	r3, [r7, #8]
 800b79c:	2b03      	cmp	r3, #3
 800b79e:	d856      	bhi.n	800b84e <DMA_CheckFifoParam+0xce>
 800b7a0:	a201      	add	r2, pc, #4	; (adr r2, 800b7a8 <DMA_CheckFifoParam+0x28>)
 800b7a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7a6:	bf00      	nop
 800b7a8:	0800b7b9 	.word	0x0800b7b9
 800b7ac:	0800b7cb 	.word	0x0800b7cb
 800b7b0:	0800b7b9 	.word	0x0800b7b9
 800b7b4:	0800b84f 	.word	0x0800b84f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d046      	beq.n	800b852 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800b7c4:	2301      	movs	r3, #1
 800b7c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b7c8:	e043      	b.n	800b852 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7ce:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800b7d2:	d140      	bne.n	800b856 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800b7d4:	2301      	movs	r3, #1
 800b7d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b7d8:	e03d      	b.n	800b856 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	699b      	ldr	r3, [r3, #24]
 800b7de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b7e2:	d121      	bne.n	800b828 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800b7e4:	68bb      	ldr	r3, [r7, #8]
 800b7e6:	2b03      	cmp	r3, #3
 800b7e8:	d837      	bhi.n	800b85a <DMA_CheckFifoParam+0xda>
 800b7ea:	a201      	add	r2, pc, #4	; (adr r2, 800b7f0 <DMA_CheckFifoParam+0x70>)
 800b7ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7f0:	0800b801 	.word	0x0800b801
 800b7f4:	0800b807 	.word	0x0800b807
 800b7f8:	0800b801 	.word	0x0800b801
 800b7fc:	0800b819 	.word	0x0800b819
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800b800:	2301      	movs	r3, #1
 800b802:	73fb      	strb	r3, [r7, #15]
      break;
 800b804:	e030      	b.n	800b868 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b80a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d025      	beq.n	800b85e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800b812:	2301      	movs	r3, #1
 800b814:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b816:	e022      	b.n	800b85e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b81c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800b820:	d11f      	bne.n	800b862 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800b822:	2301      	movs	r3, #1
 800b824:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800b826:	e01c      	b.n	800b862 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800b828:	68bb      	ldr	r3, [r7, #8]
 800b82a:	2b02      	cmp	r3, #2
 800b82c:	d903      	bls.n	800b836 <DMA_CheckFifoParam+0xb6>
 800b82e:	68bb      	ldr	r3, [r7, #8]
 800b830:	2b03      	cmp	r3, #3
 800b832:	d003      	beq.n	800b83c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800b834:	e018      	b.n	800b868 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800b836:	2301      	movs	r3, #1
 800b838:	73fb      	strb	r3, [r7, #15]
      break;
 800b83a:	e015      	b.n	800b868 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b840:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b844:	2b00      	cmp	r3, #0
 800b846:	d00e      	beq.n	800b866 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800b848:	2301      	movs	r3, #1
 800b84a:	73fb      	strb	r3, [r7, #15]
      break;
 800b84c:	e00b      	b.n	800b866 <DMA_CheckFifoParam+0xe6>
      break;
 800b84e:	bf00      	nop
 800b850:	e00a      	b.n	800b868 <DMA_CheckFifoParam+0xe8>
      break;
 800b852:	bf00      	nop
 800b854:	e008      	b.n	800b868 <DMA_CheckFifoParam+0xe8>
      break;
 800b856:	bf00      	nop
 800b858:	e006      	b.n	800b868 <DMA_CheckFifoParam+0xe8>
      break;
 800b85a:	bf00      	nop
 800b85c:	e004      	b.n	800b868 <DMA_CheckFifoParam+0xe8>
      break;
 800b85e:	bf00      	nop
 800b860:	e002      	b.n	800b868 <DMA_CheckFifoParam+0xe8>
      break;   
 800b862:	bf00      	nop
 800b864:	e000      	b.n	800b868 <DMA_CheckFifoParam+0xe8>
      break;
 800b866:	bf00      	nop
    }
  } 
  
  return status; 
 800b868:	7bfb      	ldrb	r3, [r7, #15]
}
 800b86a:	4618      	mov	r0, r3
 800b86c:	3714      	adds	r7, #20
 800b86e:	46bd      	mov	sp, r7
 800b870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b874:	4770      	bx	lr
 800b876:	bf00      	nop

0800b878 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800b878:	b580      	push	{r7, lr}
 800b87a:	b082      	sub	sp, #8
 800b87c:	af00      	add	r7, sp, #0
 800b87e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	2b00      	cmp	r3, #0
 800b884:	d101      	bne.n	800b88a <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 800b886:	2301      	movs	r3, #1
 800b888:	e03b      	b.n	800b902 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800b890:	b2db      	uxtb	r3, r3
 800b892:	2b00      	cmp	r3, #0
 800b894:	d106      	bne.n	800b8a4 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	2200      	movs	r2, #0
 800b89a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800b89e:	6878      	ldr	r0, [r7, #4]
 800b8a0:	f7fb fbe4 	bl	800706c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	2202      	movs	r2, #2
 800b8a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	685a      	ldr	r2, [r3, #4]
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	430a      	orrs	r2, r1
 800b8c0:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8c8:	f023 0107 	bic.w	r1, r3, #7
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	689a      	ldr	r2, [r3, #8]
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	430a      	orrs	r2, r1
 800b8d6:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8de:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800b8e2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800b8e6:	687a      	ldr	r2, [r7, #4]
 800b8e8:	68d1      	ldr	r1, [r2, #12]
 800b8ea:	687a      	ldr	r2, [r7, #4]
 800b8ec:	6812      	ldr	r2, [r2, #0]
 800b8ee:	430b      	orrs	r3, r1
 800b8f0:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	2200      	movs	r2, #0
 800b8f6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	2201      	movs	r2, #1
 800b8fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800b900:	2300      	movs	r3, #0
}
 800b902:	4618      	mov	r0, r3
 800b904:	3708      	adds	r7, #8
 800b906:	46bd      	mov	sp, r7
 800b908:	bd80      	pop	{r7, pc}

0800b90a <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 800b90a:	b580      	push	{r7, lr}
 800b90c:	b086      	sub	sp, #24
 800b90e:	af02      	add	r7, sp, #8
 800b910:	60f8      	str	r0, [r7, #12]
 800b912:	60b9      	str	r1, [r7, #8]
 800b914:	607a      	str	r2, [r7, #4]
 800b916:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b91e:	2b01      	cmp	r3, #1
 800b920:	d101      	bne.n	800b926 <HAL_DMA2D_Start+0x1c>
 800b922:	2302      	movs	r3, #2
 800b924:	e018      	b.n	800b958 <HAL_DMA2D_Start+0x4e>
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	2201      	movs	r2, #1
 800b92a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	2202      	movs	r2, #2
 800b932:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 800b936:	69bb      	ldr	r3, [r7, #24]
 800b938:	9300      	str	r3, [sp, #0]
 800b93a:	683b      	ldr	r3, [r7, #0]
 800b93c:	687a      	ldr	r2, [r7, #4]
 800b93e:	68b9      	ldr	r1, [r7, #8]
 800b940:	68f8      	ldr	r0, [r7, #12]
 800b942:	f000 fa99 	bl	800be78 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	681a      	ldr	r2, [r3, #0]
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	f042 0201 	orr.w	r2, r2, #1
 800b954:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800b956:	2300      	movs	r3, #0
}
 800b958:	4618      	mov	r0, r3
 800b95a:	3710      	adds	r7, #16
 800b95c:	46bd      	mov	sp, r7
 800b95e:	bd80      	pop	{r7, pc}

0800b960 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 800b960:	b580      	push	{r7, lr}
 800b962:	b086      	sub	sp, #24
 800b964:	af00      	add	r7, sp, #0
 800b966:	6078      	str	r0, [r7, #4]
 800b968:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 800b96a:	2300      	movs	r3, #0
 800b96c:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	f003 0301 	and.w	r3, r3, #1
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d056      	beq.n	800ba2a <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 800b97c:	f7ff fc90 	bl	800b2a0 <HAL_GetTick>
 800b980:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800b982:	e04b      	b.n	800ba1c <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	685b      	ldr	r3, [r3, #4]
 800b98a:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	f003 0321 	and.w	r3, r3, #33	; 0x21
 800b992:	2b00      	cmp	r3, #0
 800b994:	d023      	beq.n	800b9de <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	f003 0320 	and.w	r3, r3, #32
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d005      	beq.n	800b9ac <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b9a4:	f043 0202 	orr.w	r2, r3, #2
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	f003 0301 	and.w	r3, r3, #1
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d005      	beq.n	800b9c2 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b9ba:	f043 0201 	orr.w	r2, r3, #1
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	2221      	movs	r2, #33	; 0x21
 800b9c8:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	2204      	movs	r2, #4
 800b9ce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	2200      	movs	r2, #0
 800b9d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 800b9da:	2301      	movs	r3, #1
 800b9dc:	e0a5      	b.n	800bb2a <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 800b9de:	683b      	ldr	r3, [r7, #0]
 800b9e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9e4:	d01a      	beq.n	800ba1c <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 800b9e6:	f7ff fc5b 	bl	800b2a0 <HAL_GetTick>
 800b9ea:	4602      	mov	r2, r0
 800b9ec:	697b      	ldr	r3, [r7, #20]
 800b9ee:	1ad3      	subs	r3, r2, r3
 800b9f0:	683a      	ldr	r2, [r7, #0]
 800b9f2:	429a      	cmp	r2, r3
 800b9f4:	d302      	bcc.n	800b9fc <HAL_DMA2D_PollForTransfer+0x9c>
 800b9f6:	683b      	ldr	r3, [r7, #0]
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d10f      	bne.n	800ba1c <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba00:	f043 0220 	orr.w	r2, r3, #32
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	2203      	movs	r2, #3
 800ba0c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	2200      	movs	r2, #0
 800ba14:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 800ba18:	2303      	movs	r3, #3
 800ba1a:	e086      	b.n	800bb2a <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	685b      	ldr	r3, [r3, #4]
 800ba22:	f003 0302 	and.w	r3, r3, #2
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d0ac      	beq.n	800b984 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	69db      	ldr	r3, [r3, #28]
 800ba30:	f003 0320 	and.w	r3, r3, #32
 800ba34:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba3c:	f003 0320 	and.w	r3, r3, #32
 800ba40:	693a      	ldr	r2, [r7, #16]
 800ba42:	4313      	orrs	r3, r2
 800ba44:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 800ba46:	693b      	ldr	r3, [r7, #16]
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d061      	beq.n	800bb10 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800ba4c:	f7ff fc28 	bl	800b2a0 <HAL_GetTick>
 800ba50:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800ba52:	e056      	b.n	800bb02 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	685b      	ldr	r3, [r3, #4]
 800ba5a:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	f003 0329 	and.w	r3, r3, #41	; 0x29
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d02e      	beq.n	800bac4 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	f003 0308 	and.w	r3, r3, #8
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d005      	beq.n	800ba7c <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba74:	f043 0204 	orr.w	r2, r3, #4
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	f003 0320 	and.w	r3, r3, #32
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d005      	beq.n	800ba92 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba8a:	f043 0202 	orr.w	r2, r3, #2
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	f003 0301 	and.w	r3, r3, #1
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d005      	beq.n	800baa8 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800baa0:	f043 0201 	orr.w	r2, r3, #1
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	2229      	movs	r2, #41	; 0x29
 800baae:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	2204      	movs	r2, #4
 800bab4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	2200      	movs	r2, #0
 800babc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 800bac0:	2301      	movs	r3, #1
 800bac2:	e032      	b.n	800bb2a <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 800bac4:	683b      	ldr	r3, [r7, #0]
 800bac6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800baca:	d01a      	beq.n	800bb02 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 800bacc:	f7ff fbe8 	bl	800b2a0 <HAL_GetTick>
 800bad0:	4602      	mov	r2, r0
 800bad2:	697b      	ldr	r3, [r7, #20]
 800bad4:	1ad3      	subs	r3, r2, r3
 800bad6:	683a      	ldr	r2, [r7, #0]
 800bad8:	429a      	cmp	r2, r3
 800bada:	d302      	bcc.n	800bae2 <HAL_DMA2D_PollForTransfer+0x182>
 800badc:	683b      	ldr	r3, [r7, #0]
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d10f      	bne.n	800bb02 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bae6:	f043 0220 	orr.w	r2, r3, #32
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	2203      	movs	r2, #3
 800baf2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	2200      	movs	r2, #0
 800bafa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 800bafe:	2303      	movs	r3, #3
 800bb00:	e013      	b.n	800bb2a <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	685b      	ldr	r3, [r3, #4]
 800bb08:	f003 0310 	and.w	r3, r3, #16
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d0a1      	beq.n	800ba54 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	2212      	movs	r2, #18
 800bb16:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	2201      	movs	r2, #1
 800bb1c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	2200      	movs	r2, #0
 800bb24:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800bb28:	2300      	movs	r3, #0
}
 800bb2a:	4618      	mov	r0, r3
 800bb2c:	3718      	adds	r7, #24
 800bb2e:	46bd      	mov	sp, r7
 800bb30:	bd80      	pop	{r7, pc}

0800bb32 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 800bb32:	b580      	push	{r7, lr}
 800bb34:	b084      	sub	sp, #16
 800bb36:	af00      	add	r7, sp, #0
 800bb38:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	685b      	ldr	r3, [r3, #4]
 800bb40:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	f003 0301 	and.w	r3, r3, #1
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d026      	beq.n	800bba2 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 800bb54:	68bb      	ldr	r3, [r7, #8]
 800bb56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d021      	beq.n	800bba2 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	681a      	ldr	r2, [r3, #0]
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800bb6c:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb72:	f043 0201 	orr.w	r2, r3, #1
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	2201      	movs	r2, #1
 800bb80:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	2204      	movs	r2, #4
 800bb86:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	2200      	movs	r2, #0
 800bb8e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	695b      	ldr	r3, [r3, #20]
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d003      	beq.n	800bba2 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	695b      	ldr	r3, [r3, #20]
 800bb9e:	6878      	ldr	r0, [r7, #4]
 800bba0:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	f003 0320 	and.w	r3, r3, #32
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d026      	beq.n	800bbfa <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 800bbac:	68bb      	ldr	r3, [r7, #8]
 800bbae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d021      	beq.n	800bbfa <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	681a      	ldr	r2, [r3, #0]
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800bbc4:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	2220      	movs	r2, #32
 800bbcc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbd2:	f043 0202 	orr.w	r2, r3, #2
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	2204      	movs	r2, #4
 800bbde:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	2200      	movs	r2, #0
 800bbe6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	695b      	ldr	r3, [r3, #20]
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d003      	beq.n	800bbfa <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	695b      	ldr	r3, [r3, #20]
 800bbf6:	6878      	ldr	r0, [r7, #4]
 800bbf8:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	f003 0308 	and.w	r3, r3, #8
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d026      	beq.n	800bc52 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800bc04:	68bb      	ldr	r3, [r7, #8]
 800bc06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d021      	beq.n	800bc52 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	681a      	ldr	r2, [r3, #0]
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800bc1c:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	2208      	movs	r2, #8
 800bc24:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc2a:	f043 0204 	orr.w	r2, r3, #4
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	2204      	movs	r2, #4
 800bc36:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	2200      	movs	r2, #0
 800bc3e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	695b      	ldr	r3, [r3, #20]
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d003      	beq.n	800bc52 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	695b      	ldr	r3, [r3, #20]
 800bc4e:	6878      	ldr	r0, [r7, #4]
 800bc50:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	f003 0304 	and.w	r3, r3, #4
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d013      	beq.n	800bc84 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 800bc5c:	68bb      	ldr	r3, [r7, #8]
 800bc5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d00e      	beq.n	800bc84 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	681a      	ldr	r2, [r3, #0]
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bc74:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	2204      	movs	r2, #4
 800bc7c:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 800bc7e:	6878      	ldr	r0, [r7, #4]
 800bc80:	f000 f853 	bl	800bd2a <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	f003 0302 	and.w	r3, r3, #2
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d024      	beq.n	800bcd8 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 800bc8e:	68bb      	ldr	r3, [r7, #8]
 800bc90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d01f      	beq.n	800bcd8 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	681a      	ldr	r2, [r3, #0]
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800bca6:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	2202      	movs	r2, #2
 800bcae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	2201      	movs	r2, #1
 800bcbc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	2200      	movs	r2, #0
 800bcc4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	691b      	ldr	r3, [r3, #16]
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d003      	beq.n	800bcd8 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	691b      	ldr	r3, [r3, #16]
 800bcd4:	6878      	ldr	r0, [r7, #4]
 800bcd6:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	f003 0310 	and.w	r3, r3, #16
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d01f      	beq.n	800bd22 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800bce2:	68bb      	ldr	r3, [r7, #8]
 800bce4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d01a      	beq.n	800bd22 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	681a      	ldr	r2, [r3, #0]
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800bcfa:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	2210      	movs	r2, #16
 800bd02:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	2201      	movs	r2, #1
 800bd10:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	2200      	movs	r2, #0
 800bd18:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800bd1c:	6878      	ldr	r0, [r7, #4]
 800bd1e:	f000 f80e 	bl	800bd3e <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 800bd22:	bf00      	nop
 800bd24:	3710      	adds	r7, #16
 800bd26:	46bd      	mov	sp, r7
 800bd28:	bd80      	pop	{r7, pc}

0800bd2a <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800bd2a:	b480      	push	{r7}
 800bd2c:	b083      	sub	sp, #12
 800bd2e:	af00      	add	r7, sp, #0
 800bd30:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 800bd32:	bf00      	nop
 800bd34:	370c      	adds	r7, #12
 800bd36:	46bd      	mov	sp, r7
 800bd38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd3c:	4770      	bx	lr

0800bd3e <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800bd3e:	b480      	push	{r7}
 800bd40:	b083      	sub	sp, #12
 800bd42:	af00      	add	r7, sp, #0
 800bd44:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 800bd46:	bf00      	nop
 800bd48:	370c      	adds	r7, #12
 800bd4a:	46bd      	mov	sp, r7
 800bd4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd50:	4770      	bx	lr
	...

0800bd54 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 800bd54:	b480      	push	{r7}
 800bd56:	b087      	sub	sp, #28
 800bd58:	af00      	add	r7, sp, #0
 800bd5a:	6078      	str	r0, [r7, #4]
 800bd5c:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	685b      	ldr	r3, [r3, #4]
 800bd62:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800bd6c:	2b01      	cmp	r3, #1
 800bd6e:	d101      	bne.n	800bd74 <HAL_DMA2D_ConfigLayer+0x20>
 800bd70:	2302      	movs	r3, #2
 800bd72:	e079      	b.n	800be68 <HAL_DMA2D_ConfigLayer+0x114>
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	2201      	movs	r2, #1
 800bd78:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	2202      	movs	r2, #2
 800bd80:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 800bd84:	683b      	ldr	r3, [r7, #0]
 800bd86:	011b      	lsls	r3, r3, #4
 800bd88:	3318      	adds	r3, #24
 800bd8a:	687a      	ldr	r2, [r7, #4]
 800bd8c:	4413      	add	r3, r2
 800bd8e:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 800bd90:	693b      	ldr	r3, [r7, #16]
 800bd92:	685a      	ldr	r2, [r3, #4]
 800bd94:	693b      	ldr	r3, [r7, #16]
 800bd96:	689b      	ldr	r3, [r3, #8]
 800bd98:	041b      	lsls	r3, r3, #16
 800bd9a:	4313      	orrs	r3, r2
 800bd9c:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800bd9e:	4b35      	ldr	r3, [pc, #212]	; (800be74 <HAL_DMA2D_ConfigLayer+0x120>)
 800bda0:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800bda2:	693b      	ldr	r3, [r7, #16]
 800bda4:	685b      	ldr	r3, [r3, #4]
 800bda6:	2b0a      	cmp	r3, #10
 800bda8:	d003      	beq.n	800bdb2 <HAL_DMA2D_ConfigLayer+0x5e>
 800bdaa:	693b      	ldr	r3, [r7, #16]
 800bdac:	685b      	ldr	r3, [r3, #4]
 800bdae:	2b09      	cmp	r3, #9
 800bdb0:	d107      	bne.n	800bdc2 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800bdb2:	693b      	ldr	r3, [r7, #16]
 800bdb4:	68db      	ldr	r3, [r3, #12]
 800bdb6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800bdba:	697a      	ldr	r2, [r7, #20]
 800bdbc:	4313      	orrs	r3, r2
 800bdbe:	617b      	str	r3, [r7, #20]
 800bdc0:	e005      	b.n	800bdce <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800bdc2:	693b      	ldr	r3, [r7, #16]
 800bdc4:	68db      	ldr	r3, [r3, #12]
 800bdc6:	061b      	lsls	r3, r3, #24
 800bdc8:	697a      	ldr	r2, [r7, #20]
 800bdca:	4313      	orrs	r3, r2
 800bdcc:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 800bdce:	683b      	ldr	r3, [r7, #0]
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d120      	bne.n	800be16 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	43db      	mvns	r3, r3
 800bdde:	ea02 0103 	and.w	r1, r2, r3
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	697a      	ldr	r2, [r7, #20]
 800bde8:	430a      	orrs	r2, r1
 800bdea:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	693a      	ldr	r2, [r7, #16]
 800bdf2:	6812      	ldr	r2, [r2, #0]
 800bdf4:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800bdf6:	693b      	ldr	r3, [r7, #16]
 800bdf8:	685b      	ldr	r3, [r3, #4]
 800bdfa:	2b0a      	cmp	r3, #10
 800bdfc:	d003      	beq.n	800be06 <HAL_DMA2D_ConfigLayer+0xb2>
 800bdfe:	693b      	ldr	r3, [r7, #16]
 800be00:	685b      	ldr	r3, [r3, #4]
 800be02:	2b09      	cmp	r3, #9
 800be04:	d127      	bne.n	800be56 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 800be06:	693b      	ldr	r3, [r7, #16]
 800be08:	68da      	ldr	r2, [r3, #12]
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800be12:	629a      	str	r2, [r3, #40]	; 0x28
 800be14:	e01f      	b.n	800be56 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	69da      	ldr	r2, [r3, #28]
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	43db      	mvns	r3, r3
 800be20:	ea02 0103 	and.w	r1, r2, r3
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	697a      	ldr	r2, [r7, #20]
 800be2a:	430a      	orrs	r2, r1
 800be2c:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	693a      	ldr	r2, [r7, #16]
 800be34:	6812      	ldr	r2, [r2, #0]
 800be36:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800be38:	693b      	ldr	r3, [r7, #16]
 800be3a:	685b      	ldr	r3, [r3, #4]
 800be3c:	2b0a      	cmp	r3, #10
 800be3e:	d003      	beq.n	800be48 <HAL_DMA2D_ConfigLayer+0xf4>
 800be40:	693b      	ldr	r3, [r7, #16]
 800be42:	685b      	ldr	r3, [r3, #4]
 800be44:	2b09      	cmp	r3, #9
 800be46:	d106      	bne.n	800be56 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 800be48:	693b      	ldr	r3, [r7, #16]
 800be4a:	68da      	ldr	r2, [r3, #12]
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800be54:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	2201      	movs	r2, #1
 800be5a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	2200      	movs	r2, #0
 800be62:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800be66:	2300      	movs	r3, #0
}
 800be68:	4618      	mov	r0, r3
 800be6a:	371c      	adds	r7, #28
 800be6c:	46bd      	mov	sp, r7
 800be6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be72:	4770      	bx	lr
 800be74:	ff03000f 	.word	0xff03000f

0800be78 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 800be78:	b480      	push	{r7}
 800be7a:	b08b      	sub	sp, #44	; 0x2c
 800be7c:	af00      	add	r7, sp, #0
 800be7e:	60f8      	str	r0, [r7, #12]
 800be80:	60b9      	str	r1, [r7, #8]
 800be82:	607a      	str	r2, [r7, #4]
 800be84:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be8c:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800be90:	683b      	ldr	r3, [r7, #0]
 800be92:	041a      	lsls	r2, r3, #16
 800be94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be96:	431a      	orrs	r2, r3
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	430a      	orrs	r2, r1
 800be9e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	687a      	ldr	r2, [r7, #4]
 800bea6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	685b      	ldr	r3, [r3, #4]
 800beac:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800beb0:	d174      	bne.n	800bf9c <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800beb2:	68bb      	ldr	r3, [r7, #8]
 800beb4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800beb8:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800beba:	68bb      	ldr	r3, [r7, #8]
 800bebc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800bec0:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800bec2:	68bb      	ldr	r3, [r7, #8]
 800bec4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800bec8:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800beca:	68bb      	ldr	r3, [r7, #8]
 800becc:	b2db      	uxtb	r3, r3
 800bece:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	689b      	ldr	r3, [r3, #8]
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d108      	bne.n	800beea <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 800bed8:	69ba      	ldr	r2, [r7, #24]
 800beda:	69fb      	ldr	r3, [r7, #28]
 800bedc:	431a      	orrs	r2, r3
 800bede:	6a3b      	ldr	r3, [r7, #32]
 800bee0:	4313      	orrs	r3, r2
 800bee2:	697a      	ldr	r2, [r7, #20]
 800bee4:	4313      	orrs	r3, r2
 800bee6:	627b      	str	r3, [r7, #36]	; 0x24
 800bee8:	e053      	b.n	800bf92 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	689b      	ldr	r3, [r3, #8]
 800beee:	2b01      	cmp	r3, #1
 800bef0:	d106      	bne.n	800bf00 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 800bef2:	69ba      	ldr	r2, [r7, #24]
 800bef4:	69fb      	ldr	r3, [r7, #28]
 800bef6:	4313      	orrs	r3, r2
 800bef8:	697a      	ldr	r2, [r7, #20]
 800befa:	4313      	orrs	r3, r2
 800befc:	627b      	str	r3, [r7, #36]	; 0x24
 800befe:	e048      	b.n	800bf92 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	689b      	ldr	r3, [r3, #8]
 800bf04:	2b02      	cmp	r3, #2
 800bf06:	d111      	bne.n	800bf2c <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 800bf08:	69fb      	ldr	r3, [r7, #28]
 800bf0a:	0cdb      	lsrs	r3, r3, #19
 800bf0c:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 800bf0e:	69bb      	ldr	r3, [r7, #24]
 800bf10:	0a9b      	lsrs	r3, r3, #10
 800bf12:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 800bf14:	697b      	ldr	r3, [r7, #20]
 800bf16:	08db      	lsrs	r3, r3, #3
 800bf18:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800bf1a:	69bb      	ldr	r3, [r7, #24]
 800bf1c:	015a      	lsls	r2, r3, #5
 800bf1e:	69fb      	ldr	r3, [r7, #28]
 800bf20:	02db      	lsls	r3, r3, #11
 800bf22:	4313      	orrs	r3, r2
 800bf24:	697a      	ldr	r2, [r7, #20]
 800bf26:	4313      	orrs	r3, r2
 800bf28:	627b      	str	r3, [r7, #36]	; 0x24
 800bf2a:	e032      	b.n	800bf92 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	689b      	ldr	r3, [r3, #8]
 800bf30:	2b03      	cmp	r3, #3
 800bf32:	d117      	bne.n	800bf64 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 800bf34:	6a3b      	ldr	r3, [r7, #32]
 800bf36:	0fdb      	lsrs	r3, r3, #31
 800bf38:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 800bf3a:	69fb      	ldr	r3, [r7, #28]
 800bf3c:	0cdb      	lsrs	r3, r3, #19
 800bf3e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 800bf40:	69bb      	ldr	r3, [r7, #24]
 800bf42:	0adb      	lsrs	r3, r3, #11
 800bf44:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 800bf46:	697b      	ldr	r3, [r7, #20]
 800bf48:	08db      	lsrs	r3, r3, #3
 800bf4a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 800bf4c:	69bb      	ldr	r3, [r7, #24]
 800bf4e:	015a      	lsls	r2, r3, #5
 800bf50:	69fb      	ldr	r3, [r7, #28]
 800bf52:	029b      	lsls	r3, r3, #10
 800bf54:	431a      	orrs	r2, r3
 800bf56:	6a3b      	ldr	r3, [r7, #32]
 800bf58:	03db      	lsls	r3, r3, #15
 800bf5a:	4313      	orrs	r3, r2
 800bf5c:	697a      	ldr	r2, [r7, #20]
 800bf5e:	4313      	orrs	r3, r2
 800bf60:	627b      	str	r3, [r7, #36]	; 0x24
 800bf62:	e016      	b.n	800bf92 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 800bf64:	6a3b      	ldr	r3, [r7, #32]
 800bf66:	0f1b      	lsrs	r3, r3, #28
 800bf68:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 800bf6a:	69fb      	ldr	r3, [r7, #28]
 800bf6c:	0d1b      	lsrs	r3, r3, #20
 800bf6e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 800bf70:	69bb      	ldr	r3, [r7, #24]
 800bf72:	0b1b      	lsrs	r3, r3, #12
 800bf74:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 800bf76:	697b      	ldr	r3, [r7, #20]
 800bf78:	091b      	lsrs	r3, r3, #4
 800bf7a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 800bf7c:	69bb      	ldr	r3, [r7, #24]
 800bf7e:	011a      	lsls	r2, r3, #4
 800bf80:	69fb      	ldr	r3, [r7, #28]
 800bf82:	021b      	lsls	r3, r3, #8
 800bf84:	431a      	orrs	r2, r3
 800bf86:	6a3b      	ldr	r3, [r7, #32]
 800bf88:	031b      	lsls	r3, r3, #12
 800bf8a:	4313      	orrs	r3, r2
 800bf8c:	697a      	ldr	r2, [r7, #20]
 800bf8e:	4313      	orrs	r3, r2
 800bf90:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf98:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 800bf9a:	e003      	b.n	800bfa4 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	68ba      	ldr	r2, [r7, #8]
 800bfa2:	60da      	str	r2, [r3, #12]
}
 800bfa4:	bf00      	nop
 800bfa6:	372c      	adds	r7, #44	; 0x2c
 800bfa8:	46bd      	mov	sp, r7
 800bfaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfae:	4770      	bx	lr

0800bfb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800bfb0:	b480      	push	{r7}
 800bfb2:	b089      	sub	sp, #36	; 0x24
 800bfb4:	af00      	add	r7, sp, #0
 800bfb6:	6078      	str	r0, [r7, #4]
 800bfb8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800bfba:	2300      	movs	r3, #0
 800bfbc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800bfbe:	2300      	movs	r3, #0
 800bfc0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800bfc2:	2300      	movs	r3, #0
 800bfc4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800bfc6:	2300      	movs	r3, #0
 800bfc8:	61fb      	str	r3, [r7, #28]
 800bfca:	e177      	b.n	800c2bc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800bfcc:	2201      	movs	r2, #1
 800bfce:	69fb      	ldr	r3, [r7, #28]
 800bfd0:	fa02 f303 	lsl.w	r3, r2, r3
 800bfd4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800bfd6:	683b      	ldr	r3, [r7, #0]
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	697a      	ldr	r2, [r7, #20]
 800bfdc:	4013      	ands	r3, r2
 800bfde:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800bfe0:	693a      	ldr	r2, [r7, #16]
 800bfe2:	697b      	ldr	r3, [r7, #20]
 800bfe4:	429a      	cmp	r2, r3
 800bfe6:	f040 8166 	bne.w	800c2b6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800bfea:	683b      	ldr	r3, [r7, #0]
 800bfec:	685b      	ldr	r3, [r3, #4]
 800bfee:	2b01      	cmp	r3, #1
 800bff0:	d00b      	beq.n	800c00a <HAL_GPIO_Init+0x5a>
 800bff2:	683b      	ldr	r3, [r7, #0]
 800bff4:	685b      	ldr	r3, [r3, #4]
 800bff6:	2b02      	cmp	r3, #2
 800bff8:	d007      	beq.n	800c00a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800bffa:	683b      	ldr	r3, [r7, #0]
 800bffc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800bffe:	2b11      	cmp	r3, #17
 800c000:	d003      	beq.n	800c00a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800c002:	683b      	ldr	r3, [r7, #0]
 800c004:	685b      	ldr	r3, [r3, #4]
 800c006:	2b12      	cmp	r3, #18
 800c008:	d130      	bne.n	800c06c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	689b      	ldr	r3, [r3, #8]
 800c00e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800c010:	69fb      	ldr	r3, [r7, #28]
 800c012:	005b      	lsls	r3, r3, #1
 800c014:	2203      	movs	r2, #3
 800c016:	fa02 f303 	lsl.w	r3, r2, r3
 800c01a:	43db      	mvns	r3, r3
 800c01c:	69ba      	ldr	r2, [r7, #24]
 800c01e:	4013      	ands	r3, r2
 800c020:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800c022:	683b      	ldr	r3, [r7, #0]
 800c024:	68da      	ldr	r2, [r3, #12]
 800c026:	69fb      	ldr	r3, [r7, #28]
 800c028:	005b      	lsls	r3, r3, #1
 800c02a:	fa02 f303 	lsl.w	r3, r2, r3
 800c02e:	69ba      	ldr	r2, [r7, #24]
 800c030:	4313      	orrs	r3, r2
 800c032:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	69ba      	ldr	r2, [r7, #24]
 800c038:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	685b      	ldr	r3, [r3, #4]
 800c03e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800c040:	2201      	movs	r2, #1
 800c042:	69fb      	ldr	r3, [r7, #28]
 800c044:	fa02 f303 	lsl.w	r3, r2, r3
 800c048:	43db      	mvns	r3, r3
 800c04a:	69ba      	ldr	r2, [r7, #24]
 800c04c:	4013      	ands	r3, r2
 800c04e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800c050:	683b      	ldr	r3, [r7, #0]
 800c052:	685b      	ldr	r3, [r3, #4]
 800c054:	091b      	lsrs	r3, r3, #4
 800c056:	f003 0201 	and.w	r2, r3, #1
 800c05a:	69fb      	ldr	r3, [r7, #28]
 800c05c:	fa02 f303 	lsl.w	r3, r2, r3
 800c060:	69ba      	ldr	r2, [r7, #24]
 800c062:	4313      	orrs	r3, r2
 800c064:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	69ba      	ldr	r2, [r7, #24]
 800c06a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	68db      	ldr	r3, [r3, #12]
 800c070:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800c072:	69fb      	ldr	r3, [r7, #28]
 800c074:	005b      	lsls	r3, r3, #1
 800c076:	2203      	movs	r2, #3
 800c078:	fa02 f303 	lsl.w	r3, r2, r3
 800c07c:	43db      	mvns	r3, r3
 800c07e:	69ba      	ldr	r2, [r7, #24]
 800c080:	4013      	ands	r3, r2
 800c082:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800c084:	683b      	ldr	r3, [r7, #0]
 800c086:	689a      	ldr	r2, [r3, #8]
 800c088:	69fb      	ldr	r3, [r7, #28]
 800c08a:	005b      	lsls	r3, r3, #1
 800c08c:	fa02 f303 	lsl.w	r3, r2, r3
 800c090:	69ba      	ldr	r2, [r7, #24]
 800c092:	4313      	orrs	r3, r2
 800c094:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	69ba      	ldr	r2, [r7, #24]
 800c09a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800c09c:	683b      	ldr	r3, [r7, #0]
 800c09e:	685b      	ldr	r3, [r3, #4]
 800c0a0:	2b02      	cmp	r3, #2
 800c0a2:	d003      	beq.n	800c0ac <HAL_GPIO_Init+0xfc>
 800c0a4:	683b      	ldr	r3, [r7, #0]
 800c0a6:	685b      	ldr	r3, [r3, #4]
 800c0a8:	2b12      	cmp	r3, #18
 800c0aa:	d123      	bne.n	800c0f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800c0ac:	69fb      	ldr	r3, [r7, #28]
 800c0ae:	08da      	lsrs	r2, r3, #3
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	3208      	adds	r2, #8
 800c0b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800c0ba:	69fb      	ldr	r3, [r7, #28]
 800c0bc:	f003 0307 	and.w	r3, r3, #7
 800c0c0:	009b      	lsls	r3, r3, #2
 800c0c2:	220f      	movs	r2, #15
 800c0c4:	fa02 f303 	lsl.w	r3, r2, r3
 800c0c8:	43db      	mvns	r3, r3
 800c0ca:	69ba      	ldr	r2, [r7, #24]
 800c0cc:	4013      	ands	r3, r2
 800c0ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800c0d0:	683b      	ldr	r3, [r7, #0]
 800c0d2:	691a      	ldr	r2, [r3, #16]
 800c0d4:	69fb      	ldr	r3, [r7, #28]
 800c0d6:	f003 0307 	and.w	r3, r3, #7
 800c0da:	009b      	lsls	r3, r3, #2
 800c0dc:	fa02 f303 	lsl.w	r3, r2, r3
 800c0e0:	69ba      	ldr	r2, [r7, #24]
 800c0e2:	4313      	orrs	r3, r2
 800c0e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800c0e6:	69fb      	ldr	r3, [r7, #28]
 800c0e8:	08da      	lsrs	r2, r3, #3
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	3208      	adds	r2, #8
 800c0ee:	69b9      	ldr	r1, [r7, #24]
 800c0f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800c0fa:	69fb      	ldr	r3, [r7, #28]
 800c0fc:	005b      	lsls	r3, r3, #1
 800c0fe:	2203      	movs	r2, #3
 800c100:	fa02 f303 	lsl.w	r3, r2, r3
 800c104:	43db      	mvns	r3, r3
 800c106:	69ba      	ldr	r2, [r7, #24]
 800c108:	4013      	ands	r3, r2
 800c10a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800c10c:	683b      	ldr	r3, [r7, #0]
 800c10e:	685b      	ldr	r3, [r3, #4]
 800c110:	f003 0203 	and.w	r2, r3, #3
 800c114:	69fb      	ldr	r3, [r7, #28]
 800c116:	005b      	lsls	r3, r3, #1
 800c118:	fa02 f303 	lsl.w	r3, r2, r3
 800c11c:	69ba      	ldr	r2, [r7, #24]
 800c11e:	4313      	orrs	r3, r2
 800c120:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	69ba      	ldr	r2, [r7, #24]
 800c126:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800c128:	683b      	ldr	r3, [r7, #0]
 800c12a:	685b      	ldr	r3, [r3, #4]
 800c12c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c130:	2b00      	cmp	r3, #0
 800c132:	f000 80c0 	beq.w	800c2b6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c136:	2300      	movs	r3, #0
 800c138:	60fb      	str	r3, [r7, #12]
 800c13a:	4b66      	ldr	r3, [pc, #408]	; (800c2d4 <HAL_GPIO_Init+0x324>)
 800c13c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c13e:	4a65      	ldr	r2, [pc, #404]	; (800c2d4 <HAL_GPIO_Init+0x324>)
 800c140:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c144:	6453      	str	r3, [r2, #68]	; 0x44
 800c146:	4b63      	ldr	r3, [pc, #396]	; (800c2d4 <HAL_GPIO_Init+0x324>)
 800c148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c14a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c14e:	60fb      	str	r3, [r7, #12]
 800c150:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800c152:	4a61      	ldr	r2, [pc, #388]	; (800c2d8 <HAL_GPIO_Init+0x328>)
 800c154:	69fb      	ldr	r3, [r7, #28]
 800c156:	089b      	lsrs	r3, r3, #2
 800c158:	3302      	adds	r3, #2
 800c15a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c15e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800c160:	69fb      	ldr	r3, [r7, #28]
 800c162:	f003 0303 	and.w	r3, r3, #3
 800c166:	009b      	lsls	r3, r3, #2
 800c168:	220f      	movs	r2, #15
 800c16a:	fa02 f303 	lsl.w	r3, r2, r3
 800c16e:	43db      	mvns	r3, r3
 800c170:	69ba      	ldr	r2, [r7, #24]
 800c172:	4013      	ands	r3, r2
 800c174:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	4a58      	ldr	r2, [pc, #352]	; (800c2dc <HAL_GPIO_Init+0x32c>)
 800c17a:	4293      	cmp	r3, r2
 800c17c:	d037      	beq.n	800c1ee <HAL_GPIO_Init+0x23e>
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	4a57      	ldr	r2, [pc, #348]	; (800c2e0 <HAL_GPIO_Init+0x330>)
 800c182:	4293      	cmp	r3, r2
 800c184:	d031      	beq.n	800c1ea <HAL_GPIO_Init+0x23a>
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	4a56      	ldr	r2, [pc, #344]	; (800c2e4 <HAL_GPIO_Init+0x334>)
 800c18a:	4293      	cmp	r3, r2
 800c18c:	d02b      	beq.n	800c1e6 <HAL_GPIO_Init+0x236>
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	4a55      	ldr	r2, [pc, #340]	; (800c2e8 <HAL_GPIO_Init+0x338>)
 800c192:	4293      	cmp	r3, r2
 800c194:	d025      	beq.n	800c1e2 <HAL_GPIO_Init+0x232>
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	4a54      	ldr	r2, [pc, #336]	; (800c2ec <HAL_GPIO_Init+0x33c>)
 800c19a:	4293      	cmp	r3, r2
 800c19c:	d01f      	beq.n	800c1de <HAL_GPIO_Init+0x22e>
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	4a53      	ldr	r2, [pc, #332]	; (800c2f0 <HAL_GPIO_Init+0x340>)
 800c1a2:	4293      	cmp	r3, r2
 800c1a4:	d019      	beq.n	800c1da <HAL_GPIO_Init+0x22a>
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	4a52      	ldr	r2, [pc, #328]	; (800c2f4 <HAL_GPIO_Init+0x344>)
 800c1aa:	4293      	cmp	r3, r2
 800c1ac:	d013      	beq.n	800c1d6 <HAL_GPIO_Init+0x226>
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	4a51      	ldr	r2, [pc, #324]	; (800c2f8 <HAL_GPIO_Init+0x348>)
 800c1b2:	4293      	cmp	r3, r2
 800c1b4:	d00d      	beq.n	800c1d2 <HAL_GPIO_Init+0x222>
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	4a50      	ldr	r2, [pc, #320]	; (800c2fc <HAL_GPIO_Init+0x34c>)
 800c1ba:	4293      	cmp	r3, r2
 800c1bc:	d007      	beq.n	800c1ce <HAL_GPIO_Init+0x21e>
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	4a4f      	ldr	r2, [pc, #316]	; (800c300 <HAL_GPIO_Init+0x350>)
 800c1c2:	4293      	cmp	r3, r2
 800c1c4:	d101      	bne.n	800c1ca <HAL_GPIO_Init+0x21a>
 800c1c6:	2309      	movs	r3, #9
 800c1c8:	e012      	b.n	800c1f0 <HAL_GPIO_Init+0x240>
 800c1ca:	230a      	movs	r3, #10
 800c1cc:	e010      	b.n	800c1f0 <HAL_GPIO_Init+0x240>
 800c1ce:	2308      	movs	r3, #8
 800c1d0:	e00e      	b.n	800c1f0 <HAL_GPIO_Init+0x240>
 800c1d2:	2307      	movs	r3, #7
 800c1d4:	e00c      	b.n	800c1f0 <HAL_GPIO_Init+0x240>
 800c1d6:	2306      	movs	r3, #6
 800c1d8:	e00a      	b.n	800c1f0 <HAL_GPIO_Init+0x240>
 800c1da:	2305      	movs	r3, #5
 800c1dc:	e008      	b.n	800c1f0 <HAL_GPIO_Init+0x240>
 800c1de:	2304      	movs	r3, #4
 800c1e0:	e006      	b.n	800c1f0 <HAL_GPIO_Init+0x240>
 800c1e2:	2303      	movs	r3, #3
 800c1e4:	e004      	b.n	800c1f0 <HAL_GPIO_Init+0x240>
 800c1e6:	2302      	movs	r3, #2
 800c1e8:	e002      	b.n	800c1f0 <HAL_GPIO_Init+0x240>
 800c1ea:	2301      	movs	r3, #1
 800c1ec:	e000      	b.n	800c1f0 <HAL_GPIO_Init+0x240>
 800c1ee:	2300      	movs	r3, #0
 800c1f0:	69fa      	ldr	r2, [r7, #28]
 800c1f2:	f002 0203 	and.w	r2, r2, #3
 800c1f6:	0092      	lsls	r2, r2, #2
 800c1f8:	4093      	lsls	r3, r2
 800c1fa:	69ba      	ldr	r2, [r7, #24]
 800c1fc:	4313      	orrs	r3, r2
 800c1fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800c200:	4935      	ldr	r1, [pc, #212]	; (800c2d8 <HAL_GPIO_Init+0x328>)
 800c202:	69fb      	ldr	r3, [r7, #28]
 800c204:	089b      	lsrs	r3, r3, #2
 800c206:	3302      	adds	r3, #2
 800c208:	69ba      	ldr	r2, [r7, #24]
 800c20a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800c20e:	4b3d      	ldr	r3, [pc, #244]	; (800c304 <HAL_GPIO_Init+0x354>)
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c214:	693b      	ldr	r3, [r7, #16]
 800c216:	43db      	mvns	r3, r3
 800c218:	69ba      	ldr	r2, [r7, #24]
 800c21a:	4013      	ands	r3, r2
 800c21c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800c21e:	683b      	ldr	r3, [r7, #0]
 800c220:	685b      	ldr	r3, [r3, #4]
 800c222:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c226:	2b00      	cmp	r3, #0
 800c228:	d003      	beq.n	800c232 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800c22a:	69ba      	ldr	r2, [r7, #24]
 800c22c:	693b      	ldr	r3, [r7, #16]
 800c22e:	4313      	orrs	r3, r2
 800c230:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800c232:	4a34      	ldr	r2, [pc, #208]	; (800c304 <HAL_GPIO_Init+0x354>)
 800c234:	69bb      	ldr	r3, [r7, #24]
 800c236:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800c238:	4b32      	ldr	r3, [pc, #200]	; (800c304 <HAL_GPIO_Init+0x354>)
 800c23a:	685b      	ldr	r3, [r3, #4]
 800c23c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c23e:	693b      	ldr	r3, [r7, #16]
 800c240:	43db      	mvns	r3, r3
 800c242:	69ba      	ldr	r2, [r7, #24]
 800c244:	4013      	ands	r3, r2
 800c246:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800c248:	683b      	ldr	r3, [r7, #0]
 800c24a:	685b      	ldr	r3, [r3, #4]
 800c24c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c250:	2b00      	cmp	r3, #0
 800c252:	d003      	beq.n	800c25c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800c254:	69ba      	ldr	r2, [r7, #24]
 800c256:	693b      	ldr	r3, [r7, #16]
 800c258:	4313      	orrs	r3, r2
 800c25a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800c25c:	4a29      	ldr	r2, [pc, #164]	; (800c304 <HAL_GPIO_Init+0x354>)
 800c25e:	69bb      	ldr	r3, [r7, #24]
 800c260:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800c262:	4b28      	ldr	r3, [pc, #160]	; (800c304 <HAL_GPIO_Init+0x354>)
 800c264:	689b      	ldr	r3, [r3, #8]
 800c266:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c268:	693b      	ldr	r3, [r7, #16]
 800c26a:	43db      	mvns	r3, r3
 800c26c:	69ba      	ldr	r2, [r7, #24]
 800c26e:	4013      	ands	r3, r2
 800c270:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800c272:	683b      	ldr	r3, [r7, #0]
 800c274:	685b      	ldr	r3, [r3, #4]
 800c276:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d003      	beq.n	800c286 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800c27e:	69ba      	ldr	r2, [r7, #24]
 800c280:	693b      	ldr	r3, [r7, #16]
 800c282:	4313      	orrs	r3, r2
 800c284:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800c286:	4a1f      	ldr	r2, [pc, #124]	; (800c304 <HAL_GPIO_Init+0x354>)
 800c288:	69bb      	ldr	r3, [r7, #24]
 800c28a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800c28c:	4b1d      	ldr	r3, [pc, #116]	; (800c304 <HAL_GPIO_Init+0x354>)
 800c28e:	68db      	ldr	r3, [r3, #12]
 800c290:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c292:	693b      	ldr	r3, [r7, #16]
 800c294:	43db      	mvns	r3, r3
 800c296:	69ba      	ldr	r2, [r7, #24]
 800c298:	4013      	ands	r3, r2
 800c29a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800c29c:	683b      	ldr	r3, [r7, #0]
 800c29e:	685b      	ldr	r3, [r3, #4]
 800c2a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d003      	beq.n	800c2b0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800c2a8:	69ba      	ldr	r2, [r7, #24]
 800c2aa:	693b      	ldr	r3, [r7, #16]
 800c2ac:	4313      	orrs	r3, r2
 800c2ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800c2b0:	4a14      	ldr	r2, [pc, #80]	; (800c304 <HAL_GPIO_Init+0x354>)
 800c2b2:	69bb      	ldr	r3, [r7, #24]
 800c2b4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800c2b6:	69fb      	ldr	r3, [r7, #28]
 800c2b8:	3301      	adds	r3, #1
 800c2ba:	61fb      	str	r3, [r7, #28]
 800c2bc:	69fb      	ldr	r3, [r7, #28]
 800c2be:	2b0f      	cmp	r3, #15
 800c2c0:	f67f ae84 	bls.w	800bfcc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800c2c4:	bf00      	nop
 800c2c6:	bf00      	nop
 800c2c8:	3724      	adds	r7, #36	; 0x24
 800c2ca:	46bd      	mov	sp, r7
 800c2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2d0:	4770      	bx	lr
 800c2d2:	bf00      	nop
 800c2d4:	40023800 	.word	0x40023800
 800c2d8:	40013800 	.word	0x40013800
 800c2dc:	40020000 	.word	0x40020000
 800c2e0:	40020400 	.word	0x40020400
 800c2e4:	40020800 	.word	0x40020800
 800c2e8:	40020c00 	.word	0x40020c00
 800c2ec:	40021000 	.word	0x40021000
 800c2f0:	40021400 	.word	0x40021400
 800c2f4:	40021800 	.word	0x40021800
 800c2f8:	40021c00 	.word	0x40021c00
 800c2fc:	40022000 	.word	0x40022000
 800c300:	40022400 	.word	0x40022400
 800c304:	40013c00 	.word	0x40013c00

0800c308 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800c308:	b480      	push	{r7}
 800c30a:	b087      	sub	sp, #28
 800c30c:	af00      	add	r7, sp, #0
 800c30e:	6078      	str	r0, [r7, #4]
 800c310:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800c312:	2300      	movs	r3, #0
 800c314:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800c316:	2300      	movs	r3, #0
 800c318:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800c31a:	2300      	movs	r3, #0
 800c31c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800c31e:	2300      	movs	r3, #0
 800c320:	617b      	str	r3, [r7, #20]
 800c322:	e0d9      	b.n	800c4d8 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800c324:	2201      	movs	r2, #1
 800c326:	697b      	ldr	r3, [r7, #20]
 800c328:	fa02 f303 	lsl.w	r3, r2, r3
 800c32c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800c32e:	683a      	ldr	r2, [r7, #0]
 800c330:	693b      	ldr	r3, [r7, #16]
 800c332:	4013      	ands	r3, r2
 800c334:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800c336:	68fa      	ldr	r2, [r7, #12]
 800c338:	693b      	ldr	r3, [r7, #16]
 800c33a:	429a      	cmp	r2, r3
 800c33c:	f040 80c9 	bne.w	800c4d2 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800c340:	4a6b      	ldr	r2, [pc, #428]	; (800c4f0 <HAL_GPIO_DeInit+0x1e8>)
 800c342:	697b      	ldr	r3, [r7, #20]
 800c344:	089b      	lsrs	r3, r3, #2
 800c346:	3302      	adds	r3, #2
 800c348:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c34c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800c34e:	697b      	ldr	r3, [r7, #20]
 800c350:	f003 0303 	and.w	r3, r3, #3
 800c354:	009b      	lsls	r3, r3, #2
 800c356:	220f      	movs	r2, #15
 800c358:	fa02 f303 	lsl.w	r3, r2, r3
 800c35c:	68ba      	ldr	r2, [r7, #8]
 800c35e:	4013      	ands	r3, r2
 800c360:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	4a63      	ldr	r2, [pc, #396]	; (800c4f4 <HAL_GPIO_DeInit+0x1ec>)
 800c366:	4293      	cmp	r3, r2
 800c368:	d037      	beq.n	800c3da <HAL_GPIO_DeInit+0xd2>
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	4a62      	ldr	r2, [pc, #392]	; (800c4f8 <HAL_GPIO_DeInit+0x1f0>)
 800c36e:	4293      	cmp	r3, r2
 800c370:	d031      	beq.n	800c3d6 <HAL_GPIO_DeInit+0xce>
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	4a61      	ldr	r2, [pc, #388]	; (800c4fc <HAL_GPIO_DeInit+0x1f4>)
 800c376:	4293      	cmp	r3, r2
 800c378:	d02b      	beq.n	800c3d2 <HAL_GPIO_DeInit+0xca>
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	4a60      	ldr	r2, [pc, #384]	; (800c500 <HAL_GPIO_DeInit+0x1f8>)
 800c37e:	4293      	cmp	r3, r2
 800c380:	d025      	beq.n	800c3ce <HAL_GPIO_DeInit+0xc6>
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	4a5f      	ldr	r2, [pc, #380]	; (800c504 <HAL_GPIO_DeInit+0x1fc>)
 800c386:	4293      	cmp	r3, r2
 800c388:	d01f      	beq.n	800c3ca <HAL_GPIO_DeInit+0xc2>
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	4a5e      	ldr	r2, [pc, #376]	; (800c508 <HAL_GPIO_DeInit+0x200>)
 800c38e:	4293      	cmp	r3, r2
 800c390:	d019      	beq.n	800c3c6 <HAL_GPIO_DeInit+0xbe>
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	4a5d      	ldr	r2, [pc, #372]	; (800c50c <HAL_GPIO_DeInit+0x204>)
 800c396:	4293      	cmp	r3, r2
 800c398:	d013      	beq.n	800c3c2 <HAL_GPIO_DeInit+0xba>
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	4a5c      	ldr	r2, [pc, #368]	; (800c510 <HAL_GPIO_DeInit+0x208>)
 800c39e:	4293      	cmp	r3, r2
 800c3a0:	d00d      	beq.n	800c3be <HAL_GPIO_DeInit+0xb6>
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	4a5b      	ldr	r2, [pc, #364]	; (800c514 <HAL_GPIO_DeInit+0x20c>)
 800c3a6:	4293      	cmp	r3, r2
 800c3a8:	d007      	beq.n	800c3ba <HAL_GPIO_DeInit+0xb2>
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	4a5a      	ldr	r2, [pc, #360]	; (800c518 <HAL_GPIO_DeInit+0x210>)
 800c3ae:	4293      	cmp	r3, r2
 800c3b0:	d101      	bne.n	800c3b6 <HAL_GPIO_DeInit+0xae>
 800c3b2:	2309      	movs	r3, #9
 800c3b4:	e012      	b.n	800c3dc <HAL_GPIO_DeInit+0xd4>
 800c3b6:	230a      	movs	r3, #10
 800c3b8:	e010      	b.n	800c3dc <HAL_GPIO_DeInit+0xd4>
 800c3ba:	2308      	movs	r3, #8
 800c3bc:	e00e      	b.n	800c3dc <HAL_GPIO_DeInit+0xd4>
 800c3be:	2307      	movs	r3, #7
 800c3c0:	e00c      	b.n	800c3dc <HAL_GPIO_DeInit+0xd4>
 800c3c2:	2306      	movs	r3, #6
 800c3c4:	e00a      	b.n	800c3dc <HAL_GPIO_DeInit+0xd4>
 800c3c6:	2305      	movs	r3, #5
 800c3c8:	e008      	b.n	800c3dc <HAL_GPIO_DeInit+0xd4>
 800c3ca:	2304      	movs	r3, #4
 800c3cc:	e006      	b.n	800c3dc <HAL_GPIO_DeInit+0xd4>
 800c3ce:	2303      	movs	r3, #3
 800c3d0:	e004      	b.n	800c3dc <HAL_GPIO_DeInit+0xd4>
 800c3d2:	2302      	movs	r3, #2
 800c3d4:	e002      	b.n	800c3dc <HAL_GPIO_DeInit+0xd4>
 800c3d6:	2301      	movs	r3, #1
 800c3d8:	e000      	b.n	800c3dc <HAL_GPIO_DeInit+0xd4>
 800c3da:	2300      	movs	r3, #0
 800c3dc:	697a      	ldr	r2, [r7, #20]
 800c3de:	f002 0203 	and.w	r2, r2, #3
 800c3e2:	0092      	lsls	r2, r2, #2
 800c3e4:	4093      	lsls	r3, r2
 800c3e6:	68ba      	ldr	r2, [r7, #8]
 800c3e8:	429a      	cmp	r2, r3
 800c3ea:	d132      	bne.n	800c452 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800c3ec:	4b4b      	ldr	r3, [pc, #300]	; (800c51c <HAL_GPIO_DeInit+0x214>)
 800c3ee:	681a      	ldr	r2, [r3, #0]
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	43db      	mvns	r3, r3
 800c3f4:	4949      	ldr	r1, [pc, #292]	; (800c51c <HAL_GPIO_DeInit+0x214>)
 800c3f6:	4013      	ands	r3, r2
 800c3f8:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800c3fa:	4b48      	ldr	r3, [pc, #288]	; (800c51c <HAL_GPIO_DeInit+0x214>)
 800c3fc:	685a      	ldr	r2, [r3, #4]
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	43db      	mvns	r3, r3
 800c402:	4946      	ldr	r1, [pc, #280]	; (800c51c <HAL_GPIO_DeInit+0x214>)
 800c404:	4013      	ands	r3, r2
 800c406:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800c408:	4b44      	ldr	r3, [pc, #272]	; (800c51c <HAL_GPIO_DeInit+0x214>)
 800c40a:	689a      	ldr	r2, [r3, #8]
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	43db      	mvns	r3, r3
 800c410:	4942      	ldr	r1, [pc, #264]	; (800c51c <HAL_GPIO_DeInit+0x214>)
 800c412:	4013      	ands	r3, r2
 800c414:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800c416:	4b41      	ldr	r3, [pc, #260]	; (800c51c <HAL_GPIO_DeInit+0x214>)
 800c418:	68da      	ldr	r2, [r3, #12]
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	43db      	mvns	r3, r3
 800c41e:	493f      	ldr	r1, [pc, #252]	; (800c51c <HAL_GPIO_DeInit+0x214>)
 800c420:	4013      	ands	r3, r2
 800c422:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800c424:	697b      	ldr	r3, [r7, #20]
 800c426:	f003 0303 	and.w	r3, r3, #3
 800c42a:	009b      	lsls	r3, r3, #2
 800c42c:	220f      	movs	r2, #15
 800c42e:	fa02 f303 	lsl.w	r3, r2, r3
 800c432:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800c434:	4a2e      	ldr	r2, [pc, #184]	; (800c4f0 <HAL_GPIO_DeInit+0x1e8>)
 800c436:	697b      	ldr	r3, [r7, #20]
 800c438:	089b      	lsrs	r3, r3, #2
 800c43a:	3302      	adds	r3, #2
 800c43c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800c440:	68bb      	ldr	r3, [r7, #8]
 800c442:	43da      	mvns	r2, r3
 800c444:	482a      	ldr	r0, [pc, #168]	; (800c4f0 <HAL_GPIO_DeInit+0x1e8>)
 800c446:	697b      	ldr	r3, [r7, #20]
 800c448:	089b      	lsrs	r3, r3, #2
 800c44a:	400a      	ands	r2, r1
 800c44c:	3302      	adds	r3, #2
 800c44e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	681a      	ldr	r2, [r3, #0]
 800c456:	697b      	ldr	r3, [r7, #20]
 800c458:	005b      	lsls	r3, r3, #1
 800c45a:	2103      	movs	r1, #3
 800c45c:	fa01 f303 	lsl.w	r3, r1, r3
 800c460:	43db      	mvns	r3, r3
 800c462:	401a      	ands	r2, r3
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800c468:	697b      	ldr	r3, [r7, #20]
 800c46a:	08da      	lsrs	r2, r3, #3
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	3208      	adds	r2, #8
 800c470:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c474:	697b      	ldr	r3, [r7, #20]
 800c476:	f003 0307 	and.w	r3, r3, #7
 800c47a:	009b      	lsls	r3, r3, #2
 800c47c:	220f      	movs	r2, #15
 800c47e:	fa02 f303 	lsl.w	r3, r2, r3
 800c482:	43db      	mvns	r3, r3
 800c484:	697a      	ldr	r2, [r7, #20]
 800c486:	08d2      	lsrs	r2, r2, #3
 800c488:	4019      	ands	r1, r3
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	3208      	adds	r2, #8
 800c48e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	68da      	ldr	r2, [r3, #12]
 800c496:	697b      	ldr	r3, [r7, #20]
 800c498:	005b      	lsls	r3, r3, #1
 800c49a:	2103      	movs	r1, #3
 800c49c:	fa01 f303 	lsl.w	r3, r1, r3
 800c4a0:	43db      	mvns	r3, r3
 800c4a2:	401a      	ands	r2, r3
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	685a      	ldr	r2, [r3, #4]
 800c4ac:	2101      	movs	r1, #1
 800c4ae:	697b      	ldr	r3, [r7, #20]
 800c4b0:	fa01 f303 	lsl.w	r3, r1, r3
 800c4b4:	43db      	mvns	r3, r3
 800c4b6:	401a      	ands	r2, r3
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	689a      	ldr	r2, [r3, #8]
 800c4c0:	697b      	ldr	r3, [r7, #20]
 800c4c2:	005b      	lsls	r3, r3, #1
 800c4c4:	2103      	movs	r1, #3
 800c4c6:	fa01 f303 	lsl.w	r3, r1, r3
 800c4ca:	43db      	mvns	r3, r3
 800c4cc:	401a      	ands	r2, r3
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800c4d2:	697b      	ldr	r3, [r7, #20]
 800c4d4:	3301      	adds	r3, #1
 800c4d6:	617b      	str	r3, [r7, #20]
 800c4d8:	697b      	ldr	r3, [r7, #20]
 800c4da:	2b0f      	cmp	r3, #15
 800c4dc:	f67f af22 	bls.w	800c324 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800c4e0:	bf00      	nop
 800c4e2:	bf00      	nop
 800c4e4:	371c      	adds	r7, #28
 800c4e6:	46bd      	mov	sp, r7
 800c4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ec:	4770      	bx	lr
 800c4ee:	bf00      	nop
 800c4f0:	40013800 	.word	0x40013800
 800c4f4:	40020000 	.word	0x40020000
 800c4f8:	40020400 	.word	0x40020400
 800c4fc:	40020800 	.word	0x40020800
 800c500:	40020c00 	.word	0x40020c00
 800c504:	40021000 	.word	0x40021000
 800c508:	40021400 	.word	0x40021400
 800c50c:	40021800 	.word	0x40021800
 800c510:	40021c00 	.word	0x40021c00
 800c514:	40022000 	.word	0x40022000
 800c518:	40022400 	.word	0x40022400
 800c51c:	40013c00 	.word	0x40013c00

0800c520 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800c520:	b480      	push	{r7}
 800c522:	b083      	sub	sp, #12
 800c524:	af00      	add	r7, sp, #0
 800c526:	6078      	str	r0, [r7, #4]
 800c528:	460b      	mov	r3, r1
 800c52a:	807b      	strh	r3, [r7, #2]
 800c52c:	4613      	mov	r3, r2
 800c52e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800c530:	787b      	ldrb	r3, [r7, #1]
 800c532:	2b00      	cmp	r3, #0
 800c534:	d003      	beq.n	800c53e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800c536:	887a      	ldrh	r2, [r7, #2]
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800c53c:	e003      	b.n	800c546 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800c53e:	887b      	ldrh	r3, [r7, #2]
 800c540:	041a      	lsls	r2, r3, #16
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	619a      	str	r2, [r3, #24]
}
 800c546:	bf00      	nop
 800c548:	370c      	adds	r7, #12
 800c54a:	46bd      	mov	sp, r7
 800c54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c550:	4770      	bx	lr
	...

0800c554 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800c554:	b580      	push	{r7, lr}
 800c556:	b084      	sub	sp, #16
 800c558:	af00      	add	r7, sp, #0
 800c55a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d101      	bne.n	800c566 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800c562:	2301      	movs	r3, #1
 800c564:	e12b      	b.n	800c7be <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c56c:	b2db      	uxtb	r3, r3
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d106      	bne.n	800c580 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	2200      	movs	r2, #0
 800c576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800c57a:	6878      	ldr	r0, [r7, #4]
 800c57c:	f7fa fff6 	bl	800756c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	2224      	movs	r2, #36	; 0x24
 800c584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	681a      	ldr	r2, [r3, #0]
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	f022 0201 	bic.w	r2, r2, #1
 800c596:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	681a      	ldr	r2, [r3, #0]
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c5a6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	681a      	ldr	r2, [r3, #0]
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c5b6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800c5b8:	f001 ffac 	bl	800e514 <HAL_RCC_GetPCLK1Freq>
 800c5bc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	685b      	ldr	r3, [r3, #4]
 800c5c2:	4a81      	ldr	r2, [pc, #516]	; (800c7c8 <HAL_I2C_Init+0x274>)
 800c5c4:	4293      	cmp	r3, r2
 800c5c6:	d807      	bhi.n	800c5d8 <HAL_I2C_Init+0x84>
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	4a80      	ldr	r2, [pc, #512]	; (800c7cc <HAL_I2C_Init+0x278>)
 800c5cc:	4293      	cmp	r3, r2
 800c5ce:	bf94      	ite	ls
 800c5d0:	2301      	movls	r3, #1
 800c5d2:	2300      	movhi	r3, #0
 800c5d4:	b2db      	uxtb	r3, r3
 800c5d6:	e006      	b.n	800c5e6 <HAL_I2C_Init+0x92>
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	4a7d      	ldr	r2, [pc, #500]	; (800c7d0 <HAL_I2C_Init+0x27c>)
 800c5dc:	4293      	cmp	r3, r2
 800c5de:	bf94      	ite	ls
 800c5e0:	2301      	movls	r3, #1
 800c5e2:	2300      	movhi	r3, #0
 800c5e4:	b2db      	uxtb	r3, r3
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d001      	beq.n	800c5ee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800c5ea:	2301      	movs	r3, #1
 800c5ec:	e0e7      	b.n	800c7be <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	4a78      	ldr	r2, [pc, #480]	; (800c7d4 <HAL_I2C_Init+0x280>)
 800c5f2:	fba2 2303 	umull	r2, r3, r2, r3
 800c5f6:	0c9b      	lsrs	r3, r3, #18
 800c5f8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	685b      	ldr	r3, [r3, #4]
 800c600:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	68ba      	ldr	r2, [r7, #8]
 800c60a:	430a      	orrs	r2, r1
 800c60c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	6a1b      	ldr	r3, [r3, #32]
 800c614:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	685b      	ldr	r3, [r3, #4]
 800c61c:	4a6a      	ldr	r2, [pc, #424]	; (800c7c8 <HAL_I2C_Init+0x274>)
 800c61e:	4293      	cmp	r3, r2
 800c620:	d802      	bhi.n	800c628 <HAL_I2C_Init+0xd4>
 800c622:	68bb      	ldr	r3, [r7, #8]
 800c624:	3301      	adds	r3, #1
 800c626:	e009      	b.n	800c63c <HAL_I2C_Init+0xe8>
 800c628:	68bb      	ldr	r3, [r7, #8]
 800c62a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800c62e:	fb02 f303 	mul.w	r3, r2, r3
 800c632:	4a69      	ldr	r2, [pc, #420]	; (800c7d8 <HAL_I2C_Init+0x284>)
 800c634:	fba2 2303 	umull	r2, r3, r2, r3
 800c638:	099b      	lsrs	r3, r3, #6
 800c63a:	3301      	adds	r3, #1
 800c63c:	687a      	ldr	r2, [r7, #4]
 800c63e:	6812      	ldr	r2, [r2, #0]
 800c640:	430b      	orrs	r3, r1
 800c642:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	69db      	ldr	r3, [r3, #28]
 800c64a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800c64e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	685b      	ldr	r3, [r3, #4]
 800c656:	495c      	ldr	r1, [pc, #368]	; (800c7c8 <HAL_I2C_Init+0x274>)
 800c658:	428b      	cmp	r3, r1
 800c65a:	d819      	bhi.n	800c690 <HAL_I2C_Init+0x13c>
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	1e59      	subs	r1, r3, #1
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	685b      	ldr	r3, [r3, #4]
 800c664:	005b      	lsls	r3, r3, #1
 800c666:	fbb1 f3f3 	udiv	r3, r1, r3
 800c66a:	1c59      	adds	r1, r3, #1
 800c66c:	f640 73fc 	movw	r3, #4092	; 0xffc
 800c670:	400b      	ands	r3, r1
 800c672:	2b00      	cmp	r3, #0
 800c674:	d00a      	beq.n	800c68c <HAL_I2C_Init+0x138>
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	1e59      	subs	r1, r3, #1
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	685b      	ldr	r3, [r3, #4]
 800c67e:	005b      	lsls	r3, r3, #1
 800c680:	fbb1 f3f3 	udiv	r3, r1, r3
 800c684:	3301      	adds	r3, #1
 800c686:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c68a:	e051      	b.n	800c730 <HAL_I2C_Init+0x1dc>
 800c68c:	2304      	movs	r3, #4
 800c68e:	e04f      	b.n	800c730 <HAL_I2C_Init+0x1dc>
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	689b      	ldr	r3, [r3, #8]
 800c694:	2b00      	cmp	r3, #0
 800c696:	d111      	bne.n	800c6bc <HAL_I2C_Init+0x168>
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	1e58      	subs	r0, r3, #1
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	6859      	ldr	r1, [r3, #4]
 800c6a0:	460b      	mov	r3, r1
 800c6a2:	005b      	lsls	r3, r3, #1
 800c6a4:	440b      	add	r3, r1
 800c6a6:	fbb0 f3f3 	udiv	r3, r0, r3
 800c6aa:	3301      	adds	r3, #1
 800c6ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	bf0c      	ite	eq
 800c6b4:	2301      	moveq	r3, #1
 800c6b6:	2300      	movne	r3, #0
 800c6b8:	b2db      	uxtb	r3, r3
 800c6ba:	e012      	b.n	800c6e2 <HAL_I2C_Init+0x18e>
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	1e58      	subs	r0, r3, #1
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	6859      	ldr	r1, [r3, #4]
 800c6c4:	460b      	mov	r3, r1
 800c6c6:	009b      	lsls	r3, r3, #2
 800c6c8:	440b      	add	r3, r1
 800c6ca:	0099      	lsls	r1, r3, #2
 800c6cc:	440b      	add	r3, r1
 800c6ce:	fbb0 f3f3 	udiv	r3, r0, r3
 800c6d2:	3301      	adds	r3, #1
 800c6d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	bf0c      	ite	eq
 800c6dc:	2301      	moveq	r3, #1
 800c6de:	2300      	movne	r3, #0
 800c6e0:	b2db      	uxtb	r3, r3
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d001      	beq.n	800c6ea <HAL_I2C_Init+0x196>
 800c6e6:	2301      	movs	r3, #1
 800c6e8:	e022      	b.n	800c730 <HAL_I2C_Init+0x1dc>
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	689b      	ldr	r3, [r3, #8]
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d10e      	bne.n	800c710 <HAL_I2C_Init+0x1bc>
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	1e58      	subs	r0, r3, #1
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	6859      	ldr	r1, [r3, #4]
 800c6fa:	460b      	mov	r3, r1
 800c6fc:	005b      	lsls	r3, r3, #1
 800c6fe:	440b      	add	r3, r1
 800c700:	fbb0 f3f3 	udiv	r3, r0, r3
 800c704:	3301      	adds	r3, #1
 800c706:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c70a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c70e:	e00f      	b.n	800c730 <HAL_I2C_Init+0x1dc>
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	1e58      	subs	r0, r3, #1
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	6859      	ldr	r1, [r3, #4]
 800c718:	460b      	mov	r3, r1
 800c71a:	009b      	lsls	r3, r3, #2
 800c71c:	440b      	add	r3, r1
 800c71e:	0099      	lsls	r1, r3, #2
 800c720:	440b      	add	r3, r1
 800c722:	fbb0 f3f3 	udiv	r3, r0, r3
 800c726:	3301      	adds	r3, #1
 800c728:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c72c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c730:	6879      	ldr	r1, [r7, #4]
 800c732:	6809      	ldr	r1, [r1, #0]
 800c734:	4313      	orrs	r3, r2
 800c736:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	69da      	ldr	r2, [r3, #28]
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	6a1b      	ldr	r3, [r3, #32]
 800c74a:	431a      	orrs	r2, r3
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	430a      	orrs	r2, r1
 800c752:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	689b      	ldr	r3, [r3, #8]
 800c75a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800c75e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c762:	687a      	ldr	r2, [r7, #4]
 800c764:	6911      	ldr	r1, [r2, #16]
 800c766:	687a      	ldr	r2, [r7, #4]
 800c768:	68d2      	ldr	r2, [r2, #12]
 800c76a:	4311      	orrs	r1, r2
 800c76c:	687a      	ldr	r2, [r7, #4]
 800c76e:	6812      	ldr	r2, [r2, #0]
 800c770:	430b      	orrs	r3, r1
 800c772:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	68db      	ldr	r3, [r3, #12]
 800c77a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	695a      	ldr	r2, [r3, #20]
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	699b      	ldr	r3, [r3, #24]
 800c786:	431a      	orrs	r2, r3
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	430a      	orrs	r2, r1
 800c78e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	681a      	ldr	r2, [r3, #0]
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	f042 0201 	orr.w	r2, r2, #1
 800c79e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	2200      	movs	r2, #0
 800c7a4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	2220      	movs	r2, #32
 800c7aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	2200      	movs	r2, #0
 800c7b2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	2200      	movs	r2, #0
 800c7b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800c7bc:	2300      	movs	r3, #0
}
 800c7be:	4618      	mov	r0, r3
 800c7c0:	3710      	adds	r7, #16
 800c7c2:	46bd      	mov	sp, r7
 800c7c4:	bd80      	pop	{r7, pc}
 800c7c6:	bf00      	nop
 800c7c8:	000186a0 	.word	0x000186a0
 800c7cc:	001e847f 	.word	0x001e847f
 800c7d0:	003d08ff 	.word	0x003d08ff
 800c7d4:	431bde83 	.word	0x431bde83
 800c7d8:	10624dd3 	.word	0x10624dd3

0800c7dc <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800c7dc:	b580      	push	{r7, lr}
 800c7de:	b082      	sub	sp, #8
 800c7e0:	af00      	add	r7, sp, #0
 800c7e2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d101      	bne.n	800c7ee <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800c7ea:	2301      	movs	r3, #1
 800c7ec:	e021      	b.n	800c832 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	2224      	movs	r2, #36	; 0x24
 800c7f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	681a      	ldr	r2, [r3, #0]
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	f022 0201 	bic.w	r2, r2, #1
 800c804:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800c806:	6878      	ldr	r0, [r7, #4]
 800c808:	f7fa ff1a 	bl	8007640 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	2200      	movs	r2, #0
 800c810:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	2200      	movs	r2, #0
 800c816:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	2200      	movs	r2, #0
 800c81e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	2200      	movs	r2, #0
 800c824:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	2200      	movs	r2, #0
 800c82c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c830:	2300      	movs	r3, #0
}
 800c832:	4618      	mov	r0, r3
 800c834:	3708      	adds	r7, #8
 800c836:	46bd      	mov	sp, r7
 800c838:	bd80      	pop	{r7, pc}
	...

0800c83c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c83c:	b580      	push	{r7, lr}
 800c83e:	b088      	sub	sp, #32
 800c840:	af02      	add	r7, sp, #8
 800c842:	60f8      	str	r0, [r7, #12]
 800c844:	4608      	mov	r0, r1
 800c846:	4611      	mov	r1, r2
 800c848:	461a      	mov	r2, r3
 800c84a:	4603      	mov	r3, r0
 800c84c:	817b      	strh	r3, [r7, #10]
 800c84e:	460b      	mov	r3, r1
 800c850:	813b      	strh	r3, [r7, #8]
 800c852:	4613      	mov	r3, r2
 800c854:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800c856:	f7fe fd23 	bl	800b2a0 <HAL_GetTick>
 800c85a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c862:	b2db      	uxtb	r3, r3
 800c864:	2b20      	cmp	r3, #32
 800c866:	f040 80d9 	bne.w	800ca1c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800c86a:	697b      	ldr	r3, [r7, #20]
 800c86c:	9300      	str	r3, [sp, #0]
 800c86e:	2319      	movs	r3, #25
 800c870:	2201      	movs	r2, #1
 800c872:	496d      	ldr	r1, [pc, #436]	; (800ca28 <HAL_I2C_Mem_Write+0x1ec>)
 800c874:	68f8      	ldr	r0, [r7, #12]
 800c876:	f000 fc89 	bl	800d18c <I2C_WaitOnFlagUntilTimeout>
 800c87a:	4603      	mov	r3, r0
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d001      	beq.n	800c884 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800c880:	2302      	movs	r3, #2
 800c882:	e0cc      	b.n	800ca1e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c88a:	2b01      	cmp	r3, #1
 800c88c:	d101      	bne.n	800c892 <HAL_I2C_Mem_Write+0x56>
 800c88e:	2302      	movs	r3, #2
 800c890:	e0c5      	b.n	800ca1e <HAL_I2C_Mem_Write+0x1e2>
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	2201      	movs	r2, #1
 800c896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	f003 0301 	and.w	r3, r3, #1
 800c8a4:	2b01      	cmp	r3, #1
 800c8a6:	d007      	beq.n	800c8b8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	681a      	ldr	r2, [r3, #0]
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	f042 0201 	orr.w	r2, r2, #1
 800c8b6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	681a      	ldr	r2, [r3, #0]
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c8c6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	2221      	movs	r2, #33	; 0x21
 800c8cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	2240      	movs	r2, #64	; 0x40
 800c8d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	2200      	movs	r2, #0
 800c8dc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	6a3a      	ldr	r2, [r7, #32]
 800c8e2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c8e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c8ee:	b29a      	uxth	r2, r3
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	4a4d      	ldr	r2, [pc, #308]	; (800ca2c <HAL_I2C_Mem_Write+0x1f0>)
 800c8f8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800c8fa:	88f8      	ldrh	r0, [r7, #6]
 800c8fc:	893a      	ldrh	r2, [r7, #8]
 800c8fe:	8979      	ldrh	r1, [r7, #10]
 800c900:	697b      	ldr	r3, [r7, #20]
 800c902:	9301      	str	r3, [sp, #4]
 800c904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c906:	9300      	str	r3, [sp, #0]
 800c908:	4603      	mov	r3, r0
 800c90a:	68f8      	ldr	r0, [r7, #12]
 800c90c:	f000 fac4 	bl	800ce98 <I2C_RequestMemoryWrite>
 800c910:	4603      	mov	r3, r0
 800c912:	2b00      	cmp	r3, #0
 800c914:	d052      	beq.n	800c9bc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800c916:	2301      	movs	r3, #1
 800c918:	e081      	b.n	800ca1e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c91a:	697a      	ldr	r2, [r7, #20]
 800c91c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c91e:	68f8      	ldr	r0, [r7, #12]
 800c920:	f000 fd0a 	bl	800d338 <I2C_WaitOnTXEFlagUntilTimeout>
 800c924:	4603      	mov	r3, r0
 800c926:	2b00      	cmp	r3, #0
 800c928:	d00d      	beq.n	800c946 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c92e:	2b04      	cmp	r3, #4
 800c930:	d107      	bne.n	800c942 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	681a      	ldr	r2, [r3, #0]
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c940:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800c942:	2301      	movs	r3, #1
 800c944:	e06b      	b.n	800ca1e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c94a:	781a      	ldrb	r2, [r3, #0]
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c956:	1c5a      	adds	r2, r3, #1
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c960:	3b01      	subs	r3, #1
 800c962:	b29a      	uxth	r2, r3
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c96c:	b29b      	uxth	r3, r3
 800c96e:	3b01      	subs	r3, #1
 800c970:	b29a      	uxth	r2, r3
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	695b      	ldr	r3, [r3, #20]
 800c97c:	f003 0304 	and.w	r3, r3, #4
 800c980:	2b04      	cmp	r3, #4
 800c982:	d11b      	bne.n	800c9bc <HAL_I2C_Mem_Write+0x180>
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d017      	beq.n	800c9bc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c990:	781a      	ldrb	r2, [r3, #0]
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c99c:	1c5a      	adds	r2, r3, #1
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c9a6:	3b01      	subs	r3, #1
 800c9a8:	b29a      	uxth	r2, r3
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c9b2:	b29b      	uxth	r3, r3
 800c9b4:	3b01      	subs	r3, #1
 800c9b6:	b29a      	uxth	r2, r3
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d1aa      	bne.n	800c91a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c9c4:	697a      	ldr	r2, [r7, #20]
 800c9c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c9c8:	68f8      	ldr	r0, [r7, #12]
 800c9ca:	f000 fcf6 	bl	800d3ba <I2C_WaitOnBTFFlagUntilTimeout>
 800c9ce:	4603      	mov	r3, r0
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d00d      	beq.n	800c9f0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9d8:	2b04      	cmp	r3, #4
 800c9da:	d107      	bne.n	800c9ec <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	681a      	ldr	r2, [r3, #0]
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c9ea:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800c9ec:	2301      	movs	r3, #1
 800c9ee:	e016      	b.n	800ca1e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	681a      	ldr	r2, [r3, #0]
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c9fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	2220      	movs	r2, #32
 800ca04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	2200      	movs	r2, #0
 800ca0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	2200      	movs	r2, #0
 800ca14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800ca18:	2300      	movs	r3, #0
 800ca1a:	e000      	b.n	800ca1e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800ca1c:	2302      	movs	r3, #2
  }
}
 800ca1e:	4618      	mov	r0, r3
 800ca20:	3718      	adds	r7, #24
 800ca22:	46bd      	mov	sp, r7
 800ca24:	bd80      	pop	{r7, pc}
 800ca26:	bf00      	nop
 800ca28:	00100002 	.word	0x00100002
 800ca2c:	ffff0000 	.word	0xffff0000

0800ca30 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ca30:	b580      	push	{r7, lr}
 800ca32:	b08c      	sub	sp, #48	; 0x30
 800ca34:	af02      	add	r7, sp, #8
 800ca36:	60f8      	str	r0, [r7, #12]
 800ca38:	4608      	mov	r0, r1
 800ca3a:	4611      	mov	r1, r2
 800ca3c:	461a      	mov	r2, r3
 800ca3e:	4603      	mov	r3, r0
 800ca40:	817b      	strh	r3, [r7, #10]
 800ca42:	460b      	mov	r3, r1
 800ca44:	813b      	strh	r3, [r7, #8]
 800ca46:	4613      	mov	r3, r2
 800ca48:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800ca4a:	f7fe fc29 	bl	800b2a0 <HAL_GetTick>
 800ca4e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ca56:	b2db      	uxtb	r3, r3
 800ca58:	2b20      	cmp	r3, #32
 800ca5a:	f040 8208 	bne.w	800ce6e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800ca5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca60:	9300      	str	r3, [sp, #0]
 800ca62:	2319      	movs	r3, #25
 800ca64:	2201      	movs	r2, #1
 800ca66:	497b      	ldr	r1, [pc, #492]	; (800cc54 <HAL_I2C_Mem_Read+0x224>)
 800ca68:	68f8      	ldr	r0, [r7, #12]
 800ca6a:	f000 fb8f 	bl	800d18c <I2C_WaitOnFlagUntilTimeout>
 800ca6e:	4603      	mov	r3, r0
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d001      	beq.n	800ca78 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800ca74:	2302      	movs	r3, #2
 800ca76:	e1fb      	b.n	800ce70 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ca7e:	2b01      	cmp	r3, #1
 800ca80:	d101      	bne.n	800ca86 <HAL_I2C_Mem_Read+0x56>
 800ca82:	2302      	movs	r3, #2
 800ca84:	e1f4      	b.n	800ce70 <HAL_I2C_Mem_Read+0x440>
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	2201      	movs	r2, #1
 800ca8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	f003 0301 	and.w	r3, r3, #1
 800ca98:	2b01      	cmp	r3, #1
 800ca9a:	d007      	beq.n	800caac <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	681a      	ldr	r2, [r3, #0]
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	f042 0201 	orr.w	r2, r2, #1
 800caaa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	681a      	ldr	r2, [r3, #0]
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800caba:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	2222      	movs	r2, #34	; 0x22
 800cac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	2240      	movs	r2, #64	; 0x40
 800cac8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	2200      	movs	r2, #0
 800cad0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cad6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800cadc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cae2:	b29a      	uxth	r2, r3
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	4a5b      	ldr	r2, [pc, #364]	; (800cc58 <HAL_I2C_Mem_Read+0x228>)
 800caec:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800caee:	88f8      	ldrh	r0, [r7, #6]
 800caf0:	893a      	ldrh	r2, [r7, #8]
 800caf2:	8979      	ldrh	r1, [r7, #10]
 800caf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caf6:	9301      	str	r3, [sp, #4]
 800caf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cafa:	9300      	str	r3, [sp, #0]
 800cafc:	4603      	mov	r3, r0
 800cafe:	68f8      	ldr	r0, [r7, #12]
 800cb00:	f000 fa5e 	bl	800cfc0 <I2C_RequestMemoryRead>
 800cb04:	4603      	mov	r3, r0
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d001      	beq.n	800cb0e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800cb0a:	2301      	movs	r3, #1
 800cb0c:	e1b0      	b.n	800ce70 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d113      	bne.n	800cb3e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800cb16:	2300      	movs	r3, #0
 800cb18:	623b      	str	r3, [r7, #32]
 800cb1a:	68fb      	ldr	r3, [r7, #12]
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	695b      	ldr	r3, [r3, #20]
 800cb20:	623b      	str	r3, [r7, #32]
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	699b      	ldr	r3, [r3, #24]
 800cb28:	623b      	str	r3, [r7, #32]
 800cb2a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	681a      	ldr	r2, [r3, #0]
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cb3a:	601a      	str	r2, [r3, #0]
 800cb3c:	e184      	b.n	800ce48 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cb42:	2b01      	cmp	r3, #1
 800cb44:	d11b      	bne.n	800cb7e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800cb46:	68fb      	ldr	r3, [r7, #12]
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	681a      	ldr	r2, [r3, #0]
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cb54:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800cb56:	2300      	movs	r3, #0
 800cb58:	61fb      	str	r3, [r7, #28]
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	695b      	ldr	r3, [r3, #20]
 800cb60:	61fb      	str	r3, [r7, #28]
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	699b      	ldr	r3, [r3, #24]
 800cb68:	61fb      	str	r3, [r7, #28]
 800cb6a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	681a      	ldr	r2, [r3, #0]
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cb7a:	601a      	str	r2, [r3, #0]
 800cb7c:	e164      	b.n	800ce48 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cb82:	2b02      	cmp	r3, #2
 800cb84:	d11b      	bne.n	800cbbe <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	681a      	ldr	r2, [r3, #0]
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cb94:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	681a      	ldr	r2, [r3, #0]
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cba4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800cba6:	2300      	movs	r3, #0
 800cba8:	61bb      	str	r3, [r7, #24]
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	695b      	ldr	r3, [r3, #20]
 800cbb0:	61bb      	str	r3, [r7, #24]
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	699b      	ldr	r3, [r3, #24]
 800cbb8:	61bb      	str	r3, [r7, #24]
 800cbba:	69bb      	ldr	r3, [r7, #24]
 800cbbc:	e144      	b.n	800ce48 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800cbbe:	2300      	movs	r3, #0
 800cbc0:	617b      	str	r3, [r7, #20]
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	695b      	ldr	r3, [r3, #20]
 800cbc8:	617b      	str	r3, [r7, #20]
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	699b      	ldr	r3, [r3, #24]
 800cbd0:	617b      	str	r3, [r7, #20]
 800cbd2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800cbd4:	e138      	b.n	800ce48 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cbda:	2b03      	cmp	r3, #3
 800cbdc:	f200 80f1 	bhi.w	800cdc2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cbe4:	2b01      	cmp	r3, #1
 800cbe6:	d123      	bne.n	800cc30 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800cbe8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cbea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cbec:	68f8      	ldr	r0, [r7, #12]
 800cbee:	f000 fc25 	bl	800d43c <I2C_WaitOnRXNEFlagUntilTimeout>
 800cbf2:	4603      	mov	r3, r0
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d001      	beq.n	800cbfc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800cbf8:	2301      	movs	r3, #1
 800cbfa:	e139      	b.n	800ce70 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	691a      	ldr	r2, [r3, #16]
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc06:	b2d2      	uxtb	r2, r2
 800cc08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc0e:	1c5a      	adds	r2, r3, #1
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cc18:	3b01      	subs	r3, #1
 800cc1a:	b29a      	uxth	r2, r3
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cc24:	b29b      	uxth	r3, r3
 800cc26:	3b01      	subs	r3, #1
 800cc28:	b29a      	uxth	r2, r3
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800cc2e:	e10b      	b.n	800ce48 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cc34:	2b02      	cmp	r3, #2
 800cc36:	d14e      	bne.n	800ccd6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800cc38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc3a:	9300      	str	r3, [sp, #0]
 800cc3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc3e:	2200      	movs	r2, #0
 800cc40:	4906      	ldr	r1, [pc, #24]	; (800cc5c <HAL_I2C_Mem_Read+0x22c>)
 800cc42:	68f8      	ldr	r0, [r7, #12]
 800cc44:	f000 faa2 	bl	800d18c <I2C_WaitOnFlagUntilTimeout>
 800cc48:	4603      	mov	r3, r0
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d008      	beq.n	800cc60 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800cc4e:	2301      	movs	r3, #1
 800cc50:	e10e      	b.n	800ce70 <HAL_I2C_Mem_Read+0x440>
 800cc52:	bf00      	nop
 800cc54:	00100002 	.word	0x00100002
 800cc58:	ffff0000 	.word	0xffff0000
 800cc5c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	681a      	ldr	r2, [r3, #0]
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cc6e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	691a      	ldr	r2, [r3, #16]
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc7a:	b2d2      	uxtb	r2, r2
 800cc7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc82:	1c5a      	adds	r2, r3, #1
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cc8c:	3b01      	subs	r3, #1
 800cc8e:	b29a      	uxth	r2, r3
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cc98:	b29b      	uxth	r3, r3
 800cc9a:	3b01      	subs	r3, #1
 800cc9c:	b29a      	uxth	r2, r3
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	691a      	ldr	r2, [r3, #16]
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccac:	b2d2      	uxtb	r2, r2
 800ccae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccb4:	1c5a      	adds	r2, r3, #1
 800ccb6:	68fb      	ldr	r3, [r7, #12]
 800ccb8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ccbe:	3b01      	subs	r3, #1
 800ccc0:	b29a      	uxth	r2, r3
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ccca:	b29b      	uxth	r3, r3
 800cccc:	3b01      	subs	r3, #1
 800ccce:	b29a      	uxth	r2, r3
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ccd4:	e0b8      	b.n	800ce48 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800ccd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccd8:	9300      	str	r3, [sp, #0]
 800ccda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccdc:	2200      	movs	r2, #0
 800ccde:	4966      	ldr	r1, [pc, #408]	; (800ce78 <HAL_I2C_Mem_Read+0x448>)
 800cce0:	68f8      	ldr	r0, [r7, #12]
 800cce2:	f000 fa53 	bl	800d18c <I2C_WaitOnFlagUntilTimeout>
 800cce6:	4603      	mov	r3, r0
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d001      	beq.n	800ccf0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800ccec:	2301      	movs	r3, #1
 800ccee:	e0bf      	b.n	800ce70 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	681a      	ldr	r2, [r3, #0]
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ccfe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	691a      	ldr	r2, [r3, #16]
 800cd06:	68fb      	ldr	r3, [r7, #12]
 800cd08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd0a:	b2d2      	uxtb	r2, r2
 800cd0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd12:	1c5a      	adds	r2, r3, #1
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cd1c:	3b01      	subs	r3, #1
 800cd1e:	b29a      	uxth	r2, r3
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cd28:	b29b      	uxth	r3, r3
 800cd2a:	3b01      	subs	r3, #1
 800cd2c:	b29a      	uxth	r2, r3
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800cd32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd34:	9300      	str	r3, [sp, #0]
 800cd36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd38:	2200      	movs	r2, #0
 800cd3a:	494f      	ldr	r1, [pc, #316]	; (800ce78 <HAL_I2C_Mem_Read+0x448>)
 800cd3c:	68f8      	ldr	r0, [r7, #12]
 800cd3e:	f000 fa25 	bl	800d18c <I2C_WaitOnFlagUntilTimeout>
 800cd42:	4603      	mov	r3, r0
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d001      	beq.n	800cd4c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800cd48:	2301      	movs	r3, #1
 800cd4a:	e091      	b.n	800ce70 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	681a      	ldr	r2, [r3, #0]
 800cd52:	68fb      	ldr	r3, [r7, #12]
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cd5a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	691a      	ldr	r2, [r3, #16]
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd66:	b2d2      	uxtb	r2, r2
 800cd68:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd6e:	1c5a      	adds	r2, r3, #1
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800cd74:	68fb      	ldr	r3, [r7, #12]
 800cd76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cd78:	3b01      	subs	r3, #1
 800cd7a:	b29a      	uxth	r2, r3
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cd84:	b29b      	uxth	r3, r3
 800cd86:	3b01      	subs	r3, #1
 800cd88:	b29a      	uxth	r2, r3
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	691a      	ldr	r2, [r3, #16]
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd98:	b2d2      	uxtb	r2, r2
 800cd9a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cda0:	1c5a      	adds	r2, r3, #1
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cdaa:	3b01      	subs	r3, #1
 800cdac:	b29a      	uxth	r2, r3
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cdb6:	b29b      	uxth	r3, r3
 800cdb8:	3b01      	subs	r3, #1
 800cdba:	b29a      	uxth	r2, r3
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	855a      	strh	r2, [r3, #42]	; 0x2a
 800cdc0:	e042      	b.n	800ce48 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800cdc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cdc4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cdc6:	68f8      	ldr	r0, [r7, #12]
 800cdc8:	f000 fb38 	bl	800d43c <I2C_WaitOnRXNEFlagUntilTimeout>
 800cdcc:	4603      	mov	r3, r0
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d001      	beq.n	800cdd6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800cdd2:	2301      	movs	r3, #1
 800cdd4:	e04c      	b.n	800ce70 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	691a      	ldr	r2, [r3, #16]
 800cddc:	68fb      	ldr	r3, [r7, #12]
 800cdde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cde0:	b2d2      	uxtb	r2, r2
 800cde2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cde8:	1c5a      	adds	r2, r3, #1
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cdf2:	3b01      	subs	r3, #1
 800cdf4:	b29a      	uxth	r2, r3
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cdfe:	b29b      	uxth	r3, r3
 800ce00:	3b01      	subs	r3, #1
 800ce02:	b29a      	uxth	r2, r3
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	695b      	ldr	r3, [r3, #20]
 800ce0e:	f003 0304 	and.w	r3, r3, #4
 800ce12:	2b04      	cmp	r3, #4
 800ce14:	d118      	bne.n	800ce48 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	691a      	ldr	r2, [r3, #16]
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce20:	b2d2      	uxtb	r2, r2
 800ce22:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce28:	1c5a      	adds	r2, r3, #1
 800ce2a:	68fb      	ldr	r3, [r7, #12]
 800ce2c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ce32:	3b01      	subs	r3, #1
 800ce34:	b29a      	uxth	r2, r3
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ce3e:	b29b      	uxth	r3, r3
 800ce40:	3b01      	subs	r3, #1
 800ce42:	b29a      	uxth	r2, r3
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	f47f aec2 	bne.w	800cbd6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	2220      	movs	r2, #32
 800ce56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	2200      	movs	r2, #0
 800ce5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	2200      	movs	r2, #0
 800ce66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800ce6a:	2300      	movs	r3, #0
 800ce6c:	e000      	b.n	800ce70 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800ce6e:	2302      	movs	r3, #2
  }
}
 800ce70:	4618      	mov	r0, r3
 800ce72:	3728      	adds	r7, #40	; 0x28
 800ce74:	46bd      	mov	sp, r7
 800ce76:	bd80      	pop	{r7, pc}
 800ce78:	00010004 	.word	0x00010004

0800ce7c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800ce7c:	b480      	push	{r7}
 800ce7e:	b083      	sub	sp, #12
 800ce80:	af00      	add	r7, sp, #0
 800ce82:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ce8a:	b2db      	uxtb	r3, r3
}
 800ce8c:	4618      	mov	r0, r3
 800ce8e:	370c      	adds	r7, #12
 800ce90:	46bd      	mov	sp, r7
 800ce92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce96:	4770      	bx	lr

0800ce98 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800ce98:	b580      	push	{r7, lr}
 800ce9a:	b088      	sub	sp, #32
 800ce9c:	af02      	add	r7, sp, #8
 800ce9e:	60f8      	str	r0, [r7, #12]
 800cea0:	4608      	mov	r0, r1
 800cea2:	4611      	mov	r1, r2
 800cea4:	461a      	mov	r2, r3
 800cea6:	4603      	mov	r3, r0
 800cea8:	817b      	strh	r3, [r7, #10]
 800ceaa:	460b      	mov	r3, r1
 800ceac:	813b      	strh	r3, [r7, #8]
 800ceae:	4613      	mov	r3, r2
 800ceb0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	681a      	ldr	r2, [r3, #0]
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800cec0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800cec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cec4:	9300      	str	r3, [sp, #0]
 800cec6:	6a3b      	ldr	r3, [r7, #32]
 800cec8:	2200      	movs	r2, #0
 800ceca:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800cece:	68f8      	ldr	r0, [r7, #12]
 800ced0:	f000 f95c 	bl	800d18c <I2C_WaitOnFlagUntilTimeout>
 800ced4:	4603      	mov	r3, r0
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d00c      	beq.n	800cef4 <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d003      	beq.n	800cef0 <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ceee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800cef0:	2303      	movs	r3, #3
 800cef2:	e05f      	b.n	800cfb4 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800cef4:	897b      	ldrh	r3, [r7, #10]
 800cef6:	b2db      	uxtb	r3, r3
 800cef8:	461a      	mov	r2, r3
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800cf02:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800cf04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf06:	6a3a      	ldr	r2, [r7, #32]
 800cf08:	492c      	ldr	r1, [pc, #176]	; (800cfbc <I2C_RequestMemoryWrite+0x124>)
 800cf0a:	68f8      	ldr	r0, [r7, #12]
 800cf0c:	f000 f995 	bl	800d23a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800cf10:	4603      	mov	r3, r0
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d001      	beq.n	800cf1a <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 800cf16:	2301      	movs	r3, #1
 800cf18:	e04c      	b.n	800cfb4 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800cf1a:	2300      	movs	r3, #0
 800cf1c:	617b      	str	r3, [r7, #20]
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	695b      	ldr	r3, [r3, #20]
 800cf24:	617b      	str	r3, [r7, #20]
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	699b      	ldr	r3, [r3, #24]
 800cf2c:	617b      	str	r3, [r7, #20]
 800cf2e:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800cf30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cf32:	6a39      	ldr	r1, [r7, #32]
 800cf34:	68f8      	ldr	r0, [r7, #12]
 800cf36:	f000 f9ff 	bl	800d338 <I2C_WaitOnTXEFlagUntilTimeout>
 800cf3a:	4603      	mov	r3, r0
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d00d      	beq.n	800cf5c <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf44:	2b04      	cmp	r3, #4
 800cf46:	d107      	bne.n	800cf58 <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	681a      	ldr	r2, [r3, #0]
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cf56:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800cf58:	2301      	movs	r3, #1
 800cf5a:	e02b      	b.n	800cfb4 <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800cf5c:	88fb      	ldrh	r3, [r7, #6]
 800cf5e:	2b01      	cmp	r3, #1
 800cf60:	d105      	bne.n	800cf6e <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800cf62:	893b      	ldrh	r3, [r7, #8]
 800cf64:	b2da      	uxtb	r2, r3
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	611a      	str	r2, [r3, #16]
 800cf6c:	e021      	b.n	800cfb2 <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800cf6e:	893b      	ldrh	r3, [r7, #8]
 800cf70:	0a1b      	lsrs	r3, r3, #8
 800cf72:	b29b      	uxth	r3, r3
 800cf74:	b2da      	uxtb	r2, r3
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800cf7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cf7e:	6a39      	ldr	r1, [r7, #32]
 800cf80:	68f8      	ldr	r0, [r7, #12]
 800cf82:	f000 f9d9 	bl	800d338 <I2C_WaitOnTXEFlagUntilTimeout>
 800cf86:	4603      	mov	r3, r0
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d00d      	beq.n	800cfa8 <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf90:	2b04      	cmp	r3, #4
 800cf92:	d107      	bne.n	800cfa4 <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	681a      	ldr	r2, [r3, #0]
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cfa2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800cfa4:	2301      	movs	r3, #1
 800cfa6:	e005      	b.n	800cfb4 <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800cfa8:	893b      	ldrh	r3, [r7, #8]
 800cfaa:	b2da      	uxtb	r2, r3
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800cfb2:	2300      	movs	r3, #0
}
 800cfb4:	4618      	mov	r0, r3
 800cfb6:	3718      	adds	r7, #24
 800cfb8:	46bd      	mov	sp, r7
 800cfba:	bd80      	pop	{r7, pc}
 800cfbc:	00010002 	.word	0x00010002

0800cfc0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800cfc0:	b580      	push	{r7, lr}
 800cfc2:	b088      	sub	sp, #32
 800cfc4:	af02      	add	r7, sp, #8
 800cfc6:	60f8      	str	r0, [r7, #12]
 800cfc8:	4608      	mov	r0, r1
 800cfca:	4611      	mov	r1, r2
 800cfcc:	461a      	mov	r2, r3
 800cfce:	4603      	mov	r3, r0
 800cfd0:	817b      	strh	r3, [r7, #10]
 800cfd2:	460b      	mov	r3, r1
 800cfd4:	813b      	strh	r3, [r7, #8]
 800cfd6:	4613      	mov	r3, r2
 800cfd8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800cfda:	68fb      	ldr	r3, [r7, #12]
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	681a      	ldr	r2, [r3, #0]
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800cfe8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	681a      	ldr	r2, [r3, #0]
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800cff8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800cffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cffc:	9300      	str	r3, [sp, #0]
 800cffe:	6a3b      	ldr	r3, [r7, #32]
 800d000:	2200      	movs	r2, #0
 800d002:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800d006:	68f8      	ldr	r0, [r7, #12]
 800d008:	f000 f8c0 	bl	800d18c <I2C_WaitOnFlagUntilTimeout>
 800d00c:	4603      	mov	r3, r0
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d00c      	beq.n	800d02c <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d003      	beq.n	800d028 <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d026:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800d028:	2303      	movs	r3, #3
 800d02a:	e0a9      	b.n	800d180 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800d02c:	897b      	ldrh	r3, [r7, #10]
 800d02e:	b2db      	uxtb	r3, r3
 800d030:	461a      	mov	r2, r3
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800d03a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800d03c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d03e:	6a3a      	ldr	r2, [r7, #32]
 800d040:	4951      	ldr	r1, [pc, #324]	; (800d188 <I2C_RequestMemoryRead+0x1c8>)
 800d042:	68f8      	ldr	r0, [r7, #12]
 800d044:	f000 f8f9 	bl	800d23a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800d048:	4603      	mov	r3, r0
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d001      	beq.n	800d052 <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 800d04e:	2301      	movs	r3, #1
 800d050:	e096      	b.n	800d180 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d052:	2300      	movs	r3, #0
 800d054:	617b      	str	r3, [r7, #20]
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	695b      	ldr	r3, [r3, #20]
 800d05c:	617b      	str	r3, [r7, #20]
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	699b      	ldr	r3, [r3, #24]
 800d064:	617b      	str	r3, [r7, #20]
 800d066:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d068:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d06a:	6a39      	ldr	r1, [r7, #32]
 800d06c:	68f8      	ldr	r0, [r7, #12]
 800d06e:	f000 f963 	bl	800d338 <I2C_WaitOnTXEFlagUntilTimeout>
 800d072:	4603      	mov	r3, r0
 800d074:	2b00      	cmp	r3, #0
 800d076:	d00d      	beq.n	800d094 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d07c:	2b04      	cmp	r3, #4
 800d07e:	d107      	bne.n	800d090 <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	681a      	ldr	r2, [r3, #0]
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d08e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800d090:	2301      	movs	r3, #1
 800d092:	e075      	b.n	800d180 <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800d094:	88fb      	ldrh	r3, [r7, #6]
 800d096:	2b01      	cmp	r3, #1
 800d098:	d105      	bne.n	800d0a6 <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800d09a:	893b      	ldrh	r3, [r7, #8]
 800d09c:	b2da      	uxtb	r2, r3
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	611a      	str	r2, [r3, #16]
 800d0a4:	e021      	b.n	800d0ea <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800d0a6:	893b      	ldrh	r3, [r7, #8]
 800d0a8:	0a1b      	lsrs	r3, r3, #8
 800d0aa:	b29b      	uxth	r3, r3
 800d0ac:	b2da      	uxtb	r2, r3
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d0b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d0b6:	6a39      	ldr	r1, [r7, #32]
 800d0b8:	68f8      	ldr	r0, [r7, #12]
 800d0ba:	f000 f93d 	bl	800d338 <I2C_WaitOnTXEFlagUntilTimeout>
 800d0be:	4603      	mov	r3, r0
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d00d      	beq.n	800d0e0 <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0c8:	2b04      	cmp	r3, #4
 800d0ca:	d107      	bne.n	800d0dc <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d0cc:	68fb      	ldr	r3, [r7, #12]
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	681a      	ldr	r2, [r3, #0]
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d0da:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800d0dc:	2301      	movs	r3, #1
 800d0de:	e04f      	b.n	800d180 <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800d0e0:	893b      	ldrh	r3, [r7, #8]
 800d0e2:	b2da      	uxtb	r2, r3
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d0ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d0ec:	6a39      	ldr	r1, [r7, #32]
 800d0ee:	68f8      	ldr	r0, [r7, #12]
 800d0f0:	f000 f922 	bl	800d338 <I2C_WaitOnTXEFlagUntilTimeout>
 800d0f4:	4603      	mov	r3, r0
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d00d      	beq.n	800d116 <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0fe:	2b04      	cmp	r3, #4
 800d100:	d107      	bne.n	800d112 <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	681a      	ldr	r2, [r3, #0]
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d110:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800d112:	2301      	movs	r3, #1
 800d114:	e034      	b.n	800d180 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	681a      	ldr	r2, [r3, #0]
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d124:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800d126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d128:	9300      	str	r3, [sp, #0]
 800d12a:	6a3b      	ldr	r3, [r7, #32]
 800d12c:	2200      	movs	r2, #0
 800d12e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800d132:	68f8      	ldr	r0, [r7, #12]
 800d134:	f000 f82a 	bl	800d18c <I2C_WaitOnFlagUntilTimeout>
 800d138:	4603      	mov	r3, r0
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d00c      	beq.n	800d158 <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d003      	beq.n	800d154 <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d152:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800d154:	2303      	movs	r3, #3
 800d156:	e013      	b.n	800d180 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800d158:	897b      	ldrh	r3, [r7, #10]
 800d15a:	b2db      	uxtb	r3, r3
 800d15c:	f043 0301 	orr.w	r3, r3, #1
 800d160:	b2da      	uxtb	r2, r3
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	681b      	ldr	r3, [r3, #0]
 800d166:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800d168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d16a:	6a3a      	ldr	r2, [r7, #32]
 800d16c:	4906      	ldr	r1, [pc, #24]	; (800d188 <I2C_RequestMemoryRead+0x1c8>)
 800d16e:	68f8      	ldr	r0, [r7, #12]
 800d170:	f000 f863 	bl	800d23a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800d174:	4603      	mov	r3, r0
 800d176:	2b00      	cmp	r3, #0
 800d178:	d001      	beq.n	800d17e <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 800d17a:	2301      	movs	r3, #1
 800d17c:	e000      	b.n	800d180 <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 800d17e:	2300      	movs	r3, #0
}
 800d180:	4618      	mov	r0, r3
 800d182:	3718      	adds	r7, #24
 800d184:	46bd      	mov	sp, r7
 800d186:	bd80      	pop	{r7, pc}
 800d188:	00010002 	.word	0x00010002

0800d18c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800d18c:	b580      	push	{r7, lr}
 800d18e:	b084      	sub	sp, #16
 800d190:	af00      	add	r7, sp, #0
 800d192:	60f8      	str	r0, [r7, #12]
 800d194:	60b9      	str	r1, [r7, #8]
 800d196:	603b      	str	r3, [r7, #0]
 800d198:	4613      	mov	r3, r2
 800d19a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d19c:	e025      	b.n	800d1ea <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d19e:	683b      	ldr	r3, [r7, #0]
 800d1a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1a4:	d021      	beq.n	800d1ea <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d1a6:	f7fe f87b 	bl	800b2a0 <HAL_GetTick>
 800d1aa:	4602      	mov	r2, r0
 800d1ac:	69bb      	ldr	r3, [r7, #24]
 800d1ae:	1ad3      	subs	r3, r2, r3
 800d1b0:	683a      	ldr	r2, [r7, #0]
 800d1b2:	429a      	cmp	r2, r3
 800d1b4:	d302      	bcc.n	800d1bc <I2C_WaitOnFlagUntilTimeout+0x30>
 800d1b6:	683b      	ldr	r3, [r7, #0]
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d116      	bne.n	800d1ea <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800d1bc:	68fb      	ldr	r3, [r7, #12]
 800d1be:	2200      	movs	r2, #0
 800d1c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800d1c2:	68fb      	ldr	r3, [r7, #12]
 800d1c4:	2220      	movs	r2, #32
 800d1c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	2200      	movs	r2, #0
 800d1ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d1d6:	f043 0220 	orr.w	r2, r3, #32
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	2200      	movs	r2, #0
 800d1e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800d1e6:	2301      	movs	r3, #1
 800d1e8:	e023      	b.n	800d232 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d1ea:	68bb      	ldr	r3, [r7, #8]
 800d1ec:	0c1b      	lsrs	r3, r3, #16
 800d1ee:	b2db      	uxtb	r3, r3
 800d1f0:	2b01      	cmp	r3, #1
 800d1f2:	d10d      	bne.n	800d210 <I2C_WaitOnFlagUntilTimeout+0x84>
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	695b      	ldr	r3, [r3, #20]
 800d1fa:	43da      	mvns	r2, r3
 800d1fc:	68bb      	ldr	r3, [r7, #8]
 800d1fe:	4013      	ands	r3, r2
 800d200:	b29b      	uxth	r3, r3
 800d202:	2b00      	cmp	r3, #0
 800d204:	bf0c      	ite	eq
 800d206:	2301      	moveq	r3, #1
 800d208:	2300      	movne	r3, #0
 800d20a:	b2db      	uxtb	r3, r3
 800d20c:	461a      	mov	r2, r3
 800d20e:	e00c      	b.n	800d22a <I2C_WaitOnFlagUntilTimeout+0x9e>
 800d210:	68fb      	ldr	r3, [r7, #12]
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	699b      	ldr	r3, [r3, #24]
 800d216:	43da      	mvns	r2, r3
 800d218:	68bb      	ldr	r3, [r7, #8]
 800d21a:	4013      	ands	r3, r2
 800d21c:	b29b      	uxth	r3, r3
 800d21e:	2b00      	cmp	r3, #0
 800d220:	bf0c      	ite	eq
 800d222:	2301      	moveq	r3, #1
 800d224:	2300      	movne	r3, #0
 800d226:	b2db      	uxtb	r3, r3
 800d228:	461a      	mov	r2, r3
 800d22a:	79fb      	ldrb	r3, [r7, #7]
 800d22c:	429a      	cmp	r2, r3
 800d22e:	d0b6      	beq.n	800d19e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800d230:	2300      	movs	r3, #0
}
 800d232:	4618      	mov	r0, r3
 800d234:	3710      	adds	r7, #16
 800d236:	46bd      	mov	sp, r7
 800d238:	bd80      	pop	{r7, pc}

0800d23a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800d23a:	b580      	push	{r7, lr}
 800d23c:	b084      	sub	sp, #16
 800d23e:	af00      	add	r7, sp, #0
 800d240:	60f8      	str	r0, [r7, #12]
 800d242:	60b9      	str	r1, [r7, #8]
 800d244:	607a      	str	r2, [r7, #4]
 800d246:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800d248:	e051      	b.n	800d2ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	695b      	ldr	r3, [r3, #20]
 800d250:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d254:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d258:	d123      	bne.n	800d2a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d25a:	68fb      	ldr	r3, [r7, #12]
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	681a      	ldr	r2, [r3, #0]
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d268:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800d272:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	2200      	movs	r2, #0
 800d278:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	2220      	movs	r2, #32
 800d27e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	2200      	movs	r2, #0
 800d286:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d28e:	f043 0204 	orr.w	r2, r3, #4
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	2200      	movs	r2, #0
 800d29a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800d29e:	2301      	movs	r3, #1
 800d2a0:	e046      	b.n	800d330 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2a8:	d021      	beq.n	800d2ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d2aa:	f7fd fff9 	bl	800b2a0 <HAL_GetTick>
 800d2ae:	4602      	mov	r2, r0
 800d2b0:	683b      	ldr	r3, [r7, #0]
 800d2b2:	1ad3      	subs	r3, r2, r3
 800d2b4:	687a      	ldr	r2, [r7, #4]
 800d2b6:	429a      	cmp	r2, r3
 800d2b8:	d302      	bcc.n	800d2c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d116      	bne.n	800d2ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	2200      	movs	r2, #0
 800d2c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	2220      	movs	r2, #32
 800d2ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	2200      	movs	r2, #0
 800d2d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2da:	f043 0220 	orr.w	r2, r3, #32
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	2200      	movs	r2, #0
 800d2e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800d2ea:	2301      	movs	r3, #1
 800d2ec:	e020      	b.n	800d330 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800d2ee:	68bb      	ldr	r3, [r7, #8]
 800d2f0:	0c1b      	lsrs	r3, r3, #16
 800d2f2:	b2db      	uxtb	r3, r3
 800d2f4:	2b01      	cmp	r3, #1
 800d2f6:	d10c      	bne.n	800d312 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	695b      	ldr	r3, [r3, #20]
 800d2fe:	43da      	mvns	r2, r3
 800d300:	68bb      	ldr	r3, [r7, #8]
 800d302:	4013      	ands	r3, r2
 800d304:	b29b      	uxth	r3, r3
 800d306:	2b00      	cmp	r3, #0
 800d308:	bf14      	ite	ne
 800d30a:	2301      	movne	r3, #1
 800d30c:	2300      	moveq	r3, #0
 800d30e:	b2db      	uxtb	r3, r3
 800d310:	e00b      	b.n	800d32a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	699b      	ldr	r3, [r3, #24]
 800d318:	43da      	mvns	r2, r3
 800d31a:	68bb      	ldr	r3, [r7, #8]
 800d31c:	4013      	ands	r3, r2
 800d31e:	b29b      	uxth	r3, r3
 800d320:	2b00      	cmp	r3, #0
 800d322:	bf14      	ite	ne
 800d324:	2301      	movne	r3, #1
 800d326:	2300      	moveq	r3, #0
 800d328:	b2db      	uxtb	r3, r3
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d18d      	bne.n	800d24a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800d32e:	2300      	movs	r3, #0
}
 800d330:	4618      	mov	r0, r3
 800d332:	3710      	adds	r7, #16
 800d334:	46bd      	mov	sp, r7
 800d336:	bd80      	pop	{r7, pc}

0800d338 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800d338:	b580      	push	{r7, lr}
 800d33a:	b084      	sub	sp, #16
 800d33c:	af00      	add	r7, sp, #0
 800d33e:	60f8      	str	r0, [r7, #12]
 800d340:	60b9      	str	r1, [r7, #8]
 800d342:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800d344:	e02d      	b.n	800d3a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800d346:	68f8      	ldr	r0, [r7, #12]
 800d348:	f000 f8ce 	bl	800d4e8 <I2C_IsAcknowledgeFailed>
 800d34c:	4603      	mov	r3, r0
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d001      	beq.n	800d356 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800d352:	2301      	movs	r3, #1
 800d354:	e02d      	b.n	800d3b2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d356:	68bb      	ldr	r3, [r7, #8]
 800d358:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d35c:	d021      	beq.n	800d3a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d35e:	f7fd ff9f 	bl	800b2a0 <HAL_GetTick>
 800d362:	4602      	mov	r2, r0
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	1ad3      	subs	r3, r2, r3
 800d368:	68ba      	ldr	r2, [r7, #8]
 800d36a:	429a      	cmp	r2, r3
 800d36c:	d302      	bcc.n	800d374 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800d36e:	68bb      	ldr	r3, [r7, #8]
 800d370:	2b00      	cmp	r3, #0
 800d372:	d116      	bne.n	800d3a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	2200      	movs	r2, #0
 800d378:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	2220      	movs	r2, #32
 800d37e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	2200      	movs	r2, #0
 800d386:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d38e:	f043 0220 	orr.w	r2, r3, #32
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	2200      	movs	r2, #0
 800d39a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800d39e:	2301      	movs	r3, #1
 800d3a0:	e007      	b.n	800d3b2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	695b      	ldr	r3, [r3, #20]
 800d3a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d3ac:	2b80      	cmp	r3, #128	; 0x80
 800d3ae:	d1ca      	bne.n	800d346 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800d3b0:	2300      	movs	r3, #0
}
 800d3b2:	4618      	mov	r0, r3
 800d3b4:	3710      	adds	r7, #16
 800d3b6:	46bd      	mov	sp, r7
 800d3b8:	bd80      	pop	{r7, pc}

0800d3ba <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800d3ba:	b580      	push	{r7, lr}
 800d3bc:	b084      	sub	sp, #16
 800d3be:	af00      	add	r7, sp, #0
 800d3c0:	60f8      	str	r0, [r7, #12]
 800d3c2:	60b9      	str	r1, [r7, #8]
 800d3c4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800d3c6:	e02d      	b.n	800d424 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800d3c8:	68f8      	ldr	r0, [r7, #12]
 800d3ca:	f000 f88d 	bl	800d4e8 <I2C_IsAcknowledgeFailed>
 800d3ce:	4603      	mov	r3, r0
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d001      	beq.n	800d3d8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800d3d4:	2301      	movs	r3, #1
 800d3d6:	e02d      	b.n	800d434 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d3d8:	68bb      	ldr	r3, [r7, #8]
 800d3da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3de:	d021      	beq.n	800d424 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d3e0:	f7fd ff5e 	bl	800b2a0 <HAL_GetTick>
 800d3e4:	4602      	mov	r2, r0
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	1ad3      	subs	r3, r2, r3
 800d3ea:	68ba      	ldr	r2, [r7, #8]
 800d3ec:	429a      	cmp	r2, r3
 800d3ee:	d302      	bcc.n	800d3f6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800d3f0:	68bb      	ldr	r3, [r7, #8]
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d116      	bne.n	800d424 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	2200      	movs	r2, #0
 800d3fa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	2220      	movs	r2, #32
 800d400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	2200      	movs	r2, #0
 800d408:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d410:	f043 0220 	orr.w	r2, r3, #32
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	2200      	movs	r2, #0
 800d41c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800d420:	2301      	movs	r3, #1
 800d422:	e007      	b.n	800d434 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	695b      	ldr	r3, [r3, #20]
 800d42a:	f003 0304 	and.w	r3, r3, #4
 800d42e:	2b04      	cmp	r3, #4
 800d430:	d1ca      	bne.n	800d3c8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800d432:	2300      	movs	r3, #0
}
 800d434:	4618      	mov	r0, r3
 800d436:	3710      	adds	r7, #16
 800d438:	46bd      	mov	sp, r7
 800d43a:	bd80      	pop	{r7, pc}

0800d43c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800d43c:	b580      	push	{r7, lr}
 800d43e:	b084      	sub	sp, #16
 800d440:	af00      	add	r7, sp, #0
 800d442:	60f8      	str	r0, [r7, #12]
 800d444:	60b9      	str	r1, [r7, #8]
 800d446:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800d448:	e042      	b.n	800d4d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	695b      	ldr	r3, [r3, #20]
 800d450:	f003 0310 	and.w	r3, r3, #16
 800d454:	2b10      	cmp	r3, #16
 800d456:	d119      	bne.n	800d48c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	f06f 0210 	mvn.w	r2, #16
 800d460:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	2200      	movs	r2, #0
 800d466:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	2220      	movs	r2, #32
 800d46c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	2200      	movs	r2, #0
 800d474:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	2200      	movs	r2, #0
 800d484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800d488:	2301      	movs	r3, #1
 800d48a:	e029      	b.n	800d4e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d48c:	f7fd ff08 	bl	800b2a0 <HAL_GetTick>
 800d490:	4602      	mov	r2, r0
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	1ad3      	subs	r3, r2, r3
 800d496:	68ba      	ldr	r2, [r7, #8]
 800d498:	429a      	cmp	r2, r3
 800d49a:	d302      	bcc.n	800d4a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800d49c:	68bb      	ldr	r3, [r7, #8]
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d116      	bne.n	800d4d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	2200      	movs	r2, #0
 800d4a6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	2220      	movs	r2, #32
 800d4ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	2200      	movs	r2, #0
 800d4b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4bc:	f043 0220 	orr.w	r2, r3, #32
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	2200      	movs	r2, #0
 800d4c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800d4cc:	2301      	movs	r3, #1
 800d4ce:	e007      	b.n	800d4e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	695b      	ldr	r3, [r3, #20]
 800d4d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d4da:	2b40      	cmp	r3, #64	; 0x40
 800d4dc:	d1b5      	bne.n	800d44a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800d4de:	2300      	movs	r3, #0
}
 800d4e0:	4618      	mov	r0, r3
 800d4e2:	3710      	adds	r7, #16
 800d4e4:	46bd      	mov	sp, r7
 800d4e6:	bd80      	pop	{r7, pc}

0800d4e8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800d4e8:	b480      	push	{r7}
 800d4ea:	b083      	sub	sp, #12
 800d4ec:	af00      	add	r7, sp, #0
 800d4ee:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	695b      	ldr	r3, [r3, #20]
 800d4f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d4fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d4fe:	d11b      	bne.n	800d538 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800d508:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	2200      	movs	r2, #0
 800d50e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	2220      	movs	r2, #32
 800d514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	2200      	movs	r2, #0
 800d51c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d524:	f043 0204 	orr.w	r2, r3, #4
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	2200      	movs	r2, #0
 800d530:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800d534:	2301      	movs	r3, #1
 800d536:	e000      	b.n	800d53a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800d538:	2300      	movs	r3, #0
}
 800d53a:	4618      	mov	r0, r3
 800d53c:	370c      	adds	r7, #12
 800d53e:	46bd      	mov	sp, r7
 800d540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d544:	4770      	bx	lr

0800d546 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800d546:	b480      	push	{r7}
 800d548:	b083      	sub	sp, #12
 800d54a:	af00      	add	r7, sp, #0
 800d54c:	6078      	str	r0, [r7, #4]
 800d54e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d556:	b2db      	uxtb	r3, r3
 800d558:	2b20      	cmp	r3, #32
 800d55a:	d129      	bne.n	800d5b0 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	2224      	movs	r2, #36	; 0x24
 800d560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	681a      	ldr	r2, [r3, #0]
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	f022 0201 	bic.w	r2, r2, #1
 800d572:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	f022 0210 	bic.w	r2, r2, #16
 800d582:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	683a      	ldr	r2, [r7, #0]
 800d590:	430a      	orrs	r2, r1
 800d592:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	681a      	ldr	r2, [r3, #0]
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	f042 0201 	orr.w	r2, r2, #1
 800d5a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	2220      	movs	r2, #32
 800d5a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800d5ac:	2300      	movs	r3, #0
 800d5ae:	e000      	b.n	800d5b2 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800d5b0:	2302      	movs	r3, #2
  }
}
 800d5b2:	4618      	mov	r0, r3
 800d5b4:	370c      	adds	r7, #12
 800d5b6:	46bd      	mov	sp, r7
 800d5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5bc:	4770      	bx	lr

0800d5be <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800d5be:	b480      	push	{r7}
 800d5c0:	b085      	sub	sp, #20
 800d5c2:	af00      	add	r7, sp, #0
 800d5c4:	6078      	str	r0, [r7, #4]
 800d5c6:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800d5c8:	2300      	movs	r3, #0
 800d5ca:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d5d2:	b2db      	uxtb	r3, r3
 800d5d4:	2b20      	cmp	r3, #32
 800d5d6:	d12a      	bne.n	800d62e <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	2224      	movs	r2, #36	; 0x24
 800d5dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	681a      	ldr	r2, [r3, #0]
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	f022 0201 	bic.w	r2, r2, #1
 800d5ee:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5f6:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800d5f8:	89fb      	ldrh	r3, [r7, #14]
 800d5fa:	f023 030f 	bic.w	r3, r3, #15
 800d5fe:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800d600:	683b      	ldr	r3, [r7, #0]
 800d602:	b29a      	uxth	r2, r3
 800d604:	89fb      	ldrh	r3, [r7, #14]
 800d606:	4313      	orrs	r3, r2
 800d608:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	89fa      	ldrh	r2, [r7, #14]
 800d610:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	681a      	ldr	r2, [r3, #0]
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	f042 0201 	orr.w	r2, r2, #1
 800d620:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	2220      	movs	r2, #32
 800d626:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800d62a:	2300      	movs	r3, #0
 800d62c:	e000      	b.n	800d630 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800d62e:	2302      	movs	r3, #2
  }
}
 800d630:	4618      	mov	r0, r3
 800d632:	3714      	adds	r7, #20
 800d634:	46bd      	mov	sp, r7
 800d636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d63a:	4770      	bx	lr

0800d63c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800d63c:	b580      	push	{r7, lr}
 800d63e:	b084      	sub	sp, #16
 800d640:	af00      	add	r7, sp, #0
 800d642:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	2b00      	cmp	r3, #0
 800d648:	d101      	bne.n	800d64e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800d64a:	2301      	movs	r3, #1
 800d64c:	e0bf      	b.n	800d7ce <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800d654:	b2db      	uxtb	r3, r3
 800d656:	2b00      	cmp	r3, #0
 800d658:	d106      	bne.n	800d668 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	2200      	movs	r2, #0
 800d65e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800d662:	6878      	ldr	r0, [r7, #4]
 800d664:	f7fa f8c4 	bl	80077f0 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	2202      	movs	r2, #2
 800d66c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	699a      	ldr	r2, [r3, #24]
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800d67e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	6999      	ldr	r1, [r3, #24]
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	685a      	ldr	r2, [r3, #4]
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	689b      	ldr	r3, [r3, #8]
 800d68e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800d694:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	691b      	ldr	r3, [r3, #16]
 800d69a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	430a      	orrs	r2, r1
 800d6a2:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	6899      	ldr	r1, [r3, #8]
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	681a      	ldr	r2, [r3, #0]
 800d6ae:	4b4a      	ldr	r3, [pc, #296]	; (800d7d8 <HAL_LTDC_Init+0x19c>)
 800d6b0:	400b      	ands	r3, r1
 800d6b2:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	695b      	ldr	r3, [r3, #20]
 800d6b8:	041b      	lsls	r3, r3, #16
 800d6ba:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	6899      	ldr	r1, [r3, #8]
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	699a      	ldr	r2, [r3, #24]
 800d6c6:	68fb      	ldr	r3, [r7, #12]
 800d6c8:	431a      	orrs	r2, r3
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	430a      	orrs	r2, r1
 800d6d0:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	68d9      	ldr	r1, [r3, #12]
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	681a      	ldr	r2, [r3, #0]
 800d6dc:	4b3e      	ldr	r3, [pc, #248]	; (800d7d8 <HAL_LTDC_Init+0x19c>)
 800d6de:	400b      	ands	r3, r1
 800d6e0:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	69db      	ldr	r3, [r3, #28]
 800d6e6:	041b      	lsls	r3, r3, #16
 800d6e8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	68d9      	ldr	r1, [r3, #12]
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	6a1a      	ldr	r2, [r3, #32]
 800d6f4:	68fb      	ldr	r3, [r7, #12]
 800d6f6:	431a      	orrs	r2, r3
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	430a      	orrs	r2, r1
 800d6fe:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	6919      	ldr	r1, [r3, #16]
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	681a      	ldr	r2, [r3, #0]
 800d70a:	4b33      	ldr	r3, [pc, #204]	; (800d7d8 <HAL_LTDC_Init+0x19c>)
 800d70c:	400b      	ands	r3, r1
 800d70e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d714:	041b      	lsls	r3, r3, #16
 800d716:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	6919      	ldr	r1, [r3, #16]
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	431a      	orrs	r2, r3
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	430a      	orrs	r2, r1
 800d72c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	6959      	ldr	r1, [r3, #20]
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	681a      	ldr	r2, [r3, #0]
 800d738:	4b27      	ldr	r3, [pc, #156]	; (800d7d8 <HAL_LTDC_Init+0x19c>)
 800d73a:	400b      	ands	r3, r1
 800d73c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d742:	041b      	lsls	r3, r3, #16
 800d744:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	681b      	ldr	r3, [r3, #0]
 800d74a:	6959      	ldr	r1, [r3, #20]
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d750:	68fb      	ldr	r3, [r7, #12]
 800d752:	431a      	orrs	r2, r3
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	430a      	orrs	r2, r1
 800d75a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800d762:	021b      	lsls	r3, r3, #8
 800d764:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800d76c:	041b      	lsls	r3, r3, #16
 800d76e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800d77e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800d786:	68ba      	ldr	r2, [r7, #8]
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	4313      	orrs	r3, r2
 800d78c:	687a      	ldr	r2, [r7, #4]
 800d78e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800d792:	431a      	orrs	r2, r3
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	430a      	orrs	r2, r1
 800d79a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	f042 0206 	orr.w	r2, r2, #6
 800d7aa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	699a      	ldr	r2, [r3, #24]
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	f042 0201 	orr.w	r2, r2, #1
 800d7ba:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	2200      	movs	r2, #0
 800d7c0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	2201      	movs	r2, #1
 800d7c8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800d7cc:	2300      	movs	r3, #0
}
 800d7ce:	4618      	mov	r0, r3
 800d7d0:	3710      	adds	r7, #16
 800d7d2:	46bd      	mov	sp, r7
 800d7d4:	bd80      	pop	{r7, pc}
 800d7d6:	bf00      	nop
 800d7d8:	f000f800 	.word	0xf000f800

0800d7dc <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800d7dc:	b5b0      	push	{r4, r5, r7, lr}
 800d7de:	b084      	sub	sp, #16
 800d7e0:	af00      	add	r7, sp, #0
 800d7e2:	60f8      	str	r0, [r7, #12]
 800d7e4:	60b9      	str	r1, [r7, #8]
 800d7e6:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800d7ee:	2b01      	cmp	r3, #1
 800d7f0:	d101      	bne.n	800d7f6 <HAL_LTDC_ConfigLayer+0x1a>
 800d7f2:	2302      	movs	r3, #2
 800d7f4:	e02c      	b.n	800d850 <HAL_LTDC_ConfigLayer+0x74>
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	2201      	movs	r2, #1
 800d7fa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	2202      	movs	r2, #2
 800d802:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800d806:	68fa      	ldr	r2, [r7, #12]
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	2134      	movs	r1, #52	; 0x34
 800d80c:	fb01 f303 	mul.w	r3, r1, r3
 800d810:	4413      	add	r3, r2
 800d812:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800d816:	68bb      	ldr	r3, [r7, #8]
 800d818:	4614      	mov	r4, r2
 800d81a:	461d      	mov	r5, r3
 800d81c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d81e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d820:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d822:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d824:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d826:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d828:	682b      	ldr	r3, [r5, #0]
 800d82a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800d82c:	687a      	ldr	r2, [r7, #4]
 800d82e:	68b9      	ldr	r1, [r7, #8]
 800d830:	68f8      	ldr	r0, [r7, #12]
 800d832:	f000 f871 	bl	800d918 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	2201      	movs	r2, #1
 800d83c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	2201      	movs	r2, #1
 800d842:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800d846:	68fb      	ldr	r3, [r7, #12]
 800d848:	2200      	movs	r2, #0
 800d84a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800d84e:	2300      	movs	r3, #0
}
 800d850:	4618      	mov	r0, r3
 800d852:	3710      	adds	r7, #16
 800d854:	46bd      	mov	sp, r7
 800d856:	bdb0      	pop	{r4, r5, r7, pc}

0800d858 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 800d858:	b480      	push	{r7}
 800d85a:	b083      	sub	sp, #12
 800d85c:	af00      	add	r7, sp, #0
 800d85e:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800d866:	2b01      	cmp	r3, #1
 800d868:	d101      	bne.n	800d86e <HAL_LTDC_EnableDither+0x16>
 800d86a:	2302      	movs	r3, #2
 800d86c:	e016      	b.n	800d89c <HAL_LTDC_EnableDither+0x44>
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	2201      	movs	r2, #1
 800d872:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	2202      	movs	r2, #2
 800d87a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 800d87e:	4b0a      	ldr	r3, [pc, #40]	; (800d8a8 <HAL_LTDC_EnableDither+0x50>)
 800d880:	699b      	ldr	r3, [r3, #24]
 800d882:	4a09      	ldr	r2, [pc, #36]	; (800d8a8 <HAL_LTDC_EnableDither+0x50>)
 800d884:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d888:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	2201      	movs	r2, #1
 800d88e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	2200      	movs	r2, #0
 800d896:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800d89a:	2300      	movs	r3, #0
}
 800d89c:	4618      	mov	r0, r3
 800d89e:	370c      	adds	r7, #12
 800d8a0:	46bd      	mov	sp, r7
 800d8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8a6:	4770      	bx	lr
 800d8a8:	40016800 	.word	0x40016800

0800d8ac <HAL_LTDC_SetAlpha>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetAlpha(LTDC_HandleTypeDef *hltdc, uint32_t Alpha, uint32_t LayerIdx)
{
 800d8ac:	b580      	push	{r7, lr}
 800d8ae:	b086      	sub	sp, #24
 800d8b0:	af00      	add	r7, sp, #0
 800d8b2:	60f8      	str	r0, [r7, #12]
 800d8b4:	60b9      	str	r1, [r7, #8]
 800d8b6:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LTDC_ALPHA(Alpha));
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800d8b8:	68fb      	ldr	r3, [r7, #12]
 800d8ba:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800d8be:	2b01      	cmp	r3, #1
 800d8c0:	d101      	bne.n	800d8c6 <HAL_LTDC_SetAlpha+0x1a>
 800d8c2:	2302      	movs	r3, #2
 800d8c4:	e024      	b.n	800d910 <HAL_LTDC_SetAlpha+0x64>
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	2201      	movs	r2, #1
 800d8ca:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800d8ce:	68fb      	ldr	r3, [r7, #12]
 800d8d0:	2202      	movs	r2, #2
 800d8d2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	2234      	movs	r2, #52	; 0x34
 800d8da:	fb02 f303 	mul.w	r3, r2, r3
 800d8de:	3338      	adds	r3, #56	; 0x38
 800d8e0:	68fa      	ldr	r2, [r7, #12]
 800d8e2:	4413      	add	r3, r2
 800d8e4:	617b      	str	r3, [r7, #20]

  /* Reconfigure the Alpha value */
  pLayerCfg->Alpha = Alpha;
 800d8e6:	697b      	ldr	r3, [r7, #20]
 800d8e8:	68ba      	ldr	r2, [r7, #8]
 800d8ea:	615a      	str	r2, [r3, #20]

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800d8ec:	687a      	ldr	r2, [r7, #4]
 800d8ee:	6979      	ldr	r1, [r7, #20]
 800d8f0:	68f8      	ldr	r0, [r7, #12]
 800d8f2:	f000 f811 	bl	800d918 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800d8f6:	68fb      	ldr	r3, [r7, #12]
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	2201      	movs	r2, #1
 800d8fc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	2201      	movs	r2, #1
 800d902:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	2200      	movs	r2, #0
 800d90a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800d90e:	2300      	movs	r3, #0
}
 800d910:	4618      	mov	r0, r3
 800d912:	3718      	adds	r7, #24
 800d914:	46bd      	mov	sp, r7
 800d916:	bd80      	pop	{r7, pc}

0800d918 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800d918:	b480      	push	{r7}
 800d91a:	b089      	sub	sp, #36	; 0x24
 800d91c:	af00      	add	r7, sp, #0
 800d91e:	60f8      	str	r0, [r7, #12]
 800d920:	60b9      	str	r1, [r7, #8]
 800d922:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800d924:	68bb      	ldr	r3, [r7, #8]
 800d926:	685a      	ldr	r2, [r3, #4]
 800d928:	68fb      	ldr	r3, [r7, #12]
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	68db      	ldr	r3, [r3, #12]
 800d92e:	0c1b      	lsrs	r3, r3, #16
 800d930:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d934:	4413      	add	r3, r2
 800d936:	041b      	lsls	r3, r3, #16
 800d938:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800d93a:	68fb      	ldr	r3, [r7, #12]
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	461a      	mov	r2, r3
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	01db      	lsls	r3, r3, #7
 800d944:	4413      	add	r3, r2
 800d946:	3384      	adds	r3, #132	; 0x84
 800d948:	685b      	ldr	r3, [r3, #4]
 800d94a:	68fa      	ldr	r2, [r7, #12]
 800d94c:	6812      	ldr	r2, [r2, #0]
 800d94e:	4611      	mov	r1, r2
 800d950:	687a      	ldr	r2, [r7, #4]
 800d952:	01d2      	lsls	r2, r2, #7
 800d954:	440a      	add	r2, r1
 800d956:	3284      	adds	r2, #132	; 0x84
 800d958:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800d95c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800d95e:	68bb      	ldr	r3, [r7, #8]
 800d960:	681a      	ldr	r2, [r3, #0]
 800d962:	68fb      	ldr	r3, [r7, #12]
 800d964:	681b      	ldr	r3, [r3, #0]
 800d966:	68db      	ldr	r3, [r3, #12]
 800d968:	0c1b      	lsrs	r3, r3, #16
 800d96a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d96e:	4413      	add	r3, r2
 800d970:	1c5a      	adds	r2, r3, #1
 800d972:	68fb      	ldr	r3, [r7, #12]
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	4619      	mov	r1, r3
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	01db      	lsls	r3, r3, #7
 800d97c:	440b      	add	r3, r1
 800d97e:	3384      	adds	r3, #132	; 0x84
 800d980:	4619      	mov	r1, r3
 800d982:	69fb      	ldr	r3, [r7, #28]
 800d984:	4313      	orrs	r3, r2
 800d986:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800d988:	68bb      	ldr	r3, [r7, #8]
 800d98a:	68da      	ldr	r2, [r3, #12]
 800d98c:	68fb      	ldr	r3, [r7, #12]
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	68db      	ldr	r3, [r3, #12]
 800d992:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d996:	4413      	add	r3, r2
 800d998:	041b      	lsls	r3, r3, #16
 800d99a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800d99c:	68fb      	ldr	r3, [r7, #12]
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	461a      	mov	r2, r3
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	01db      	lsls	r3, r3, #7
 800d9a6:	4413      	add	r3, r2
 800d9a8:	3384      	adds	r3, #132	; 0x84
 800d9aa:	689b      	ldr	r3, [r3, #8]
 800d9ac:	68fa      	ldr	r2, [r7, #12]
 800d9ae:	6812      	ldr	r2, [r2, #0]
 800d9b0:	4611      	mov	r1, r2
 800d9b2:	687a      	ldr	r2, [r7, #4]
 800d9b4:	01d2      	lsls	r2, r2, #7
 800d9b6:	440a      	add	r2, r1
 800d9b8:	3284      	adds	r2, #132	; 0x84
 800d9ba:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800d9be:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800d9c0:	68bb      	ldr	r3, [r7, #8]
 800d9c2:	689a      	ldr	r2, [r3, #8]
 800d9c4:	68fb      	ldr	r3, [r7, #12]
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	68db      	ldr	r3, [r3, #12]
 800d9ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d9ce:	4413      	add	r3, r2
 800d9d0:	1c5a      	adds	r2, r3, #1
 800d9d2:	68fb      	ldr	r3, [r7, #12]
 800d9d4:	681b      	ldr	r3, [r3, #0]
 800d9d6:	4619      	mov	r1, r3
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	01db      	lsls	r3, r3, #7
 800d9dc:	440b      	add	r3, r1
 800d9de:	3384      	adds	r3, #132	; 0x84
 800d9e0:	4619      	mov	r1, r3
 800d9e2:	69fb      	ldr	r3, [r7, #28]
 800d9e4:	4313      	orrs	r3, r2
 800d9e6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800d9e8:	68fb      	ldr	r3, [r7, #12]
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	461a      	mov	r2, r3
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	01db      	lsls	r3, r3, #7
 800d9f2:	4413      	add	r3, r2
 800d9f4:	3384      	adds	r3, #132	; 0x84
 800d9f6:	691b      	ldr	r3, [r3, #16]
 800d9f8:	68fa      	ldr	r2, [r7, #12]
 800d9fa:	6812      	ldr	r2, [r2, #0]
 800d9fc:	4611      	mov	r1, r2
 800d9fe:	687a      	ldr	r2, [r7, #4]
 800da00:	01d2      	lsls	r2, r2, #7
 800da02:	440a      	add	r2, r1
 800da04:	3284      	adds	r2, #132	; 0x84
 800da06:	f023 0307 	bic.w	r3, r3, #7
 800da0a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	461a      	mov	r2, r3
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	01db      	lsls	r3, r3, #7
 800da16:	4413      	add	r3, r2
 800da18:	3384      	adds	r3, #132	; 0x84
 800da1a:	461a      	mov	r2, r3
 800da1c:	68bb      	ldr	r3, [r7, #8]
 800da1e:	691b      	ldr	r3, [r3, #16]
 800da20:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800da22:	68bb      	ldr	r3, [r7, #8]
 800da24:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800da28:	021b      	lsls	r3, r3, #8
 800da2a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800da2c:	68bb      	ldr	r3, [r7, #8]
 800da2e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800da32:	041b      	lsls	r3, r3, #16
 800da34:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800da36:	68bb      	ldr	r3, [r7, #8]
 800da38:	699b      	ldr	r3, [r3, #24]
 800da3a:	061b      	lsls	r3, r3, #24
 800da3c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800da3e:	68fb      	ldr	r3, [r7, #12]
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	461a      	mov	r2, r3
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	01db      	lsls	r3, r3, #7
 800da48:	4413      	add	r3, r2
 800da4a:	3384      	adds	r3, #132	; 0x84
 800da4c:	699b      	ldr	r3, [r3, #24]
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	461a      	mov	r2, r3
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	01db      	lsls	r3, r3, #7
 800da58:	4413      	add	r3, r2
 800da5a:	3384      	adds	r3, #132	; 0x84
 800da5c:	461a      	mov	r2, r3
 800da5e:	2300      	movs	r3, #0
 800da60:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800da62:	68bb      	ldr	r3, [r7, #8]
 800da64:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800da68:	461a      	mov	r2, r3
 800da6a:	69fb      	ldr	r3, [r7, #28]
 800da6c:	431a      	orrs	r2, r3
 800da6e:	69bb      	ldr	r3, [r7, #24]
 800da70:	431a      	orrs	r2, r3
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	681b      	ldr	r3, [r3, #0]
 800da76:	4619      	mov	r1, r3
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	01db      	lsls	r3, r3, #7
 800da7c:	440b      	add	r3, r1
 800da7e:	3384      	adds	r3, #132	; 0x84
 800da80:	4619      	mov	r1, r3
 800da82:	697b      	ldr	r3, [r7, #20]
 800da84:	4313      	orrs	r3, r2
 800da86:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800da88:	68fb      	ldr	r3, [r7, #12]
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	461a      	mov	r2, r3
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	01db      	lsls	r3, r3, #7
 800da92:	4413      	add	r3, r2
 800da94:	3384      	adds	r3, #132	; 0x84
 800da96:	695b      	ldr	r3, [r3, #20]
 800da98:	68fa      	ldr	r2, [r7, #12]
 800da9a:	6812      	ldr	r2, [r2, #0]
 800da9c:	4611      	mov	r1, r2
 800da9e:	687a      	ldr	r2, [r7, #4]
 800daa0:	01d2      	lsls	r2, r2, #7
 800daa2:	440a      	add	r2, r1
 800daa4:	3284      	adds	r2, #132	; 0x84
 800daa6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800daaa:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800daac:	68fb      	ldr	r3, [r7, #12]
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	461a      	mov	r2, r3
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	01db      	lsls	r3, r3, #7
 800dab6:	4413      	add	r3, r2
 800dab8:	3384      	adds	r3, #132	; 0x84
 800daba:	461a      	mov	r2, r3
 800dabc:	68bb      	ldr	r3, [r7, #8]
 800dabe:	695b      	ldr	r3, [r3, #20]
 800dac0:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	461a      	mov	r2, r3
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	01db      	lsls	r3, r3, #7
 800dacc:	4413      	add	r3, r2
 800dace:	3384      	adds	r3, #132	; 0x84
 800dad0:	69db      	ldr	r3, [r3, #28]
 800dad2:	68fa      	ldr	r2, [r7, #12]
 800dad4:	6812      	ldr	r2, [r2, #0]
 800dad6:	4611      	mov	r1, r2
 800dad8:	687a      	ldr	r2, [r7, #4]
 800dada:	01d2      	lsls	r2, r2, #7
 800dadc:	440a      	add	r2, r1
 800dade:	3284      	adds	r2, #132	; 0x84
 800dae0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800dae4:	f023 0307 	bic.w	r3, r3, #7
 800dae8:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800daea:	68bb      	ldr	r3, [r7, #8]
 800daec:	69da      	ldr	r2, [r3, #28]
 800daee:	68bb      	ldr	r3, [r7, #8]
 800daf0:	6a1b      	ldr	r3, [r3, #32]
 800daf2:	68f9      	ldr	r1, [r7, #12]
 800daf4:	6809      	ldr	r1, [r1, #0]
 800daf6:	4608      	mov	r0, r1
 800daf8:	6879      	ldr	r1, [r7, #4]
 800dafa:	01c9      	lsls	r1, r1, #7
 800dafc:	4401      	add	r1, r0
 800dafe:	3184      	adds	r1, #132	; 0x84
 800db00:	4313      	orrs	r3, r2
 800db02:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	461a      	mov	r2, r3
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	01db      	lsls	r3, r3, #7
 800db0e:	4413      	add	r3, r2
 800db10:	3384      	adds	r3, #132	; 0x84
 800db12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db14:	68fb      	ldr	r3, [r7, #12]
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	461a      	mov	r2, r3
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	01db      	lsls	r3, r3, #7
 800db1e:	4413      	add	r3, r2
 800db20:	3384      	adds	r3, #132	; 0x84
 800db22:	461a      	mov	r2, r3
 800db24:	2300      	movs	r3, #0
 800db26:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800db28:	68fb      	ldr	r3, [r7, #12]
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	461a      	mov	r2, r3
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	01db      	lsls	r3, r3, #7
 800db32:	4413      	add	r3, r2
 800db34:	3384      	adds	r3, #132	; 0x84
 800db36:	461a      	mov	r2, r3
 800db38:	68bb      	ldr	r3, [r7, #8]
 800db3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db3c:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800db3e:	68bb      	ldr	r3, [r7, #8]
 800db40:	691b      	ldr	r3, [r3, #16]
 800db42:	2b00      	cmp	r3, #0
 800db44:	d102      	bne.n	800db4c <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 800db46:	2304      	movs	r3, #4
 800db48:	61fb      	str	r3, [r7, #28]
 800db4a:	e01b      	b.n	800db84 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800db4c:	68bb      	ldr	r3, [r7, #8]
 800db4e:	691b      	ldr	r3, [r3, #16]
 800db50:	2b01      	cmp	r3, #1
 800db52:	d102      	bne.n	800db5a <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 800db54:	2303      	movs	r3, #3
 800db56:	61fb      	str	r3, [r7, #28]
 800db58:	e014      	b.n	800db84 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800db5a:	68bb      	ldr	r3, [r7, #8]
 800db5c:	691b      	ldr	r3, [r3, #16]
 800db5e:	2b04      	cmp	r3, #4
 800db60:	d00b      	beq.n	800db7a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800db62:	68bb      	ldr	r3, [r7, #8]
 800db64:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800db66:	2b02      	cmp	r3, #2
 800db68:	d007      	beq.n	800db7a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800db6a:	68bb      	ldr	r3, [r7, #8]
 800db6c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800db6e:	2b03      	cmp	r3, #3
 800db70:	d003      	beq.n	800db7a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800db72:	68bb      	ldr	r3, [r7, #8]
 800db74:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800db76:	2b07      	cmp	r3, #7
 800db78:	d102      	bne.n	800db80 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 800db7a:	2302      	movs	r3, #2
 800db7c:	61fb      	str	r3, [r7, #28]
 800db7e:	e001      	b.n	800db84 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 800db80:	2301      	movs	r3, #1
 800db82:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800db84:	68fb      	ldr	r3, [r7, #12]
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	461a      	mov	r2, r3
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	01db      	lsls	r3, r3, #7
 800db8e:	4413      	add	r3, r2
 800db90:	3384      	adds	r3, #132	; 0x84
 800db92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db94:	68fa      	ldr	r2, [r7, #12]
 800db96:	6812      	ldr	r2, [r2, #0]
 800db98:	4611      	mov	r1, r2
 800db9a:	687a      	ldr	r2, [r7, #4]
 800db9c:	01d2      	lsls	r2, r2, #7
 800db9e:	440a      	add	r2, r1
 800dba0:	3284      	adds	r2, #132	; 0x84
 800dba2:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800dba6:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800dba8:	68bb      	ldr	r3, [r7, #8]
 800dbaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dbac:	69fa      	ldr	r2, [r7, #28]
 800dbae:	fb02 f303 	mul.w	r3, r2, r3
 800dbb2:	041a      	lsls	r2, r3, #16
 800dbb4:	68bb      	ldr	r3, [r7, #8]
 800dbb6:	6859      	ldr	r1, [r3, #4]
 800dbb8:	68bb      	ldr	r3, [r7, #8]
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	1acb      	subs	r3, r1, r3
 800dbbe:	69f9      	ldr	r1, [r7, #28]
 800dbc0:	fb01 f303 	mul.w	r3, r1, r3
 800dbc4:	3303      	adds	r3, #3
 800dbc6:	68f9      	ldr	r1, [r7, #12]
 800dbc8:	6809      	ldr	r1, [r1, #0]
 800dbca:	4608      	mov	r0, r1
 800dbcc:	6879      	ldr	r1, [r7, #4]
 800dbce:	01c9      	lsls	r1, r1, #7
 800dbd0:	4401      	add	r1, r0
 800dbd2:	3184      	adds	r1, #132	; 0x84
 800dbd4:	4313      	orrs	r3, r2
 800dbd6:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	461a      	mov	r2, r3
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	01db      	lsls	r3, r3, #7
 800dbe2:	4413      	add	r3, r2
 800dbe4:	3384      	adds	r3, #132	; 0x84
 800dbe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dbe8:	68fa      	ldr	r2, [r7, #12]
 800dbea:	6812      	ldr	r2, [r2, #0]
 800dbec:	4611      	mov	r1, r2
 800dbee:	687a      	ldr	r2, [r7, #4]
 800dbf0:	01d2      	lsls	r2, r2, #7
 800dbf2:	440a      	add	r2, r1
 800dbf4:	3284      	adds	r2, #132	; 0x84
 800dbf6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800dbfa:	f023 0307 	bic.w	r3, r3, #7
 800dbfe:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800dc00:	68fb      	ldr	r3, [r7, #12]
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	461a      	mov	r2, r3
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	01db      	lsls	r3, r3, #7
 800dc0a:	4413      	add	r3, r2
 800dc0c:	3384      	adds	r3, #132	; 0x84
 800dc0e:	461a      	mov	r2, r3
 800dc10:	68bb      	ldr	r3, [r7, #8]
 800dc12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc14:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	461a      	mov	r2, r3
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	01db      	lsls	r3, r3, #7
 800dc20:	4413      	add	r3, r2
 800dc22:	3384      	adds	r3, #132	; 0x84
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	68fa      	ldr	r2, [r7, #12]
 800dc28:	6812      	ldr	r2, [r2, #0]
 800dc2a:	4611      	mov	r1, r2
 800dc2c:	687a      	ldr	r2, [r7, #4]
 800dc2e:	01d2      	lsls	r2, r2, #7
 800dc30:	440a      	add	r2, r1
 800dc32:	3284      	adds	r2, #132	; 0x84
 800dc34:	f043 0301 	orr.w	r3, r3, #1
 800dc38:	6013      	str	r3, [r2, #0]
}
 800dc3a:	bf00      	nop
 800dc3c:	3724      	adds	r7, #36	; 0x24
 800dc3e:	46bd      	mov	sp, r7
 800dc40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc44:	4770      	bx	lr
	...

0800dc48 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800dc48:	b580      	push	{r7, lr}
 800dc4a:	b086      	sub	sp, #24
 800dc4c:	af00      	add	r7, sp, #0
 800dc4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	d101      	bne.n	800dc5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800dc56:	2301      	movs	r3, #1
 800dc58:	e25e      	b.n	800e118 <HAL_RCC_OscConfig+0x4d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	681b      	ldr	r3, [r3, #0]
 800dc5e:	f003 0301 	and.w	r3, r3, #1
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d075      	beq.n	800dd52 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800dc66:	4b88      	ldr	r3, [pc, #544]	; (800de88 <HAL_RCC_OscConfig+0x240>)
 800dc68:	689b      	ldr	r3, [r3, #8]
 800dc6a:	f003 030c 	and.w	r3, r3, #12
 800dc6e:	2b04      	cmp	r3, #4
 800dc70:	d00c      	beq.n	800dc8c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800dc72:	4b85      	ldr	r3, [pc, #532]	; (800de88 <HAL_RCC_OscConfig+0x240>)
 800dc74:	689b      	ldr	r3, [r3, #8]
 800dc76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800dc7a:	2b08      	cmp	r3, #8
 800dc7c:	d112      	bne.n	800dca4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800dc7e:	4b82      	ldr	r3, [pc, #520]	; (800de88 <HAL_RCC_OscConfig+0x240>)
 800dc80:	685b      	ldr	r3, [r3, #4]
 800dc82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800dc86:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800dc8a:	d10b      	bne.n	800dca4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800dc8c:	4b7e      	ldr	r3, [pc, #504]	; (800de88 <HAL_RCC_OscConfig+0x240>)
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d05b      	beq.n	800dd50 <HAL_RCC_OscConfig+0x108>
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	685b      	ldr	r3, [r3, #4]
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d157      	bne.n	800dd50 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800dca0:	2301      	movs	r3, #1
 800dca2:	e239      	b.n	800e118 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	685b      	ldr	r3, [r3, #4]
 800dca8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dcac:	d106      	bne.n	800dcbc <HAL_RCC_OscConfig+0x74>
 800dcae:	4b76      	ldr	r3, [pc, #472]	; (800de88 <HAL_RCC_OscConfig+0x240>)
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	4a75      	ldr	r2, [pc, #468]	; (800de88 <HAL_RCC_OscConfig+0x240>)
 800dcb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800dcb8:	6013      	str	r3, [r2, #0]
 800dcba:	e01d      	b.n	800dcf8 <HAL_RCC_OscConfig+0xb0>
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	685b      	ldr	r3, [r3, #4]
 800dcc0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800dcc4:	d10c      	bne.n	800dce0 <HAL_RCC_OscConfig+0x98>
 800dcc6:	4b70      	ldr	r3, [pc, #448]	; (800de88 <HAL_RCC_OscConfig+0x240>)
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	4a6f      	ldr	r2, [pc, #444]	; (800de88 <HAL_RCC_OscConfig+0x240>)
 800dccc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800dcd0:	6013      	str	r3, [r2, #0]
 800dcd2:	4b6d      	ldr	r3, [pc, #436]	; (800de88 <HAL_RCC_OscConfig+0x240>)
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	4a6c      	ldr	r2, [pc, #432]	; (800de88 <HAL_RCC_OscConfig+0x240>)
 800dcd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800dcdc:	6013      	str	r3, [r2, #0]
 800dcde:	e00b      	b.n	800dcf8 <HAL_RCC_OscConfig+0xb0>
 800dce0:	4b69      	ldr	r3, [pc, #420]	; (800de88 <HAL_RCC_OscConfig+0x240>)
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	4a68      	ldr	r2, [pc, #416]	; (800de88 <HAL_RCC_OscConfig+0x240>)
 800dce6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800dcea:	6013      	str	r3, [r2, #0]
 800dcec:	4b66      	ldr	r3, [pc, #408]	; (800de88 <HAL_RCC_OscConfig+0x240>)
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	4a65      	ldr	r2, [pc, #404]	; (800de88 <HAL_RCC_OscConfig+0x240>)
 800dcf2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800dcf6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	685b      	ldr	r3, [r3, #4]
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d013      	beq.n	800dd28 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800dd00:	f7fd face 	bl	800b2a0 <HAL_GetTick>
 800dd04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800dd06:	e008      	b.n	800dd1a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800dd08:	f7fd faca 	bl	800b2a0 <HAL_GetTick>
 800dd0c:	4602      	mov	r2, r0
 800dd0e:	693b      	ldr	r3, [r7, #16]
 800dd10:	1ad3      	subs	r3, r2, r3
 800dd12:	2b64      	cmp	r3, #100	; 0x64
 800dd14:	d901      	bls.n	800dd1a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800dd16:	2303      	movs	r3, #3
 800dd18:	e1fe      	b.n	800e118 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800dd1a:	4b5b      	ldr	r3, [pc, #364]	; (800de88 <HAL_RCC_OscConfig+0x240>)
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d0f0      	beq.n	800dd08 <HAL_RCC_OscConfig+0xc0>
 800dd26:	e014      	b.n	800dd52 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800dd28:	f7fd faba 	bl	800b2a0 <HAL_GetTick>
 800dd2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800dd2e:	e008      	b.n	800dd42 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800dd30:	f7fd fab6 	bl	800b2a0 <HAL_GetTick>
 800dd34:	4602      	mov	r2, r0
 800dd36:	693b      	ldr	r3, [r7, #16]
 800dd38:	1ad3      	subs	r3, r2, r3
 800dd3a:	2b64      	cmp	r3, #100	; 0x64
 800dd3c:	d901      	bls.n	800dd42 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800dd3e:	2303      	movs	r3, #3
 800dd40:	e1ea      	b.n	800e118 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800dd42:	4b51      	ldr	r3, [pc, #324]	; (800de88 <HAL_RCC_OscConfig+0x240>)
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d1f0      	bne.n	800dd30 <HAL_RCC_OscConfig+0xe8>
 800dd4e:	e000      	b.n	800dd52 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800dd50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	f003 0302 	and.w	r3, r3, #2
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d063      	beq.n	800de26 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800dd5e:	4b4a      	ldr	r3, [pc, #296]	; (800de88 <HAL_RCC_OscConfig+0x240>)
 800dd60:	689b      	ldr	r3, [r3, #8]
 800dd62:	f003 030c 	and.w	r3, r3, #12
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d00b      	beq.n	800dd82 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800dd6a:	4b47      	ldr	r3, [pc, #284]	; (800de88 <HAL_RCC_OscConfig+0x240>)
 800dd6c:	689b      	ldr	r3, [r3, #8]
 800dd6e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800dd72:	2b08      	cmp	r3, #8
 800dd74:	d11c      	bne.n	800ddb0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800dd76:	4b44      	ldr	r3, [pc, #272]	; (800de88 <HAL_RCC_OscConfig+0x240>)
 800dd78:	685b      	ldr	r3, [r3, #4]
 800dd7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d116      	bne.n	800ddb0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800dd82:	4b41      	ldr	r3, [pc, #260]	; (800de88 <HAL_RCC_OscConfig+0x240>)
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	f003 0302 	and.w	r3, r3, #2
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d005      	beq.n	800dd9a <HAL_RCC_OscConfig+0x152>
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	68db      	ldr	r3, [r3, #12]
 800dd92:	2b01      	cmp	r3, #1
 800dd94:	d001      	beq.n	800dd9a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800dd96:	2301      	movs	r3, #1
 800dd98:	e1be      	b.n	800e118 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800dd9a:	4b3b      	ldr	r3, [pc, #236]	; (800de88 <HAL_RCC_OscConfig+0x240>)
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	691b      	ldr	r3, [r3, #16]
 800dda6:	00db      	lsls	r3, r3, #3
 800dda8:	4937      	ldr	r1, [pc, #220]	; (800de88 <HAL_RCC_OscConfig+0x240>)
 800ddaa:	4313      	orrs	r3, r2
 800ddac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ddae:	e03a      	b.n	800de26 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	68db      	ldr	r3, [r3, #12]
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d020      	beq.n	800ddfa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800ddb8:	4b34      	ldr	r3, [pc, #208]	; (800de8c <HAL_RCC_OscConfig+0x244>)
 800ddba:	2201      	movs	r2, #1
 800ddbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ddbe:	f7fd fa6f 	bl	800b2a0 <HAL_GetTick>
 800ddc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ddc4:	e008      	b.n	800ddd8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800ddc6:	f7fd fa6b 	bl	800b2a0 <HAL_GetTick>
 800ddca:	4602      	mov	r2, r0
 800ddcc:	693b      	ldr	r3, [r7, #16]
 800ddce:	1ad3      	subs	r3, r2, r3
 800ddd0:	2b02      	cmp	r3, #2
 800ddd2:	d901      	bls.n	800ddd8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800ddd4:	2303      	movs	r3, #3
 800ddd6:	e19f      	b.n	800e118 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ddd8:	4b2b      	ldr	r3, [pc, #172]	; (800de88 <HAL_RCC_OscConfig+0x240>)
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	f003 0302 	and.w	r3, r3, #2
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d0f0      	beq.n	800ddc6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800dde4:	4b28      	ldr	r3, [pc, #160]	; (800de88 <HAL_RCC_OscConfig+0x240>)
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	691b      	ldr	r3, [r3, #16]
 800ddf0:	00db      	lsls	r3, r3, #3
 800ddf2:	4925      	ldr	r1, [pc, #148]	; (800de88 <HAL_RCC_OscConfig+0x240>)
 800ddf4:	4313      	orrs	r3, r2
 800ddf6:	600b      	str	r3, [r1, #0]
 800ddf8:	e015      	b.n	800de26 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ddfa:	4b24      	ldr	r3, [pc, #144]	; (800de8c <HAL_RCC_OscConfig+0x244>)
 800ddfc:	2200      	movs	r2, #0
 800ddfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800de00:	f7fd fa4e 	bl	800b2a0 <HAL_GetTick>
 800de04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800de06:	e008      	b.n	800de1a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800de08:	f7fd fa4a 	bl	800b2a0 <HAL_GetTick>
 800de0c:	4602      	mov	r2, r0
 800de0e:	693b      	ldr	r3, [r7, #16]
 800de10:	1ad3      	subs	r3, r2, r3
 800de12:	2b02      	cmp	r3, #2
 800de14:	d901      	bls.n	800de1a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800de16:	2303      	movs	r3, #3
 800de18:	e17e      	b.n	800e118 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800de1a:	4b1b      	ldr	r3, [pc, #108]	; (800de88 <HAL_RCC_OscConfig+0x240>)
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	f003 0302 	and.w	r3, r3, #2
 800de22:	2b00      	cmp	r3, #0
 800de24:	d1f0      	bne.n	800de08 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	f003 0308 	and.w	r3, r3, #8
 800de2e:	2b00      	cmp	r3, #0
 800de30:	d036      	beq.n	800dea0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	695b      	ldr	r3, [r3, #20]
 800de36:	2b00      	cmp	r3, #0
 800de38:	d016      	beq.n	800de68 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800de3a:	4b15      	ldr	r3, [pc, #84]	; (800de90 <HAL_RCC_OscConfig+0x248>)
 800de3c:	2201      	movs	r2, #1
 800de3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800de40:	f7fd fa2e 	bl	800b2a0 <HAL_GetTick>
 800de44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800de46:	e008      	b.n	800de5a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800de48:	f7fd fa2a 	bl	800b2a0 <HAL_GetTick>
 800de4c:	4602      	mov	r2, r0
 800de4e:	693b      	ldr	r3, [r7, #16]
 800de50:	1ad3      	subs	r3, r2, r3
 800de52:	2b02      	cmp	r3, #2
 800de54:	d901      	bls.n	800de5a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800de56:	2303      	movs	r3, #3
 800de58:	e15e      	b.n	800e118 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800de5a:	4b0b      	ldr	r3, [pc, #44]	; (800de88 <HAL_RCC_OscConfig+0x240>)
 800de5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800de5e:	f003 0302 	and.w	r3, r3, #2
 800de62:	2b00      	cmp	r3, #0
 800de64:	d0f0      	beq.n	800de48 <HAL_RCC_OscConfig+0x200>
 800de66:	e01b      	b.n	800dea0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800de68:	4b09      	ldr	r3, [pc, #36]	; (800de90 <HAL_RCC_OscConfig+0x248>)
 800de6a:	2200      	movs	r2, #0
 800de6c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800de6e:	f7fd fa17 	bl	800b2a0 <HAL_GetTick>
 800de72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800de74:	e00e      	b.n	800de94 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800de76:	f7fd fa13 	bl	800b2a0 <HAL_GetTick>
 800de7a:	4602      	mov	r2, r0
 800de7c:	693b      	ldr	r3, [r7, #16]
 800de7e:	1ad3      	subs	r3, r2, r3
 800de80:	2b02      	cmp	r3, #2
 800de82:	d907      	bls.n	800de94 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800de84:	2303      	movs	r3, #3
 800de86:	e147      	b.n	800e118 <HAL_RCC_OscConfig+0x4d0>
 800de88:	40023800 	.word	0x40023800
 800de8c:	42470000 	.word	0x42470000
 800de90:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800de94:	4b88      	ldr	r3, [pc, #544]	; (800e0b8 <HAL_RCC_OscConfig+0x470>)
 800de96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800de98:	f003 0302 	and.w	r3, r3, #2
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d1ea      	bne.n	800de76 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	f003 0304 	and.w	r3, r3, #4
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	f000 8097 	beq.w	800dfdc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800deae:	2300      	movs	r3, #0
 800deb0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800deb2:	4b81      	ldr	r3, [pc, #516]	; (800e0b8 <HAL_RCC_OscConfig+0x470>)
 800deb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800deb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800deba:	2b00      	cmp	r3, #0
 800debc:	d10f      	bne.n	800dede <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800debe:	2300      	movs	r3, #0
 800dec0:	60bb      	str	r3, [r7, #8]
 800dec2:	4b7d      	ldr	r3, [pc, #500]	; (800e0b8 <HAL_RCC_OscConfig+0x470>)
 800dec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dec6:	4a7c      	ldr	r2, [pc, #496]	; (800e0b8 <HAL_RCC_OscConfig+0x470>)
 800dec8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800decc:	6413      	str	r3, [r2, #64]	; 0x40
 800dece:	4b7a      	ldr	r3, [pc, #488]	; (800e0b8 <HAL_RCC_OscConfig+0x470>)
 800ded0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ded2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ded6:	60bb      	str	r3, [r7, #8]
 800ded8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800deda:	2301      	movs	r3, #1
 800dedc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800dede:	4b77      	ldr	r3, [pc, #476]	; (800e0bc <HAL_RCC_OscConfig+0x474>)
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d118      	bne.n	800df1c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800deea:	4b74      	ldr	r3, [pc, #464]	; (800e0bc <HAL_RCC_OscConfig+0x474>)
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	4a73      	ldr	r2, [pc, #460]	; (800e0bc <HAL_RCC_OscConfig+0x474>)
 800def0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800def4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800def6:	f7fd f9d3 	bl	800b2a0 <HAL_GetTick>
 800defa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800defc:	e008      	b.n	800df10 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800defe:	f7fd f9cf 	bl	800b2a0 <HAL_GetTick>
 800df02:	4602      	mov	r2, r0
 800df04:	693b      	ldr	r3, [r7, #16]
 800df06:	1ad3      	subs	r3, r2, r3
 800df08:	2b02      	cmp	r3, #2
 800df0a:	d901      	bls.n	800df10 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800df0c:	2303      	movs	r3, #3
 800df0e:	e103      	b.n	800e118 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800df10:	4b6a      	ldr	r3, [pc, #424]	; (800e0bc <HAL_RCC_OscConfig+0x474>)
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800df18:	2b00      	cmp	r3, #0
 800df1a:	d0f0      	beq.n	800defe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	689b      	ldr	r3, [r3, #8]
 800df20:	2b01      	cmp	r3, #1
 800df22:	d106      	bne.n	800df32 <HAL_RCC_OscConfig+0x2ea>
 800df24:	4b64      	ldr	r3, [pc, #400]	; (800e0b8 <HAL_RCC_OscConfig+0x470>)
 800df26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800df28:	4a63      	ldr	r2, [pc, #396]	; (800e0b8 <HAL_RCC_OscConfig+0x470>)
 800df2a:	f043 0301 	orr.w	r3, r3, #1
 800df2e:	6713      	str	r3, [r2, #112]	; 0x70
 800df30:	e01c      	b.n	800df6c <HAL_RCC_OscConfig+0x324>
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	689b      	ldr	r3, [r3, #8]
 800df36:	2b05      	cmp	r3, #5
 800df38:	d10c      	bne.n	800df54 <HAL_RCC_OscConfig+0x30c>
 800df3a:	4b5f      	ldr	r3, [pc, #380]	; (800e0b8 <HAL_RCC_OscConfig+0x470>)
 800df3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800df3e:	4a5e      	ldr	r2, [pc, #376]	; (800e0b8 <HAL_RCC_OscConfig+0x470>)
 800df40:	f043 0304 	orr.w	r3, r3, #4
 800df44:	6713      	str	r3, [r2, #112]	; 0x70
 800df46:	4b5c      	ldr	r3, [pc, #368]	; (800e0b8 <HAL_RCC_OscConfig+0x470>)
 800df48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800df4a:	4a5b      	ldr	r2, [pc, #364]	; (800e0b8 <HAL_RCC_OscConfig+0x470>)
 800df4c:	f043 0301 	orr.w	r3, r3, #1
 800df50:	6713      	str	r3, [r2, #112]	; 0x70
 800df52:	e00b      	b.n	800df6c <HAL_RCC_OscConfig+0x324>
 800df54:	4b58      	ldr	r3, [pc, #352]	; (800e0b8 <HAL_RCC_OscConfig+0x470>)
 800df56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800df58:	4a57      	ldr	r2, [pc, #348]	; (800e0b8 <HAL_RCC_OscConfig+0x470>)
 800df5a:	f023 0301 	bic.w	r3, r3, #1
 800df5e:	6713      	str	r3, [r2, #112]	; 0x70
 800df60:	4b55      	ldr	r3, [pc, #340]	; (800e0b8 <HAL_RCC_OscConfig+0x470>)
 800df62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800df64:	4a54      	ldr	r2, [pc, #336]	; (800e0b8 <HAL_RCC_OscConfig+0x470>)
 800df66:	f023 0304 	bic.w	r3, r3, #4
 800df6a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	689b      	ldr	r3, [r3, #8]
 800df70:	2b00      	cmp	r3, #0
 800df72:	d015      	beq.n	800dfa0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800df74:	f7fd f994 	bl	800b2a0 <HAL_GetTick>
 800df78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800df7a:	e00a      	b.n	800df92 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800df7c:	f7fd f990 	bl	800b2a0 <HAL_GetTick>
 800df80:	4602      	mov	r2, r0
 800df82:	693b      	ldr	r3, [r7, #16]
 800df84:	1ad3      	subs	r3, r2, r3
 800df86:	f241 3288 	movw	r2, #5000	; 0x1388
 800df8a:	4293      	cmp	r3, r2
 800df8c:	d901      	bls.n	800df92 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800df8e:	2303      	movs	r3, #3
 800df90:	e0c2      	b.n	800e118 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800df92:	4b49      	ldr	r3, [pc, #292]	; (800e0b8 <HAL_RCC_OscConfig+0x470>)
 800df94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800df96:	f003 0302 	and.w	r3, r3, #2
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d0ee      	beq.n	800df7c <HAL_RCC_OscConfig+0x334>
 800df9e:	e014      	b.n	800dfca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800dfa0:	f7fd f97e 	bl	800b2a0 <HAL_GetTick>
 800dfa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800dfa6:	e00a      	b.n	800dfbe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800dfa8:	f7fd f97a 	bl	800b2a0 <HAL_GetTick>
 800dfac:	4602      	mov	r2, r0
 800dfae:	693b      	ldr	r3, [r7, #16]
 800dfb0:	1ad3      	subs	r3, r2, r3
 800dfb2:	f241 3288 	movw	r2, #5000	; 0x1388
 800dfb6:	4293      	cmp	r3, r2
 800dfb8:	d901      	bls.n	800dfbe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800dfba:	2303      	movs	r3, #3
 800dfbc:	e0ac      	b.n	800e118 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800dfbe:	4b3e      	ldr	r3, [pc, #248]	; (800e0b8 <HAL_RCC_OscConfig+0x470>)
 800dfc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dfc2:	f003 0302 	and.w	r3, r3, #2
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d1ee      	bne.n	800dfa8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800dfca:	7dfb      	ldrb	r3, [r7, #23]
 800dfcc:	2b01      	cmp	r3, #1
 800dfce:	d105      	bne.n	800dfdc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800dfd0:	4b39      	ldr	r3, [pc, #228]	; (800e0b8 <HAL_RCC_OscConfig+0x470>)
 800dfd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dfd4:	4a38      	ldr	r2, [pc, #224]	; (800e0b8 <HAL_RCC_OscConfig+0x470>)
 800dfd6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800dfda:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	699b      	ldr	r3, [r3, #24]
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	f000 8098 	beq.w	800e116 <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800dfe6:	4b34      	ldr	r3, [pc, #208]	; (800e0b8 <HAL_RCC_OscConfig+0x470>)
 800dfe8:	689b      	ldr	r3, [r3, #8]
 800dfea:	f003 030c 	and.w	r3, r3, #12
 800dfee:	2b08      	cmp	r3, #8
 800dff0:	d05c      	beq.n	800e0ac <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	699b      	ldr	r3, [r3, #24]
 800dff6:	2b02      	cmp	r3, #2
 800dff8:	d141      	bne.n	800e07e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800dffa:	4b31      	ldr	r3, [pc, #196]	; (800e0c0 <HAL_RCC_OscConfig+0x478>)
 800dffc:	2200      	movs	r2, #0
 800dffe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e000:	f7fd f94e 	bl	800b2a0 <HAL_GetTick>
 800e004:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e006:	e008      	b.n	800e01a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800e008:	f7fd f94a 	bl	800b2a0 <HAL_GetTick>
 800e00c:	4602      	mov	r2, r0
 800e00e:	693b      	ldr	r3, [r7, #16]
 800e010:	1ad3      	subs	r3, r2, r3
 800e012:	2b02      	cmp	r3, #2
 800e014:	d901      	bls.n	800e01a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800e016:	2303      	movs	r3, #3
 800e018:	e07e      	b.n	800e118 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e01a:	4b27      	ldr	r3, [pc, #156]	; (800e0b8 <HAL_RCC_OscConfig+0x470>)
 800e01c:	681b      	ldr	r3, [r3, #0]
 800e01e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e022:	2b00      	cmp	r3, #0
 800e024:	d1f0      	bne.n	800e008 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	69da      	ldr	r2, [r3, #28]
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	6a1b      	ldr	r3, [r3, #32]
 800e02e:	431a      	orrs	r2, r3
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e034:	019b      	lsls	r3, r3, #6
 800e036:	431a      	orrs	r2, r3
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e03c:	085b      	lsrs	r3, r3, #1
 800e03e:	3b01      	subs	r3, #1
 800e040:	041b      	lsls	r3, r3, #16
 800e042:	431a      	orrs	r2, r3
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e048:	061b      	lsls	r3, r3, #24
 800e04a:	491b      	ldr	r1, [pc, #108]	; (800e0b8 <HAL_RCC_OscConfig+0x470>)
 800e04c:	4313      	orrs	r3, r2
 800e04e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800e050:	4b1b      	ldr	r3, [pc, #108]	; (800e0c0 <HAL_RCC_OscConfig+0x478>)
 800e052:	2201      	movs	r2, #1
 800e054:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e056:	f7fd f923 	bl	800b2a0 <HAL_GetTick>
 800e05a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800e05c:	e008      	b.n	800e070 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800e05e:	f7fd f91f 	bl	800b2a0 <HAL_GetTick>
 800e062:	4602      	mov	r2, r0
 800e064:	693b      	ldr	r3, [r7, #16]
 800e066:	1ad3      	subs	r3, r2, r3
 800e068:	2b02      	cmp	r3, #2
 800e06a:	d901      	bls.n	800e070 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800e06c:	2303      	movs	r3, #3
 800e06e:	e053      	b.n	800e118 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800e070:	4b11      	ldr	r3, [pc, #68]	; (800e0b8 <HAL_RCC_OscConfig+0x470>)
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d0f0      	beq.n	800e05e <HAL_RCC_OscConfig+0x416>
 800e07c:	e04b      	b.n	800e116 <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e07e:	4b10      	ldr	r3, [pc, #64]	; (800e0c0 <HAL_RCC_OscConfig+0x478>)
 800e080:	2200      	movs	r2, #0
 800e082:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e084:	f7fd f90c 	bl	800b2a0 <HAL_GetTick>
 800e088:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e08a:	e008      	b.n	800e09e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800e08c:	f7fd f908 	bl	800b2a0 <HAL_GetTick>
 800e090:	4602      	mov	r2, r0
 800e092:	693b      	ldr	r3, [r7, #16]
 800e094:	1ad3      	subs	r3, r2, r3
 800e096:	2b02      	cmp	r3, #2
 800e098:	d901      	bls.n	800e09e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800e09a:	2303      	movs	r3, #3
 800e09c:	e03c      	b.n	800e118 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e09e:	4b06      	ldr	r3, [pc, #24]	; (800e0b8 <HAL_RCC_OscConfig+0x470>)
 800e0a0:	681b      	ldr	r3, [r3, #0]
 800e0a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d1f0      	bne.n	800e08c <HAL_RCC_OscConfig+0x444>
 800e0aa:	e034      	b.n	800e116 <HAL_RCC_OscConfig+0x4ce>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	699b      	ldr	r3, [r3, #24]
 800e0b0:	2b01      	cmp	r3, #1
 800e0b2:	d107      	bne.n	800e0c4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800e0b4:	2301      	movs	r3, #1
 800e0b6:	e02f      	b.n	800e118 <HAL_RCC_OscConfig+0x4d0>
 800e0b8:	40023800 	.word	0x40023800
 800e0bc:	40007000 	.word	0x40007000
 800e0c0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800e0c4:	4b16      	ldr	r3, [pc, #88]	; (800e120 <HAL_RCC_OscConfig+0x4d8>)
 800e0c6:	685b      	ldr	r3, [r3, #4]
 800e0c8:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	69db      	ldr	r3, [r3, #28]
 800e0d4:	429a      	cmp	r2, r3
 800e0d6:	d11c      	bne.n	800e112 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800e0d8:	68fb      	ldr	r3, [r7, #12]
 800e0da:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e0e2:	429a      	cmp	r2, r3
 800e0e4:	d115      	bne.n	800e112 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800e0e6:	68fa      	ldr	r2, [r7, #12]
 800e0e8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800e0ec:	4013      	ands	r3, r2
 800e0ee:	687a      	ldr	r2, [r7, #4]
 800e0f0:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800e0f2:	4293      	cmp	r3, r2
 800e0f4:	d10d      	bne.n	800e112 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800e0f6:	68fb      	ldr	r3, [r7, #12]
 800e0f8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800e100:	429a      	cmp	r2, r3
 800e102:	d106      	bne.n	800e112 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800e104:	68fb      	ldr	r3, [r7, #12]
 800e106:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800e10e:	429a      	cmp	r2, r3
 800e110:	d001      	beq.n	800e116 <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
 800e112:	2301      	movs	r3, #1
 800e114:	e000      	b.n	800e118 <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  return HAL_OK;
 800e116:	2300      	movs	r3, #0
}
 800e118:	4618      	mov	r0, r3
 800e11a:	3718      	adds	r7, #24
 800e11c:	46bd      	mov	sp, r7
 800e11e:	bd80      	pop	{r7, pc}
 800e120:	40023800 	.word	0x40023800

0800e124 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800e124:	b580      	push	{r7, lr}
 800e126:	b084      	sub	sp, #16
 800e128:	af00      	add	r7, sp, #0
 800e12a:	6078      	str	r0, [r7, #4]
 800e12c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	2b00      	cmp	r3, #0
 800e132:	d101      	bne.n	800e138 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800e134:	2301      	movs	r3, #1
 800e136:	e0cc      	b.n	800e2d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800e138:	4b68      	ldr	r3, [pc, #416]	; (800e2dc <HAL_RCC_ClockConfig+0x1b8>)
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	f003 030f 	and.w	r3, r3, #15
 800e140:	683a      	ldr	r2, [r7, #0]
 800e142:	429a      	cmp	r2, r3
 800e144:	d90c      	bls.n	800e160 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e146:	4b65      	ldr	r3, [pc, #404]	; (800e2dc <HAL_RCC_ClockConfig+0x1b8>)
 800e148:	683a      	ldr	r2, [r7, #0]
 800e14a:	b2d2      	uxtb	r2, r2
 800e14c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800e14e:	4b63      	ldr	r3, [pc, #396]	; (800e2dc <HAL_RCC_ClockConfig+0x1b8>)
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	f003 030f 	and.w	r3, r3, #15
 800e156:	683a      	ldr	r2, [r7, #0]
 800e158:	429a      	cmp	r2, r3
 800e15a:	d001      	beq.n	800e160 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800e15c:	2301      	movs	r3, #1
 800e15e:	e0b8      	b.n	800e2d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	681b      	ldr	r3, [r3, #0]
 800e164:	f003 0302 	and.w	r3, r3, #2
 800e168:	2b00      	cmp	r3, #0
 800e16a:	d020      	beq.n	800e1ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	681b      	ldr	r3, [r3, #0]
 800e170:	f003 0304 	and.w	r3, r3, #4
 800e174:	2b00      	cmp	r3, #0
 800e176:	d005      	beq.n	800e184 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800e178:	4b59      	ldr	r3, [pc, #356]	; (800e2e0 <HAL_RCC_ClockConfig+0x1bc>)
 800e17a:	689b      	ldr	r3, [r3, #8]
 800e17c:	4a58      	ldr	r2, [pc, #352]	; (800e2e0 <HAL_RCC_ClockConfig+0x1bc>)
 800e17e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800e182:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	681b      	ldr	r3, [r3, #0]
 800e188:	f003 0308 	and.w	r3, r3, #8
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d005      	beq.n	800e19c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800e190:	4b53      	ldr	r3, [pc, #332]	; (800e2e0 <HAL_RCC_ClockConfig+0x1bc>)
 800e192:	689b      	ldr	r3, [r3, #8]
 800e194:	4a52      	ldr	r2, [pc, #328]	; (800e2e0 <HAL_RCC_ClockConfig+0x1bc>)
 800e196:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800e19a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800e19c:	4b50      	ldr	r3, [pc, #320]	; (800e2e0 <HAL_RCC_ClockConfig+0x1bc>)
 800e19e:	689b      	ldr	r3, [r3, #8]
 800e1a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	689b      	ldr	r3, [r3, #8]
 800e1a8:	494d      	ldr	r1, [pc, #308]	; (800e2e0 <HAL_RCC_ClockConfig+0x1bc>)
 800e1aa:	4313      	orrs	r3, r2
 800e1ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	681b      	ldr	r3, [r3, #0]
 800e1b2:	f003 0301 	and.w	r3, r3, #1
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d044      	beq.n	800e244 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	685b      	ldr	r3, [r3, #4]
 800e1be:	2b01      	cmp	r3, #1
 800e1c0:	d107      	bne.n	800e1d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e1c2:	4b47      	ldr	r3, [pc, #284]	; (800e2e0 <HAL_RCC_ClockConfig+0x1bc>)
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d119      	bne.n	800e202 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800e1ce:	2301      	movs	r3, #1
 800e1d0:	e07f      	b.n	800e2d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	685b      	ldr	r3, [r3, #4]
 800e1d6:	2b02      	cmp	r3, #2
 800e1d8:	d003      	beq.n	800e1e2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800e1de:	2b03      	cmp	r3, #3
 800e1e0:	d107      	bne.n	800e1f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800e1e2:	4b3f      	ldr	r3, [pc, #252]	; (800e2e0 <HAL_RCC_ClockConfig+0x1bc>)
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d109      	bne.n	800e202 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800e1ee:	2301      	movs	r3, #1
 800e1f0:	e06f      	b.n	800e2d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800e1f2:	4b3b      	ldr	r3, [pc, #236]	; (800e2e0 <HAL_RCC_ClockConfig+0x1bc>)
 800e1f4:	681b      	ldr	r3, [r3, #0]
 800e1f6:	f003 0302 	and.w	r3, r3, #2
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	d101      	bne.n	800e202 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800e1fe:	2301      	movs	r3, #1
 800e200:	e067      	b.n	800e2d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800e202:	4b37      	ldr	r3, [pc, #220]	; (800e2e0 <HAL_RCC_ClockConfig+0x1bc>)
 800e204:	689b      	ldr	r3, [r3, #8]
 800e206:	f023 0203 	bic.w	r2, r3, #3
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	685b      	ldr	r3, [r3, #4]
 800e20e:	4934      	ldr	r1, [pc, #208]	; (800e2e0 <HAL_RCC_ClockConfig+0x1bc>)
 800e210:	4313      	orrs	r3, r2
 800e212:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800e214:	f7fd f844 	bl	800b2a0 <HAL_GetTick>
 800e218:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e21a:	e00a      	b.n	800e232 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800e21c:	f7fd f840 	bl	800b2a0 <HAL_GetTick>
 800e220:	4602      	mov	r2, r0
 800e222:	68fb      	ldr	r3, [r7, #12]
 800e224:	1ad3      	subs	r3, r2, r3
 800e226:	f241 3288 	movw	r2, #5000	; 0x1388
 800e22a:	4293      	cmp	r3, r2
 800e22c:	d901      	bls.n	800e232 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800e22e:	2303      	movs	r3, #3
 800e230:	e04f      	b.n	800e2d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e232:	4b2b      	ldr	r3, [pc, #172]	; (800e2e0 <HAL_RCC_ClockConfig+0x1bc>)
 800e234:	689b      	ldr	r3, [r3, #8]
 800e236:	f003 020c 	and.w	r2, r3, #12
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	685b      	ldr	r3, [r3, #4]
 800e23e:	009b      	lsls	r3, r3, #2
 800e240:	429a      	cmp	r2, r3
 800e242:	d1eb      	bne.n	800e21c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800e244:	4b25      	ldr	r3, [pc, #148]	; (800e2dc <HAL_RCC_ClockConfig+0x1b8>)
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	f003 030f 	and.w	r3, r3, #15
 800e24c:	683a      	ldr	r2, [r7, #0]
 800e24e:	429a      	cmp	r2, r3
 800e250:	d20c      	bcs.n	800e26c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e252:	4b22      	ldr	r3, [pc, #136]	; (800e2dc <HAL_RCC_ClockConfig+0x1b8>)
 800e254:	683a      	ldr	r2, [r7, #0]
 800e256:	b2d2      	uxtb	r2, r2
 800e258:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800e25a:	4b20      	ldr	r3, [pc, #128]	; (800e2dc <HAL_RCC_ClockConfig+0x1b8>)
 800e25c:	681b      	ldr	r3, [r3, #0]
 800e25e:	f003 030f 	and.w	r3, r3, #15
 800e262:	683a      	ldr	r2, [r7, #0]
 800e264:	429a      	cmp	r2, r3
 800e266:	d001      	beq.n	800e26c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800e268:	2301      	movs	r3, #1
 800e26a:	e032      	b.n	800e2d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	681b      	ldr	r3, [r3, #0]
 800e270:	f003 0304 	and.w	r3, r3, #4
 800e274:	2b00      	cmp	r3, #0
 800e276:	d008      	beq.n	800e28a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800e278:	4b19      	ldr	r3, [pc, #100]	; (800e2e0 <HAL_RCC_ClockConfig+0x1bc>)
 800e27a:	689b      	ldr	r3, [r3, #8]
 800e27c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	68db      	ldr	r3, [r3, #12]
 800e284:	4916      	ldr	r1, [pc, #88]	; (800e2e0 <HAL_RCC_ClockConfig+0x1bc>)
 800e286:	4313      	orrs	r3, r2
 800e288:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	681b      	ldr	r3, [r3, #0]
 800e28e:	f003 0308 	and.w	r3, r3, #8
 800e292:	2b00      	cmp	r3, #0
 800e294:	d009      	beq.n	800e2aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800e296:	4b12      	ldr	r3, [pc, #72]	; (800e2e0 <HAL_RCC_ClockConfig+0x1bc>)
 800e298:	689b      	ldr	r3, [r3, #8]
 800e29a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	691b      	ldr	r3, [r3, #16]
 800e2a2:	00db      	lsls	r3, r3, #3
 800e2a4:	490e      	ldr	r1, [pc, #56]	; (800e2e0 <HAL_RCC_ClockConfig+0x1bc>)
 800e2a6:	4313      	orrs	r3, r2
 800e2a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800e2aa:	f000 f821 	bl	800e2f0 <HAL_RCC_GetSysClockFreq>
 800e2ae:	4602      	mov	r2, r0
 800e2b0:	4b0b      	ldr	r3, [pc, #44]	; (800e2e0 <HAL_RCC_ClockConfig+0x1bc>)
 800e2b2:	689b      	ldr	r3, [r3, #8]
 800e2b4:	091b      	lsrs	r3, r3, #4
 800e2b6:	f003 030f 	and.w	r3, r3, #15
 800e2ba:	490a      	ldr	r1, [pc, #40]	; (800e2e4 <HAL_RCC_ClockConfig+0x1c0>)
 800e2bc:	5ccb      	ldrb	r3, [r1, r3]
 800e2be:	fa22 f303 	lsr.w	r3, r2, r3
 800e2c2:	4a09      	ldr	r2, [pc, #36]	; (800e2e8 <HAL_RCC_ClockConfig+0x1c4>)
 800e2c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800e2c6:	4b09      	ldr	r3, [pc, #36]	; (800e2ec <HAL_RCC_ClockConfig+0x1c8>)
 800e2c8:	681b      	ldr	r3, [r3, #0]
 800e2ca:	4618      	mov	r0, r3
 800e2cc:	f7f9 fd32 	bl	8007d34 <HAL_InitTick>

  return HAL_OK;
 800e2d0:	2300      	movs	r3, #0
}
 800e2d2:	4618      	mov	r0, r3
 800e2d4:	3710      	adds	r7, #16
 800e2d6:	46bd      	mov	sp, r7
 800e2d8:	bd80      	pop	{r7, pc}
 800e2da:	bf00      	nop
 800e2dc:	40023c00 	.word	0x40023c00
 800e2e0:	40023800 	.word	0x40023800
 800e2e4:	08016e24 	.word	0x08016e24
 800e2e8:	20000000 	.word	0x20000000
 800e2ec:	200000a4 	.word	0x200000a4

0800e2f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800e2f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e2f4:	b094      	sub	sp, #80	; 0x50
 800e2f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800e2f8:	2300      	movs	r3, #0
 800e2fa:	647b      	str	r3, [r7, #68]	; 0x44
 800e2fc:	2300      	movs	r3, #0
 800e2fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e300:	2300      	movs	r3, #0
 800e302:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800e304:	2300      	movs	r3, #0
 800e306:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800e308:	4b79      	ldr	r3, [pc, #484]	; (800e4f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800e30a:	689b      	ldr	r3, [r3, #8]
 800e30c:	f003 030c 	and.w	r3, r3, #12
 800e310:	2b08      	cmp	r3, #8
 800e312:	d00d      	beq.n	800e330 <HAL_RCC_GetSysClockFreq+0x40>
 800e314:	2b08      	cmp	r3, #8
 800e316:	f200 80e1 	bhi.w	800e4dc <HAL_RCC_GetSysClockFreq+0x1ec>
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d002      	beq.n	800e324 <HAL_RCC_GetSysClockFreq+0x34>
 800e31e:	2b04      	cmp	r3, #4
 800e320:	d003      	beq.n	800e32a <HAL_RCC_GetSysClockFreq+0x3a>
 800e322:	e0db      	b.n	800e4dc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800e324:	4b73      	ldr	r3, [pc, #460]	; (800e4f4 <HAL_RCC_GetSysClockFreq+0x204>)
 800e326:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800e328:	e0db      	b.n	800e4e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800e32a:	4b73      	ldr	r3, [pc, #460]	; (800e4f8 <HAL_RCC_GetSysClockFreq+0x208>)
 800e32c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800e32e:	e0d8      	b.n	800e4e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800e330:	4b6f      	ldr	r3, [pc, #444]	; (800e4f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800e332:	685b      	ldr	r3, [r3, #4]
 800e334:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e338:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800e33a:	4b6d      	ldr	r3, [pc, #436]	; (800e4f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800e33c:	685b      	ldr	r3, [r3, #4]
 800e33e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e342:	2b00      	cmp	r3, #0
 800e344:	d063      	beq.n	800e40e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800e346:	4b6a      	ldr	r3, [pc, #424]	; (800e4f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800e348:	685b      	ldr	r3, [r3, #4]
 800e34a:	099b      	lsrs	r3, r3, #6
 800e34c:	2200      	movs	r2, #0
 800e34e:	63bb      	str	r3, [r7, #56]	; 0x38
 800e350:	63fa      	str	r2, [r7, #60]	; 0x3c
 800e352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e354:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e358:	633b      	str	r3, [r7, #48]	; 0x30
 800e35a:	2300      	movs	r3, #0
 800e35c:	637b      	str	r3, [r7, #52]	; 0x34
 800e35e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800e362:	4622      	mov	r2, r4
 800e364:	462b      	mov	r3, r5
 800e366:	f04f 0000 	mov.w	r0, #0
 800e36a:	f04f 0100 	mov.w	r1, #0
 800e36e:	0159      	lsls	r1, r3, #5
 800e370:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800e374:	0150      	lsls	r0, r2, #5
 800e376:	4602      	mov	r2, r0
 800e378:	460b      	mov	r3, r1
 800e37a:	4621      	mov	r1, r4
 800e37c:	1a51      	subs	r1, r2, r1
 800e37e:	6139      	str	r1, [r7, #16]
 800e380:	4629      	mov	r1, r5
 800e382:	eb63 0301 	sbc.w	r3, r3, r1
 800e386:	617b      	str	r3, [r7, #20]
 800e388:	f04f 0200 	mov.w	r2, #0
 800e38c:	f04f 0300 	mov.w	r3, #0
 800e390:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800e394:	4659      	mov	r1, fp
 800e396:	018b      	lsls	r3, r1, #6
 800e398:	4651      	mov	r1, sl
 800e39a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800e39e:	4651      	mov	r1, sl
 800e3a0:	018a      	lsls	r2, r1, #6
 800e3a2:	4651      	mov	r1, sl
 800e3a4:	ebb2 0801 	subs.w	r8, r2, r1
 800e3a8:	4659      	mov	r1, fp
 800e3aa:	eb63 0901 	sbc.w	r9, r3, r1
 800e3ae:	f04f 0200 	mov.w	r2, #0
 800e3b2:	f04f 0300 	mov.w	r3, #0
 800e3b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800e3ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800e3be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800e3c2:	4690      	mov	r8, r2
 800e3c4:	4699      	mov	r9, r3
 800e3c6:	4623      	mov	r3, r4
 800e3c8:	eb18 0303 	adds.w	r3, r8, r3
 800e3cc:	60bb      	str	r3, [r7, #8]
 800e3ce:	462b      	mov	r3, r5
 800e3d0:	eb49 0303 	adc.w	r3, r9, r3
 800e3d4:	60fb      	str	r3, [r7, #12]
 800e3d6:	f04f 0200 	mov.w	r2, #0
 800e3da:	f04f 0300 	mov.w	r3, #0
 800e3de:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800e3e2:	4629      	mov	r1, r5
 800e3e4:	024b      	lsls	r3, r1, #9
 800e3e6:	4621      	mov	r1, r4
 800e3e8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800e3ec:	4621      	mov	r1, r4
 800e3ee:	024a      	lsls	r2, r1, #9
 800e3f0:	4610      	mov	r0, r2
 800e3f2:	4619      	mov	r1, r3
 800e3f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e3f6:	2200      	movs	r2, #0
 800e3f8:	62bb      	str	r3, [r7, #40]	; 0x28
 800e3fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e3fc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800e400:	f7f8 fc4a 	bl	8006c98 <__aeabi_uldivmod>
 800e404:	4602      	mov	r2, r0
 800e406:	460b      	mov	r3, r1
 800e408:	4613      	mov	r3, r2
 800e40a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e40c:	e058      	b.n	800e4c0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800e40e:	4b38      	ldr	r3, [pc, #224]	; (800e4f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800e410:	685b      	ldr	r3, [r3, #4]
 800e412:	099b      	lsrs	r3, r3, #6
 800e414:	2200      	movs	r2, #0
 800e416:	4618      	mov	r0, r3
 800e418:	4611      	mov	r1, r2
 800e41a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800e41e:	623b      	str	r3, [r7, #32]
 800e420:	2300      	movs	r3, #0
 800e422:	627b      	str	r3, [r7, #36]	; 0x24
 800e424:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800e428:	4642      	mov	r2, r8
 800e42a:	464b      	mov	r3, r9
 800e42c:	f04f 0000 	mov.w	r0, #0
 800e430:	f04f 0100 	mov.w	r1, #0
 800e434:	0159      	lsls	r1, r3, #5
 800e436:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800e43a:	0150      	lsls	r0, r2, #5
 800e43c:	4602      	mov	r2, r0
 800e43e:	460b      	mov	r3, r1
 800e440:	4641      	mov	r1, r8
 800e442:	ebb2 0a01 	subs.w	sl, r2, r1
 800e446:	4649      	mov	r1, r9
 800e448:	eb63 0b01 	sbc.w	fp, r3, r1
 800e44c:	f04f 0200 	mov.w	r2, #0
 800e450:	f04f 0300 	mov.w	r3, #0
 800e454:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800e458:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800e45c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800e460:	ebb2 040a 	subs.w	r4, r2, sl
 800e464:	eb63 050b 	sbc.w	r5, r3, fp
 800e468:	f04f 0200 	mov.w	r2, #0
 800e46c:	f04f 0300 	mov.w	r3, #0
 800e470:	00eb      	lsls	r3, r5, #3
 800e472:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800e476:	00e2      	lsls	r2, r4, #3
 800e478:	4614      	mov	r4, r2
 800e47a:	461d      	mov	r5, r3
 800e47c:	4643      	mov	r3, r8
 800e47e:	18e3      	adds	r3, r4, r3
 800e480:	603b      	str	r3, [r7, #0]
 800e482:	464b      	mov	r3, r9
 800e484:	eb45 0303 	adc.w	r3, r5, r3
 800e488:	607b      	str	r3, [r7, #4]
 800e48a:	f04f 0200 	mov.w	r2, #0
 800e48e:	f04f 0300 	mov.w	r3, #0
 800e492:	e9d7 4500 	ldrd	r4, r5, [r7]
 800e496:	4629      	mov	r1, r5
 800e498:	028b      	lsls	r3, r1, #10
 800e49a:	4621      	mov	r1, r4
 800e49c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800e4a0:	4621      	mov	r1, r4
 800e4a2:	028a      	lsls	r2, r1, #10
 800e4a4:	4610      	mov	r0, r2
 800e4a6:	4619      	mov	r1, r3
 800e4a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e4aa:	2200      	movs	r2, #0
 800e4ac:	61bb      	str	r3, [r7, #24]
 800e4ae:	61fa      	str	r2, [r7, #28]
 800e4b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800e4b4:	f7f8 fbf0 	bl	8006c98 <__aeabi_uldivmod>
 800e4b8:	4602      	mov	r2, r0
 800e4ba:	460b      	mov	r3, r1
 800e4bc:	4613      	mov	r3, r2
 800e4be:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800e4c0:	4b0b      	ldr	r3, [pc, #44]	; (800e4f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800e4c2:	685b      	ldr	r3, [r3, #4]
 800e4c4:	0c1b      	lsrs	r3, r3, #16
 800e4c6:	f003 0303 	and.w	r3, r3, #3
 800e4ca:	3301      	adds	r3, #1
 800e4cc:	005b      	lsls	r3, r3, #1
 800e4ce:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800e4d0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e4d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e4d4:	fbb2 f3f3 	udiv	r3, r2, r3
 800e4d8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800e4da:	e002      	b.n	800e4e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800e4dc:	4b05      	ldr	r3, [pc, #20]	; (800e4f4 <HAL_RCC_GetSysClockFreq+0x204>)
 800e4de:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800e4e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 800e4e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800e4e4:	4618      	mov	r0, r3
 800e4e6:	3750      	adds	r7, #80	; 0x50
 800e4e8:	46bd      	mov	sp, r7
 800e4ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e4ee:	bf00      	nop
 800e4f0:	40023800 	.word	0x40023800
 800e4f4:	00f42400 	.word	0x00f42400
 800e4f8:	007a1200 	.word	0x007a1200

0800e4fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800e4fc:	b480      	push	{r7}
 800e4fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800e500:	4b03      	ldr	r3, [pc, #12]	; (800e510 <HAL_RCC_GetHCLKFreq+0x14>)
 800e502:	681b      	ldr	r3, [r3, #0]
}
 800e504:	4618      	mov	r0, r3
 800e506:	46bd      	mov	sp, r7
 800e508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e50c:	4770      	bx	lr
 800e50e:	bf00      	nop
 800e510:	20000000 	.word	0x20000000

0800e514 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800e514:	b580      	push	{r7, lr}
 800e516:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800e518:	f7ff fff0 	bl	800e4fc <HAL_RCC_GetHCLKFreq>
 800e51c:	4602      	mov	r2, r0
 800e51e:	4b05      	ldr	r3, [pc, #20]	; (800e534 <HAL_RCC_GetPCLK1Freq+0x20>)
 800e520:	689b      	ldr	r3, [r3, #8]
 800e522:	0a9b      	lsrs	r3, r3, #10
 800e524:	f003 0307 	and.w	r3, r3, #7
 800e528:	4903      	ldr	r1, [pc, #12]	; (800e538 <HAL_RCC_GetPCLK1Freq+0x24>)
 800e52a:	5ccb      	ldrb	r3, [r1, r3]
 800e52c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800e530:	4618      	mov	r0, r3
 800e532:	bd80      	pop	{r7, pc}
 800e534:	40023800 	.word	0x40023800
 800e538:	08016e34 	.word	0x08016e34

0800e53c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800e53c:	b580      	push	{r7, lr}
 800e53e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800e540:	f7ff ffdc 	bl	800e4fc <HAL_RCC_GetHCLKFreq>
 800e544:	4602      	mov	r2, r0
 800e546:	4b05      	ldr	r3, [pc, #20]	; (800e55c <HAL_RCC_GetPCLK2Freq+0x20>)
 800e548:	689b      	ldr	r3, [r3, #8]
 800e54a:	0b5b      	lsrs	r3, r3, #13
 800e54c:	f003 0307 	and.w	r3, r3, #7
 800e550:	4903      	ldr	r1, [pc, #12]	; (800e560 <HAL_RCC_GetPCLK2Freq+0x24>)
 800e552:	5ccb      	ldrb	r3, [r1, r3]
 800e554:	fa22 f303 	lsr.w	r3, r2, r3
}
 800e558:	4618      	mov	r0, r3
 800e55a:	bd80      	pop	{r7, pc}
 800e55c:	40023800 	.word	0x40023800
 800e560:	08016e34 	.word	0x08016e34

0800e564 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800e564:	b480      	push	{r7}
 800e566:	b083      	sub	sp, #12
 800e568:	af00      	add	r7, sp, #0
 800e56a:	6078      	str	r0, [r7, #4]
 800e56c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	220f      	movs	r2, #15
 800e572:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800e574:	4b12      	ldr	r3, [pc, #72]	; (800e5c0 <HAL_RCC_GetClockConfig+0x5c>)
 800e576:	689b      	ldr	r3, [r3, #8]
 800e578:	f003 0203 	and.w	r2, r3, #3
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800e580:	4b0f      	ldr	r3, [pc, #60]	; (800e5c0 <HAL_RCC_GetClockConfig+0x5c>)
 800e582:	689b      	ldr	r3, [r3, #8]
 800e584:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800e58c:	4b0c      	ldr	r3, [pc, #48]	; (800e5c0 <HAL_RCC_GetClockConfig+0x5c>)
 800e58e:	689b      	ldr	r3, [r3, #8]
 800e590:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800e598:	4b09      	ldr	r3, [pc, #36]	; (800e5c0 <HAL_RCC_GetClockConfig+0x5c>)
 800e59a:	689b      	ldr	r3, [r3, #8]
 800e59c:	08db      	lsrs	r3, r3, #3
 800e59e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800e5a6:	4b07      	ldr	r3, [pc, #28]	; (800e5c4 <HAL_RCC_GetClockConfig+0x60>)
 800e5a8:	681b      	ldr	r3, [r3, #0]
 800e5aa:	f003 020f 	and.w	r2, r3, #15
 800e5ae:	683b      	ldr	r3, [r7, #0]
 800e5b0:	601a      	str	r2, [r3, #0]
}
 800e5b2:	bf00      	nop
 800e5b4:	370c      	adds	r7, #12
 800e5b6:	46bd      	mov	sp, r7
 800e5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5bc:	4770      	bx	lr
 800e5be:	bf00      	nop
 800e5c0:	40023800 	.word	0x40023800
 800e5c4:	40023c00 	.word	0x40023c00

0800e5c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800e5c8:	b580      	push	{r7, lr}
 800e5ca:	b086      	sub	sp, #24
 800e5cc:	af00      	add	r7, sp, #0
 800e5ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800e5d0:	2300      	movs	r3, #0
 800e5d2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800e5d4:	2300      	movs	r3, #0
 800e5d6:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	f003 0301 	and.w	r3, r3, #1
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	d10b      	bne.n	800e5fc <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	681b      	ldr	r3, [r3, #0]
 800e5e8:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	d105      	bne.n	800e5fc <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	681b      	ldr	r3, [r3, #0]
 800e5f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d075      	beq.n	800e6e8 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800e5fc:	4b91      	ldr	r3, [pc, #580]	; (800e844 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800e5fe:	2200      	movs	r2, #0
 800e600:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800e602:	f7fc fe4d 	bl	800b2a0 <HAL_GetTick>
 800e606:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800e608:	e008      	b.n	800e61c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800e60a:	f7fc fe49 	bl	800b2a0 <HAL_GetTick>
 800e60e:	4602      	mov	r2, r0
 800e610:	697b      	ldr	r3, [r7, #20]
 800e612:	1ad3      	subs	r3, r2, r3
 800e614:	2b02      	cmp	r3, #2
 800e616:	d901      	bls.n	800e61c <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800e618:	2303      	movs	r3, #3
 800e61a:	e189      	b.n	800e930 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800e61c:	4b8a      	ldr	r3, [pc, #552]	; (800e848 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e624:	2b00      	cmp	r3, #0
 800e626:	d1f0      	bne.n	800e60a <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	681b      	ldr	r3, [r3, #0]
 800e62c:	f003 0301 	and.w	r3, r3, #1
 800e630:	2b00      	cmp	r3, #0
 800e632:	d009      	beq.n	800e648 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	685b      	ldr	r3, [r3, #4]
 800e638:	019a      	lsls	r2, r3, #6
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	689b      	ldr	r3, [r3, #8]
 800e63e:	071b      	lsls	r3, r3, #28
 800e640:	4981      	ldr	r1, [pc, #516]	; (800e848 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800e642:	4313      	orrs	r3, r2
 800e644:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	681b      	ldr	r3, [r3, #0]
 800e64c:	f003 0302 	and.w	r3, r3, #2
 800e650:	2b00      	cmp	r3, #0
 800e652:	d01f      	beq.n	800e694 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800e654:	4b7c      	ldr	r3, [pc, #496]	; (800e848 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800e656:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e65a:	0f1b      	lsrs	r3, r3, #28
 800e65c:	f003 0307 	and.w	r3, r3, #7
 800e660:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	685b      	ldr	r3, [r3, #4]
 800e666:	019a      	lsls	r2, r3, #6
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	68db      	ldr	r3, [r3, #12]
 800e66c:	061b      	lsls	r3, r3, #24
 800e66e:	431a      	orrs	r2, r3
 800e670:	693b      	ldr	r3, [r7, #16]
 800e672:	071b      	lsls	r3, r3, #28
 800e674:	4974      	ldr	r1, [pc, #464]	; (800e848 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800e676:	4313      	orrs	r3, r2
 800e678:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800e67c:	4b72      	ldr	r3, [pc, #456]	; (800e848 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800e67e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e682:	f023 021f 	bic.w	r2, r3, #31
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	69db      	ldr	r3, [r3, #28]
 800e68a:	3b01      	subs	r3, #1
 800e68c:	496e      	ldr	r1, [pc, #440]	; (800e848 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800e68e:	4313      	orrs	r3, r2
 800e690:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	681b      	ldr	r3, [r3, #0]
 800e698:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d00d      	beq.n	800e6bc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	685b      	ldr	r3, [r3, #4]
 800e6a4:	019a      	lsls	r2, r3, #6
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	68db      	ldr	r3, [r3, #12]
 800e6aa:	061b      	lsls	r3, r3, #24
 800e6ac:	431a      	orrs	r2, r3
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	689b      	ldr	r3, [r3, #8]
 800e6b2:	071b      	lsls	r3, r3, #28
 800e6b4:	4964      	ldr	r1, [pc, #400]	; (800e848 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800e6b6:	4313      	orrs	r3, r2
 800e6b8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800e6bc:	4b61      	ldr	r3, [pc, #388]	; (800e844 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800e6be:	2201      	movs	r2, #1
 800e6c0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800e6c2:	f7fc fded 	bl	800b2a0 <HAL_GetTick>
 800e6c6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800e6c8:	e008      	b.n	800e6dc <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800e6ca:	f7fc fde9 	bl	800b2a0 <HAL_GetTick>
 800e6ce:	4602      	mov	r2, r0
 800e6d0:	697b      	ldr	r3, [r7, #20]
 800e6d2:	1ad3      	subs	r3, r2, r3
 800e6d4:	2b02      	cmp	r3, #2
 800e6d6:	d901      	bls.n	800e6dc <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800e6d8:	2303      	movs	r3, #3
 800e6da:	e129      	b.n	800e930 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800e6dc:	4b5a      	ldr	r3, [pc, #360]	; (800e848 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d0f0      	beq.n	800e6ca <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	681b      	ldr	r3, [r3, #0]
 800e6ec:	f003 0304 	and.w	r3, r3, #4
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d105      	bne.n	800e700 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	681b      	ldr	r3, [r3, #0]
 800e6f8:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	d079      	beq.n	800e7f4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800e700:	4b52      	ldr	r3, [pc, #328]	; (800e84c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800e702:	2200      	movs	r2, #0
 800e704:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800e706:	f7fc fdcb 	bl	800b2a0 <HAL_GetTick>
 800e70a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800e70c:	e008      	b.n	800e720 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800e70e:	f7fc fdc7 	bl	800b2a0 <HAL_GetTick>
 800e712:	4602      	mov	r2, r0
 800e714:	697b      	ldr	r3, [r7, #20]
 800e716:	1ad3      	subs	r3, r2, r3
 800e718:	2b02      	cmp	r3, #2
 800e71a:	d901      	bls.n	800e720 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800e71c:	2303      	movs	r3, #3
 800e71e:	e107      	b.n	800e930 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800e720:	4b49      	ldr	r3, [pc, #292]	; (800e848 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800e722:	681b      	ldr	r3, [r3, #0]
 800e724:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e728:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e72c:	d0ef      	beq.n	800e70e <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	681b      	ldr	r3, [r3, #0]
 800e732:	f003 0304 	and.w	r3, r3, #4
 800e736:	2b00      	cmp	r3, #0
 800e738:	d020      	beq.n	800e77c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800e73a:	4b43      	ldr	r3, [pc, #268]	; (800e848 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800e73c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e740:	0f1b      	lsrs	r3, r3, #28
 800e742:	f003 0307 	and.w	r3, r3, #7
 800e746:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	691b      	ldr	r3, [r3, #16]
 800e74c:	019a      	lsls	r2, r3, #6
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	695b      	ldr	r3, [r3, #20]
 800e752:	061b      	lsls	r3, r3, #24
 800e754:	431a      	orrs	r2, r3
 800e756:	693b      	ldr	r3, [r7, #16]
 800e758:	071b      	lsls	r3, r3, #28
 800e75a:	493b      	ldr	r1, [pc, #236]	; (800e848 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800e75c:	4313      	orrs	r3, r2
 800e75e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800e762:	4b39      	ldr	r3, [pc, #228]	; (800e848 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800e764:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e768:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	6a1b      	ldr	r3, [r3, #32]
 800e770:	3b01      	subs	r3, #1
 800e772:	021b      	lsls	r3, r3, #8
 800e774:	4934      	ldr	r1, [pc, #208]	; (800e848 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800e776:	4313      	orrs	r3, r2
 800e778:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	681b      	ldr	r3, [r3, #0]
 800e780:	f003 0308 	and.w	r3, r3, #8
 800e784:	2b00      	cmp	r3, #0
 800e786:	d01e      	beq.n	800e7c6 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800e788:	4b2f      	ldr	r3, [pc, #188]	; (800e848 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800e78a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e78e:	0e1b      	lsrs	r3, r3, #24
 800e790:	f003 030f 	and.w	r3, r3, #15
 800e794:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	691b      	ldr	r3, [r3, #16]
 800e79a:	019a      	lsls	r2, r3, #6
 800e79c:	693b      	ldr	r3, [r7, #16]
 800e79e:	061b      	lsls	r3, r3, #24
 800e7a0:	431a      	orrs	r2, r3
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	699b      	ldr	r3, [r3, #24]
 800e7a6:	071b      	lsls	r3, r3, #28
 800e7a8:	4927      	ldr	r1, [pc, #156]	; (800e848 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800e7aa:	4313      	orrs	r3, r2
 800e7ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800e7b0:	4b25      	ldr	r3, [pc, #148]	; (800e848 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800e7b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e7b6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7be:	4922      	ldr	r1, [pc, #136]	; (800e848 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800e7c0:	4313      	orrs	r3, r2
 800e7c2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800e7c6:	4b21      	ldr	r3, [pc, #132]	; (800e84c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800e7c8:	2201      	movs	r2, #1
 800e7ca:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800e7cc:	f7fc fd68 	bl	800b2a0 <HAL_GetTick>
 800e7d0:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800e7d2:	e008      	b.n	800e7e6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800e7d4:	f7fc fd64 	bl	800b2a0 <HAL_GetTick>
 800e7d8:	4602      	mov	r2, r0
 800e7da:	697b      	ldr	r3, [r7, #20]
 800e7dc:	1ad3      	subs	r3, r2, r3
 800e7de:	2b02      	cmp	r3, #2
 800e7e0:	d901      	bls.n	800e7e6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800e7e2:	2303      	movs	r3, #3
 800e7e4:	e0a4      	b.n	800e930 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800e7e6:	4b18      	ldr	r3, [pc, #96]	; (800e848 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e7ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e7f2:	d1ef      	bne.n	800e7d4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	681b      	ldr	r3, [r3, #0]
 800e7f8:	f003 0320 	and.w	r3, r3, #32
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	f000 808b 	beq.w	800e918 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800e802:	2300      	movs	r3, #0
 800e804:	60fb      	str	r3, [r7, #12]
 800e806:	4b10      	ldr	r3, [pc, #64]	; (800e848 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800e808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e80a:	4a0f      	ldr	r2, [pc, #60]	; (800e848 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800e80c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e810:	6413      	str	r3, [r2, #64]	; 0x40
 800e812:	4b0d      	ldr	r3, [pc, #52]	; (800e848 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800e814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e816:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e81a:	60fb      	str	r3, [r7, #12]
 800e81c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800e81e:	4b0c      	ldr	r3, [pc, #48]	; (800e850 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	4a0b      	ldr	r2, [pc, #44]	; (800e850 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800e824:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e828:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800e82a:	f7fc fd39 	bl	800b2a0 <HAL_GetTick>
 800e82e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800e830:	e010      	b.n	800e854 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800e832:	f7fc fd35 	bl	800b2a0 <HAL_GetTick>
 800e836:	4602      	mov	r2, r0
 800e838:	697b      	ldr	r3, [r7, #20]
 800e83a:	1ad3      	subs	r3, r2, r3
 800e83c:	2b02      	cmp	r3, #2
 800e83e:	d909      	bls.n	800e854 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 800e840:	2303      	movs	r3, #3
 800e842:	e075      	b.n	800e930 <HAL_RCCEx_PeriphCLKConfig+0x368>
 800e844:	42470068 	.word	0x42470068
 800e848:	40023800 	.word	0x40023800
 800e84c:	42470070 	.word	0x42470070
 800e850:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800e854:	4b38      	ldr	r3, [pc, #224]	; (800e938 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 800e856:	681b      	ldr	r3, [r3, #0]
 800e858:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d0e8      	beq.n	800e832 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800e860:	4b36      	ldr	r3, [pc, #216]	; (800e93c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800e862:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e864:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e868:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800e86a:	693b      	ldr	r3, [r7, #16]
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	d02f      	beq.n	800e8d0 <HAL_RCCEx_PeriphCLKConfig+0x308>
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e874:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e878:	693a      	ldr	r2, [r7, #16]
 800e87a:	429a      	cmp	r2, r3
 800e87c:	d028      	beq.n	800e8d0 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800e87e:	4b2f      	ldr	r3, [pc, #188]	; (800e93c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800e880:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e882:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e886:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800e888:	4b2d      	ldr	r3, [pc, #180]	; (800e940 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800e88a:	2201      	movs	r2, #1
 800e88c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800e88e:	4b2c      	ldr	r3, [pc, #176]	; (800e940 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800e890:	2200      	movs	r2, #0
 800e892:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800e894:	4a29      	ldr	r2, [pc, #164]	; (800e93c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800e896:	693b      	ldr	r3, [r7, #16]
 800e898:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800e89a:	4b28      	ldr	r3, [pc, #160]	; (800e93c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800e89c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e89e:	f003 0301 	and.w	r3, r3, #1
 800e8a2:	2b01      	cmp	r3, #1
 800e8a4:	d114      	bne.n	800e8d0 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800e8a6:	f7fc fcfb 	bl	800b2a0 <HAL_GetTick>
 800e8aa:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e8ac:	e00a      	b.n	800e8c4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800e8ae:	f7fc fcf7 	bl	800b2a0 <HAL_GetTick>
 800e8b2:	4602      	mov	r2, r0
 800e8b4:	697b      	ldr	r3, [r7, #20]
 800e8b6:	1ad3      	subs	r3, r2, r3
 800e8b8:	f241 3288 	movw	r2, #5000	; 0x1388
 800e8bc:	4293      	cmp	r3, r2
 800e8be:	d901      	bls.n	800e8c4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 800e8c0:	2303      	movs	r3, #3
 800e8c2:	e035      	b.n	800e930 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e8c4:	4b1d      	ldr	r3, [pc, #116]	; (800e93c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800e8c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e8c8:	f003 0302 	and.w	r3, r3, #2
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d0ee      	beq.n	800e8ae <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e8d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e8d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e8dc:	d10d      	bne.n	800e8fa <HAL_RCCEx_PeriphCLKConfig+0x332>
 800e8de:	4b17      	ldr	r3, [pc, #92]	; (800e93c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800e8e0:	689b      	ldr	r3, [r3, #8]
 800e8e2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e8ea:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800e8ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e8f2:	4912      	ldr	r1, [pc, #72]	; (800e93c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800e8f4:	4313      	orrs	r3, r2
 800e8f6:	608b      	str	r3, [r1, #8]
 800e8f8:	e005      	b.n	800e906 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 800e8fa:	4b10      	ldr	r3, [pc, #64]	; (800e93c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800e8fc:	689b      	ldr	r3, [r3, #8]
 800e8fe:	4a0f      	ldr	r2, [pc, #60]	; (800e93c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800e900:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800e904:	6093      	str	r3, [r2, #8]
 800e906:	4b0d      	ldr	r3, [pc, #52]	; (800e93c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800e908:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e90e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e912:	490a      	ldr	r1, [pc, #40]	; (800e93c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800e914:	4313      	orrs	r3, r2
 800e916:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	681b      	ldr	r3, [r3, #0]
 800e91c:	f003 0310 	and.w	r3, r3, #16
 800e920:	2b00      	cmp	r3, #0
 800e922:	d004      	beq.n	800e92e <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800e92a:	4b06      	ldr	r3, [pc, #24]	; (800e944 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 800e92c:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800e92e:	2300      	movs	r3, #0
}
 800e930:	4618      	mov	r0, r3
 800e932:	3718      	adds	r7, #24
 800e934:	46bd      	mov	sp, r7
 800e936:	bd80      	pop	{r7, pc}
 800e938:	40007000 	.word	0x40007000
 800e93c:	40023800 	.word	0x40023800
 800e940:	42470e40 	.word	0x42470e40
 800e944:	424711e0 	.word	0x424711e0

0800e948 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 800e948:	b580      	push	{r7, lr}
 800e94a:	b082      	sub	sp, #8
 800e94c:	af00      	add	r7, sp, #0
 800e94e:	6078      	str	r0, [r7, #4]
 800e950:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	2b00      	cmp	r3, #0
 800e956:	d101      	bne.n	800e95c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800e958:	2301      	movs	r3, #1
 800e95a:	e025      	b.n	800e9a8 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e962:	b2db      	uxtb	r3, r3
 800e964:	2b00      	cmp	r3, #0
 800e966:	d106      	bne.n	800e976 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	2200      	movs	r2, #0
 800e96c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800e970:	6878      	ldr	r0, [r7, #4]
 800e972:	f7f8 fc83 	bl	800727c <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	2202      	movs	r2, #2
 800e97a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	681a      	ldr	r2, [r3, #0]
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	3304      	adds	r3, #4
 800e986:	4619      	mov	r1, r3
 800e988:	4610      	mov	r0, r2
 800e98a:	f001 ff11 	bl	80107b0 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	6818      	ldr	r0, [r3, #0]
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	685b      	ldr	r3, [r3, #4]
 800e996:	461a      	mov	r2, r3
 800e998:	6839      	ldr	r1, [r7, #0]
 800e99a:	f001 ff7c 	bl	8010896 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	2201      	movs	r2, #1
 800e9a2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 800e9a6:	2300      	movs	r3, #0
}
 800e9a8:	4618      	mov	r0, r3
 800e9aa:	3708      	adds	r7, #8
 800e9ac:	46bd      	mov	sp, r7
 800e9ae:	bd80      	pop	{r7, pc}

0800e9b0 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800e9b0:	b580      	push	{r7, lr}
 800e9b2:	b084      	sub	sp, #16
 800e9b4:	af00      	add	r7, sp, #0
 800e9b6:	60f8      	str	r0, [r7, #12]
 800e9b8:	60b9      	str	r1, [r7, #8]
 800e9ba:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800e9bc:	68fb      	ldr	r3, [r7, #12]
 800e9be:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e9c2:	b2db      	uxtb	r3, r3
 800e9c4:	2b02      	cmp	r3, #2
 800e9c6:	d101      	bne.n	800e9cc <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 800e9c8:	2302      	movs	r3, #2
 800e9ca:	e018      	b.n	800e9fe <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800e9cc:	68fb      	ldr	r3, [r7, #12]
 800e9ce:	2202      	movs	r2, #2
 800e9d0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800e9d4:	68fb      	ldr	r3, [r7, #12]
 800e9d6:	681b      	ldr	r3, [r3, #0]
 800e9d8:	687a      	ldr	r2, [r7, #4]
 800e9da:	68b9      	ldr	r1, [r7, #8]
 800e9dc:	4618      	mov	r0, r3
 800e9de:	f001 ffd9 	bl	8010994 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800e9e2:	68bb      	ldr	r3, [r7, #8]
 800e9e4:	681b      	ldr	r3, [r3, #0]
 800e9e6:	2b02      	cmp	r3, #2
 800e9e8:	d104      	bne.n	800e9f4 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800e9ea:	68fb      	ldr	r3, [r7, #12]
 800e9ec:	2205      	movs	r2, #5
 800e9ee:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800e9f2:	e003      	b.n	800e9fc <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 800e9f4:	68fb      	ldr	r3, [r7, #12]
 800e9f6:	2201      	movs	r2, #1
 800e9f8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 800e9fc:	2300      	movs	r3, #0
}
 800e9fe:	4618      	mov	r0, r3
 800ea00:	3710      	adds	r7, #16
 800ea02:	46bd      	mov	sp, r7
 800ea04:	bd80      	pop	{r7, pc}

0800ea06 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800ea06:	b580      	push	{r7, lr}
 800ea08:	b082      	sub	sp, #8
 800ea0a:	af00      	add	r7, sp, #0
 800ea0c:	6078      	str	r0, [r7, #4]
 800ea0e:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800ea16:	b2db      	uxtb	r3, r3
 800ea18:	2b02      	cmp	r3, #2
 800ea1a:	d101      	bne.n	800ea20 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800ea1c:	2302      	movs	r3, #2
 800ea1e:	e00e      	b.n	800ea3e <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	2202      	movs	r2, #2
 800ea24:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	681b      	ldr	r3, [r3, #0]
 800ea2c:	6839      	ldr	r1, [r7, #0]
 800ea2e:	4618      	mov	r0, r3
 800ea30:	f001 ffec 	bl	8010a0c <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	2201      	movs	r2, #1
 800ea38:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 800ea3c:	2300      	movs	r3, #0
}
 800ea3e:	4618      	mov	r0, r3
 800ea40:	3708      	adds	r7, #8
 800ea42:	46bd      	mov	sp, r7
 800ea44:	bd80      	pop	{r7, pc}

0800ea46 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ea46:	b580      	push	{r7, lr}
 800ea48:	b082      	sub	sp, #8
 800ea4a:	af00      	add	r7, sp, #0
 800ea4c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	d101      	bne.n	800ea58 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ea54:	2301      	movs	r3, #1
 800ea56:	e056      	b.n	800eb06 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	2200      	movs	r2, #0
 800ea5c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ea64:	b2db      	uxtb	r3, r3
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	d106      	bne.n	800ea78 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	2200      	movs	r2, #0
 800ea6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ea72:	6878      	ldr	r0, [r7, #4]
 800ea74:	f7f9 f8d0 	bl	8007c18 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	2202      	movs	r2, #2
 800ea7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	681b      	ldr	r3, [r3, #0]
 800ea84:	681a      	ldr	r2, [r3, #0]
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	681b      	ldr	r3, [r3, #0]
 800ea8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ea8e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	685a      	ldr	r2, [r3, #4]
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	689b      	ldr	r3, [r3, #8]
 800ea98:	431a      	orrs	r2, r3
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	68db      	ldr	r3, [r3, #12]
 800ea9e:	431a      	orrs	r2, r3
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	691b      	ldr	r3, [r3, #16]
 800eaa4:	431a      	orrs	r2, r3
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	695b      	ldr	r3, [r3, #20]
 800eaaa:	431a      	orrs	r2, r3
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	699b      	ldr	r3, [r3, #24]
 800eab0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800eab4:	431a      	orrs	r2, r3
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	69db      	ldr	r3, [r3, #28]
 800eaba:	431a      	orrs	r2, r3
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	6a1b      	ldr	r3, [r3, #32]
 800eac0:	ea42 0103 	orr.w	r1, r2, r3
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	430a      	orrs	r2, r1
 800eace:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	699b      	ldr	r3, [r3, #24]
 800ead4:	0c1b      	lsrs	r3, r3, #16
 800ead6:	f003 0104 	and.w	r1, r3, #4
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	681b      	ldr	r3, [r3, #0]
 800eae2:	430a      	orrs	r2, r1
 800eae4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	681b      	ldr	r3, [r3, #0]
 800eaea:	69da      	ldr	r2, [r3, #28]
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	681b      	ldr	r3, [r3, #0]
 800eaf0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800eaf4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	2200      	movs	r2, #0
 800eafa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	2201      	movs	r2, #1
 800eb00:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800eb04:	2300      	movs	r3, #0
}
 800eb06:	4618      	mov	r0, r3
 800eb08:	3708      	adds	r7, #8
 800eb0a:	46bd      	mov	sp, r7
 800eb0c:	bd80      	pop	{r7, pc}

0800eb0e <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800eb0e:	b580      	push	{r7, lr}
 800eb10:	b082      	sub	sp, #8
 800eb12:	af00      	add	r7, sp, #0
 800eb14:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	d101      	bne.n	800eb20 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800eb1c:	2301      	movs	r3, #1
 800eb1e:	e01a      	b.n	800eb56 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	2202      	movs	r2, #2
 800eb24:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	681b      	ldr	r3, [r3, #0]
 800eb2c:	681a      	ldr	r2, [r3, #0]
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	681b      	ldr	r3, [r3, #0]
 800eb32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800eb36:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 800eb38:	6878      	ldr	r0, [r7, #4]
 800eb3a:	f7f9 f8b5 	bl	8007ca8 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	2200      	movs	r2, #0
 800eb42:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	2200      	movs	r2, #0
 800eb48:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	2200      	movs	r2, #0
 800eb50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800eb54:	2300      	movs	r3, #0
}
 800eb56:	4618      	mov	r0, r3
 800eb58:	3708      	adds	r7, #8
 800eb5a:	46bd      	mov	sp, r7
 800eb5c:	bd80      	pop	{r7, pc}

0800eb5e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800eb5e:	b580      	push	{r7, lr}
 800eb60:	b088      	sub	sp, #32
 800eb62:	af00      	add	r7, sp, #0
 800eb64:	60f8      	str	r0, [r7, #12]
 800eb66:	60b9      	str	r1, [r7, #8]
 800eb68:	603b      	str	r3, [r7, #0]
 800eb6a:	4613      	mov	r3, r2
 800eb6c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800eb6e:	2300      	movs	r3, #0
 800eb70:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800eb72:	68fb      	ldr	r3, [r7, #12]
 800eb74:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800eb78:	2b01      	cmp	r3, #1
 800eb7a:	d101      	bne.n	800eb80 <HAL_SPI_Transmit+0x22>
 800eb7c:	2302      	movs	r3, #2
 800eb7e:	e11e      	b.n	800edbe <HAL_SPI_Transmit+0x260>
 800eb80:	68fb      	ldr	r3, [r7, #12]
 800eb82:	2201      	movs	r2, #1
 800eb84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800eb88:	f7fc fb8a 	bl	800b2a0 <HAL_GetTick>
 800eb8c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800eb8e:	88fb      	ldrh	r3, [r7, #6]
 800eb90:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800eb92:	68fb      	ldr	r3, [r7, #12]
 800eb94:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800eb98:	b2db      	uxtb	r3, r3
 800eb9a:	2b01      	cmp	r3, #1
 800eb9c:	d002      	beq.n	800eba4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800eb9e:	2302      	movs	r3, #2
 800eba0:	77fb      	strb	r3, [r7, #31]
    goto error;
 800eba2:	e103      	b.n	800edac <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800eba4:	68bb      	ldr	r3, [r7, #8]
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d002      	beq.n	800ebb0 <HAL_SPI_Transmit+0x52>
 800ebaa:	88fb      	ldrh	r3, [r7, #6]
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d102      	bne.n	800ebb6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800ebb0:	2301      	movs	r3, #1
 800ebb2:	77fb      	strb	r3, [r7, #31]
    goto error;
 800ebb4:	e0fa      	b.n	800edac <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800ebb6:	68fb      	ldr	r3, [r7, #12]
 800ebb8:	2203      	movs	r2, #3
 800ebba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ebbe:	68fb      	ldr	r3, [r7, #12]
 800ebc0:	2200      	movs	r2, #0
 800ebc2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800ebc4:	68fb      	ldr	r3, [r7, #12]
 800ebc6:	68ba      	ldr	r2, [r7, #8]
 800ebc8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800ebca:	68fb      	ldr	r3, [r7, #12]
 800ebcc:	88fa      	ldrh	r2, [r7, #6]
 800ebce:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800ebd0:	68fb      	ldr	r3, [r7, #12]
 800ebd2:	88fa      	ldrh	r2, [r7, #6]
 800ebd4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800ebd6:	68fb      	ldr	r3, [r7, #12]
 800ebd8:	2200      	movs	r2, #0
 800ebda:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800ebdc:	68fb      	ldr	r3, [r7, #12]
 800ebde:	2200      	movs	r2, #0
 800ebe0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800ebe2:	68fb      	ldr	r3, [r7, #12]
 800ebe4:	2200      	movs	r2, #0
 800ebe6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	2200      	movs	r2, #0
 800ebec:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800ebee:	68fb      	ldr	r3, [r7, #12]
 800ebf0:	2200      	movs	r2, #0
 800ebf2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	689b      	ldr	r3, [r3, #8]
 800ebf8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ebfc:	d107      	bne.n	800ec0e <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800ebfe:	68fb      	ldr	r3, [r7, #12]
 800ec00:	681b      	ldr	r3, [r3, #0]
 800ec02:	681a      	ldr	r2, [r3, #0]
 800ec04:	68fb      	ldr	r3, [r7, #12]
 800ec06:	681b      	ldr	r3, [r3, #0]
 800ec08:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ec0c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ec0e:	68fb      	ldr	r3, [r7, #12]
 800ec10:	681b      	ldr	r3, [r3, #0]
 800ec12:	681b      	ldr	r3, [r3, #0]
 800ec14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ec18:	2b40      	cmp	r3, #64	; 0x40
 800ec1a:	d007      	beq.n	800ec2c <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ec1c:	68fb      	ldr	r3, [r7, #12]
 800ec1e:	681b      	ldr	r3, [r3, #0]
 800ec20:	681a      	ldr	r2, [r3, #0]
 800ec22:	68fb      	ldr	r3, [r7, #12]
 800ec24:	681b      	ldr	r3, [r3, #0]
 800ec26:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ec2a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	68db      	ldr	r3, [r3, #12]
 800ec30:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ec34:	d14b      	bne.n	800ecce <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ec36:	68fb      	ldr	r3, [r7, #12]
 800ec38:	685b      	ldr	r3, [r3, #4]
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	d002      	beq.n	800ec44 <HAL_SPI_Transmit+0xe6>
 800ec3e:	8afb      	ldrh	r3, [r7, #22]
 800ec40:	2b01      	cmp	r3, #1
 800ec42:	d13e      	bne.n	800ecc2 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ec44:	68fb      	ldr	r3, [r7, #12]
 800ec46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec48:	881a      	ldrh	r2, [r3, #0]
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	681b      	ldr	r3, [r3, #0]
 800ec4e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800ec50:	68fb      	ldr	r3, [r7, #12]
 800ec52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec54:	1c9a      	adds	r2, r3, #2
 800ec56:	68fb      	ldr	r3, [r7, #12]
 800ec58:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ec5e:	b29b      	uxth	r3, r3
 800ec60:	3b01      	subs	r3, #1
 800ec62:	b29a      	uxth	r2, r3
 800ec64:	68fb      	ldr	r3, [r7, #12]
 800ec66:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800ec68:	e02b      	b.n	800ecc2 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800ec6a:	68fb      	ldr	r3, [r7, #12]
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	689b      	ldr	r3, [r3, #8]
 800ec70:	f003 0302 	and.w	r3, r3, #2
 800ec74:	2b02      	cmp	r3, #2
 800ec76:	d112      	bne.n	800ec9e <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ec78:	68fb      	ldr	r3, [r7, #12]
 800ec7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec7c:	881a      	ldrh	r2, [r3, #0]
 800ec7e:	68fb      	ldr	r3, [r7, #12]
 800ec80:	681b      	ldr	r3, [r3, #0]
 800ec82:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ec84:	68fb      	ldr	r3, [r7, #12]
 800ec86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec88:	1c9a      	adds	r2, r3, #2
 800ec8a:	68fb      	ldr	r3, [r7, #12]
 800ec8c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ec8e:	68fb      	ldr	r3, [r7, #12]
 800ec90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ec92:	b29b      	uxth	r3, r3
 800ec94:	3b01      	subs	r3, #1
 800ec96:	b29a      	uxth	r2, r3
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	86da      	strh	r2, [r3, #54]	; 0x36
 800ec9c:	e011      	b.n	800ecc2 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ec9e:	f7fc faff 	bl	800b2a0 <HAL_GetTick>
 800eca2:	4602      	mov	r2, r0
 800eca4:	69bb      	ldr	r3, [r7, #24]
 800eca6:	1ad3      	subs	r3, r2, r3
 800eca8:	683a      	ldr	r2, [r7, #0]
 800ecaa:	429a      	cmp	r2, r3
 800ecac:	d803      	bhi.n	800ecb6 <HAL_SPI_Transmit+0x158>
 800ecae:	683b      	ldr	r3, [r7, #0]
 800ecb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ecb4:	d102      	bne.n	800ecbc <HAL_SPI_Transmit+0x15e>
 800ecb6:	683b      	ldr	r3, [r7, #0]
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	d102      	bne.n	800ecc2 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800ecbc:	2303      	movs	r3, #3
 800ecbe:	77fb      	strb	r3, [r7, #31]
          goto error;
 800ecc0:	e074      	b.n	800edac <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800ecc2:	68fb      	ldr	r3, [r7, #12]
 800ecc4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ecc6:	b29b      	uxth	r3, r3
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	d1ce      	bne.n	800ec6a <HAL_SPI_Transmit+0x10c>
 800eccc:	e04c      	b.n	800ed68 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ecce:	68fb      	ldr	r3, [r7, #12]
 800ecd0:	685b      	ldr	r3, [r3, #4]
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	d002      	beq.n	800ecdc <HAL_SPI_Transmit+0x17e>
 800ecd6:	8afb      	ldrh	r3, [r7, #22]
 800ecd8:	2b01      	cmp	r3, #1
 800ecda:	d140      	bne.n	800ed5e <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ecdc:	68fb      	ldr	r3, [r7, #12]
 800ecde:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ece0:	68fb      	ldr	r3, [r7, #12]
 800ece2:	681b      	ldr	r3, [r3, #0]
 800ece4:	330c      	adds	r3, #12
 800ece6:	7812      	ldrb	r2, [r2, #0]
 800ece8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800ecea:	68fb      	ldr	r3, [r7, #12]
 800ecec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ecee:	1c5a      	adds	r2, r3, #1
 800ecf0:	68fb      	ldr	r3, [r7, #12]
 800ecf2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800ecf4:	68fb      	ldr	r3, [r7, #12]
 800ecf6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ecf8:	b29b      	uxth	r3, r3
 800ecfa:	3b01      	subs	r3, #1
 800ecfc:	b29a      	uxth	r2, r3
 800ecfe:	68fb      	ldr	r3, [r7, #12]
 800ed00:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800ed02:	e02c      	b.n	800ed5e <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800ed04:	68fb      	ldr	r3, [r7, #12]
 800ed06:	681b      	ldr	r3, [r3, #0]
 800ed08:	689b      	ldr	r3, [r3, #8]
 800ed0a:	f003 0302 	and.w	r3, r3, #2
 800ed0e:	2b02      	cmp	r3, #2
 800ed10:	d113      	bne.n	800ed3a <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ed12:	68fb      	ldr	r3, [r7, #12]
 800ed14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ed16:	68fb      	ldr	r3, [r7, #12]
 800ed18:	681b      	ldr	r3, [r3, #0]
 800ed1a:	330c      	adds	r3, #12
 800ed1c:	7812      	ldrb	r2, [r2, #0]
 800ed1e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800ed20:	68fb      	ldr	r3, [r7, #12]
 800ed22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed24:	1c5a      	adds	r2, r3, #1
 800ed26:	68fb      	ldr	r3, [r7, #12]
 800ed28:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ed2a:	68fb      	ldr	r3, [r7, #12]
 800ed2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ed2e:	b29b      	uxth	r3, r3
 800ed30:	3b01      	subs	r3, #1
 800ed32:	b29a      	uxth	r2, r3
 800ed34:	68fb      	ldr	r3, [r7, #12]
 800ed36:	86da      	strh	r2, [r3, #54]	; 0x36
 800ed38:	e011      	b.n	800ed5e <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ed3a:	f7fc fab1 	bl	800b2a0 <HAL_GetTick>
 800ed3e:	4602      	mov	r2, r0
 800ed40:	69bb      	ldr	r3, [r7, #24]
 800ed42:	1ad3      	subs	r3, r2, r3
 800ed44:	683a      	ldr	r2, [r7, #0]
 800ed46:	429a      	cmp	r2, r3
 800ed48:	d803      	bhi.n	800ed52 <HAL_SPI_Transmit+0x1f4>
 800ed4a:	683b      	ldr	r3, [r7, #0]
 800ed4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed50:	d102      	bne.n	800ed58 <HAL_SPI_Transmit+0x1fa>
 800ed52:	683b      	ldr	r3, [r7, #0]
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	d102      	bne.n	800ed5e <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800ed58:	2303      	movs	r3, #3
 800ed5a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800ed5c:	e026      	b.n	800edac <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800ed5e:	68fb      	ldr	r3, [r7, #12]
 800ed60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ed62:	b29b      	uxth	r3, r3
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d1cd      	bne.n	800ed04 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ed68:	69ba      	ldr	r2, [r7, #24]
 800ed6a:	6839      	ldr	r1, [r7, #0]
 800ed6c:	68f8      	ldr	r0, [r7, #12]
 800ed6e:	f000 fbb3 	bl	800f4d8 <SPI_EndRxTxTransaction>
 800ed72:	4603      	mov	r3, r0
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	d002      	beq.n	800ed7e <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ed78:	68fb      	ldr	r3, [r7, #12]
 800ed7a:	2220      	movs	r2, #32
 800ed7c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ed7e:	68fb      	ldr	r3, [r7, #12]
 800ed80:	689b      	ldr	r3, [r3, #8]
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	d10a      	bne.n	800ed9c <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ed86:	2300      	movs	r3, #0
 800ed88:	613b      	str	r3, [r7, #16]
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	681b      	ldr	r3, [r3, #0]
 800ed8e:	68db      	ldr	r3, [r3, #12]
 800ed90:	613b      	str	r3, [r7, #16]
 800ed92:	68fb      	ldr	r3, [r7, #12]
 800ed94:	681b      	ldr	r3, [r3, #0]
 800ed96:	689b      	ldr	r3, [r3, #8]
 800ed98:	613b      	str	r3, [r7, #16]
 800ed9a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ed9c:	68fb      	ldr	r3, [r7, #12]
 800ed9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d002      	beq.n	800edaa <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800eda4:	2301      	movs	r3, #1
 800eda6:	77fb      	strb	r3, [r7, #31]
 800eda8:	e000      	b.n	800edac <HAL_SPI_Transmit+0x24e>
  }

error:
 800edaa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800edac:	68fb      	ldr	r3, [r7, #12]
 800edae:	2201      	movs	r2, #1
 800edb0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800edb4:	68fb      	ldr	r3, [r7, #12]
 800edb6:	2200      	movs	r2, #0
 800edb8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800edbc:	7ffb      	ldrb	r3, [r7, #31]
}
 800edbe:	4618      	mov	r0, r3
 800edc0:	3720      	adds	r7, #32
 800edc2:	46bd      	mov	sp, r7
 800edc4:	bd80      	pop	{r7, pc}

0800edc6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800edc6:	b580      	push	{r7, lr}
 800edc8:	b088      	sub	sp, #32
 800edca:	af02      	add	r7, sp, #8
 800edcc:	60f8      	str	r0, [r7, #12]
 800edce:	60b9      	str	r1, [r7, #8]
 800edd0:	603b      	str	r3, [r7, #0]
 800edd2:	4613      	mov	r3, r2
 800edd4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800edd6:	2300      	movs	r3, #0
 800edd8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800edda:	68fb      	ldr	r3, [r7, #12]
 800eddc:	685b      	ldr	r3, [r3, #4]
 800edde:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ede2:	d112      	bne.n	800ee0a <HAL_SPI_Receive+0x44>
 800ede4:	68fb      	ldr	r3, [r7, #12]
 800ede6:	689b      	ldr	r3, [r3, #8]
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d10e      	bne.n	800ee0a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800edec:	68fb      	ldr	r3, [r7, #12]
 800edee:	2204      	movs	r2, #4
 800edf0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800edf4:	88fa      	ldrh	r2, [r7, #6]
 800edf6:	683b      	ldr	r3, [r7, #0]
 800edf8:	9300      	str	r3, [sp, #0]
 800edfa:	4613      	mov	r3, r2
 800edfc:	68ba      	ldr	r2, [r7, #8]
 800edfe:	68b9      	ldr	r1, [r7, #8]
 800ee00:	68f8      	ldr	r0, [r7, #12]
 800ee02:	f000 f8e9 	bl	800efd8 <HAL_SPI_TransmitReceive>
 800ee06:	4603      	mov	r3, r0
 800ee08:	e0e2      	b.n	800efd0 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ee0a:	68fb      	ldr	r3, [r7, #12]
 800ee0c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800ee10:	2b01      	cmp	r3, #1
 800ee12:	d101      	bne.n	800ee18 <HAL_SPI_Receive+0x52>
 800ee14:	2302      	movs	r3, #2
 800ee16:	e0db      	b.n	800efd0 <HAL_SPI_Receive+0x20a>
 800ee18:	68fb      	ldr	r3, [r7, #12]
 800ee1a:	2201      	movs	r2, #1
 800ee1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ee20:	f7fc fa3e 	bl	800b2a0 <HAL_GetTick>
 800ee24:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ee26:	68fb      	ldr	r3, [r7, #12]
 800ee28:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ee2c:	b2db      	uxtb	r3, r3
 800ee2e:	2b01      	cmp	r3, #1
 800ee30:	d002      	beq.n	800ee38 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800ee32:	2302      	movs	r3, #2
 800ee34:	75fb      	strb	r3, [r7, #23]
    goto error;
 800ee36:	e0c2      	b.n	800efbe <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800ee38:	68bb      	ldr	r3, [r7, #8]
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	d002      	beq.n	800ee44 <HAL_SPI_Receive+0x7e>
 800ee3e:	88fb      	ldrh	r3, [r7, #6]
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	d102      	bne.n	800ee4a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800ee44:	2301      	movs	r3, #1
 800ee46:	75fb      	strb	r3, [r7, #23]
    goto error;
 800ee48:	e0b9      	b.n	800efbe <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	2204      	movs	r2, #4
 800ee4e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ee52:	68fb      	ldr	r3, [r7, #12]
 800ee54:	2200      	movs	r2, #0
 800ee56:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800ee58:	68fb      	ldr	r3, [r7, #12]
 800ee5a:	68ba      	ldr	r2, [r7, #8]
 800ee5c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800ee5e:	68fb      	ldr	r3, [r7, #12]
 800ee60:	88fa      	ldrh	r2, [r7, #6]
 800ee62:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800ee64:	68fb      	ldr	r3, [r7, #12]
 800ee66:	88fa      	ldrh	r2, [r7, #6]
 800ee68:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800ee6a:	68fb      	ldr	r3, [r7, #12]
 800ee6c:	2200      	movs	r2, #0
 800ee6e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800ee70:	68fb      	ldr	r3, [r7, #12]
 800ee72:	2200      	movs	r2, #0
 800ee74:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800ee76:	68fb      	ldr	r3, [r7, #12]
 800ee78:	2200      	movs	r2, #0
 800ee7a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800ee7c:	68fb      	ldr	r3, [r7, #12]
 800ee7e:	2200      	movs	r2, #0
 800ee80:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800ee82:	68fb      	ldr	r3, [r7, #12]
 800ee84:	2200      	movs	r2, #0
 800ee86:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ee88:	68fb      	ldr	r3, [r7, #12]
 800ee8a:	689b      	ldr	r3, [r3, #8]
 800ee8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ee90:	d107      	bne.n	800eea2 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800ee92:	68fb      	ldr	r3, [r7, #12]
 800ee94:	681b      	ldr	r3, [r3, #0]
 800ee96:	681a      	ldr	r2, [r3, #0]
 800ee98:	68fb      	ldr	r3, [r7, #12]
 800ee9a:	681b      	ldr	r3, [r3, #0]
 800ee9c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800eea0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800eea2:	68fb      	ldr	r3, [r7, #12]
 800eea4:	681b      	ldr	r3, [r3, #0]
 800eea6:	681b      	ldr	r3, [r3, #0]
 800eea8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eeac:	2b40      	cmp	r3, #64	; 0x40
 800eeae:	d007      	beq.n	800eec0 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800eeb0:	68fb      	ldr	r3, [r7, #12]
 800eeb2:	681b      	ldr	r3, [r3, #0]
 800eeb4:	681a      	ldr	r2, [r3, #0]
 800eeb6:	68fb      	ldr	r3, [r7, #12]
 800eeb8:	681b      	ldr	r3, [r3, #0]
 800eeba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800eebe:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800eec0:	68fb      	ldr	r3, [r7, #12]
 800eec2:	68db      	ldr	r3, [r3, #12]
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	d162      	bne.n	800ef8e <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800eec8:	e02e      	b.n	800ef28 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800eeca:	68fb      	ldr	r3, [r7, #12]
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	689b      	ldr	r3, [r3, #8]
 800eed0:	f003 0301 	and.w	r3, r3, #1
 800eed4:	2b01      	cmp	r3, #1
 800eed6:	d115      	bne.n	800ef04 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800eed8:	68fb      	ldr	r3, [r7, #12]
 800eeda:	681b      	ldr	r3, [r3, #0]
 800eedc:	f103 020c 	add.w	r2, r3, #12
 800eee0:	68fb      	ldr	r3, [r7, #12]
 800eee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eee4:	7812      	ldrb	r2, [r2, #0]
 800eee6:	b2d2      	uxtb	r2, r2
 800eee8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800eeea:	68fb      	ldr	r3, [r7, #12]
 800eeec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eeee:	1c5a      	adds	r2, r3, #1
 800eef0:	68fb      	ldr	r3, [r7, #12]
 800eef2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800eef4:	68fb      	ldr	r3, [r7, #12]
 800eef6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800eef8:	b29b      	uxth	r3, r3
 800eefa:	3b01      	subs	r3, #1
 800eefc:	b29a      	uxth	r2, r3
 800eefe:	68fb      	ldr	r3, [r7, #12]
 800ef00:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ef02:	e011      	b.n	800ef28 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ef04:	f7fc f9cc 	bl	800b2a0 <HAL_GetTick>
 800ef08:	4602      	mov	r2, r0
 800ef0a:	693b      	ldr	r3, [r7, #16]
 800ef0c:	1ad3      	subs	r3, r2, r3
 800ef0e:	683a      	ldr	r2, [r7, #0]
 800ef10:	429a      	cmp	r2, r3
 800ef12:	d803      	bhi.n	800ef1c <HAL_SPI_Receive+0x156>
 800ef14:	683b      	ldr	r3, [r7, #0]
 800ef16:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef1a:	d102      	bne.n	800ef22 <HAL_SPI_Receive+0x15c>
 800ef1c:	683b      	ldr	r3, [r7, #0]
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d102      	bne.n	800ef28 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800ef22:	2303      	movs	r3, #3
 800ef24:	75fb      	strb	r3, [r7, #23]
          goto error;
 800ef26:	e04a      	b.n	800efbe <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800ef28:	68fb      	ldr	r3, [r7, #12]
 800ef2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ef2c:	b29b      	uxth	r3, r3
 800ef2e:	2b00      	cmp	r3, #0
 800ef30:	d1cb      	bne.n	800eeca <HAL_SPI_Receive+0x104>
 800ef32:	e031      	b.n	800ef98 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800ef34:	68fb      	ldr	r3, [r7, #12]
 800ef36:	681b      	ldr	r3, [r3, #0]
 800ef38:	689b      	ldr	r3, [r3, #8]
 800ef3a:	f003 0301 	and.w	r3, r3, #1
 800ef3e:	2b01      	cmp	r3, #1
 800ef40:	d113      	bne.n	800ef6a <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800ef42:	68fb      	ldr	r3, [r7, #12]
 800ef44:	681b      	ldr	r3, [r3, #0]
 800ef46:	68da      	ldr	r2, [r3, #12]
 800ef48:	68fb      	ldr	r3, [r7, #12]
 800ef4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef4c:	b292      	uxth	r2, r2
 800ef4e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ef50:	68fb      	ldr	r3, [r7, #12]
 800ef52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef54:	1c9a      	adds	r2, r3, #2
 800ef56:	68fb      	ldr	r3, [r7, #12]
 800ef58:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800ef5a:	68fb      	ldr	r3, [r7, #12]
 800ef5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ef5e:	b29b      	uxth	r3, r3
 800ef60:	3b01      	subs	r3, #1
 800ef62:	b29a      	uxth	r2, r3
 800ef64:	68fb      	ldr	r3, [r7, #12]
 800ef66:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ef68:	e011      	b.n	800ef8e <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ef6a:	f7fc f999 	bl	800b2a0 <HAL_GetTick>
 800ef6e:	4602      	mov	r2, r0
 800ef70:	693b      	ldr	r3, [r7, #16]
 800ef72:	1ad3      	subs	r3, r2, r3
 800ef74:	683a      	ldr	r2, [r7, #0]
 800ef76:	429a      	cmp	r2, r3
 800ef78:	d803      	bhi.n	800ef82 <HAL_SPI_Receive+0x1bc>
 800ef7a:	683b      	ldr	r3, [r7, #0]
 800ef7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef80:	d102      	bne.n	800ef88 <HAL_SPI_Receive+0x1c2>
 800ef82:	683b      	ldr	r3, [r7, #0]
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	d102      	bne.n	800ef8e <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800ef88:	2303      	movs	r3, #3
 800ef8a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800ef8c:	e017      	b.n	800efbe <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800ef8e:	68fb      	ldr	r3, [r7, #12]
 800ef90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ef92:	b29b      	uxth	r3, r3
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	d1cd      	bne.n	800ef34 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ef98:	693a      	ldr	r2, [r7, #16]
 800ef9a:	6839      	ldr	r1, [r7, #0]
 800ef9c:	68f8      	ldr	r0, [r7, #12]
 800ef9e:	f000 fa35 	bl	800f40c <SPI_EndRxTransaction>
 800efa2:	4603      	mov	r3, r0
 800efa4:	2b00      	cmp	r3, #0
 800efa6:	d002      	beq.n	800efae <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800efa8:	68fb      	ldr	r3, [r7, #12]
 800efaa:	2220      	movs	r2, #32
 800efac:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800efae:	68fb      	ldr	r3, [r7, #12]
 800efb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	d002      	beq.n	800efbc <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800efb6:	2301      	movs	r3, #1
 800efb8:	75fb      	strb	r3, [r7, #23]
 800efba:	e000      	b.n	800efbe <HAL_SPI_Receive+0x1f8>
  }

error :
 800efbc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800efbe:	68fb      	ldr	r3, [r7, #12]
 800efc0:	2201      	movs	r2, #1
 800efc2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800efc6:	68fb      	ldr	r3, [r7, #12]
 800efc8:	2200      	movs	r2, #0
 800efca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800efce:	7dfb      	ldrb	r3, [r7, #23]
}
 800efd0:	4618      	mov	r0, r3
 800efd2:	3718      	adds	r7, #24
 800efd4:	46bd      	mov	sp, r7
 800efd6:	bd80      	pop	{r7, pc}

0800efd8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800efd8:	b580      	push	{r7, lr}
 800efda:	b08c      	sub	sp, #48	; 0x30
 800efdc:	af00      	add	r7, sp, #0
 800efde:	60f8      	str	r0, [r7, #12]
 800efe0:	60b9      	str	r1, [r7, #8]
 800efe2:	607a      	str	r2, [r7, #4]
 800efe4:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800efe6:	2301      	movs	r3, #1
 800efe8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800efea:	2300      	movs	r3, #0
 800efec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800eff0:	68fb      	ldr	r3, [r7, #12]
 800eff2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800eff6:	2b01      	cmp	r3, #1
 800eff8:	d101      	bne.n	800effe <HAL_SPI_TransmitReceive+0x26>
 800effa:	2302      	movs	r3, #2
 800effc:	e18a      	b.n	800f314 <HAL_SPI_TransmitReceive+0x33c>
 800effe:	68fb      	ldr	r3, [r7, #12]
 800f000:	2201      	movs	r2, #1
 800f002:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f006:	f7fc f94b 	bl	800b2a0 <HAL_GetTick>
 800f00a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800f00c:	68fb      	ldr	r3, [r7, #12]
 800f00e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800f012:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800f016:	68fb      	ldr	r3, [r7, #12]
 800f018:	685b      	ldr	r3, [r3, #4]
 800f01a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800f01c:	887b      	ldrh	r3, [r7, #2]
 800f01e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800f020:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f024:	2b01      	cmp	r3, #1
 800f026:	d00f      	beq.n	800f048 <HAL_SPI_TransmitReceive+0x70>
 800f028:	69fb      	ldr	r3, [r7, #28]
 800f02a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f02e:	d107      	bne.n	800f040 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800f030:	68fb      	ldr	r3, [r7, #12]
 800f032:	689b      	ldr	r3, [r3, #8]
 800f034:	2b00      	cmp	r3, #0
 800f036:	d103      	bne.n	800f040 <HAL_SPI_TransmitReceive+0x68>
 800f038:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f03c:	2b04      	cmp	r3, #4
 800f03e:	d003      	beq.n	800f048 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800f040:	2302      	movs	r3, #2
 800f042:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800f046:	e15b      	b.n	800f300 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800f048:	68bb      	ldr	r3, [r7, #8]
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	d005      	beq.n	800f05a <HAL_SPI_TransmitReceive+0x82>
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	2b00      	cmp	r3, #0
 800f052:	d002      	beq.n	800f05a <HAL_SPI_TransmitReceive+0x82>
 800f054:	887b      	ldrh	r3, [r7, #2]
 800f056:	2b00      	cmp	r3, #0
 800f058:	d103      	bne.n	800f062 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800f05a:	2301      	movs	r3, #1
 800f05c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800f060:	e14e      	b.n	800f300 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800f062:	68fb      	ldr	r3, [r7, #12]
 800f064:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800f068:	b2db      	uxtb	r3, r3
 800f06a:	2b04      	cmp	r3, #4
 800f06c:	d003      	beq.n	800f076 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800f06e:	68fb      	ldr	r3, [r7, #12]
 800f070:	2205      	movs	r2, #5
 800f072:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f076:	68fb      	ldr	r3, [r7, #12]
 800f078:	2200      	movs	r2, #0
 800f07a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800f07c:	68fb      	ldr	r3, [r7, #12]
 800f07e:	687a      	ldr	r2, [r7, #4]
 800f080:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800f082:	68fb      	ldr	r3, [r7, #12]
 800f084:	887a      	ldrh	r2, [r7, #2]
 800f086:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800f088:	68fb      	ldr	r3, [r7, #12]
 800f08a:	887a      	ldrh	r2, [r7, #2]
 800f08c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800f08e:	68fb      	ldr	r3, [r7, #12]
 800f090:	68ba      	ldr	r2, [r7, #8]
 800f092:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800f094:	68fb      	ldr	r3, [r7, #12]
 800f096:	887a      	ldrh	r2, [r7, #2]
 800f098:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800f09a:	68fb      	ldr	r3, [r7, #12]
 800f09c:	887a      	ldrh	r2, [r7, #2]
 800f09e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800f0a0:	68fb      	ldr	r3, [r7, #12]
 800f0a2:	2200      	movs	r2, #0
 800f0a4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800f0a6:	68fb      	ldr	r3, [r7, #12]
 800f0a8:	2200      	movs	r2, #0
 800f0aa:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800f0ac:	68fb      	ldr	r3, [r7, #12]
 800f0ae:	681b      	ldr	r3, [r3, #0]
 800f0b0:	681b      	ldr	r3, [r3, #0]
 800f0b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f0b6:	2b40      	cmp	r3, #64	; 0x40
 800f0b8:	d007      	beq.n	800f0ca <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800f0ba:	68fb      	ldr	r3, [r7, #12]
 800f0bc:	681b      	ldr	r3, [r3, #0]
 800f0be:	681a      	ldr	r2, [r3, #0]
 800f0c0:	68fb      	ldr	r3, [r7, #12]
 800f0c2:	681b      	ldr	r3, [r3, #0]
 800f0c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f0c8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800f0ca:	68fb      	ldr	r3, [r7, #12]
 800f0cc:	68db      	ldr	r3, [r3, #12]
 800f0ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f0d2:	d178      	bne.n	800f1c6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f0d4:	68fb      	ldr	r3, [r7, #12]
 800f0d6:	685b      	ldr	r3, [r3, #4]
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	d002      	beq.n	800f0e2 <HAL_SPI_TransmitReceive+0x10a>
 800f0dc:	8b7b      	ldrh	r3, [r7, #26]
 800f0de:	2b01      	cmp	r3, #1
 800f0e0:	d166      	bne.n	800f1b0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f0e2:	68fb      	ldr	r3, [r7, #12]
 800f0e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f0e6:	881a      	ldrh	r2, [r3, #0]
 800f0e8:	68fb      	ldr	r3, [r7, #12]
 800f0ea:	681b      	ldr	r3, [r3, #0]
 800f0ec:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800f0ee:	68fb      	ldr	r3, [r7, #12]
 800f0f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f0f2:	1c9a      	adds	r2, r3, #2
 800f0f4:	68fb      	ldr	r3, [r7, #12]
 800f0f6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800f0f8:	68fb      	ldr	r3, [r7, #12]
 800f0fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f0fc:	b29b      	uxth	r3, r3
 800f0fe:	3b01      	subs	r3, #1
 800f100:	b29a      	uxth	r2, r3
 800f102:	68fb      	ldr	r3, [r7, #12]
 800f104:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f106:	e053      	b.n	800f1b0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800f108:	68fb      	ldr	r3, [r7, #12]
 800f10a:	681b      	ldr	r3, [r3, #0]
 800f10c:	689b      	ldr	r3, [r3, #8]
 800f10e:	f003 0302 	and.w	r3, r3, #2
 800f112:	2b02      	cmp	r3, #2
 800f114:	d11b      	bne.n	800f14e <HAL_SPI_TransmitReceive+0x176>
 800f116:	68fb      	ldr	r3, [r7, #12]
 800f118:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f11a:	b29b      	uxth	r3, r3
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	d016      	beq.n	800f14e <HAL_SPI_TransmitReceive+0x176>
 800f120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f122:	2b01      	cmp	r3, #1
 800f124:	d113      	bne.n	800f14e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f126:	68fb      	ldr	r3, [r7, #12]
 800f128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f12a:	881a      	ldrh	r2, [r3, #0]
 800f12c:	68fb      	ldr	r3, [r7, #12]
 800f12e:	681b      	ldr	r3, [r3, #0]
 800f130:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800f132:	68fb      	ldr	r3, [r7, #12]
 800f134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f136:	1c9a      	adds	r2, r3, #2
 800f138:	68fb      	ldr	r3, [r7, #12]
 800f13a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800f13c:	68fb      	ldr	r3, [r7, #12]
 800f13e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f140:	b29b      	uxth	r3, r3
 800f142:	3b01      	subs	r3, #1
 800f144:	b29a      	uxth	r2, r3
 800f146:	68fb      	ldr	r3, [r7, #12]
 800f148:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800f14a:	2300      	movs	r3, #0
 800f14c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800f14e:	68fb      	ldr	r3, [r7, #12]
 800f150:	681b      	ldr	r3, [r3, #0]
 800f152:	689b      	ldr	r3, [r3, #8]
 800f154:	f003 0301 	and.w	r3, r3, #1
 800f158:	2b01      	cmp	r3, #1
 800f15a:	d119      	bne.n	800f190 <HAL_SPI_TransmitReceive+0x1b8>
 800f15c:	68fb      	ldr	r3, [r7, #12]
 800f15e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f160:	b29b      	uxth	r3, r3
 800f162:	2b00      	cmp	r3, #0
 800f164:	d014      	beq.n	800f190 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800f166:	68fb      	ldr	r3, [r7, #12]
 800f168:	681b      	ldr	r3, [r3, #0]
 800f16a:	68da      	ldr	r2, [r3, #12]
 800f16c:	68fb      	ldr	r3, [r7, #12]
 800f16e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f170:	b292      	uxth	r2, r2
 800f172:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800f174:	68fb      	ldr	r3, [r7, #12]
 800f176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f178:	1c9a      	adds	r2, r3, #2
 800f17a:	68fb      	ldr	r3, [r7, #12]
 800f17c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800f17e:	68fb      	ldr	r3, [r7, #12]
 800f180:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f182:	b29b      	uxth	r3, r3
 800f184:	3b01      	subs	r3, #1
 800f186:	b29a      	uxth	r2, r3
 800f188:	68fb      	ldr	r3, [r7, #12]
 800f18a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800f18c:	2301      	movs	r3, #1
 800f18e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800f190:	f7fc f886 	bl	800b2a0 <HAL_GetTick>
 800f194:	4602      	mov	r2, r0
 800f196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f198:	1ad3      	subs	r3, r2, r3
 800f19a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f19c:	429a      	cmp	r2, r3
 800f19e:	d807      	bhi.n	800f1b0 <HAL_SPI_TransmitReceive+0x1d8>
 800f1a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f1a6:	d003      	beq.n	800f1b0 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800f1a8:	2303      	movs	r3, #3
 800f1aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800f1ae:	e0a7      	b.n	800f300 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f1b0:	68fb      	ldr	r3, [r7, #12]
 800f1b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f1b4:	b29b      	uxth	r3, r3
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	d1a6      	bne.n	800f108 <HAL_SPI_TransmitReceive+0x130>
 800f1ba:	68fb      	ldr	r3, [r7, #12]
 800f1bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f1be:	b29b      	uxth	r3, r3
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	d1a1      	bne.n	800f108 <HAL_SPI_TransmitReceive+0x130>
 800f1c4:	e07c      	b.n	800f2c0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f1c6:	68fb      	ldr	r3, [r7, #12]
 800f1c8:	685b      	ldr	r3, [r3, #4]
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	d002      	beq.n	800f1d4 <HAL_SPI_TransmitReceive+0x1fc>
 800f1ce:	8b7b      	ldrh	r3, [r7, #26]
 800f1d0:	2b01      	cmp	r3, #1
 800f1d2:	d16b      	bne.n	800f2ac <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800f1d4:	68fb      	ldr	r3, [r7, #12]
 800f1d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f1d8:	68fb      	ldr	r3, [r7, #12]
 800f1da:	681b      	ldr	r3, [r3, #0]
 800f1dc:	330c      	adds	r3, #12
 800f1de:	7812      	ldrb	r2, [r2, #0]
 800f1e0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800f1e2:	68fb      	ldr	r3, [r7, #12]
 800f1e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f1e6:	1c5a      	adds	r2, r3, #1
 800f1e8:	68fb      	ldr	r3, [r7, #12]
 800f1ea:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800f1ec:	68fb      	ldr	r3, [r7, #12]
 800f1ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f1f0:	b29b      	uxth	r3, r3
 800f1f2:	3b01      	subs	r3, #1
 800f1f4:	b29a      	uxth	r2, r3
 800f1f6:	68fb      	ldr	r3, [r7, #12]
 800f1f8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f1fa:	e057      	b.n	800f2ac <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800f1fc:	68fb      	ldr	r3, [r7, #12]
 800f1fe:	681b      	ldr	r3, [r3, #0]
 800f200:	689b      	ldr	r3, [r3, #8]
 800f202:	f003 0302 	and.w	r3, r3, #2
 800f206:	2b02      	cmp	r3, #2
 800f208:	d11c      	bne.n	800f244 <HAL_SPI_TransmitReceive+0x26c>
 800f20a:	68fb      	ldr	r3, [r7, #12]
 800f20c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f20e:	b29b      	uxth	r3, r3
 800f210:	2b00      	cmp	r3, #0
 800f212:	d017      	beq.n	800f244 <HAL_SPI_TransmitReceive+0x26c>
 800f214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f216:	2b01      	cmp	r3, #1
 800f218:	d114      	bne.n	800f244 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800f21a:	68fb      	ldr	r3, [r7, #12]
 800f21c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f21e:	68fb      	ldr	r3, [r7, #12]
 800f220:	681b      	ldr	r3, [r3, #0]
 800f222:	330c      	adds	r3, #12
 800f224:	7812      	ldrb	r2, [r2, #0]
 800f226:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800f228:	68fb      	ldr	r3, [r7, #12]
 800f22a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f22c:	1c5a      	adds	r2, r3, #1
 800f22e:	68fb      	ldr	r3, [r7, #12]
 800f230:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f236:	b29b      	uxth	r3, r3
 800f238:	3b01      	subs	r3, #1
 800f23a:	b29a      	uxth	r2, r3
 800f23c:	68fb      	ldr	r3, [r7, #12]
 800f23e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800f240:	2300      	movs	r3, #0
 800f242:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800f244:	68fb      	ldr	r3, [r7, #12]
 800f246:	681b      	ldr	r3, [r3, #0]
 800f248:	689b      	ldr	r3, [r3, #8]
 800f24a:	f003 0301 	and.w	r3, r3, #1
 800f24e:	2b01      	cmp	r3, #1
 800f250:	d119      	bne.n	800f286 <HAL_SPI_TransmitReceive+0x2ae>
 800f252:	68fb      	ldr	r3, [r7, #12]
 800f254:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f256:	b29b      	uxth	r3, r3
 800f258:	2b00      	cmp	r3, #0
 800f25a:	d014      	beq.n	800f286 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800f25c:	68fb      	ldr	r3, [r7, #12]
 800f25e:	681b      	ldr	r3, [r3, #0]
 800f260:	68da      	ldr	r2, [r3, #12]
 800f262:	68fb      	ldr	r3, [r7, #12]
 800f264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f266:	b2d2      	uxtb	r2, r2
 800f268:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800f26a:	68fb      	ldr	r3, [r7, #12]
 800f26c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f26e:	1c5a      	adds	r2, r3, #1
 800f270:	68fb      	ldr	r3, [r7, #12]
 800f272:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800f274:	68fb      	ldr	r3, [r7, #12]
 800f276:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f278:	b29b      	uxth	r3, r3
 800f27a:	3b01      	subs	r3, #1
 800f27c:	b29a      	uxth	r2, r3
 800f27e:	68fb      	ldr	r3, [r7, #12]
 800f280:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800f282:	2301      	movs	r3, #1
 800f284:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800f286:	f7fc f80b 	bl	800b2a0 <HAL_GetTick>
 800f28a:	4602      	mov	r2, r0
 800f28c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f28e:	1ad3      	subs	r3, r2, r3
 800f290:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f292:	429a      	cmp	r2, r3
 800f294:	d803      	bhi.n	800f29e <HAL_SPI_TransmitReceive+0x2c6>
 800f296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f29c:	d102      	bne.n	800f2a4 <HAL_SPI_TransmitReceive+0x2cc>
 800f29e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	d103      	bne.n	800f2ac <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800f2a4:	2303      	movs	r3, #3
 800f2a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800f2aa:	e029      	b.n	800f300 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f2ac:	68fb      	ldr	r3, [r7, #12]
 800f2ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f2b0:	b29b      	uxth	r3, r3
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	d1a2      	bne.n	800f1fc <HAL_SPI_TransmitReceive+0x224>
 800f2b6:	68fb      	ldr	r3, [r7, #12]
 800f2b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f2ba:	b29b      	uxth	r3, r3
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	d19d      	bne.n	800f1fc <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800f2c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f2c2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f2c4:	68f8      	ldr	r0, [r7, #12]
 800f2c6:	f000 f907 	bl	800f4d8 <SPI_EndRxTxTransaction>
 800f2ca:	4603      	mov	r3, r0
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	d006      	beq.n	800f2de <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800f2d0:	2301      	movs	r3, #1
 800f2d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800f2d6:	68fb      	ldr	r3, [r7, #12]
 800f2d8:	2220      	movs	r2, #32
 800f2da:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800f2dc:	e010      	b.n	800f300 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800f2de:	68fb      	ldr	r3, [r7, #12]
 800f2e0:	689b      	ldr	r3, [r3, #8]
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	d10b      	bne.n	800f2fe <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f2e6:	2300      	movs	r3, #0
 800f2e8:	617b      	str	r3, [r7, #20]
 800f2ea:	68fb      	ldr	r3, [r7, #12]
 800f2ec:	681b      	ldr	r3, [r3, #0]
 800f2ee:	68db      	ldr	r3, [r3, #12]
 800f2f0:	617b      	str	r3, [r7, #20]
 800f2f2:	68fb      	ldr	r3, [r7, #12]
 800f2f4:	681b      	ldr	r3, [r3, #0]
 800f2f6:	689b      	ldr	r3, [r3, #8]
 800f2f8:	617b      	str	r3, [r7, #20]
 800f2fa:	697b      	ldr	r3, [r7, #20]
 800f2fc:	e000      	b.n	800f300 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800f2fe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800f300:	68fb      	ldr	r3, [r7, #12]
 800f302:	2201      	movs	r2, #1
 800f304:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800f308:	68fb      	ldr	r3, [r7, #12]
 800f30a:	2200      	movs	r2, #0
 800f30c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800f310:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800f314:	4618      	mov	r0, r3
 800f316:	3730      	adds	r7, #48	; 0x30
 800f318:	46bd      	mov	sp, r7
 800f31a:	bd80      	pop	{r7, pc}

0800f31c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800f31c:	b480      	push	{r7}
 800f31e:	b083      	sub	sp, #12
 800f320:	af00      	add	r7, sp, #0
 800f322:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800f32a:	b2db      	uxtb	r3, r3
}
 800f32c:	4618      	mov	r0, r3
 800f32e:	370c      	adds	r7, #12
 800f330:	46bd      	mov	sp, r7
 800f332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f336:	4770      	bx	lr

0800f338 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800f338:	b580      	push	{r7, lr}
 800f33a:	b084      	sub	sp, #16
 800f33c:	af00      	add	r7, sp, #0
 800f33e:	60f8      	str	r0, [r7, #12]
 800f340:	60b9      	str	r1, [r7, #8]
 800f342:	603b      	str	r3, [r7, #0]
 800f344:	4613      	mov	r3, r2
 800f346:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800f348:	e04c      	b.n	800f3e4 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800f34a:	683b      	ldr	r3, [r7, #0]
 800f34c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f350:	d048      	beq.n	800f3e4 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800f352:	f7fb ffa5 	bl	800b2a0 <HAL_GetTick>
 800f356:	4602      	mov	r2, r0
 800f358:	69bb      	ldr	r3, [r7, #24]
 800f35a:	1ad3      	subs	r3, r2, r3
 800f35c:	683a      	ldr	r2, [r7, #0]
 800f35e:	429a      	cmp	r2, r3
 800f360:	d902      	bls.n	800f368 <SPI_WaitFlagStateUntilTimeout+0x30>
 800f362:	683b      	ldr	r3, [r7, #0]
 800f364:	2b00      	cmp	r3, #0
 800f366:	d13d      	bne.n	800f3e4 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800f368:	68fb      	ldr	r3, [r7, #12]
 800f36a:	681b      	ldr	r3, [r3, #0]
 800f36c:	685a      	ldr	r2, [r3, #4]
 800f36e:	68fb      	ldr	r3, [r7, #12]
 800f370:	681b      	ldr	r3, [r3, #0]
 800f372:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800f376:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f378:	68fb      	ldr	r3, [r7, #12]
 800f37a:	685b      	ldr	r3, [r3, #4]
 800f37c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f380:	d111      	bne.n	800f3a6 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800f382:	68fb      	ldr	r3, [r7, #12]
 800f384:	689b      	ldr	r3, [r3, #8]
 800f386:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f38a:	d004      	beq.n	800f396 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800f38c:	68fb      	ldr	r3, [r7, #12]
 800f38e:	689b      	ldr	r3, [r3, #8]
 800f390:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f394:	d107      	bne.n	800f3a6 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800f396:	68fb      	ldr	r3, [r7, #12]
 800f398:	681b      	ldr	r3, [r3, #0]
 800f39a:	681a      	ldr	r2, [r3, #0]
 800f39c:	68fb      	ldr	r3, [r7, #12]
 800f39e:	681b      	ldr	r3, [r3, #0]
 800f3a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f3a4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800f3a6:	68fb      	ldr	r3, [r7, #12]
 800f3a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f3aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f3ae:	d10f      	bne.n	800f3d0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800f3b0:	68fb      	ldr	r3, [r7, #12]
 800f3b2:	681b      	ldr	r3, [r3, #0]
 800f3b4:	681a      	ldr	r2, [r3, #0]
 800f3b6:	68fb      	ldr	r3, [r7, #12]
 800f3b8:	681b      	ldr	r3, [r3, #0]
 800f3ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800f3be:	601a      	str	r2, [r3, #0]
 800f3c0:	68fb      	ldr	r3, [r7, #12]
 800f3c2:	681b      	ldr	r3, [r3, #0]
 800f3c4:	681a      	ldr	r2, [r3, #0]
 800f3c6:	68fb      	ldr	r3, [r7, #12]
 800f3c8:	681b      	ldr	r3, [r3, #0]
 800f3ca:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800f3ce:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800f3d0:	68fb      	ldr	r3, [r7, #12]
 800f3d2:	2201      	movs	r2, #1
 800f3d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800f3d8:	68fb      	ldr	r3, [r7, #12]
 800f3da:	2200      	movs	r2, #0
 800f3dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800f3e0:	2303      	movs	r3, #3
 800f3e2:	e00f      	b.n	800f404 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800f3e4:	68fb      	ldr	r3, [r7, #12]
 800f3e6:	681b      	ldr	r3, [r3, #0]
 800f3e8:	689a      	ldr	r2, [r3, #8]
 800f3ea:	68bb      	ldr	r3, [r7, #8]
 800f3ec:	4013      	ands	r3, r2
 800f3ee:	68ba      	ldr	r2, [r7, #8]
 800f3f0:	429a      	cmp	r2, r3
 800f3f2:	bf0c      	ite	eq
 800f3f4:	2301      	moveq	r3, #1
 800f3f6:	2300      	movne	r3, #0
 800f3f8:	b2db      	uxtb	r3, r3
 800f3fa:	461a      	mov	r2, r3
 800f3fc:	79fb      	ldrb	r3, [r7, #7]
 800f3fe:	429a      	cmp	r2, r3
 800f400:	d1a3      	bne.n	800f34a <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800f402:	2300      	movs	r3, #0
}
 800f404:	4618      	mov	r0, r3
 800f406:	3710      	adds	r7, #16
 800f408:	46bd      	mov	sp, r7
 800f40a:	bd80      	pop	{r7, pc}

0800f40c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800f40c:	b580      	push	{r7, lr}
 800f40e:	b086      	sub	sp, #24
 800f410:	af02      	add	r7, sp, #8
 800f412:	60f8      	str	r0, [r7, #12]
 800f414:	60b9      	str	r1, [r7, #8]
 800f416:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f418:	68fb      	ldr	r3, [r7, #12]
 800f41a:	685b      	ldr	r3, [r3, #4]
 800f41c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f420:	d111      	bne.n	800f446 <SPI_EndRxTransaction+0x3a>
 800f422:	68fb      	ldr	r3, [r7, #12]
 800f424:	689b      	ldr	r3, [r3, #8]
 800f426:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f42a:	d004      	beq.n	800f436 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800f42c:	68fb      	ldr	r3, [r7, #12]
 800f42e:	689b      	ldr	r3, [r3, #8]
 800f430:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f434:	d107      	bne.n	800f446 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800f436:	68fb      	ldr	r3, [r7, #12]
 800f438:	681b      	ldr	r3, [r3, #0]
 800f43a:	681a      	ldr	r2, [r3, #0]
 800f43c:	68fb      	ldr	r3, [r7, #12]
 800f43e:	681b      	ldr	r3, [r3, #0]
 800f440:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f444:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f446:	68fb      	ldr	r3, [r7, #12]
 800f448:	685b      	ldr	r3, [r3, #4]
 800f44a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f44e:	d12a      	bne.n	800f4a6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800f450:	68fb      	ldr	r3, [r7, #12]
 800f452:	689b      	ldr	r3, [r3, #8]
 800f454:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f458:	d012      	beq.n	800f480 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	9300      	str	r3, [sp, #0]
 800f45e:	68bb      	ldr	r3, [r7, #8]
 800f460:	2200      	movs	r2, #0
 800f462:	2180      	movs	r1, #128	; 0x80
 800f464:	68f8      	ldr	r0, [r7, #12]
 800f466:	f7ff ff67 	bl	800f338 <SPI_WaitFlagStateUntilTimeout>
 800f46a:	4603      	mov	r3, r0
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	d02d      	beq.n	800f4cc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f470:	68fb      	ldr	r3, [r7, #12]
 800f472:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f474:	f043 0220 	orr.w	r2, r3, #32
 800f478:	68fb      	ldr	r3, [r7, #12]
 800f47a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800f47c:	2303      	movs	r3, #3
 800f47e:	e026      	b.n	800f4ce <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	9300      	str	r3, [sp, #0]
 800f484:	68bb      	ldr	r3, [r7, #8]
 800f486:	2200      	movs	r2, #0
 800f488:	2101      	movs	r1, #1
 800f48a:	68f8      	ldr	r0, [r7, #12]
 800f48c:	f7ff ff54 	bl	800f338 <SPI_WaitFlagStateUntilTimeout>
 800f490:	4603      	mov	r3, r0
 800f492:	2b00      	cmp	r3, #0
 800f494:	d01a      	beq.n	800f4cc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f496:	68fb      	ldr	r3, [r7, #12]
 800f498:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f49a:	f043 0220 	orr.w	r2, r3, #32
 800f49e:	68fb      	ldr	r3, [r7, #12]
 800f4a0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800f4a2:	2303      	movs	r3, #3
 800f4a4:	e013      	b.n	800f4ce <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	9300      	str	r3, [sp, #0]
 800f4aa:	68bb      	ldr	r3, [r7, #8]
 800f4ac:	2200      	movs	r2, #0
 800f4ae:	2101      	movs	r1, #1
 800f4b0:	68f8      	ldr	r0, [r7, #12]
 800f4b2:	f7ff ff41 	bl	800f338 <SPI_WaitFlagStateUntilTimeout>
 800f4b6:	4603      	mov	r3, r0
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	d007      	beq.n	800f4cc <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f4bc:	68fb      	ldr	r3, [r7, #12]
 800f4be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f4c0:	f043 0220 	orr.w	r2, r3, #32
 800f4c4:	68fb      	ldr	r3, [r7, #12]
 800f4c6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800f4c8:	2303      	movs	r3, #3
 800f4ca:	e000      	b.n	800f4ce <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800f4cc:	2300      	movs	r3, #0
}
 800f4ce:	4618      	mov	r0, r3
 800f4d0:	3710      	adds	r7, #16
 800f4d2:	46bd      	mov	sp, r7
 800f4d4:	bd80      	pop	{r7, pc}
	...

0800f4d8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800f4d8:	b580      	push	{r7, lr}
 800f4da:	b088      	sub	sp, #32
 800f4dc:	af02      	add	r7, sp, #8
 800f4de:	60f8      	str	r0, [r7, #12]
 800f4e0:	60b9      	str	r1, [r7, #8]
 800f4e2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800f4e4:	4b1b      	ldr	r3, [pc, #108]	; (800f554 <SPI_EndRxTxTransaction+0x7c>)
 800f4e6:	681b      	ldr	r3, [r3, #0]
 800f4e8:	4a1b      	ldr	r2, [pc, #108]	; (800f558 <SPI_EndRxTxTransaction+0x80>)
 800f4ea:	fba2 2303 	umull	r2, r3, r2, r3
 800f4ee:	0d5b      	lsrs	r3, r3, #21
 800f4f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800f4f4:	fb02 f303 	mul.w	r3, r2, r3
 800f4f8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f4fa:	68fb      	ldr	r3, [r7, #12]
 800f4fc:	685b      	ldr	r3, [r3, #4]
 800f4fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f502:	d112      	bne.n	800f52a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	9300      	str	r3, [sp, #0]
 800f508:	68bb      	ldr	r3, [r7, #8]
 800f50a:	2200      	movs	r2, #0
 800f50c:	2180      	movs	r1, #128	; 0x80
 800f50e:	68f8      	ldr	r0, [r7, #12]
 800f510:	f7ff ff12 	bl	800f338 <SPI_WaitFlagStateUntilTimeout>
 800f514:	4603      	mov	r3, r0
 800f516:	2b00      	cmp	r3, #0
 800f518:	d016      	beq.n	800f548 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f51a:	68fb      	ldr	r3, [r7, #12]
 800f51c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f51e:	f043 0220 	orr.w	r2, r3, #32
 800f522:	68fb      	ldr	r3, [r7, #12]
 800f524:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800f526:	2303      	movs	r3, #3
 800f528:	e00f      	b.n	800f54a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800f52a:	697b      	ldr	r3, [r7, #20]
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	d00a      	beq.n	800f546 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800f530:	697b      	ldr	r3, [r7, #20]
 800f532:	3b01      	subs	r3, #1
 800f534:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800f536:	68fb      	ldr	r3, [r7, #12]
 800f538:	681b      	ldr	r3, [r3, #0]
 800f53a:	689b      	ldr	r3, [r3, #8]
 800f53c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f540:	2b80      	cmp	r3, #128	; 0x80
 800f542:	d0f2      	beq.n	800f52a <SPI_EndRxTxTransaction+0x52>
 800f544:	e000      	b.n	800f548 <SPI_EndRxTxTransaction+0x70>
        break;
 800f546:	bf00      	nop
  }

  return HAL_OK;
 800f548:	2300      	movs	r3, #0
}
 800f54a:	4618      	mov	r0, r3
 800f54c:	3718      	adds	r7, #24
 800f54e:	46bd      	mov	sp, r7
 800f550:	bd80      	pop	{r7, pc}
 800f552:	bf00      	nop
 800f554:	20000000 	.word	0x20000000
 800f558:	165e9f81 	.word	0x165e9f81

0800f55c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800f55c:	b580      	push	{r7, lr}
 800f55e:	b082      	sub	sp, #8
 800f560:	af00      	add	r7, sp, #0
 800f562:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	2b00      	cmp	r3, #0
 800f568:	d101      	bne.n	800f56e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800f56a:	2301      	movs	r3, #1
 800f56c:	e01d      	b.n	800f5aa <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f574:	b2db      	uxtb	r3, r3
 800f576:	2b00      	cmp	r3, #0
 800f578:	d106      	bne.n	800f588 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	2200      	movs	r2, #0
 800f57e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800f582:	6878      	ldr	r0, [r7, #4]
 800f584:	f7f8 fd8e 	bl	80080a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	2202      	movs	r2, #2
 800f58c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	681a      	ldr	r2, [r3, #0]
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	3304      	adds	r3, #4
 800f598:	4619      	mov	r1, r3
 800f59a:	4610      	mov	r0, r2
 800f59c:	f000 fa22 	bl	800f9e4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	2201      	movs	r2, #1
 800f5a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f5a8:	2300      	movs	r3, #0
}
 800f5aa:	4618      	mov	r0, r3
 800f5ac:	3708      	adds	r7, #8
 800f5ae:	46bd      	mov	sp, r7
 800f5b0:	bd80      	pop	{r7, pc}

0800f5b2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800f5b2:	b480      	push	{r7}
 800f5b4:	b085      	sub	sp, #20
 800f5b6:	af00      	add	r7, sp, #0
 800f5b8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	681b      	ldr	r3, [r3, #0]
 800f5be:	68da      	ldr	r2, [r3, #12]
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	681b      	ldr	r3, [r3, #0]
 800f5c4:	f042 0201 	orr.w	r2, r2, #1
 800f5c8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	681b      	ldr	r3, [r3, #0]
 800f5ce:	689b      	ldr	r3, [r3, #8]
 800f5d0:	f003 0307 	and.w	r3, r3, #7
 800f5d4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f5d6:	68fb      	ldr	r3, [r7, #12]
 800f5d8:	2b06      	cmp	r3, #6
 800f5da:	d007      	beq.n	800f5ec <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	681b      	ldr	r3, [r3, #0]
 800f5e0:	681a      	ldr	r2, [r3, #0]
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	681b      	ldr	r3, [r3, #0]
 800f5e6:	f042 0201 	orr.w	r2, r2, #1
 800f5ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800f5ec:	2300      	movs	r3, #0
}
 800f5ee:	4618      	mov	r0, r3
 800f5f0:	3714      	adds	r7, #20
 800f5f2:	46bd      	mov	sp, r7
 800f5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5f8:	4770      	bx	lr

0800f5fa <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800f5fa:	b580      	push	{r7, lr}
 800f5fc:	b082      	sub	sp, #8
 800f5fe:	af00      	add	r7, sp, #0
 800f600:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	681b      	ldr	r3, [r3, #0]
 800f606:	691b      	ldr	r3, [r3, #16]
 800f608:	f003 0302 	and.w	r3, r3, #2
 800f60c:	2b02      	cmp	r3, #2
 800f60e:	d122      	bne.n	800f656 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	681b      	ldr	r3, [r3, #0]
 800f614:	68db      	ldr	r3, [r3, #12]
 800f616:	f003 0302 	and.w	r3, r3, #2
 800f61a:	2b02      	cmp	r3, #2
 800f61c:	d11b      	bne.n	800f656 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	681b      	ldr	r3, [r3, #0]
 800f622:	f06f 0202 	mvn.w	r2, #2
 800f626:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	2201      	movs	r2, #1
 800f62c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	681b      	ldr	r3, [r3, #0]
 800f632:	699b      	ldr	r3, [r3, #24]
 800f634:	f003 0303 	and.w	r3, r3, #3
 800f638:	2b00      	cmp	r3, #0
 800f63a:	d003      	beq.n	800f644 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800f63c:	6878      	ldr	r0, [r7, #4]
 800f63e:	f000 f9b2 	bl	800f9a6 <HAL_TIM_IC_CaptureCallback>
 800f642:	e005      	b.n	800f650 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f644:	6878      	ldr	r0, [r7, #4]
 800f646:	f000 f9a4 	bl	800f992 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f64a:	6878      	ldr	r0, [r7, #4]
 800f64c:	f000 f9b5 	bl	800f9ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	2200      	movs	r2, #0
 800f654:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	681b      	ldr	r3, [r3, #0]
 800f65a:	691b      	ldr	r3, [r3, #16]
 800f65c:	f003 0304 	and.w	r3, r3, #4
 800f660:	2b04      	cmp	r3, #4
 800f662:	d122      	bne.n	800f6aa <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	681b      	ldr	r3, [r3, #0]
 800f668:	68db      	ldr	r3, [r3, #12]
 800f66a:	f003 0304 	and.w	r3, r3, #4
 800f66e:	2b04      	cmp	r3, #4
 800f670:	d11b      	bne.n	800f6aa <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	681b      	ldr	r3, [r3, #0]
 800f676:	f06f 0204 	mvn.w	r2, #4
 800f67a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	2202      	movs	r2, #2
 800f680:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	681b      	ldr	r3, [r3, #0]
 800f686:	699b      	ldr	r3, [r3, #24]
 800f688:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f68c:	2b00      	cmp	r3, #0
 800f68e:	d003      	beq.n	800f698 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f690:	6878      	ldr	r0, [r7, #4]
 800f692:	f000 f988 	bl	800f9a6 <HAL_TIM_IC_CaptureCallback>
 800f696:	e005      	b.n	800f6a4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f698:	6878      	ldr	r0, [r7, #4]
 800f69a:	f000 f97a 	bl	800f992 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f69e:	6878      	ldr	r0, [r7, #4]
 800f6a0:	f000 f98b 	bl	800f9ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	2200      	movs	r2, #0
 800f6a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	681b      	ldr	r3, [r3, #0]
 800f6ae:	691b      	ldr	r3, [r3, #16]
 800f6b0:	f003 0308 	and.w	r3, r3, #8
 800f6b4:	2b08      	cmp	r3, #8
 800f6b6:	d122      	bne.n	800f6fe <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	681b      	ldr	r3, [r3, #0]
 800f6bc:	68db      	ldr	r3, [r3, #12]
 800f6be:	f003 0308 	and.w	r3, r3, #8
 800f6c2:	2b08      	cmp	r3, #8
 800f6c4:	d11b      	bne.n	800f6fe <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	681b      	ldr	r3, [r3, #0]
 800f6ca:	f06f 0208 	mvn.w	r2, #8
 800f6ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	2204      	movs	r2, #4
 800f6d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	681b      	ldr	r3, [r3, #0]
 800f6da:	69db      	ldr	r3, [r3, #28]
 800f6dc:	f003 0303 	and.w	r3, r3, #3
 800f6e0:	2b00      	cmp	r3, #0
 800f6e2:	d003      	beq.n	800f6ec <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f6e4:	6878      	ldr	r0, [r7, #4]
 800f6e6:	f000 f95e 	bl	800f9a6 <HAL_TIM_IC_CaptureCallback>
 800f6ea:	e005      	b.n	800f6f8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f6ec:	6878      	ldr	r0, [r7, #4]
 800f6ee:	f000 f950 	bl	800f992 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f6f2:	6878      	ldr	r0, [r7, #4]
 800f6f4:	f000 f961 	bl	800f9ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	2200      	movs	r2, #0
 800f6fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	681b      	ldr	r3, [r3, #0]
 800f702:	691b      	ldr	r3, [r3, #16]
 800f704:	f003 0310 	and.w	r3, r3, #16
 800f708:	2b10      	cmp	r3, #16
 800f70a:	d122      	bne.n	800f752 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	681b      	ldr	r3, [r3, #0]
 800f710:	68db      	ldr	r3, [r3, #12]
 800f712:	f003 0310 	and.w	r3, r3, #16
 800f716:	2b10      	cmp	r3, #16
 800f718:	d11b      	bne.n	800f752 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	681b      	ldr	r3, [r3, #0]
 800f71e:	f06f 0210 	mvn.w	r2, #16
 800f722:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	2208      	movs	r2, #8
 800f728:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	681b      	ldr	r3, [r3, #0]
 800f72e:	69db      	ldr	r3, [r3, #28]
 800f730:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f734:	2b00      	cmp	r3, #0
 800f736:	d003      	beq.n	800f740 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f738:	6878      	ldr	r0, [r7, #4]
 800f73a:	f000 f934 	bl	800f9a6 <HAL_TIM_IC_CaptureCallback>
 800f73e:	e005      	b.n	800f74c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f740:	6878      	ldr	r0, [r7, #4]
 800f742:	f000 f926 	bl	800f992 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f746:	6878      	ldr	r0, [r7, #4]
 800f748:	f000 f937 	bl	800f9ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	2200      	movs	r2, #0
 800f750:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	681b      	ldr	r3, [r3, #0]
 800f756:	691b      	ldr	r3, [r3, #16]
 800f758:	f003 0301 	and.w	r3, r3, #1
 800f75c:	2b01      	cmp	r3, #1
 800f75e:	d10e      	bne.n	800f77e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	681b      	ldr	r3, [r3, #0]
 800f764:	68db      	ldr	r3, [r3, #12]
 800f766:	f003 0301 	and.w	r3, r3, #1
 800f76a:	2b01      	cmp	r3, #1
 800f76c:	d107      	bne.n	800f77e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	681b      	ldr	r3, [r3, #0]
 800f772:	f06f 0201 	mvn.w	r2, #1
 800f776:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f778:	6878      	ldr	r0, [r7, #4]
 800f77a:	f7f8 f9fd 	bl	8007b78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	681b      	ldr	r3, [r3, #0]
 800f782:	691b      	ldr	r3, [r3, #16]
 800f784:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f788:	2b80      	cmp	r3, #128	; 0x80
 800f78a:	d10e      	bne.n	800f7aa <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	681b      	ldr	r3, [r3, #0]
 800f790:	68db      	ldr	r3, [r3, #12]
 800f792:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f796:	2b80      	cmp	r3, #128	; 0x80
 800f798:	d107      	bne.n	800f7aa <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	681b      	ldr	r3, [r3, #0]
 800f79e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800f7a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f7a4:	6878      	ldr	r0, [r7, #4]
 800f7a6:	f000 fadd 	bl	800fd64 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	681b      	ldr	r3, [r3, #0]
 800f7ae:	691b      	ldr	r3, [r3, #16]
 800f7b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f7b4:	2b40      	cmp	r3, #64	; 0x40
 800f7b6:	d10e      	bne.n	800f7d6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	681b      	ldr	r3, [r3, #0]
 800f7bc:	68db      	ldr	r3, [r3, #12]
 800f7be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f7c2:	2b40      	cmp	r3, #64	; 0x40
 800f7c4:	d107      	bne.n	800f7d6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	681b      	ldr	r3, [r3, #0]
 800f7ca:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800f7ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f7d0:	6878      	ldr	r0, [r7, #4]
 800f7d2:	f000 f8fc 	bl	800f9ce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	681b      	ldr	r3, [r3, #0]
 800f7da:	691b      	ldr	r3, [r3, #16]
 800f7dc:	f003 0320 	and.w	r3, r3, #32
 800f7e0:	2b20      	cmp	r3, #32
 800f7e2:	d10e      	bne.n	800f802 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	681b      	ldr	r3, [r3, #0]
 800f7e8:	68db      	ldr	r3, [r3, #12]
 800f7ea:	f003 0320 	and.w	r3, r3, #32
 800f7ee:	2b20      	cmp	r3, #32
 800f7f0:	d107      	bne.n	800f802 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	681b      	ldr	r3, [r3, #0]
 800f7f6:	f06f 0220 	mvn.w	r2, #32
 800f7fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f7fc:	6878      	ldr	r0, [r7, #4]
 800f7fe:	f000 faa7 	bl	800fd50 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f802:	bf00      	nop
 800f804:	3708      	adds	r7, #8
 800f806:	46bd      	mov	sp, r7
 800f808:	bd80      	pop	{r7, pc}

0800f80a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800f80a:	b580      	push	{r7, lr}
 800f80c:	b084      	sub	sp, #16
 800f80e:	af00      	add	r7, sp, #0
 800f810:	6078      	str	r0, [r7, #4]
 800f812:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f81a:	2b01      	cmp	r3, #1
 800f81c:	d101      	bne.n	800f822 <HAL_TIM_ConfigClockSource+0x18>
 800f81e:	2302      	movs	r3, #2
 800f820:	e0b3      	b.n	800f98a <HAL_TIM_ConfigClockSource+0x180>
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	2201      	movs	r2, #1
 800f826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	2202      	movs	r2, #2
 800f82e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	681b      	ldr	r3, [r3, #0]
 800f836:	689b      	ldr	r3, [r3, #8]
 800f838:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800f83a:	68fb      	ldr	r3, [r7, #12]
 800f83c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800f840:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f842:	68fb      	ldr	r3, [r7, #12]
 800f844:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f848:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	681b      	ldr	r3, [r3, #0]
 800f84e:	68fa      	ldr	r2, [r7, #12]
 800f850:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800f852:	683b      	ldr	r3, [r7, #0]
 800f854:	681b      	ldr	r3, [r3, #0]
 800f856:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f85a:	d03e      	beq.n	800f8da <HAL_TIM_ConfigClockSource+0xd0>
 800f85c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f860:	f200 8087 	bhi.w	800f972 <HAL_TIM_ConfigClockSource+0x168>
 800f864:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f868:	f000 8085 	beq.w	800f976 <HAL_TIM_ConfigClockSource+0x16c>
 800f86c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f870:	d87f      	bhi.n	800f972 <HAL_TIM_ConfigClockSource+0x168>
 800f872:	2b70      	cmp	r3, #112	; 0x70
 800f874:	d01a      	beq.n	800f8ac <HAL_TIM_ConfigClockSource+0xa2>
 800f876:	2b70      	cmp	r3, #112	; 0x70
 800f878:	d87b      	bhi.n	800f972 <HAL_TIM_ConfigClockSource+0x168>
 800f87a:	2b60      	cmp	r3, #96	; 0x60
 800f87c:	d050      	beq.n	800f920 <HAL_TIM_ConfigClockSource+0x116>
 800f87e:	2b60      	cmp	r3, #96	; 0x60
 800f880:	d877      	bhi.n	800f972 <HAL_TIM_ConfigClockSource+0x168>
 800f882:	2b50      	cmp	r3, #80	; 0x50
 800f884:	d03c      	beq.n	800f900 <HAL_TIM_ConfigClockSource+0xf6>
 800f886:	2b50      	cmp	r3, #80	; 0x50
 800f888:	d873      	bhi.n	800f972 <HAL_TIM_ConfigClockSource+0x168>
 800f88a:	2b40      	cmp	r3, #64	; 0x40
 800f88c:	d058      	beq.n	800f940 <HAL_TIM_ConfigClockSource+0x136>
 800f88e:	2b40      	cmp	r3, #64	; 0x40
 800f890:	d86f      	bhi.n	800f972 <HAL_TIM_ConfigClockSource+0x168>
 800f892:	2b30      	cmp	r3, #48	; 0x30
 800f894:	d064      	beq.n	800f960 <HAL_TIM_ConfigClockSource+0x156>
 800f896:	2b30      	cmp	r3, #48	; 0x30
 800f898:	d86b      	bhi.n	800f972 <HAL_TIM_ConfigClockSource+0x168>
 800f89a:	2b20      	cmp	r3, #32
 800f89c:	d060      	beq.n	800f960 <HAL_TIM_ConfigClockSource+0x156>
 800f89e:	2b20      	cmp	r3, #32
 800f8a0:	d867      	bhi.n	800f972 <HAL_TIM_ConfigClockSource+0x168>
 800f8a2:	2b00      	cmp	r3, #0
 800f8a4:	d05c      	beq.n	800f960 <HAL_TIM_ConfigClockSource+0x156>
 800f8a6:	2b10      	cmp	r3, #16
 800f8a8:	d05a      	beq.n	800f960 <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800f8aa:	e062      	b.n	800f972 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	6818      	ldr	r0, [r3, #0]
 800f8b0:	683b      	ldr	r3, [r7, #0]
 800f8b2:	6899      	ldr	r1, [r3, #8]
 800f8b4:	683b      	ldr	r3, [r7, #0]
 800f8b6:	685a      	ldr	r2, [r3, #4]
 800f8b8:	683b      	ldr	r3, [r7, #0]
 800f8ba:	68db      	ldr	r3, [r3, #12]
 800f8bc:	f000 f9ac 	bl	800fc18 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	681b      	ldr	r3, [r3, #0]
 800f8c4:	689b      	ldr	r3, [r3, #8]
 800f8c6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800f8c8:	68fb      	ldr	r3, [r7, #12]
 800f8ca:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800f8ce:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	681b      	ldr	r3, [r3, #0]
 800f8d4:	68fa      	ldr	r2, [r7, #12]
 800f8d6:	609a      	str	r2, [r3, #8]
      break;
 800f8d8:	e04e      	b.n	800f978 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	6818      	ldr	r0, [r3, #0]
 800f8de:	683b      	ldr	r3, [r7, #0]
 800f8e0:	6899      	ldr	r1, [r3, #8]
 800f8e2:	683b      	ldr	r3, [r7, #0]
 800f8e4:	685a      	ldr	r2, [r3, #4]
 800f8e6:	683b      	ldr	r3, [r7, #0]
 800f8e8:	68db      	ldr	r3, [r3, #12]
 800f8ea:	f000 f995 	bl	800fc18 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	681b      	ldr	r3, [r3, #0]
 800f8f2:	689a      	ldr	r2, [r3, #8]
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	681b      	ldr	r3, [r3, #0]
 800f8f8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800f8fc:	609a      	str	r2, [r3, #8]
      break;
 800f8fe:	e03b      	b.n	800f978 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	6818      	ldr	r0, [r3, #0]
 800f904:	683b      	ldr	r3, [r7, #0]
 800f906:	6859      	ldr	r1, [r3, #4]
 800f908:	683b      	ldr	r3, [r7, #0]
 800f90a:	68db      	ldr	r3, [r3, #12]
 800f90c:	461a      	mov	r2, r3
 800f90e:	f000 f909 	bl	800fb24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	681b      	ldr	r3, [r3, #0]
 800f916:	2150      	movs	r1, #80	; 0x50
 800f918:	4618      	mov	r0, r3
 800f91a:	f000 f962 	bl	800fbe2 <TIM_ITRx_SetConfig>
      break;
 800f91e:	e02b      	b.n	800f978 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	6818      	ldr	r0, [r3, #0]
 800f924:	683b      	ldr	r3, [r7, #0]
 800f926:	6859      	ldr	r1, [r3, #4]
 800f928:	683b      	ldr	r3, [r7, #0]
 800f92a:	68db      	ldr	r3, [r3, #12]
 800f92c:	461a      	mov	r2, r3
 800f92e:	f000 f928 	bl	800fb82 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	681b      	ldr	r3, [r3, #0]
 800f936:	2160      	movs	r1, #96	; 0x60
 800f938:	4618      	mov	r0, r3
 800f93a:	f000 f952 	bl	800fbe2 <TIM_ITRx_SetConfig>
      break;
 800f93e:	e01b      	b.n	800f978 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	6818      	ldr	r0, [r3, #0]
 800f944:	683b      	ldr	r3, [r7, #0]
 800f946:	6859      	ldr	r1, [r3, #4]
 800f948:	683b      	ldr	r3, [r7, #0]
 800f94a:	68db      	ldr	r3, [r3, #12]
 800f94c:	461a      	mov	r2, r3
 800f94e:	f000 f8e9 	bl	800fb24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	681b      	ldr	r3, [r3, #0]
 800f956:	2140      	movs	r1, #64	; 0x40
 800f958:	4618      	mov	r0, r3
 800f95a:	f000 f942 	bl	800fbe2 <TIM_ITRx_SetConfig>
      break;
 800f95e:	e00b      	b.n	800f978 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	681a      	ldr	r2, [r3, #0]
 800f964:	683b      	ldr	r3, [r7, #0]
 800f966:	681b      	ldr	r3, [r3, #0]
 800f968:	4619      	mov	r1, r3
 800f96a:	4610      	mov	r0, r2
 800f96c:	f000 f939 	bl	800fbe2 <TIM_ITRx_SetConfig>
      break;
 800f970:	e002      	b.n	800f978 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800f972:	bf00      	nop
 800f974:	e000      	b.n	800f978 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800f976:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	2201      	movs	r2, #1
 800f97c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	2200      	movs	r2, #0
 800f984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f988:	2300      	movs	r3, #0
}
 800f98a:	4618      	mov	r0, r3
 800f98c:	3710      	adds	r7, #16
 800f98e:	46bd      	mov	sp, r7
 800f990:	bd80      	pop	{r7, pc}

0800f992 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f992:	b480      	push	{r7}
 800f994:	b083      	sub	sp, #12
 800f996:	af00      	add	r7, sp, #0
 800f998:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800f99a:	bf00      	nop
 800f99c:	370c      	adds	r7, #12
 800f99e:	46bd      	mov	sp, r7
 800f9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9a4:	4770      	bx	lr

0800f9a6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f9a6:	b480      	push	{r7}
 800f9a8:	b083      	sub	sp, #12
 800f9aa:	af00      	add	r7, sp, #0
 800f9ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f9ae:	bf00      	nop
 800f9b0:	370c      	adds	r7, #12
 800f9b2:	46bd      	mov	sp, r7
 800f9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9b8:	4770      	bx	lr

0800f9ba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f9ba:	b480      	push	{r7}
 800f9bc:	b083      	sub	sp, #12
 800f9be:	af00      	add	r7, sp, #0
 800f9c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f9c2:	bf00      	nop
 800f9c4:	370c      	adds	r7, #12
 800f9c6:	46bd      	mov	sp, r7
 800f9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9cc:	4770      	bx	lr

0800f9ce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f9ce:	b480      	push	{r7}
 800f9d0:	b083      	sub	sp, #12
 800f9d2:	af00      	add	r7, sp, #0
 800f9d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f9d6:	bf00      	nop
 800f9d8:	370c      	adds	r7, #12
 800f9da:	46bd      	mov	sp, r7
 800f9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9e0:	4770      	bx	lr
	...

0800f9e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800f9e4:	b480      	push	{r7}
 800f9e6:	b085      	sub	sp, #20
 800f9e8:	af00      	add	r7, sp, #0
 800f9ea:	6078      	str	r0, [r7, #4]
 800f9ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	681b      	ldr	r3, [r3, #0]
 800f9f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	4a40      	ldr	r2, [pc, #256]	; (800faf8 <TIM_Base_SetConfig+0x114>)
 800f9f8:	4293      	cmp	r3, r2
 800f9fa:	d013      	beq.n	800fa24 <TIM_Base_SetConfig+0x40>
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fa02:	d00f      	beq.n	800fa24 <TIM_Base_SetConfig+0x40>
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	4a3d      	ldr	r2, [pc, #244]	; (800fafc <TIM_Base_SetConfig+0x118>)
 800fa08:	4293      	cmp	r3, r2
 800fa0a:	d00b      	beq.n	800fa24 <TIM_Base_SetConfig+0x40>
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	4a3c      	ldr	r2, [pc, #240]	; (800fb00 <TIM_Base_SetConfig+0x11c>)
 800fa10:	4293      	cmp	r3, r2
 800fa12:	d007      	beq.n	800fa24 <TIM_Base_SetConfig+0x40>
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	4a3b      	ldr	r2, [pc, #236]	; (800fb04 <TIM_Base_SetConfig+0x120>)
 800fa18:	4293      	cmp	r3, r2
 800fa1a:	d003      	beq.n	800fa24 <TIM_Base_SetConfig+0x40>
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	4a3a      	ldr	r2, [pc, #232]	; (800fb08 <TIM_Base_SetConfig+0x124>)
 800fa20:	4293      	cmp	r3, r2
 800fa22:	d108      	bne.n	800fa36 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800fa24:	68fb      	ldr	r3, [r7, #12]
 800fa26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fa2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800fa2c:	683b      	ldr	r3, [r7, #0]
 800fa2e:	685b      	ldr	r3, [r3, #4]
 800fa30:	68fa      	ldr	r2, [r7, #12]
 800fa32:	4313      	orrs	r3, r2
 800fa34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	4a2f      	ldr	r2, [pc, #188]	; (800faf8 <TIM_Base_SetConfig+0x114>)
 800fa3a:	4293      	cmp	r3, r2
 800fa3c:	d02b      	beq.n	800fa96 <TIM_Base_SetConfig+0xb2>
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fa44:	d027      	beq.n	800fa96 <TIM_Base_SetConfig+0xb2>
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	4a2c      	ldr	r2, [pc, #176]	; (800fafc <TIM_Base_SetConfig+0x118>)
 800fa4a:	4293      	cmp	r3, r2
 800fa4c:	d023      	beq.n	800fa96 <TIM_Base_SetConfig+0xb2>
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	4a2b      	ldr	r2, [pc, #172]	; (800fb00 <TIM_Base_SetConfig+0x11c>)
 800fa52:	4293      	cmp	r3, r2
 800fa54:	d01f      	beq.n	800fa96 <TIM_Base_SetConfig+0xb2>
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	4a2a      	ldr	r2, [pc, #168]	; (800fb04 <TIM_Base_SetConfig+0x120>)
 800fa5a:	4293      	cmp	r3, r2
 800fa5c:	d01b      	beq.n	800fa96 <TIM_Base_SetConfig+0xb2>
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	4a29      	ldr	r2, [pc, #164]	; (800fb08 <TIM_Base_SetConfig+0x124>)
 800fa62:	4293      	cmp	r3, r2
 800fa64:	d017      	beq.n	800fa96 <TIM_Base_SetConfig+0xb2>
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	4a28      	ldr	r2, [pc, #160]	; (800fb0c <TIM_Base_SetConfig+0x128>)
 800fa6a:	4293      	cmp	r3, r2
 800fa6c:	d013      	beq.n	800fa96 <TIM_Base_SetConfig+0xb2>
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	4a27      	ldr	r2, [pc, #156]	; (800fb10 <TIM_Base_SetConfig+0x12c>)
 800fa72:	4293      	cmp	r3, r2
 800fa74:	d00f      	beq.n	800fa96 <TIM_Base_SetConfig+0xb2>
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	4a26      	ldr	r2, [pc, #152]	; (800fb14 <TIM_Base_SetConfig+0x130>)
 800fa7a:	4293      	cmp	r3, r2
 800fa7c:	d00b      	beq.n	800fa96 <TIM_Base_SetConfig+0xb2>
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	4a25      	ldr	r2, [pc, #148]	; (800fb18 <TIM_Base_SetConfig+0x134>)
 800fa82:	4293      	cmp	r3, r2
 800fa84:	d007      	beq.n	800fa96 <TIM_Base_SetConfig+0xb2>
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	4a24      	ldr	r2, [pc, #144]	; (800fb1c <TIM_Base_SetConfig+0x138>)
 800fa8a:	4293      	cmp	r3, r2
 800fa8c:	d003      	beq.n	800fa96 <TIM_Base_SetConfig+0xb2>
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	4a23      	ldr	r2, [pc, #140]	; (800fb20 <TIM_Base_SetConfig+0x13c>)
 800fa92:	4293      	cmp	r3, r2
 800fa94:	d108      	bne.n	800faa8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800fa96:	68fb      	ldr	r3, [r7, #12]
 800fa98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fa9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800fa9e:	683b      	ldr	r3, [r7, #0]
 800faa0:	68db      	ldr	r3, [r3, #12]
 800faa2:	68fa      	ldr	r2, [r7, #12]
 800faa4:	4313      	orrs	r3, r2
 800faa6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800faa8:	68fb      	ldr	r3, [r7, #12]
 800faaa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800faae:	683b      	ldr	r3, [r7, #0]
 800fab0:	695b      	ldr	r3, [r3, #20]
 800fab2:	4313      	orrs	r3, r2
 800fab4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	68fa      	ldr	r2, [r7, #12]
 800faba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800fabc:	683b      	ldr	r3, [r7, #0]
 800fabe:	689a      	ldr	r2, [r3, #8]
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800fac4:	683b      	ldr	r3, [r7, #0]
 800fac6:	681a      	ldr	r2, [r3, #0]
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	4a0a      	ldr	r2, [pc, #40]	; (800faf8 <TIM_Base_SetConfig+0x114>)
 800fad0:	4293      	cmp	r3, r2
 800fad2:	d003      	beq.n	800fadc <TIM_Base_SetConfig+0xf8>
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	4a0c      	ldr	r2, [pc, #48]	; (800fb08 <TIM_Base_SetConfig+0x124>)
 800fad8:	4293      	cmp	r3, r2
 800fada:	d103      	bne.n	800fae4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800fadc:	683b      	ldr	r3, [r7, #0]
 800fade:	691a      	ldr	r2, [r3, #16]
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	2201      	movs	r2, #1
 800fae8:	615a      	str	r2, [r3, #20]
}
 800faea:	bf00      	nop
 800faec:	3714      	adds	r7, #20
 800faee:	46bd      	mov	sp, r7
 800faf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faf4:	4770      	bx	lr
 800faf6:	bf00      	nop
 800faf8:	40010000 	.word	0x40010000
 800fafc:	40000400 	.word	0x40000400
 800fb00:	40000800 	.word	0x40000800
 800fb04:	40000c00 	.word	0x40000c00
 800fb08:	40010400 	.word	0x40010400
 800fb0c:	40014000 	.word	0x40014000
 800fb10:	40014400 	.word	0x40014400
 800fb14:	40014800 	.word	0x40014800
 800fb18:	40001800 	.word	0x40001800
 800fb1c:	40001c00 	.word	0x40001c00
 800fb20:	40002000 	.word	0x40002000

0800fb24 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800fb24:	b480      	push	{r7}
 800fb26:	b087      	sub	sp, #28
 800fb28:	af00      	add	r7, sp, #0
 800fb2a:	60f8      	str	r0, [r7, #12]
 800fb2c:	60b9      	str	r1, [r7, #8]
 800fb2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800fb30:	68fb      	ldr	r3, [r7, #12]
 800fb32:	6a1b      	ldr	r3, [r3, #32]
 800fb34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800fb36:	68fb      	ldr	r3, [r7, #12]
 800fb38:	6a1b      	ldr	r3, [r3, #32]
 800fb3a:	f023 0201 	bic.w	r2, r3, #1
 800fb3e:	68fb      	ldr	r3, [r7, #12]
 800fb40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fb42:	68fb      	ldr	r3, [r7, #12]
 800fb44:	699b      	ldr	r3, [r3, #24]
 800fb46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800fb48:	693b      	ldr	r3, [r7, #16]
 800fb4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800fb4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	011b      	lsls	r3, r3, #4
 800fb54:	693a      	ldr	r2, [r7, #16]
 800fb56:	4313      	orrs	r3, r2
 800fb58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800fb5a:	697b      	ldr	r3, [r7, #20]
 800fb5c:	f023 030a 	bic.w	r3, r3, #10
 800fb60:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800fb62:	697a      	ldr	r2, [r7, #20]
 800fb64:	68bb      	ldr	r3, [r7, #8]
 800fb66:	4313      	orrs	r3, r2
 800fb68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800fb6a:	68fb      	ldr	r3, [r7, #12]
 800fb6c:	693a      	ldr	r2, [r7, #16]
 800fb6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fb70:	68fb      	ldr	r3, [r7, #12]
 800fb72:	697a      	ldr	r2, [r7, #20]
 800fb74:	621a      	str	r2, [r3, #32]
}
 800fb76:	bf00      	nop
 800fb78:	371c      	adds	r7, #28
 800fb7a:	46bd      	mov	sp, r7
 800fb7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb80:	4770      	bx	lr

0800fb82 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800fb82:	b480      	push	{r7}
 800fb84:	b087      	sub	sp, #28
 800fb86:	af00      	add	r7, sp, #0
 800fb88:	60f8      	str	r0, [r7, #12]
 800fb8a:	60b9      	str	r1, [r7, #8]
 800fb8c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800fb8e:	68fb      	ldr	r3, [r7, #12]
 800fb90:	6a1b      	ldr	r3, [r3, #32]
 800fb92:	f023 0210 	bic.w	r2, r3, #16
 800fb96:	68fb      	ldr	r3, [r7, #12]
 800fb98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fb9a:	68fb      	ldr	r3, [r7, #12]
 800fb9c:	699b      	ldr	r3, [r3, #24]
 800fb9e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800fba0:	68fb      	ldr	r3, [r7, #12]
 800fba2:	6a1b      	ldr	r3, [r3, #32]
 800fba4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800fba6:	697b      	ldr	r3, [r7, #20]
 800fba8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800fbac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	031b      	lsls	r3, r3, #12
 800fbb2:	697a      	ldr	r2, [r7, #20]
 800fbb4:	4313      	orrs	r3, r2
 800fbb6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800fbb8:	693b      	ldr	r3, [r7, #16]
 800fbba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800fbbe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800fbc0:	68bb      	ldr	r3, [r7, #8]
 800fbc2:	011b      	lsls	r3, r3, #4
 800fbc4:	693a      	ldr	r2, [r7, #16]
 800fbc6:	4313      	orrs	r3, r2
 800fbc8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800fbca:	68fb      	ldr	r3, [r7, #12]
 800fbcc:	697a      	ldr	r2, [r7, #20]
 800fbce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fbd0:	68fb      	ldr	r3, [r7, #12]
 800fbd2:	693a      	ldr	r2, [r7, #16]
 800fbd4:	621a      	str	r2, [r3, #32]
}
 800fbd6:	bf00      	nop
 800fbd8:	371c      	adds	r7, #28
 800fbda:	46bd      	mov	sp, r7
 800fbdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbe0:	4770      	bx	lr

0800fbe2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800fbe2:	b480      	push	{r7}
 800fbe4:	b085      	sub	sp, #20
 800fbe6:	af00      	add	r7, sp, #0
 800fbe8:	6078      	str	r0, [r7, #4]
 800fbea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	689b      	ldr	r3, [r3, #8]
 800fbf0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800fbf2:	68fb      	ldr	r3, [r7, #12]
 800fbf4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fbf8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800fbfa:	683a      	ldr	r2, [r7, #0]
 800fbfc:	68fb      	ldr	r3, [r7, #12]
 800fbfe:	4313      	orrs	r3, r2
 800fc00:	f043 0307 	orr.w	r3, r3, #7
 800fc04:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	68fa      	ldr	r2, [r7, #12]
 800fc0a:	609a      	str	r2, [r3, #8]
}
 800fc0c:	bf00      	nop
 800fc0e:	3714      	adds	r7, #20
 800fc10:	46bd      	mov	sp, r7
 800fc12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc16:	4770      	bx	lr

0800fc18 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800fc18:	b480      	push	{r7}
 800fc1a:	b087      	sub	sp, #28
 800fc1c:	af00      	add	r7, sp, #0
 800fc1e:	60f8      	str	r0, [r7, #12]
 800fc20:	60b9      	str	r1, [r7, #8]
 800fc22:	607a      	str	r2, [r7, #4]
 800fc24:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800fc26:	68fb      	ldr	r3, [r7, #12]
 800fc28:	689b      	ldr	r3, [r3, #8]
 800fc2a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800fc2c:	697b      	ldr	r3, [r7, #20]
 800fc2e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800fc32:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800fc34:	683b      	ldr	r3, [r7, #0]
 800fc36:	021a      	lsls	r2, r3, #8
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	431a      	orrs	r2, r3
 800fc3c:	68bb      	ldr	r3, [r7, #8]
 800fc3e:	4313      	orrs	r3, r2
 800fc40:	697a      	ldr	r2, [r7, #20]
 800fc42:	4313      	orrs	r3, r2
 800fc44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800fc46:	68fb      	ldr	r3, [r7, #12]
 800fc48:	697a      	ldr	r2, [r7, #20]
 800fc4a:	609a      	str	r2, [r3, #8]
}
 800fc4c:	bf00      	nop
 800fc4e:	371c      	adds	r7, #28
 800fc50:	46bd      	mov	sp, r7
 800fc52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc56:	4770      	bx	lr

0800fc58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800fc58:	b480      	push	{r7}
 800fc5a:	b085      	sub	sp, #20
 800fc5c:	af00      	add	r7, sp, #0
 800fc5e:	6078      	str	r0, [r7, #4]
 800fc60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fc68:	2b01      	cmp	r3, #1
 800fc6a:	d101      	bne.n	800fc70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800fc6c:	2302      	movs	r3, #2
 800fc6e:	e05a      	b.n	800fd26 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	2201      	movs	r2, #1
 800fc74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	2202      	movs	r2, #2
 800fc7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	681b      	ldr	r3, [r3, #0]
 800fc84:	685b      	ldr	r3, [r3, #4]
 800fc86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	681b      	ldr	r3, [r3, #0]
 800fc8c:	689b      	ldr	r3, [r3, #8]
 800fc8e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800fc90:	68fb      	ldr	r3, [r7, #12]
 800fc92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fc96:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800fc98:	683b      	ldr	r3, [r7, #0]
 800fc9a:	681b      	ldr	r3, [r3, #0]
 800fc9c:	68fa      	ldr	r2, [r7, #12]
 800fc9e:	4313      	orrs	r3, r2
 800fca0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	681b      	ldr	r3, [r3, #0]
 800fca6:	68fa      	ldr	r2, [r7, #12]
 800fca8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	681b      	ldr	r3, [r3, #0]
 800fcae:	4a21      	ldr	r2, [pc, #132]	; (800fd34 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800fcb0:	4293      	cmp	r3, r2
 800fcb2:	d022      	beq.n	800fcfa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	681b      	ldr	r3, [r3, #0]
 800fcb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fcbc:	d01d      	beq.n	800fcfa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	681b      	ldr	r3, [r3, #0]
 800fcc2:	4a1d      	ldr	r2, [pc, #116]	; (800fd38 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800fcc4:	4293      	cmp	r3, r2
 800fcc6:	d018      	beq.n	800fcfa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	681b      	ldr	r3, [r3, #0]
 800fccc:	4a1b      	ldr	r2, [pc, #108]	; (800fd3c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800fcce:	4293      	cmp	r3, r2
 800fcd0:	d013      	beq.n	800fcfa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	681b      	ldr	r3, [r3, #0]
 800fcd6:	4a1a      	ldr	r2, [pc, #104]	; (800fd40 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800fcd8:	4293      	cmp	r3, r2
 800fcda:	d00e      	beq.n	800fcfa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	681b      	ldr	r3, [r3, #0]
 800fce0:	4a18      	ldr	r2, [pc, #96]	; (800fd44 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800fce2:	4293      	cmp	r3, r2
 800fce4:	d009      	beq.n	800fcfa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	681b      	ldr	r3, [r3, #0]
 800fcea:	4a17      	ldr	r2, [pc, #92]	; (800fd48 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800fcec:	4293      	cmp	r3, r2
 800fcee:	d004      	beq.n	800fcfa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	681b      	ldr	r3, [r3, #0]
 800fcf4:	4a15      	ldr	r2, [pc, #84]	; (800fd4c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800fcf6:	4293      	cmp	r3, r2
 800fcf8:	d10c      	bne.n	800fd14 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800fcfa:	68bb      	ldr	r3, [r7, #8]
 800fcfc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fd00:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800fd02:	683b      	ldr	r3, [r7, #0]
 800fd04:	685b      	ldr	r3, [r3, #4]
 800fd06:	68ba      	ldr	r2, [r7, #8]
 800fd08:	4313      	orrs	r3, r2
 800fd0a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	681b      	ldr	r3, [r3, #0]
 800fd10:	68ba      	ldr	r2, [r7, #8]
 800fd12:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	2201      	movs	r2, #1
 800fd18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	2200      	movs	r2, #0
 800fd20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800fd24:	2300      	movs	r3, #0
}
 800fd26:	4618      	mov	r0, r3
 800fd28:	3714      	adds	r7, #20
 800fd2a:	46bd      	mov	sp, r7
 800fd2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd30:	4770      	bx	lr
 800fd32:	bf00      	nop
 800fd34:	40010000 	.word	0x40010000
 800fd38:	40000400 	.word	0x40000400
 800fd3c:	40000800 	.word	0x40000800
 800fd40:	40000c00 	.word	0x40000c00
 800fd44:	40010400 	.word	0x40010400
 800fd48:	40014000 	.word	0x40014000
 800fd4c:	40001800 	.word	0x40001800

0800fd50 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800fd50:	b480      	push	{r7}
 800fd52:	b083      	sub	sp, #12
 800fd54:	af00      	add	r7, sp, #0
 800fd56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800fd58:	bf00      	nop
 800fd5a:	370c      	adds	r7, #12
 800fd5c:	46bd      	mov	sp, r7
 800fd5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd62:	4770      	bx	lr

0800fd64 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800fd64:	b480      	push	{r7}
 800fd66:	b083      	sub	sp, #12
 800fd68:	af00      	add	r7, sp, #0
 800fd6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800fd6c:	bf00      	nop
 800fd6e:	370c      	adds	r7, #12
 800fd70:	46bd      	mov	sp, r7
 800fd72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd76:	4770      	bx	lr

0800fd78 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800fd78:	b580      	push	{r7, lr}
 800fd7a:	b082      	sub	sp, #8
 800fd7c:	af00      	add	r7, sp, #0
 800fd7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	2b00      	cmp	r3, #0
 800fd84:	d101      	bne.n	800fd8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800fd86:	2301      	movs	r3, #1
 800fd88:	e03f      	b.n	800fe0a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800fd90:	b2db      	uxtb	r3, r3
 800fd92:	2b00      	cmp	r3, #0
 800fd94:	d106      	bne.n	800fda4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	2200      	movs	r2, #0
 800fd9a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800fd9e:	6878      	ldr	r0, [r7, #4]
 800fda0:	f7f8 ffb2 	bl	8008d08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	2224      	movs	r2, #36	; 0x24
 800fda8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	681b      	ldr	r3, [r3, #0]
 800fdb0:	68da      	ldr	r2, [r3, #12]
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	681b      	ldr	r3, [r3, #0]
 800fdb6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800fdba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800fdbc:	6878      	ldr	r0, [r7, #4]
 800fdbe:	f000 f829 	bl	800fe14 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	681b      	ldr	r3, [r3, #0]
 800fdc6:	691a      	ldr	r2, [r3, #16]
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	681b      	ldr	r3, [r3, #0]
 800fdcc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800fdd0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	681b      	ldr	r3, [r3, #0]
 800fdd6:	695a      	ldr	r2, [r3, #20]
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	681b      	ldr	r3, [r3, #0]
 800fddc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800fde0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	681b      	ldr	r3, [r3, #0]
 800fde6:	68da      	ldr	r2, [r3, #12]
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	681b      	ldr	r3, [r3, #0]
 800fdec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800fdf0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	2200      	movs	r2, #0
 800fdf6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	2220      	movs	r2, #32
 800fdfc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	2220      	movs	r2, #32
 800fe04:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800fe08:	2300      	movs	r3, #0
}
 800fe0a:	4618      	mov	r0, r3
 800fe0c:	3708      	adds	r7, #8
 800fe0e:	46bd      	mov	sp, r7
 800fe10:	bd80      	pop	{r7, pc}
	...

0800fe14 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800fe14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800fe18:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800fe1c:	af00      	add	r7, sp, #0
 800fe1e:	f8c7 01fc 	str.w	r0, [r7, #508]	; 0x1fc
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800fe22:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800fe26:	681b      	ldr	r3, [r3, #0]
 800fe28:	691b      	ldr	r3, [r3, #16]
 800fe2a:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800fe2e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800fe32:	68d9      	ldr	r1, [r3, #12]
 800fe34:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800fe38:	681a      	ldr	r2, [r3, #0]
 800fe3a:	ea40 0301 	orr.w	r3, r0, r1
 800fe3e:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800fe40:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800fe44:	689a      	ldr	r2, [r3, #8]
 800fe46:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800fe4a:	691b      	ldr	r3, [r3, #16]
 800fe4c:	431a      	orrs	r2, r3
 800fe4e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800fe52:	695b      	ldr	r3, [r3, #20]
 800fe54:	431a      	orrs	r2, r3
 800fe56:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800fe5a:	69db      	ldr	r3, [r3, #28]
 800fe5c:	4313      	orrs	r3, r2
 800fe5e:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
  MODIFY_REG(huart->Instance->CR1,
 800fe62:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800fe66:	681b      	ldr	r3, [r3, #0]
 800fe68:	68db      	ldr	r3, [r3, #12]
 800fe6a:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800fe6e:	f021 010c 	bic.w	r1, r1, #12
 800fe72:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800fe76:	681a      	ldr	r2, [r3, #0]
 800fe78:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 800fe7c:	430b      	orrs	r3, r1
 800fe7e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800fe80:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800fe84:	681b      	ldr	r3, [r3, #0]
 800fe86:	695b      	ldr	r3, [r3, #20]
 800fe88:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800fe8c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800fe90:	6999      	ldr	r1, [r3, #24]
 800fe92:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800fe96:	681a      	ldr	r2, [r3, #0]
 800fe98:	ea40 0301 	orr.w	r3, r0, r1
 800fe9c:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800fe9e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800fea2:	69db      	ldr	r3, [r3, #28]
 800fea4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fea8:	f040 824a 	bne.w	8010340 <UART_SetConfig+0x52c>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800feac:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800feb0:	681a      	ldr	r2, [r3, #0]
 800feb2:	4b96      	ldr	r3, [pc, #600]	; (801010c <UART_SetConfig+0x2f8>)
 800feb4:	429a      	cmp	r2, r3
 800feb6:	d006      	beq.n	800fec6 <UART_SetConfig+0xb2>
 800feb8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800febc:	681a      	ldr	r2, [r3, #0]
 800febe:	4b94      	ldr	r3, [pc, #592]	; (8010110 <UART_SetConfig+0x2fc>)
 800fec0:	429a      	cmp	r2, r3
 800fec2:	f040 8129 	bne.w	8010118 <UART_SetConfig+0x304>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800fec6:	f7fe fb39 	bl	800e53c <HAL_RCC_GetPCLK2Freq>
 800feca:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800fece:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800fed2:	2200      	movs	r2, #0
 800fed4:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 800fed8:	f8c7 21f4 	str.w	r2, [r7, #500]	; 0x1f4
 800fedc:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	; 0x1f0
 800fee0:	4622      	mov	r2, r4
 800fee2:	462b      	mov	r3, r5
 800fee4:	1891      	adds	r1, r2, r2
 800fee6:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 800feea:	415b      	adcs	r3, r3
 800feec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800fef0:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800fef4:	4621      	mov	r1, r4
 800fef6:	1851      	adds	r1, r2, r1
 800fef8:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 800fefc:	4629      	mov	r1, r5
 800fefe:	414b      	adcs	r3, r1
 800ff00:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800ff04:	f04f 0200 	mov.w	r2, #0
 800ff08:	f04f 0300 	mov.w	r3, #0
 800ff0c:	e9d7 8932 	ldrd	r8, r9, [r7, #200]	; 0xc8
 800ff10:	4649      	mov	r1, r9
 800ff12:	00cb      	lsls	r3, r1, #3
 800ff14:	4641      	mov	r1, r8
 800ff16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ff1a:	4641      	mov	r1, r8
 800ff1c:	00ca      	lsls	r2, r1, #3
 800ff1e:	4610      	mov	r0, r2
 800ff20:	4619      	mov	r1, r3
 800ff22:	4603      	mov	r3, r0
 800ff24:	4622      	mov	r2, r4
 800ff26:	189b      	adds	r3, r3, r2
 800ff28:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 800ff2c:	462b      	mov	r3, r5
 800ff2e:	460a      	mov	r2, r1
 800ff30:	eb42 0303 	adc.w	r3, r2, r3
 800ff34:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800ff38:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800ff3c:	685b      	ldr	r3, [r3, #4]
 800ff3e:	2200      	movs	r2, #0
 800ff40:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800ff44:	f8c7 21e4 	str.w	r2, [r7, #484]	; 0x1e4
 800ff48:	e9d7 1278 	ldrd	r1, r2, [r7, #480]	; 0x1e0
 800ff4c:	460b      	mov	r3, r1
 800ff4e:	18db      	adds	r3, r3, r3
 800ff50:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ff54:	4613      	mov	r3, r2
 800ff56:	eb42 0303 	adc.w	r3, r2, r3
 800ff5a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ff5e:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 800ff62:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 800ff66:	f7f6 fe97 	bl	8006c98 <__aeabi_uldivmod>
 800ff6a:	4602      	mov	r2, r0
 800ff6c:	460b      	mov	r3, r1
 800ff6e:	4b69      	ldr	r3, [pc, #420]	; (8010114 <UART_SetConfig+0x300>)
 800ff70:	fba3 2302 	umull	r2, r3, r3, r2
 800ff74:	095b      	lsrs	r3, r3, #5
 800ff76:	011c      	lsls	r4, r3, #4
 800ff78:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800ff7c:	2200      	movs	r2, #0
 800ff7e:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 800ff82:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 800ff86:	e9d7 8976 	ldrd	r8, r9, [r7, #472]	; 0x1d8
 800ff8a:	4642      	mov	r2, r8
 800ff8c:	464b      	mov	r3, r9
 800ff8e:	1891      	adds	r1, r2, r2
 800ff90:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 800ff94:	415b      	adcs	r3, r3
 800ff96:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800ff9a:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 800ff9e:	4641      	mov	r1, r8
 800ffa0:	1851      	adds	r1, r2, r1
 800ffa2:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 800ffa6:	4649      	mov	r1, r9
 800ffa8:	414b      	adcs	r3, r1
 800ffaa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ffae:	f04f 0200 	mov.w	r2, #0
 800ffb2:	f04f 0300 	mov.w	r3, #0
 800ffb6:	e9d7 ab2c 	ldrd	sl, fp, [r7, #176]	; 0xb0
 800ffba:	4659      	mov	r1, fp
 800ffbc:	00cb      	lsls	r3, r1, #3
 800ffbe:	4651      	mov	r1, sl
 800ffc0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ffc4:	4651      	mov	r1, sl
 800ffc6:	00ca      	lsls	r2, r1, #3
 800ffc8:	4610      	mov	r0, r2
 800ffca:	4619      	mov	r1, r3
 800ffcc:	4603      	mov	r3, r0
 800ffce:	4642      	mov	r2, r8
 800ffd0:	189b      	adds	r3, r3, r2
 800ffd2:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 800ffd6:	464b      	mov	r3, r9
 800ffd8:	460a      	mov	r2, r1
 800ffda:	eb42 0303 	adc.w	r3, r2, r3
 800ffde:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 800ffe2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800ffe6:	685b      	ldr	r3, [r3, #4]
 800ffe8:	2200      	movs	r2, #0
 800ffea:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800ffee:	f8c7 21cc 	str.w	r2, [r7, #460]	; 0x1cc
 800fff2:	e9d7 1272 	ldrd	r1, r2, [r7, #456]	; 0x1c8
 800fff6:	460b      	mov	r3, r1
 800fff8:	18db      	adds	r3, r3, r3
 800fffa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800fffe:	4613      	mov	r3, r2
 8010000:	eb42 0303 	adc.w	r3, r2, r3
 8010004:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8010008:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 801000c:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	; 0x1d0
 8010010:	f7f6 fe42 	bl	8006c98 <__aeabi_uldivmod>
 8010014:	4602      	mov	r2, r0
 8010016:	460b      	mov	r3, r1
 8010018:	4611      	mov	r1, r2
 801001a:	4b3e      	ldr	r3, [pc, #248]	; (8010114 <UART_SetConfig+0x300>)
 801001c:	fba3 2301 	umull	r2, r3, r3, r1
 8010020:	095b      	lsrs	r3, r3, #5
 8010022:	2264      	movs	r2, #100	; 0x64
 8010024:	fb02 f303 	mul.w	r3, r2, r3
 8010028:	1acb      	subs	r3, r1, r3
 801002a:	00db      	lsls	r3, r3, #3
 801002c:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8010030:	4b38      	ldr	r3, [pc, #224]	; (8010114 <UART_SetConfig+0x300>)
 8010032:	fba3 2302 	umull	r2, r3, r3, r2
 8010036:	095b      	lsrs	r3, r3, #5
 8010038:	005b      	lsls	r3, r3, #1
 801003a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 801003e:	441c      	add	r4, r3
 8010040:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8010044:	2200      	movs	r2, #0
 8010046:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 801004a:	f8c7 21c4 	str.w	r2, [r7, #452]	; 0x1c4
 801004e:	e9d7 8970 	ldrd	r8, r9, [r7, #448]	; 0x1c0
 8010052:	4642      	mov	r2, r8
 8010054:	464b      	mov	r3, r9
 8010056:	1891      	adds	r1, r2, r2
 8010058:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 801005c:	415b      	adcs	r3, r3
 801005e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8010062:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8010066:	4641      	mov	r1, r8
 8010068:	1851      	adds	r1, r2, r1
 801006a:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 801006e:	4649      	mov	r1, r9
 8010070:	414b      	adcs	r3, r1
 8010072:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8010076:	f04f 0200 	mov.w	r2, #0
 801007a:	f04f 0300 	mov.w	r3, #0
 801007e:	e9d7 ab26 	ldrd	sl, fp, [r7, #152]	; 0x98
 8010082:	4659      	mov	r1, fp
 8010084:	00cb      	lsls	r3, r1, #3
 8010086:	4651      	mov	r1, sl
 8010088:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 801008c:	4651      	mov	r1, sl
 801008e:	00ca      	lsls	r2, r1, #3
 8010090:	4610      	mov	r0, r2
 8010092:	4619      	mov	r1, r3
 8010094:	4603      	mov	r3, r0
 8010096:	4642      	mov	r2, r8
 8010098:	189b      	adds	r3, r3, r2
 801009a:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 801009e:	464b      	mov	r3, r9
 80100a0:	460a      	mov	r2, r1
 80100a2:	eb42 0303 	adc.w	r3, r2, r3
 80100a6:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80100aa:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80100ae:	685b      	ldr	r3, [r3, #4]
 80100b0:	2200      	movs	r2, #0
 80100b2:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 80100b6:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
 80100ba:	e9d7 126c 	ldrd	r1, r2, [r7, #432]	; 0x1b0
 80100be:	460b      	mov	r3, r1
 80100c0:	18db      	adds	r3, r3, r3
 80100c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80100c6:	4613      	mov	r3, r2
 80100c8:	eb42 0303 	adc.w	r3, r2, r3
 80100cc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80100d0:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 80100d4:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	; 0x1b8
 80100d8:	f7f6 fdde 	bl	8006c98 <__aeabi_uldivmod>
 80100dc:	4602      	mov	r2, r0
 80100de:	460b      	mov	r3, r1
 80100e0:	4b0c      	ldr	r3, [pc, #48]	; (8010114 <UART_SetConfig+0x300>)
 80100e2:	fba3 1302 	umull	r1, r3, r3, r2
 80100e6:	095b      	lsrs	r3, r3, #5
 80100e8:	2164      	movs	r1, #100	; 0x64
 80100ea:	fb01 f303 	mul.w	r3, r1, r3
 80100ee:	1ad3      	subs	r3, r2, r3
 80100f0:	00db      	lsls	r3, r3, #3
 80100f2:	3332      	adds	r3, #50	; 0x32
 80100f4:	4a07      	ldr	r2, [pc, #28]	; (8010114 <UART_SetConfig+0x300>)
 80100f6:	fba2 2303 	umull	r2, r3, r2, r3
 80100fa:	095b      	lsrs	r3, r3, #5
 80100fc:	f003 0207 	and.w	r2, r3, #7
 8010100:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8010104:	681b      	ldr	r3, [r3, #0]
 8010106:	4422      	add	r2, r4
 8010108:	609a      	str	r2, [r3, #8]
 801010a:	e349      	b.n	80107a0 <UART_SetConfig+0x98c>
 801010c:	40011000 	.word	0x40011000
 8010110:	40011400 	.word	0x40011400
 8010114:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8010118:	f7fe f9fc 	bl	800e514 <HAL_RCC_GetPCLK1Freq>
 801011c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8010120:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8010124:	2200      	movs	r2, #0
 8010126:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 801012a:	f8c7 21ac 	str.w	r2, [r7, #428]	; 0x1ac
 801012e:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	; 0x1a8
 8010132:	4622      	mov	r2, r4
 8010134:	462b      	mov	r3, r5
 8010136:	1891      	adds	r1, r2, r2
 8010138:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 801013c:	415b      	adcs	r3, r3
 801013e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8010142:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8010146:	4621      	mov	r1, r4
 8010148:	eb12 0a01 	adds.w	sl, r2, r1
 801014c:	4629      	mov	r1, r5
 801014e:	eb43 0b01 	adc.w	fp, r3, r1
 8010152:	f04f 0200 	mov.w	r2, #0
 8010156:	f04f 0300 	mov.w	r3, #0
 801015a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 801015e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8010162:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8010166:	4692      	mov	sl, r2
 8010168:	469b      	mov	fp, r3
 801016a:	4623      	mov	r3, r4
 801016c:	eb1a 0303 	adds.w	r3, sl, r3
 8010170:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8010174:	462b      	mov	r3, r5
 8010176:	eb4b 0303 	adc.w	r3, fp, r3
 801017a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 801017e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8010182:	685b      	ldr	r3, [r3, #4]
 8010184:	2200      	movs	r2, #0
 8010186:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 801018a:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 801018e:	e9d7 1266 	ldrd	r1, r2, [r7, #408]	; 0x198
 8010192:	460b      	mov	r3, r1
 8010194:	18db      	adds	r3, r3, r3
 8010196:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801019a:	4613      	mov	r3, r2
 801019c:	eb42 0303 	adc.w	r3, r2, r3
 80101a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80101a4:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80101a8:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 80101ac:	f7f6 fd74 	bl	8006c98 <__aeabi_uldivmod>
 80101b0:	4602      	mov	r2, r0
 80101b2:	460b      	mov	r3, r1
 80101b4:	4b61      	ldr	r3, [pc, #388]	; (801033c <UART_SetConfig+0x528>)
 80101b6:	fba3 2302 	umull	r2, r3, r3, r2
 80101ba:	095b      	lsrs	r3, r3, #5
 80101bc:	011c      	lsls	r4, r3, #4
 80101be:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80101c2:	2200      	movs	r2, #0
 80101c4:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 80101c8:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
 80101cc:	e9d7 8964 	ldrd	r8, r9, [r7, #400]	; 0x190
 80101d0:	4642      	mov	r2, r8
 80101d2:	464b      	mov	r3, r9
 80101d4:	1891      	adds	r1, r2, r2
 80101d6:	67b9      	str	r1, [r7, #120]	; 0x78
 80101d8:	415b      	adcs	r3, r3
 80101da:	67fb      	str	r3, [r7, #124]	; 0x7c
 80101dc:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80101e0:	4641      	mov	r1, r8
 80101e2:	1851      	adds	r1, r2, r1
 80101e4:	6739      	str	r1, [r7, #112]	; 0x70
 80101e6:	4649      	mov	r1, r9
 80101e8:	414b      	adcs	r3, r1
 80101ea:	677b      	str	r3, [r7, #116]	; 0x74
 80101ec:	f04f 0200 	mov.w	r2, #0
 80101f0:	f04f 0300 	mov.w	r3, #0
 80101f4:	e9d7 ab1c 	ldrd	sl, fp, [r7, #112]	; 0x70
 80101f8:	4659      	mov	r1, fp
 80101fa:	00cb      	lsls	r3, r1, #3
 80101fc:	4651      	mov	r1, sl
 80101fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8010202:	4651      	mov	r1, sl
 8010204:	00ca      	lsls	r2, r1, #3
 8010206:	4610      	mov	r0, r2
 8010208:	4619      	mov	r1, r3
 801020a:	4603      	mov	r3, r0
 801020c:	4642      	mov	r2, r8
 801020e:	189b      	adds	r3, r3, r2
 8010210:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8010214:	464b      	mov	r3, r9
 8010216:	460a      	mov	r2, r1
 8010218:	eb42 0303 	adc.w	r3, r2, r3
 801021c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8010220:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8010224:	685b      	ldr	r3, [r3, #4]
 8010226:	2200      	movs	r2, #0
 8010228:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 801022c:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
 8010230:	e9d7 1260 	ldrd	r1, r2, [r7, #384]	; 0x180
 8010234:	460b      	mov	r3, r1
 8010236:	18db      	adds	r3, r3, r3
 8010238:	66bb      	str	r3, [r7, #104]	; 0x68
 801023a:	4613      	mov	r3, r2
 801023c:	eb42 0303 	adc.w	r3, r2, r3
 8010240:	66fb      	str	r3, [r7, #108]	; 0x6c
 8010242:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8010246:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 801024a:	f7f6 fd25 	bl	8006c98 <__aeabi_uldivmod>
 801024e:	4602      	mov	r2, r0
 8010250:	460b      	mov	r3, r1
 8010252:	4611      	mov	r1, r2
 8010254:	4b39      	ldr	r3, [pc, #228]	; (801033c <UART_SetConfig+0x528>)
 8010256:	fba3 2301 	umull	r2, r3, r3, r1
 801025a:	095b      	lsrs	r3, r3, #5
 801025c:	2264      	movs	r2, #100	; 0x64
 801025e:	fb02 f303 	mul.w	r3, r2, r3
 8010262:	1acb      	subs	r3, r1, r3
 8010264:	00db      	lsls	r3, r3, #3
 8010266:	f103 0232 	add.w	r2, r3, #50	; 0x32
 801026a:	4b34      	ldr	r3, [pc, #208]	; (801033c <UART_SetConfig+0x528>)
 801026c:	fba3 2302 	umull	r2, r3, r3, r2
 8010270:	095b      	lsrs	r3, r3, #5
 8010272:	005b      	lsls	r3, r3, #1
 8010274:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8010278:	441c      	add	r4, r3
 801027a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 801027e:	2200      	movs	r2, #0
 8010280:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8010284:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8010288:	e9d7 895e 	ldrd	r8, r9, [r7, #376]	; 0x178
 801028c:	4642      	mov	r2, r8
 801028e:	464b      	mov	r3, r9
 8010290:	1891      	adds	r1, r2, r2
 8010292:	6639      	str	r1, [r7, #96]	; 0x60
 8010294:	415b      	adcs	r3, r3
 8010296:	667b      	str	r3, [r7, #100]	; 0x64
 8010298:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 801029c:	4641      	mov	r1, r8
 801029e:	1851      	adds	r1, r2, r1
 80102a0:	65b9      	str	r1, [r7, #88]	; 0x58
 80102a2:	4649      	mov	r1, r9
 80102a4:	414b      	adcs	r3, r1
 80102a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80102a8:	f04f 0200 	mov.w	r2, #0
 80102ac:	f04f 0300 	mov.w	r3, #0
 80102b0:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	; 0x58
 80102b4:	4659      	mov	r1, fp
 80102b6:	00cb      	lsls	r3, r1, #3
 80102b8:	4651      	mov	r1, sl
 80102ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80102be:	4651      	mov	r1, sl
 80102c0:	00ca      	lsls	r2, r1, #3
 80102c2:	4610      	mov	r0, r2
 80102c4:	4619      	mov	r1, r3
 80102c6:	4603      	mov	r3, r0
 80102c8:	4642      	mov	r2, r8
 80102ca:	189b      	adds	r3, r3, r2
 80102cc:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 80102d0:	464b      	mov	r3, r9
 80102d2:	460a      	mov	r2, r1
 80102d4:	eb42 0303 	adc.w	r3, r2, r3
 80102d8:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 80102dc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80102e0:	685b      	ldr	r3, [r3, #4]
 80102e2:	2200      	movs	r2, #0
 80102e4:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 80102e8:	f8c7 216c 	str.w	r2, [r7, #364]	; 0x16c
 80102ec:	e9d7 125a 	ldrd	r1, r2, [r7, #360]	; 0x168
 80102f0:	460b      	mov	r3, r1
 80102f2:	18db      	adds	r3, r3, r3
 80102f4:	653b      	str	r3, [r7, #80]	; 0x50
 80102f6:	4613      	mov	r3, r2
 80102f8:	eb42 0303 	adc.w	r3, r2, r3
 80102fc:	657b      	str	r3, [r7, #84]	; 0x54
 80102fe:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8010302:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 8010306:	f7f6 fcc7 	bl	8006c98 <__aeabi_uldivmod>
 801030a:	4602      	mov	r2, r0
 801030c:	460b      	mov	r3, r1
 801030e:	4b0b      	ldr	r3, [pc, #44]	; (801033c <UART_SetConfig+0x528>)
 8010310:	fba3 1302 	umull	r1, r3, r3, r2
 8010314:	095b      	lsrs	r3, r3, #5
 8010316:	2164      	movs	r1, #100	; 0x64
 8010318:	fb01 f303 	mul.w	r3, r1, r3
 801031c:	1ad3      	subs	r3, r2, r3
 801031e:	00db      	lsls	r3, r3, #3
 8010320:	3332      	adds	r3, #50	; 0x32
 8010322:	4a06      	ldr	r2, [pc, #24]	; (801033c <UART_SetConfig+0x528>)
 8010324:	fba2 2303 	umull	r2, r3, r2, r3
 8010328:	095b      	lsrs	r3, r3, #5
 801032a:	f003 0207 	and.w	r2, r3, #7
 801032e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8010332:	681b      	ldr	r3, [r3, #0]
 8010334:	4422      	add	r2, r4
 8010336:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8010338:	e232      	b.n	80107a0 <UART_SetConfig+0x98c>
 801033a:	bf00      	nop
 801033c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8010340:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8010344:	681a      	ldr	r2, [r3, #0]
 8010346:	4b8d      	ldr	r3, [pc, #564]	; (801057c <UART_SetConfig+0x768>)
 8010348:	429a      	cmp	r2, r3
 801034a:	d006      	beq.n	801035a <UART_SetConfig+0x546>
 801034c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8010350:	681a      	ldr	r2, [r3, #0]
 8010352:	4b8b      	ldr	r3, [pc, #556]	; (8010580 <UART_SetConfig+0x76c>)
 8010354:	429a      	cmp	r2, r3
 8010356:	f040 8117 	bne.w	8010588 <UART_SetConfig+0x774>
      pclk = HAL_RCC_GetPCLK2Freq();
 801035a:	f7fe f8ef 	bl	800e53c <HAL_RCC_GetPCLK2Freq>
 801035e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8010362:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8010366:	2200      	movs	r2, #0
 8010368:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 801036c:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8010370:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8010374:	4622      	mov	r2, r4
 8010376:	462b      	mov	r3, r5
 8010378:	1891      	adds	r1, r2, r2
 801037a:	64b9      	str	r1, [r7, #72]	; 0x48
 801037c:	415b      	adcs	r3, r3
 801037e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010380:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8010384:	4621      	mov	r1, r4
 8010386:	eb12 0801 	adds.w	r8, r2, r1
 801038a:	4629      	mov	r1, r5
 801038c:	eb43 0901 	adc.w	r9, r3, r1
 8010390:	f04f 0200 	mov.w	r2, #0
 8010394:	f04f 0300 	mov.w	r3, #0
 8010398:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 801039c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80103a0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80103a4:	4690      	mov	r8, r2
 80103a6:	4699      	mov	r9, r3
 80103a8:	4623      	mov	r3, r4
 80103aa:	eb18 0303 	adds.w	r3, r8, r3
 80103ae:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80103b2:	462b      	mov	r3, r5
 80103b4:	eb49 0303 	adc.w	r3, r9, r3
 80103b8:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 80103bc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80103c0:	685b      	ldr	r3, [r3, #4]
 80103c2:	2200      	movs	r2, #0
 80103c4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80103c8:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 80103cc:	f04f 0200 	mov.w	r2, #0
 80103d0:	f04f 0300 	mov.w	r3, #0
 80103d4:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	; 0x150
 80103d8:	4629      	mov	r1, r5
 80103da:	008b      	lsls	r3, r1, #2
 80103dc:	4621      	mov	r1, r4
 80103de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80103e2:	4621      	mov	r1, r4
 80103e4:	008a      	lsls	r2, r1, #2
 80103e6:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	; 0x158
 80103ea:	f7f6 fc55 	bl	8006c98 <__aeabi_uldivmod>
 80103ee:	4602      	mov	r2, r0
 80103f0:	460b      	mov	r3, r1
 80103f2:	4b64      	ldr	r3, [pc, #400]	; (8010584 <UART_SetConfig+0x770>)
 80103f4:	fba3 2302 	umull	r2, r3, r3, r2
 80103f8:	095b      	lsrs	r3, r3, #5
 80103fa:	011c      	lsls	r4, r3, #4
 80103fc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8010400:	2200      	movs	r2, #0
 8010402:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8010406:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 801040a:	e9d7 8952 	ldrd	r8, r9, [r7, #328]	; 0x148
 801040e:	4642      	mov	r2, r8
 8010410:	464b      	mov	r3, r9
 8010412:	1891      	adds	r1, r2, r2
 8010414:	6439      	str	r1, [r7, #64]	; 0x40
 8010416:	415b      	adcs	r3, r3
 8010418:	647b      	str	r3, [r7, #68]	; 0x44
 801041a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 801041e:	4641      	mov	r1, r8
 8010420:	1851      	adds	r1, r2, r1
 8010422:	63b9      	str	r1, [r7, #56]	; 0x38
 8010424:	4649      	mov	r1, r9
 8010426:	414b      	adcs	r3, r1
 8010428:	63fb      	str	r3, [r7, #60]	; 0x3c
 801042a:	f04f 0200 	mov.w	r2, #0
 801042e:	f04f 0300 	mov.w	r3, #0
 8010432:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	; 0x38
 8010436:	4659      	mov	r1, fp
 8010438:	00cb      	lsls	r3, r1, #3
 801043a:	4651      	mov	r1, sl
 801043c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8010440:	4651      	mov	r1, sl
 8010442:	00ca      	lsls	r2, r1, #3
 8010444:	4610      	mov	r0, r2
 8010446:	4619      	mov	r1, r3
 8010448:	4603      	mov	r3, r0
 801044a:	4642      	mov	r2, r8
 801044c:	189b      	adds	r3, r3, r2
 801044e:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8010452:	464b      	mov	r3, r9
 8010454:	460a      	mov	r2, r1
 8010456:	eb42 0303 	adc.w	r3, r2, r3
 801045a:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 801045e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8010462:	685b      	ldr	r3, [r3, #4]
 8010464:	2200      	movs	r2, #0
 8010466:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 801046a:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 801046e:	f04f 0200 	mov.w	r2, #0
 8010472:	f04f 0300 	mov.w	r3, #0
 8010476:	e9d7 894e 	ldrd	r8, r9, [r7, #312]	; 0x138
 801047a:	4649      	mov	r1, r9
 801047c:	008b      	lsls	r3, r1, #2
 801047e:	4641      	mov	r1, r8
 8010480:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8010484:	4641      	mov	r1, r8
 8010486:	008a      	lsls	r2, r1, #2
 8010488:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 801048c:	f7f6 fc04 	bl	8006c98 <__aeabi_uldivmod>
 8010490:	4602      	mov	r2, r0
 8010492:	460b      	mov	r3, r1
 8010494:	4b3b      	ldr	r3, [pc, #236]	; (8010584 <UART_SetConfig+0x770>)
 8010496:	fba3 1302 	umull	r1, r3, r3, r2
 801049a:	095b      	lsrs	r3, r3, #5
 801049c:	2164      	movs	r1, #100	; 0x64
 801049e:	fb01 f303 	mul.w	r3, r1, r3
 80104a2:	1ad3      	subs	r3, r2, r3
 80104a4:	011b      	lsls	r3, r3, #4
 80104a6:	3332      	adds	r3, #50	; 0x32
 80104a8:	4a36      	ldr	r2, [pc, #216]	; (8010584 <UART_SetConfig+0x770>)
 80104aa:	fba2 2303 	umull	r2, r3, r2, r3
 80104ae:	095b      	lsrs	r3, r3, #5
 80104b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80104b4:	441c      	add	r4, r3
 80104b6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80104ba:	2200      	movs	r2, #0
 80104bc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80104c0:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 80104c4:	e9d7 894c 	ldrd	r8, r9, [r7, #304]	; 0x130
 80104c8:	4642      	mov	r2, r8
 80104ca:	464b      	mov	r3, r9
 80104cc:	1891      	adds	r1, r2, r2
 80104ce:	6339      	str	r1, [r7, #48]	; 0x30
 80104d0:	415b      	adcs	r3, r3
 80104d2:	637b      	str	r3, [r7, #52]	; 0x34
 80104d4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80104d8:	4641      	mov	r1, r8
 80104da:	1851      	adds	r1, r2, r1
 80104dc:	62b9      	str	r1, [r7, #40]	; 0x28
 80104de:	4649      	mov	r1, r9
 80104e0:	414b      	adcs	r3, r1
 80104e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80104e4:	f04f 0200 	mov.w	r2, #0
 80104e8:	f04f 0300 	mov.w	r3, #0
 80104ec:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	; 0x28
 80104f0:	4659      	mov	r1, fp
 80104f2:	00cb      	lsls	r3, r1, #3
 80104f4:	4651      	mov	r1, sl
 80104f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80104fa:	4651      	mov	r1, sl
 80104fc:	00ca      	lsls	r2, r1, #3
 80104fe:	4610      	mov	r0, r2
 8010500:	4619      	mov	r1, r3
 8010502:	4603      	mov	r3, r0
 8010504:	4642      	mov	r2, r8
 8010506:	189b      	adds	r3, r3, r2
 8010508:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 801050c:	464b      	mov	r3, r9
 801050e:	460a      	mov	r2, r1
 8010510:	eb42 0303 	adc.w	r3, r2, r3
 8010514:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8010518:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 801051c:	685b      	ldr	r3, [r3, #4]
 801051e:	2200      	movs	r2, #0
 8010520:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8010524:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 8010528:	f04f 0200 	mov.w	r2, #0
 801052c:	f04f 0300 	mov.w	r3, #0
 8010530:	e9d7 8948 	ldrd	r8, r9, [r7, #288]	; 0x120
 8010534:	4649      	mov	r1, r9
 8010536:	008b      	lsls	r3, r1, #2
 8010538:	4641      	mov	r1, r8
 801053a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 801053e:	4641      	mov	r1, r8
 8010540:	008a      	lsls	r2, r1, #2
 8010542:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 8010546:	f7f6 fba7 	bl	8006c98 <__aeabi_uldivmod>
 801054a:	4602      	mov	r2, r0
 801054c:	460b      	mov	r3, r1
 801054e:	4b0d      	ldr	r3, [pc, #52]	; (8010584 <UART_SetConfig+0x770>)
 8010550:	fba3 1302 	umull	r1, r3, r3, r2
 8010554:	095b      	lsrs	r3, r3, #5
 8010556:	2164      	movs	r1, #100	; 0x64
 8010558:	fb01 f303 	mul.w	r3, r1, r3
 801055c:	1ad3      	subs	r3, r2, r3
 801055e:	011b      	lsls	r3, r3, #4
 8010560:	3332      	adds	r3, #50	; 0x32
 8010562:	4a08      	ldr	r2, [pc, #32]	; (8010584 <UART_SetConfig+0x770>)
 8010564:	fba2 2303 	umull	r2, r3, r2, r3
 8010568:	095b      	lsrs	r3, r3, #5
 801056a:	f003 020f 	and.w	r2, r3, #15
 801056e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8010572:	681b      	ldr	r3, [r3, #0]
 8010574:	4422      	add	r2, r4
 8010576:	609a      	str	r2, [r3, #8]
 8010578:	e112      	b.n	80107a0 <UART_SetConfig+0x98c>
 801057a:	bf00      	nop
 801057c:	40011000 	.word	0x40011000
 8010580:	40011400 	.word	0x40011400
 8010584:	51eb851f 	.word	0x51eb851f
      pclk = HAL_RCC_GetPCLK1Freq();
 8010588:	f7fd ffc4 	bl	800e514 <HAL_RCC_GetPCLK1Freq>
 801058c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8010590:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8010594:	2200      	movs	r2, #0
 8010596:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 801059a:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 801059e:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	; 0x118
 80105a2:	4642      	mov	r2, r8
 80105a4:	464b      	mov	r3, r9
 80105a6:	1891      	adds	r1, r2, r2
 80105a8:	6239      	str	r1, [r7, #32]
 80105aa:	415b      	adcs	r3, r3
 80105ac:	627b      	str	r3, [r7, #36]	; 0x24
 80105ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80105b2:	4641      	mov	r1, r8
 80105b4:	1854      	adds	r4, r2, r1
 80105b6:	4649      	mov	r1, r9
 80105b8:	eb43 0501 	adc.w	r5, r3, r1
 80105bc:	f04f 0200 	mov.w	r2, #0
 80105c0:	f04f 0300 	mov.w	r3, #0
 80105c4:	00eb      	lsls	r3, r5, #3
 80105c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80105ca:	00e2      	lsls	r2, r4, #3
 80105cc:	4614      	mov	r4, r2
 80105ce:	461d      	mov	r5, r3
 80105d0:	4643      	mov	r3, r8
 80105d2:	18e3      	adds	r3, r4, r3
 80105d4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80105d8:	464b      	mov	r3, r9
 80105da:	eb45 0303 	adc.w	r3, r5, r3
 80105de:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80105e2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80105e6:	685b      	ldr	r3, [r3, #4]
 80105e8:	2200      	movs	r2, #0
 80105ea:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80105ee:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 80105f2:	f04f 0200 	mov.w	r2, #0
 80105f6:	f04f 0300 	mov.w	r3, #0
 80105fa:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 80105fe:	4629      	mov	r1, r5
 8010600:	008b      	lsls	r3, r1, #2
 8010602:	4621      	mov	r1, r4
 8010604:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8010608:	4621      	mov	r1, r4
 801060a:	008a      	lsls	r2, r1, #2
 801060c:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8010610:	f7f6 fb42 	bl	8006c98 <__aeabi_uldivmod>
 8010614:	4602      	mov	r2, r0
 8010616:	460b      	mov	r3, r1
 8010618:	4b64      	ldr	r3, [pc, #400]	; (80107ac <UART_SetConfig+0x998>)
 801061a:	fba3 2302 	umull	r2, r3, r3, r2
 801061e:	095b      	lsrs	r3, r3, #5
 8010620:	011c      	lsls	r4, r3, #4
 8010622:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8010626:	2200      	movs	r2, #0
 8010628:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 801062c:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8010630:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	; 0x100
 8010634:	4642      	mov	r2, r8
 8010636:	464b      	mov	r3, r9
 8010638:	1891      	adds	r1, r2, r2
 801063a:	61b9      	str	r1, [r7, #24]
 801063c:	415b      	adcs	r3, r3
 801063e:	61fb      	str	r3, [r7, #28]
 8010640:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8010644:	4641      	mov	r1, r8
 8010646:	1851      	adds	r1, r2, r1
 8010648:	6139      	str	r1, [r7, #16]
 801064a:	4649      	mov	r1, r9
 801064c:	414b      	adcs	r3, r1
 801064e:	617b      	str	r3, [r7, #20]
 8010650:	f04f 0200 	mov.w	r2, #0
 8010654:	f04f 0300 	mov.w	r3, #0
 8010658:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 801065c:	4659      	mov	r1, fp
 801065e:	00cb      	lsls	r3, r1, #3
 8010660:	4651      	mov	r1, sl
 8010662:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8010666:	4651      	mov	r1, sl
 8010668:	00ca      	lsls	r2, r1, #3
 801066a:	4610      	mov	r0, r2
 801066c:	4619      	mov	r1, r3
 801066e:	4603      	mov	r3, r0
 8010670:	4642      	mov	r2, r8
 8010672:	189b      	adds	r3, r3, r2
 8010674:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8010678:	464b      	mov	r3, r9
 801067a:	460a      	mov	r2, r1
 801067c:	eb42 0303 	adc.w	r3, r2, r3
 8010680:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8010684:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8010688:	685b      	ldr	r3, [r3, #4]
 801068a:	2200      	movs	r2, #0
 801068c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8010690:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8010694:	f04f 0200 	mov.w	r2, #0
 8010698:	f04f 0300 	mov.w	r3, #0
 801069c:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 80106a0:	4649      	mov	r1, r9
 80106a2:	008b      	lsls	r3, r1, #2
 80106a4:	4641      	mov	r1, r8
 80106a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80106aa:	4641      	mov	r1, r8
 80106ac:	008a      	lsls	r2, r1, #2
 80106ae:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 80106b2:	f7f6 faf1 	bl	8006c98 <__aeabi_uldivmod>
 80106b6:	4602      	mov	r2, r0
 80106b8:	460b      	mov	r3, r1
 80106ba:	4b3c      	ldr	r3, [pc, #240]	; (80107ac <UART_SetConfig+0x998>)
 80106bc:	fba3 1302 	umull	r1, r3, r3, r2
 80106c0:	095b      	lsrs	r3, r3, #5
 80106c2:	2164      	movs	r1, #100	; 0x64
 80106c4:	fb01 f303 	mul.w	r3, r1, r3
 80106c8:	1ad3      	subs	r3, r2, r3
 80106ca:	011b      	lsls	r3, r3, #4
 80106cc:	3332      	adds	r3, #50	; 0x32
 80106ce:	4a37      	ldr	r2, [pc, #220]	; (80107ac <UART_SetConfig+0x998>)
 80106d0:	fba2 2303 	umull	r2, r3, r2, r3
 80106d4:	095b      	lsrs	r3, r3, #5
 80106d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80106da:	441c      	add	r4, r3
 80106dc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80106e0:	2200      	movs	r2, #0
 80106e2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80106e6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80106ea:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 80106ee:	4642      	mov	r2, r8
 80106f0:	464b      	mov	r3, r9
 80106f2:	1891      	adds	r1, r2, r2
 80106f4:	60b9      	str	r1, [r7, #8]
 80106f6:	415b      	adcs	r3, r3
 80106f8:	60fb      	str	r3, [r7, #12]
 80106fa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80106fe:	4641      	mov	r1, r8
 8010700:	1851      	adds	r1, r2, r1
 8010702:	6039      	str	r1, [r7, #0]
 8010704:	4649      	mov	r1, r9
 8010706:	414b      	adcs	r3, r1
 8010708:	607b      	str	r3, [r7, #4]
 801070a:	f04f 0200 	mov.w	r2, #0
 801070e:	f04f 0300 	mov.w	r3, #0
 8010712:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8010716:	4659      	mov	r1, fp
 8010718:	00cb      	lsls	r3, r1, #3
 801071a:	4651      	mov	r1, sl
 801071c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8010720:	4651      	mov	r1, sl
 8010722:	00ca      	lsls	r2, r1, #3
 8010724:	4610      	mov	r0, r2
 8010726:	4619      	mov	r1, r3
 8010728:	4603      	mov	r3, r0
 801072a:	4642      	mov	r2, r8
 801072c:	189b      	adds	r3, r3, r2
 801072e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8010732:	464b      	mov	r3, r9
 8010734:	460a      	mov	r2, r1
 8010736:	eb42 0303 	adc.w	r3, r2, r3
 801073a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 801073e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8010742:	685b      	ldr	r3, [r3, #4]
 8010744:	2200      	movs	r2, #0
 8010746:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 801074a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 801074e:	f04f 0200 	mov.w	r2, #0
 8010752:	f04f 0300 	mov.w	r3, #0
 8010756:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 801075a:	4649      	mov	r1, r9
 801075c:	008b      	lsls	r3, r1, #2
 801075e:	4641      	mov	r1, r8
 8010760:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8010764:	4641      	mov	r1, r8
 8010766:	008a      	lsls	r2, r1, #2
 8010768:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 801076c:	f7f6 fa94 	bl	8006c98 <__aeabi_uldivmod>
 8010770:	4602      	mov	r2, r0
 8010772:	460b      	mov	r3, r1
 8010774:	4b0d      	ldr	r3, [pc, #52]	; (80107ac <UART_SetConfig+0x998>)
 8010776:	fba3 1302 	umull	r1, r3, r3, r2
 801077a:	095b      	lsrs	r3, r3, #5
 801077c:	2164      	movs	r1, #100	; 0x64
 801077e:	fb01 f303 	mul.w	r3, r1, r3
 8010782:	1ad3      	subs	r3, r2, r3
 8010784:	011b      	lsls	r3, r3, #4
 8010786:	3332      	adds	r3, #50	; 0x32
 8010788:	4a08      	ldr	r2, [pc, #32]	; (80107ac <UART_SetConfig+0x998>)
 801078a:	fba2 2303 	umull	r2, r3, r2, r3
 801078e:	095b      	lsrs	r3, r3, #5
 8010790:	f003 020f 	and.w	r2, r3, #15
 8010794:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8010798:	681b      	ldr	r3, [r3, #0]
 801079a:	4422      	add	r2, r4
 801079c:	609a      	str	r2, [r3, #8]
}
 801079e:	e7ff      	b.n	80107a0 <UART_SetConfig+0x98c>
 80107a0:	bf00      	nop
 80107a2:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80107a6:	46bd      	mov	sp, r7
 80107a8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80107ac:	51eb851f 	.word	0x51eb851f

080107b0 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80107b0:	b480      	push	{r7}
 80107b2:	b085      	sub	sp, #20
 80107b4:	af00      	add	r7, sp, #0
 80107b6:	6078      	str	r0, [r7, #4]
 80107b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 80107ba:	2300      	movs	r3, #0
 80107bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 80107be:	2300      	movs	r3, #0
 80107c0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 80107c2:	683b      	ldr	r3, [r7, #0]
 80107c4:	681b      	ldr	r3, [r3, #0]
 80107c6:	2b01      	cmp	r3, #1
 80107c8:	d029      	beq.n	801081e <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	681b      	ldr	r3, [r3, #0]
 80107ce:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80107d0:	68fb      	ldr	r3, [r7, #12]
 80107d2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80107d6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80107da:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80107dc:	683b      	ldr	r3, [r7, #0]
 80107de:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 80107e0:	683b      	ldr	r3, [r7, #0]
 80107e2:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80107e4:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 80107e6:	683b      	ldr	r3, [r7, #0]
 80107e8:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 80107ea:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 80107ec:	683b      	ldr	r3, [r7, #0]
 80107ee:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 80107f0:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 80107f2:	683b      	ldr	r3, [r7, #0]
 80107f4:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 80107f6:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 80107f8:	683b      	ldr	r3, [r7, #0]
 80107fa:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 80107fc:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 80107fe:	683b      	ldr	r3, [r7, #0]
 8010800:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 8010802:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 8010804:	683b      	ldr	r3, [r7, #0]
 8010806:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 8010808:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 801080a:	683b      	ldr	r3, [r7, #0]
 801080c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 801080e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8010810:	68fa      	ldr	r2, [r7, #12]
 8010812:	4313      	orrs	r3, r2
 8010814:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	68fa      	ldr	r2, [r7, #12]
 801081a:	601a      	str	r2, [r3, #0]
 801081c:	e034      	b.n	8010888 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	681b      	ldr	r3, [r3, #0]
 8010822:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8010824:	68fb      	ldr	r3, [r7, #12]
 8010826:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 801082a:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 801082c:	683b      	ldr	r3, [r7, #0]
 801082e:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8010830:	683b      	ldr	r3, [r7, #0]
 8010832:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8010834:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 8010836:	683b      	ldr	r3, [r7, #0]
 8010838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 801083a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 801083c:	68fa      	ldr	r2, [r7, #12]
 801083e:	4313      	orrs	r3, r2
 8010840:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8010842:	687b      	ldr	r3, [r7, #4]
 8010844:	685b      	ldr	r3, [r3, #4]
 8010846:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8010848:	68bb      	ldr	r3, [r7, #8]
 801084a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 801084e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8010852:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8010854:	683b      	ldr	r3, [r7, #0]
 8010856:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 8010858:	683b      	ldr	r3, [r7, #0]
 801085a:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 801085c:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 801085e:	683b      	ldr	r3, [r7, #0]
 8010860:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 8010862:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 8010864:	683b      	ldr	r3, [r7, #0]
 8010866:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 8010868:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 801086a:	683b      	ldr	r3, [r7, #0]
 801086c:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 801086e:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8010870:	683b      	ldr	r3, [r7, #0]
 8010872:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 8010874:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8010876:	68ba      	ldr	r2, [r7, #8]
 8010878:	4313      	orrs	r3, r2
 801087a:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	68fa      	ldr	r2, [r7, #12]
 8010880:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	68ba      	ldr	r2, [r7, #8]
 8010886:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 8010888:	2300      	movs	r3, #0
}
 801088a:	4618      	mov	r0, r3
 801088c:	3714      	adds	r7, #20
 801088e:	46bd      	mov	sp, r7
 8010890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010894:	4770      	bx	lr

08010896 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8010896:	b480      	push	{r7}
 8010898:	b087      	sub	sp, #28
 801089a:	af00      	add	r7, sp, #0
 801089c:	60f8      	str	r0, [r7, #12]
 801089e:	60b9      	str	r1, [r7, #8]
 80108a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 80108a2:	2300      	movs	r3, #0
 80108a4:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 80108a6:	2300      	movs	r3, #0
 80108a8:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	2b01      	cmp	r3, #1
 80108ae:	d02e      	beq.n	801090e <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80108b0:	68fb      	ldr	r3, [r7, #12]
 80108b2:	689b      	ldr	r3, [r3, #8]
 80108b4:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80108b6:	697b      	ldr	r3, [r7, #20]
 80108b8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80108bc:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80108be:	68bb      	ldr	r3, [r7, #8]
 80108c0:	681b      	ldr	r3, [r3, #0]
 80108c2:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 80108c4:	68bb      	ldr	r3, [r7, #8]
 80108c6:	685b      	ldr	r3, [r3, #4]
 80108c8:	3b01      	subs	r3, #1
 80108ca:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80108cc:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 80108ce:	68bb      	ldr	r3, [r7, #8]
 80108d0:	689b      	ldr	r3, [r3, #8]
 80108d2:	3b01      	subs	r3, #1
 80108d4:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 80108d6:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 80108d8:	68bb      	ldr	r3, [r7, #8]
 80108da:	68db      	ldr	r3, [r3, #12]
 80108dc:	3b01      	subs	r3, #1
 80108de:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 80108e0:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 80108e2:	68bb      	ldr	r3, [r7, #8]
 80108e4:	691b      	ldr	r3, [r3, #16]
 80108e6:	3b01      	subs	r3, #1
 80108e8:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 80108ea:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 80108ec:	68bb      	ldr	r3, [r7, #8]
 80108ee:	695b      	ldr	r3, [r3, #20]
 80108f0:	3b01      	subs	r3, #1
 80108f2:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 80108f4:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 80108f6:	68bb      	ldr	r3, [r7, #8]
 80108f8:	699b      	ldr	r3, [r3, #24]
 80108fa:	3b01      	subs	r3, #1
 80108fc:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80108fe:	4313      	orrs	r3, r2
 8010900:	697a      	ldr	r2, [r7, #20]
 8010902:	4313      	orrs	r3, r2
 8010904:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8010906:	68fb      	ldr	r3, [r7, #12]
 8010908:	697a      	ldr	r2, [r7, #20]
 801090a:	609a      	str	r2, [r3, #8]
 801090c:	e03b      	b.n	8010986 <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 801090e:	68fb      	ldr	r3, [r7, #12]
 8010910:	689b      	ldr	r3, [r3, #8]
 8010912:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8010914:	697b      	ldr	r3, [r7, #20]
 8010916:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 801091a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 801091e:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8010920:	68bb      	ldr	r3, [r7, #8]
 8010922:	68db      	ldr	r3, [r3, #12]
 8010924:	3b01      	subs	r3, #1
 8010926:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 8010928:	68bb      	ldr	r3, [r7, #8]
 801092a:	695b      	ldr	r3, [r3, #20]
 801092c:	3b01      	subs	r3, #1
 801092e:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8010930:	4313      	orrs	r3, r2
 8010932:	697a      	ldr	r2, [r7, #20]
 8010934:	4313      	orrs	r3, r2
 8010936:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8010938:	68fb      	ldr	r3, [r7, #12]
 801093a:	68db      	ldr	r3, [r3, #12]
 801093c:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 801093e:	693b      	ldr	r3, [r7, #16]
 8010940:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8010944:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8010946:	68bb      	ldr	r3, [r7, #8]
 8010948:	681b      	ldr	r3, [r3, #0]
 801094a:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 801094c:	68bb      	ldr	r3, [r7, #8]
 801094e:	685b      	ldr	r3, [r3, #4]
 8010950:	3b01      	subs	r3, #1
 8010952:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8010954:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8010956:	68bb      	ldr	r3, [r7, #8]
 8010958:	689b      	ldr	r3, [r3, #8]
 801095a:	3b01      	subs	r3, #1
 801095c:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 801095e:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 8010960:	68bb      	ldr	r3, [r7, #8]
 8010962:	691b      	ldr	r3, [r3, #16]
 8010964:	3b01      	subs	r3, #1
 8010966:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8010968:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 801096a:	68bb      	ldr	r3, [r7, #8]
 801096c:	699b      	ldr	r3, [r3, #24]
 801096e:	3b01      	subs	r3, #1
 8010970:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8010972:	4313      	orrs	r3, r2
 8010974:	693a      	ldr	r2, [r7, #16]
 8010976:	4313      	orrs	r3, r2
 8010978:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 801097a:	68fb      	ldr	r3, [r7, #12]
 801097c:	697a      	ldr	r2, [r7, #20]
 801097e:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8010980:	68fb      	ldr	r3, [r7, #12]
 8010982:	693a      	ldr	r2, [r7, #16]
 8010984:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 8010986:	2300      	movs	r3, #0
}
 8010988:	4618      	mov	r0, r3
 801098a:	371c      	adds	r7, #28
 801098c:	46bd      	mov	sp, r7
 801098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010992:	4770      	bx	lr

08010994 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8010994:	b580      	push	{r7, lr}
 8010996:	b086      	sub	sp, #24
 8010998:	af00      	add	r7, sp, #0
 801099a:	60f8      	str	r0, [r7, #12]
 801099c:	60b9      	str	r1, [r7, #8]
 801099e:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 80109a0:	2300      	movs	r3, #0
 80109a2:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 80109a4:	2300      	movs	r3, #0
 80109a6:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80109a8:	68bb      	ldr	r3, [r7, #8]
 80109aa:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 80109ac:	68bb      	ldr	r3, [r7, #8]
 80109ae:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80109b0:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 80109b2:	68bb      	ldr	r3, [r7, #8]
 80109b4:	689b      	ldr	r3, [r3, #8]
 80109b6:	3b01      	subs	r3, #1
 80109b8:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 80109ba:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 80109bc:	68bb      	ldr	r3, [r7, #8]
 80109be:	68db      	ldr	r3, [r3, #12]
 80109c0:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80109c2:	4313      	orrs	r3, r2
 80109c4:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 80109c6:	693a      	ldr	r2, [r7, #16]
 80109c8:	68fb      	ldr	r3, [r7, #12]
 80109ca:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80109cc:	f7fa fc68 	bl	800b2a0 <HAL_GetTick>
 80109d0:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 80109d2:	e010      	b.n	80109f6 <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80109da:	d00c      	beq.n	80109f6 <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	2b00      	cmp	r3, #0
 80109e0:	d007      	beq.n	80109f2 <FMC_SDRAM_SendCommand+0x5e>
 80109e2:	f7fa fc5d 	bl	800b2a0 <HAL_GetTick>
 80109e6:	4602      	mov	r2, r0
 80109e8:	697b      	ldr	r3, [r7, #20]
 80109ea:	1ad3      	subs	r3, r2, r3
 80109ec:	687a      	ldr	r2, [r7, #4]
 80109ee:	429a      	cmp	r2, r3
 80109f0:	d201      	bcs.n	80109f6 <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 80109f2:	2303      	movs	r3, #3
 80109f4:	e006      	b.n	8010a04 <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 80109f6:	68fb      	ldr	r3, [r7, #12]
 80109f8:	699b      	ldr	r3, [r3, #24]
 80109fa:	f003 0320 	and.w	r3, r3, #32
 80109fe:	2b20      	cmp	r3, #32
 8010a00:	d0e8      	beq.n	80109d4 <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 8010a02:	2300      	movs	r3, #0
}
 8010a04:	4618      	mov	r0, r3
 8010a06:	3718      	adds	r7, #24
 8010a08:	46bd      	mov	sp, r7
 8010a0a:	bd80      	pop	{r7, pc}

08010a0c <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8010a0c:	b480      	push	{r7}
 8010a0e:	b083      	sub	sp, #12
 8010a10:	af00      	add	r7, sp, #0
 8010a12:	6078      	str	r0, [r7, #4]
 8010a14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	695a      	ldr	r2, [r3, #20]
 8010a1a:	683b      	ldr	r3, [r7, #0]
 8010a1c:	005b      	lsls	r3, r3, #1
 8010a1e:	431a      	orrs	r2, r3
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8010a24:	2300      	movs	r3, #0
}
 8010a26:	4618      	mov	r0, r3
 8010a28:	370c      	adds	r7, #12
 8010a2a:	46bd      	mov	sp, r7
 8010a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a30:	4770      	bx	lr
	...

08010a34 <aiInit>:

/*
 * Init function to create and initialize a NN.
 */
int aiInit(const ai_u8* activations)
{
 8010a34:	b580      	push	{r7, lr}
 8010a36:	b090      	sub	sp, #64	; 0x40
 8010a38:	af00      	add	r7, sp, #0
 8010a3a:	6078      	str	r0, [r7, #4]
    ai_error err;

    /* 1 - Specific AI data structure to provide the references of the
     * activation/working memory chunk and the weights/bias parameters */
    const ai_network_params params = {
 8010a3c:	4b27      	ldr	r3, [pc, #156]	; (8010adc <aiInit+0xa8>)
 8010a3e:	60fb      	str	r3, [r7, #12]
 8010a40:	2301      	movs	r3, #1
 8010a42:	823b      	strh	r3, [r7, #16]
 8010a44:	2301      	movs	r3, #1
 8010a46:	827b      	strh	r3, [r7, #18]
 8010a48:	2301      	movs	r3, #1
 8010a4a:	82bb      	strh	r3, [r7, #20]
 8010a4c:	4b24      	ldr	r3, [pc, #144]	; (8010ae0 <aiInit+0xac>)
 8010a4e:	61bb      	str	r3, [r7, #24]
            AI_NETWORK_DATA_WEIGHTS(ai_network_data_weights_get()),
 8010a50:	f000 faa2 	bl	8010f98 <ai_network_data_weights_get>
 8010a54:	4603      	mov	r3, r0
    const ai_network_params params = {
 8010a56:	61fb      	str	r3, [r7, #28]
 8010a58:	2300      	movs	r3, #0
 8010a5a:	623b      	str	r3, [r7, #32]
 8010a5c:	4b21      	ldr	r3, [pc, #132]	; (8010ae4 <aiInit+0xb0>)
 8010a5e:	627b      	str	r3, [r7, #36]	; 0x24
 8010a60:	2301      	movs	r3, #1
 8010a62:	853b      	strh	r3, [r7, #40]	; 0x28
 8010a64:	2301      	movs	r3, #1
 8010a66:	857b      	strh	r3, [r7, #42]	; 0x2a
 8010a68:	2301      	movs	r3, #1
 8010a6a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8010a6c:	4b1e      	ldr	r3, [pc, #120]	; (8010ae8 <aiInit+0xb4>)
 8010a6e:	633b      	str	r3, [r7, #48]	; 0x30
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	637b      	str	r3, [r7, #52]	; 0x34
 8010a74:	2300      	movs	r3, #0
 8010a76:	63bb      	str	r3, [r7, #56]	; 0x38
            AI_NETWORK_DATA_ACTIVATIONS(activations)
    };

    /* 2 - Create an instance of the NN */
    err = ai_network_create(&network, AI_NETWORK_DATA_CONFIG);
 8010a78:	2100      	movs	r1, #0
 8010a7a:	481c      	ldr	r0, [pc, #112]	; (8010aec <aiInit+0xb8>)
 8010a7c:	f000 fa26 	bl	8010ecc <ai_network_create>
 8010a80:	4603      	mov	r3, r0
 8010a82:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (err.type != AI_ERROR_NONE) {
 8010a84:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8010a88:	2b00      	cmp	r3, #0
 8010a8a:	d002      	beq.n	8010a92 <aiInit+0x5e>
	    return -1;
 8010a8c:	f04f 33ff 	mov.w	r3, #4294967295
 8010a90:	e020      	b.n	8010ad4 <aiInit+0xa0>
    }

    /* 3 - Initialize the NN - Ready to be used */
    if (!ai_network_init(network, &params)) {
 8010a92:	4b16      	ldr	r3, [pc, #88]	; (8010aec <aiInit+0xb8>)
 8010a94:	681b      	ldr	r3, [r3, #0]
 8010a96:	f107 020c 	add.w	r2, r7, #12
 8010a9a:	4611      	mov	r1, r2
 8010a9c:	4618      	mov	r0, r3
 8010a9e:	f000 fa37 	bl	8010f10 <ai_network_init>
 8010aa2:	4603      	mov	r3, r0
 8010aa4:	f083 0301 	eor.w	r3, r3, #1
 8010aa8:	b2db      	uxtb	r3, r3
 8010aaa:	2b00      	cmp	r3, #0
 8010aac:	d011      	beq.n	8010ad2 <aiInit+0x9e>
        err = ai_network_get_error(network);
 8010aae:	4b0f      	ldr	r3, [pc, #60]	; (8010aec <aiInit+0xb8>)
 8010ab0:	681b      	ldr	r3, [r3, #0]
 8010ab2:	4618      	mov	r0, r3
 8010ab4:	f000 f9fe 	bl	8010eb4 <ai_network_get_error>
 8010ab8:	4603      	mov	r3, r0
 8010aba:	63fb      	str	r3, [r7, #60]	; 0x3c
        ai_network_destroy(network);
 8010abc:	4b0b      	ldr	r3, [pc, #44]	; (8010aec <aiInit+0xb8>)
 8010abe:	681b      	ldr	r3, [r3, #0]
 8010ac0:	4618      	mov	r0, r3
 8010ac2:	f000 fa19 	bl	8010ef8 <ai_network_destroy>
        network = AI_HANDLE_NULL;
 8010ac6:	4b09      	ldr	r3, [pc, #36]	; (8010aec <aiInit+0xb8>)
 8010ac8:	2200      	movs	r2, #0
 8010aca:	601a      	str	r2, [r3, #0]
	    return -2;
 8010acc:	f06f 0301 	mvn.w	r3, #1
 8010ad0:	e000      	b.n	8010ad4 <aiInit+0xa0>
    }

    return 0;
 8010ad2:	2300      	movs	r3, #0
}
 8010ad4:	4618      	mov	r0, r3
 8010ad6:	3740      	adds	r7, #64	; 0x40
 8010ad8:	46bd      	mov	sp, r7
 8010ada:	bd80      	pop	{r7, pc}
 8010adc:	40040440 	.word	0x40040440
 8010ae0:	000623e8 	.word	0x000623e8
 8010ae4:	00040440 	.word	0x00040440
 8010ae8:	00017080 	.word	0x00017080
 8010aec:	20002ca8 	.word	0x20002ca8

08010af0 <aiRun>:

/*
 * Run function to execute an inference.
 */
int aiRun(const void *in_data, void *out_data)
{
 8010af0:	b580      	push	{r7, lr}
 8010af2:	b084      	sub	sp, #16
 8010af4:	af00      	add	r7, sp, #0
 8010af6:	6078      	str	r0, [r7, #4]
 8010af8:	6039      	str	r1, [r7, #0]
    ai_i32 nbatch;
    ai_error err;

    /* Parameters checking */
    if (!in_data || !out_data || !network)
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	2b00      	cmp	r3, #0
 8010afe:	d006      	beq.n	8010b0e <aiRun+0x1e>
 8010b00:	683b      	ldr	r3, [r7, #0]
 8010b02:	2b00      	cmp	r3, #0
 8010b04:	d003      	beq.n	8010b0e <aiRun+0x1e>
 8010b06:	4b17      	ldr	r3, [pc, #92]	; (8010b64 <aiRun+0x74>)
 8010b08:	681b      	ldr	r3, [r3, #0]
 8010b0a:	2b00      	cmp	r3, #0
 8010b0c:	d102      	bne.n	8010b14 <aiRun+0x24>
        return -1;
 8010b0e:	f04f 33ff 	mov.w	r3, #4294967295
 8010b12:	e022      	b.n	8010b5a <aiRun+0x6a>

    /* Initialize input/output buffer handlers */
    ai_input[0].n_batches = 1;
 8010b14:	4b14      	ldr	r3, [pc, #80]	; (8010b68 <aiRun+0x78>)
 8010b16:	2201      	movs	r2, #1
 8010b18:	809a      	strh	r2, [r3, #4]
    ai_input[0].data = AI_HANDLE_PTR(in_data);
 8010b1a:	4a13      	ldr	r2, [pc, #76]	; (8010b68 <aiRun+0x78>)
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	6113      	str	r3, [r2, #16]
    ai_output[0].n_batches = 1;
 8010b20:	4b12      	ldr	r3, [pc, #72]	; (8010b6c <aiRun+0x7c>)
 8010b22:	2201      	movs	r2, #1
 8010b24:	809a      	strh	r2, [r3, #4]
    ai_output[0].data = AI_HANDLE_PTR(out_data);
 8010b26:	4a11      	ldr	r2, [pc, #68]	; (8010b6c <aiRun+0x7c>)
 8010b28:	683b      	ldr	r3, [r7, #0]
 8010b2a:	6113      	str	r3, [r2, #16]

    /* 2 - Perform the inference */
    nbatch = ai_network_run(network, &ai_input[0], &ai_output[0]);
 8010b2c:	4b0d      	ldr	r3, [pc, #52]	; (8010b64 <aiRun+0x74>)
 8010b2e:	681b      	ldr	r3, [r3, #0]
 8010b30:	4a0e      	ldr	r2, [pc, #56]	; (8010b6c <aiRun+0x7c>)
 8010b32:	490d      	ldr	r1, [pc, #52]	; (8010b68 <aiRun+0x78>)
 8010b34:	4618      	mov	r0, r3
 8010b36:	f000 fa1e 	bl	8010f76 <ai_network_run>
 8010b3a:	60f8      	str	r0, [r7, #12]
    if (nbatch != 1) {
 8010b3c:	68fb      	ldr	r3, [r7, #12]
 8010b3e:	2b01      	cmp	r3, #1
 8010b40:	d00a      	beq.n	8010b58 <aiRun+0x68>
        err = ai_network_get_error(network);
 8010b42:	4b08      	ldr	r3, [pc, #32]	; (8010b64 <aiRun+0x74>)
 8010b44:	681b      	ldr	r3, [r3, #0]
 8010b46:	4618      	mov	r0, r3
 8010b48:	f000 f9b4 	bl	8010eb4 <ai_network_get_error>
 8010b4c:	4603      	mov	r3, r0
 8010b4e:	60bb      	str	r3, [r7, #8]
        // ...
        return err.code;
 8010b50:	68bb      	ldr	r3, [r7, #8]
 8010b52:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8010b56:	e000      	b.n	8010b5a <aiRun+0x6a>
    }

    return 0;
 8010b58:	2300      	movs	r3, #0
}
 8010b5a:	4618      	mov	r0, r3
 8010b5c:	3710      	adds	r7, #16
 8010b5e:	46bd      	mov	sp, r7
 8010b60:	bd80      	pop	{r7, pc}
 8010b62:	bf00      	nop
 8010b64:	20002ca8 	.word	0x20002ca8
 8010b68:	200000cc 	.word	0x200000cc
 8010b6c:	200000e4 	.word	0x200000e4

08010b70 <MX_X_CUBE_AI_Init>:

/*************************************************************************
  *
  */
void MX_X_CUBE_AI_Init(void)
{
 8010b70:	b580      	push	{r7, lr}
 8010b72:	af00      	add	r7, sp, #0
    /* Activation/working buffer is allocated as a static memory chunk
     * (bss section) */
    AI_ALIGNED(4)
    static ai_u8 activations[AI_NETWORK_DATA_ACTIVATIONS_SIZE];

    aiInit(activations);
 8010b74:	4802      	ldr	r0, [pc, #8]	; (8010b80 <MX_X_CUBE_AI_Init+0x10>)
 8010b76:	f7ff ff5d 	bl	8010a34 <aiInit>
    /* USER CODE END 0 */
}
 8010b7a:	bf00      	nop
 8010b7c:	bd80      	pop	{r7, pc}
 8010b7e:	bf00      	nop
 8010b80:	20002cac 	.word	0x20002cac

08010b84 <network_configure_activations>:


AI_DECLARE_STATIC
ai_bool network_configure_activations(
  ai_network* net_ctx, const ai_buffer* activation_buffer)
{
 8010b84:	b480      	push	{r7}
 8010b86:	b085      	sub	sp, #20
 8010b88:	af00      	add	r7, sp, #0
 8010b8a:	6078      	str	r0, [r7, #4]
 8010b8c:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  activation_buffer && activation_buffer->data)

  ai_ptr activations = AI_PTR(AI_PTR_ALIGN(activation_buffer->data, 4));
 8010b8e:	683b      	ldr	r3, [r7, #0]
 8010b90:	691b      	ldr	r3, [r3, #16]
 8010b92:	3303      	adds	r3, #3
 8010b94:	f023 0303 	bic.w	r3, r3, #3
 8010b98:	60fb      	str	r3, [r7, #12]
  AI_ASSERT(activations)
  AI_UNUSED(net_ctx)

  {
    /* Updating activations (byte) offsets */
    conv3_scratch0_array.data = AI_PTR(activations + 88192);
 8010b9a:	68fb      	ldr	r3, [r7, #12]
 8010b9c:	f503 33ac 	add.w	r3, r3, #88064	; 0x15800
 8010ba0:	3380      	adds	r3, #128	; 0x80
 8010ba2:	4a39      	ldr	r2, [pc, #228]	; (8010c88 <network_configure_activations+0x104>)
 8010ba4:	6093      	str	r3, [r2, #8]
    conv3_scratch0_array.data_start = AI_PTR(activations + 88192);
 8010ba6:	68fb      	ldr	r3, [r7, #12]
 8010ba8:	f503 33ac 	add.w	r3, r3, #88064	; 0x15800
 8010bac:	3380      	adds	r3, #128	; 0x80
 8010bae:	4a36      	ldr	r2, [pc, #216]	; (8010c88 <network_configure_activations+0x104>)
 8010bb0:	60d3      	str	r3, [r2, #12]
    conv1_scratch0_array.data = AI_PTR(activations + 88192);
 8010bb2:	68fb      	ldr	r3, [r7, #12]
 8010bb4:	f503 33ac 	add.w	r3, r3, #88064	; 0x15800
 8010bb8:	3380      	adds	r3, #128	; 0x80
 8010bba:	4a34      	ldr	r2, [pc, #208]	; (8010c8c <network_configure_activations+0x108>)
 8010bbc:	6093      	str	r3, [r2, #8]
    conv1_scratch0_array.data_start = AI_PTR(activations + 88192);
 8010bbe:	68fb      	ldr	r3, [r7, #12]
 8010bc0:	f503 33ac 	add.w	r3, r3, #88064	; 0x15800
 8010bc4:	3380      	adds	r3, #128	; 0x80
 8010bc6:	4a31      	ldr	r2, [pc, #196]	; (8010c8c <network_configure_activations+0x108>)
 8010bc8:	60d3      	str	r3, [r2, #12]
    input_1_output_array.data = AI_PTR(NULL);
 8010bca:	4b31      	ldr	r3, [pc, #196]	; (8010c90 <network_configure_activations+0x10c>)
 8010bcc:	2200      	movs	r2, #0
 8010bce:	609a      	str	r2, [r3, #8]
    input_1_output_array.data_start = AI_PTR(NULL);
 8010bd0:	4b2f      	ldr	r3, [pc, #188]	; (8010c90 <network_configure_activations+0x10c>)
 8010bd2:	2200      	movs	r2, #0
 8010bd4:	60da      	str	r2, [r3, #12]
    conv0_output_array.data = AI_PTR(activations + 1664);
 8010bd6:	68fb      	ldr	r3, [r7, #12]
 8010bd8:	f503 63d0 	add.w	r3, r3, #1664	; 0x680
 8010bdc:	4a2d      	ldr	r2, [pc, #180]	; (8010c94 <network_configure_activations+0x110>)
 8010bde:	6093      	str	r3, [r2, #8]
    conv0_output_array.data_start = AI_PTR(activations + 1664);
 8010be0:	68fb      	ldr	r3, [r7, #12]
 8010be2:	f503 63d0 	add.w	r3, r3, #1664	; 0x680
 8010be6:	4a2b      	ldr	r2, [pc, #172]	; (8010c94 <network_configure_activations+0x110>)
 8010be8:	60d3      	str	r3, [r2, #12]
    conv1_output_array.data = AI_PTR(activations + 0);
 8010bea:	4a2b      	ldr	r2, [pc, #172]	; (8010c98 <network_configure_activations+0x114>)
 8010bec:	68fb      	ldr	r3, [r7, #12]
 8010bee:	6093      	str	r3, [r2, #8]
    conv1_output_array.data_start = AI_PTR(activations + 0);
 8010bf0:	4a29      	ldr	r2, [pc, #164]	; (8010c98 <network_configure_activations+0x114>)
 8010bf2:	68fb      	ldr	r3, [r7, #12]
 8010bf4:	60d3      	str	r3, [r2, #12]
    conv2_output_array.data = AI_PTR(activations + 62592);
 8010bf6:	68fb      	ldr	r3, [r7, #12]
 8010bf8:	f503 4374 	add.w	r3, r3, #62464	; 0xf400
 8010bfc:	3380      	adds	r3, #128	; 0x80
 8010bfe:	4a27      	ldr	r2, [pc, #156]	; (8010c9c <network_configure_activations+0x118>)
 8010c00:	6093      	str	r3, [r2, #8]
    conv2_output_array.data_start = AI_PTR(activations + 62592);
 8010c02:	68fb      	ldr	r3, [r7, #12]
 8010c04:	f503 4374 	add.w	r3, r3, #62464	; 0xf400
 8010c08:	3380      	adds	r3, #128	; 0x80
 8010c0a:	4a24      	ldr	r2, [pc, #144]	; (8010c9c <network_configure_activations+0x118>)
 8010c0c:	60d3      	str	r3, [r2, #12]
    conv3_output_array.data = AI_PTR(activations + 61312);
 8010c0e:	68fb      	ldr	r3, [r7, #12]
 8010c10:	f503 436f 	add.w	r3, r3, #61184	; 0xef00
 8010c14:	3380      	adds	r3, #128	; 0x80
 8010c16:	4a22      	ldr	r2, [pc, #136]	; (8010ca0 <network_configure_activations+0x11c>)
 8010c18:	6093      	str	r3, [r2, #8]
    conv3_output_array.data_start = AI_PTR(activations + 61312);
 8010c1a:	68fb      	ldr	r3, [r7, #12]
 8010c1c:	f503 436f 	add.w	r3, r3, #61184	; 0xef00
 8010c20:	3380      	adds	r3, #128	; 0x80
 8010c22:	4a1f      	ldr	r2, [pc, #124]	; (8010ca0 <network_configure_activations+0x11c>)
 8010c24:	60d3      	str	r3, [r2, #12]
    fc1_output_array.data = AI_PTR(activations + 60288);
 8010c26:	68fb      	ldr	r3, [r7, #12]
 8010c28:	f503 436b 	add.w	r3, r3, #60160	; 0xeb00
 8010c2c:	3380      	adds	r3, #128	; 0x80
 8010c2e:	4a1d      	ldr	r2, [pc, #116]	; (8010ca4 <network_configure_activations+0x120>)
 8010c30:	6093      	str	r3, [r2, #8]
    fc1_output_array.data_start = AI_PTR(activations + 60288);
 8010c32:	68fb      	ldr	r3, [r7, #12]
 8010c34:	f503 436b 	add.w	r3, r3, #60160	; 0xeb00
 8010c38:	3380      	adds	r3, #128	; 0x80
 8010c3a:	4a1a      	ldr	r2, [pc, #104]	; (8010ca4 <network_configure_activations+0x120>)
 8010c3c:	60d3      	str	r3, [r2, #12]
    fc1_nl_output_array.data = AI_PTR(activations + 60288);
 8010c3e:	68fb      	ldr	r3, [r7, #12]
 8010c40:	f503 436b 	add.w	r3, r3, #60160	; 0xeb00
 8010c44:	3380      	adds	r3, #128	; 0x80
 8010c46:	4a18      	ldr	r2, [pc, #96]	; (8010ca8 <network_configure_activations+0x124>)
 8010c48:	6093      	str	r3, [r2, #8]
    fc1_nl_output_array.data_start = AI_PTR(activations + 60288);
 8010c4a:	68fb      	ldr	r3, [r7, #12]
 8010c4c:	f503 436b 	add.w	r3, r3, #60160	; 0xeb00
 8010c50:	3380      	adds	r3, #128	; 0x80
 8010c52:	4a15      	ldr	r2, [pc, #84]	; (8010ca8 <network_configure_activations+0x124>)
 8010c54:	60d3      	str	r3, [r2, #12]
    fco_output_array.data = AI_PTR(activations + 60248);
 8010c56:	68fb      	ldr	r3, [r7, #12]
 8010c58:	f503 436b 	add.w	r3, r3, #60160	; 0xeb00
 8010c5c:	3358      	adds	r3, #88	; 0x58
 8010c5e:	4a13      	ldr	r2, [pc, #76]	; (8010cac <network_configure_activations+0x128>)
 8010c60:	6093      	str	r3, [r2, #8]
    fco_output_array.data_start = AI_PTR(activations + 60248);
 8010c62:	68fb      	ldr	r3, [r7, #12]
 8010c64:	f503 436b 	add.w	r3, r3, #60160	; 0xeb00
 8010c68:	3358      	adds	r3, #88	; 0x58
 8010c6a:	4a10      	ldr	r2, [pc, #64]	; (8010cac <network_configure_activations+0x128>)
 8010c6c:	60d3      	str	r3, [r2, #12]
    fco_nl_output_array.data = AI_PTR(NULL);
 8010c6e:	4b10      	ldr	r3, [pc, #64]	; (8010cb0 <network_configure_activations+0x12c>)
 8010c70:	2200      	movs	r2, #0
 8010c72:	609a      	str	r2, [r3, #8]
    fco_nl_output_array.data_start = AI_PTR(NULL);
 8010c74:	4b0e      	ldr	r3, [pc, #56]	; (8010cb0 <network_configure_activations+0x12c>)
 8010c76:	2200      	movs	r2, #0
 8010c78:	60da      	str	r2, [r3, #12]
    
  }
  return true;
 8010c7a:	2301      	movs	r3, #1
}
 8010c7c:	4618      	mov	r0, r3
 8010c7e:	3714      	adds	r7, #20
 8010c80:	46bd      	mov	sp, r7
 8010c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c86:	4770      	bx	lr
 8010c88:	20000154 	.word	0x20000154
 8010c8c:	20000164 	.word	0x20000164
 8010c90:	20000234 	.word	0x20000234
 8010c94:	20000244 	.word	0x20000244
 8010c98:	20000254 	.word	0x20000254
 8010c9c:	20000264 	.word	0x20000264
 8010ca0:	20000274 	.word	0x20000274
 8010ca4:	20000284 	.word	0x20000284
 8010ca8:	20000294 	.word	0x20000294
 8010cac:	200002a4 	.word	0x200002a4
 8010cb0:	200002b4 	.word	0x200002b4

08010cb4 <network_configure_weights>:


AI_DECLARE_STATIC
ai_bool network_configure_weights(
  ai_network* net_ctx, const ai_buffer* weights_buffer)
{
 8010cb4:	b480      	push	{r7}
 8010cb6:	b085      	sub	sp, #20
 8010cb8:	af00      	add	r7, sp, #0
 8010cba:	6078      	str	r0, [r7, #4]
 8010cbc:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  weights_buffer && weights_buffer->data)

  ai_ptr weights = AI_PTR(weights_buffer->data);
 8010cbe:	683b      	ldr	r3, [r7, #0]
 8010cc0:	691b      	ldr	r3, [r3, #16]
 8010cc2:	60fb      	str	r3, [r7, #12]
  AI_UNUSED(net_ctx)

  {
    /* Updating weights (byte) offsets */
    
    fco_bias_array.format |= AI_FMT_FLAG_CONST;
 8010cc4:	4b6f      	ldr	r3, [pc, #444]	; (8010e84 <network_configure_weights+0x1d0>)
 8010cc6:	681b      	ldr	r3, [r3, #0]
 8010cc8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010ccc:	4a6d      	ldr	r2, [pc, #436]	; (8010e84 <network_configure_weights+0x1d0>)
 8010cce:	6013      	str	r3, [r2, #0]
    fco_bias_array.data = AI_PTR(weights + 402368);
 8010cd0:	68fb      	ldr	r3, [r7, #12]
 8010cd2:	f503 23c4 	add.w	r3, r3, #401408	; 0x62000
 8010cd6:	f503 7370 	add.w	r3, r3, #960	; 0x3c0
 8010cda:	4a6a      	ldr	r2, [pc, #424]	; (8010e84 <network_configure_weights+0x1d0>)
 8010cdc:	6093      	str	r3, [r2, #8]
    fco_bias_array.data_start = AI_PTR(weights + 402368);
 8010cde:	68fb      	ldr	r3, [r7, #12]
 8010ce0:	f503 23c4 	add.w	r3, r3, #401408	; 0x62000
 8010ce4:	f503 7370 	add.w	r3, r3, #960	; 0x3c0
 8010ce8:	4a66      	ldr	r2, [pc, #408]	; (8010e84 <network_configure_weights+0x1d0>)
 8010cea:	60d3      	str	r3, [r2, #12]
    fco_weights_array.format |= AI_FMT_FLAG_CONST;
 8010cec:	4b66      	ldr	r3, [pc, #408]	; (8010e88 <network_configure_weights+0x1d4>)
 8010cee:	681b      	ldr	r3, [r3, #0]
 8010cf0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010cf4:	4a64      	ldr	r2, [pc, #400]	; (8010e88 <network_configure_weights+0x1d4>)
 8010cf6:	6013      	str	r3, [r2, #0]
    fco_weights_array.data = AI_PTR(weights + 392128);
 8010cf8:	68fb      	ldr	r3, [r7, #12]
 8010cfa:	f503 23bf 	add.w	r3, r3, #391168	; 0x5f800
 8010cfe:	f503 7370 	add.w	r3, r3, #960	; 0x3c0
 8010d02:	4a61      	ldr	r2, [pc, #388]	; (8010e88 <network_configure_weights+0x1d4>)
 8010d04:	6093      	str	r3, [r2, #8]
    fco_weights_array.data_start = AI_PTR(weights + 392128);
 8010d06:	68fb      	ldr	r3, [r7, #12]
 8010d08:	f503 23bf 	add.w	r3, r3, #391168	; 0x5f800
 8010d0c:	f503 7370 	add.w	r3, r3, #960	; 0x3c0
 8010d10:	4a5d      	ldr	r2, [pc, #372]	; (8010e88 <network_configure_weights+0x1d4>)
 8010d12:	60d3      	str	r3, [r2, #12]
    fc1_bias_array.format |= AI_FMT_FLAG_CONST;
 8010d14:	4b5d      	ldr	r3, [pc, #372]	; (8010e8c <network_configure_weights+0x1d8>)
 8010d16:	681b      	ldr	r3, [r3, #0]
 8010d18:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010d1c:	4a5b      	ldr	r2, [pc, #364]	; (8010e8c <network_configure_weights+0x1d8>)
 8010d1e:	6013      	str	r3, [r2, #0]
    fc1_bias_array.data = AI_PTR(weights + 391104);
 8010d20:	68fb      	ldr	r3, [r7, #12]
 8010d22:	f503 23be 	add.w	r3, r3, #389120	; 0x5f000
 8010d26:	f503 63f8 	add.w	r3, r3, #1984	; 0x7c0
 8010d2a:	4a58      	ldr	r2, [pc, #352]	; (8010e8c <network_configure_weights+0x1d8>)
 8010d2c:	6093      	str	r3, [r2, #8]
    fc1_bias_array.data_start = AI_PTR(weights + 391104);
 8010d2e:	68fb      	ldr	r3, [r7, #12]
 8010d30:	f503 23be 	add.w	r3, r3, #389120	; 0x5f000
 8010d34:	f503 63f8 	add.w	r3, r3, #1984	; 0x7c0
 8010d38:	4a54      	ldr	r2, [pc, #336]	; (8010e8c <network_configure_weights+0x1d8>)
 8010d3a:	60d3      	str	r3, [r2, #12]
    fc1_weights_array.format |= AI_FMT_FLAG_CONST;
 8010d3c:	4b54      	ldr	r3, [pc, #336]	; (8010e90 <network_configure_weights+0x1dc>)
 8010d3e:	681b      	ldr	r3, [r3, #0]
 8010d40:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010d44:	4a52      	ldr	r2, [pc, #328]	; (8010e90 <network_configure_weights+0x1dc>)
 8010d46:	6013      	str	r3, [r2, #0]
    fc1_weights_array.data = AI_PTR(weights + 260032);
 8010d48:	68fb      	ldr	r3, [r7, #12]
 8010d4a:	f503 337d 	add.w	r3, r3, #259072	; 0x3f400
 8010d4e:	f503 7370 	add.w	r3, r3, #960	; 0x3c0
 8010d52:	4a4f      	ldr	r2, [pc, #316]	; (8010e90 <network_configure_weights+0x1dc>)
 8010d54:	6093      	str	r3, [r2, #8]
    fc1_weights_array.data_start = AI_PTR(weights + 259968);
 8010d56:	68fb      	ldr	r3, [r7, #12]
 8010d58:	f503 337d 	add.w	r3, r3, #259072	; 0x3f400
 8010d5c:	f503 7360 	add.w	r3, r3, #896	; 0x380
 8010d60:	4a4b      	ldr	r2, [pc, #300]	; (8010e90 <network_configure_weights+0x1dc>)
 8010d62:	60d3      	str	r3, [r2, #12]
    conv3_bias_array.format |= AI_FMT_FLAG_CONST;
 8010d64:	4b4b      	ldr	r3, [pc, #300]	; (8010e94 <network_configure_weights+0x1e0>)
 8010d66:	681b      	ldr	r3, [r3, #0]
 8010d68:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010d6c:	4a49      	ldr	r2, [pc, #292]	; (8010e94 <network_configure_weights+0x1e0>)
 8010d6e:	6013      	str	r3, [r2, #0]
    conv3_bias_array.data = AI_PTR(weights + 259712);
 8010d70:	68fb      	ldr	r3, [r7, #12]
 8010d72:	f503 337d 	add.w	r3, r3, #259072	; 0x3f400
 8010d76:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8010d7a:	4a46      	ldr	r2, [pc, #280]	; (8010e94 <network_configure_weights+0x1e0>)
 8010d7c:	6093      	str	r3, [r2, #8]
    conv3_bias_array.data_start = AI_PTR(weights + 259712);
 8010d7e:	68fb      	ldr	r3, [r7, #12]
 8010d80:	f503 337d 	add.w	r3, r3, #259072	; 0x3f400
 8010d84:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8010d88:	4a42      	ldr	r2, [pc, #264]	; (8010e94 <network_configure_weights+0x1e0>)
 8010d8a:	60d3      	str	r3, [r2, #12]
    conv3_weights_array.format |= AI_FMT_FLAG_CONST;
 8010d8c:	4b42      	ldr	r3, [pc, #264]	; (8010e98 <network_configure_weights+0x1e4>)
 8010d8e:	681b      	ldr	r3, [r3, #0]
 8010d90:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010d94:	4a40      	ldr	r2, [pc, #256]	; (8010e98 <network_configure_weights+0x1e4>)
 8010d96:	6013      	str	r3, [r2, #0]
    conv3_weights_array.data = AI_PTR(weights + 112256);
 8010d98:	68fb      	ldr	r3, [r7, #12]
 8010d9a:	f503 33db 	add.w	r3, r3, #112128	; 0x1b600
 8010d9e:	3380      	adds	r3, #128	; 0x80
 8010da0:	4a3d      	ldr	r2, [pc, #244]	; (8010e98 <network_configure_weights+0x1e4>)
 8010da2:	6093      	str	r3, [r2, #8]
    conv3_weights_array.data_start = AI_PTR(weights + 112256);
 8010da4:	68fb      	ldr	r3, [r7, #12]
 8010da6:	f503 33db 	add.w	r3, r3, #112128	; 0x1b600
 8010daa:	3380      	adds	r3, #128	; 0x80
 8010dac:	4a3a      	ldr	r2, [pc, #232]	; (8010e98 <network_configure_weights+0x1e4>)
 8010dae:	60d3      	str	r3, [r2, #12]
    conv2_bias_array.format |= AI_FMT_FLAG_CONST;
 8010db0:	4b3a      	ldr	r3, [pc, #232]	; (8010e9c <network_configure_weights+0x1e8>)
 8010db2:	681b      	ldr	r3, [r3, #0]
 8010db4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010db8:	4a38      	ldr	r2, [pc, #224]	; (8010e9c <network_configure_weights+0x1e8>)
 8010dba:	6013      	str	r3, [r2, #0]
    conv2_bias_array.data = AI_PTR(weights + 112000);
 8010dbc:	68fb      	ldr	r3, [r7, #12]
 8010dbe:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8010dc2:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8010dc6:	4a35      	ldr	r2, [pc, #212]	; (8010e9c <network_configure_weights+0x1e8>)
 8010dc8:	6093      	str	r3, [r2, #8]
    conv2_bias_array.data_start = AI_PTR(weights + 112000);
 8010dca:	68fb      	ldr	r3, [r7, #12]
 8010dcc:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8010dd0:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8010dd4:	4a31      	ldr	r2, [pc, #196]	; (8010e9c <network_configure_weights+0x1e8>)
 8010dd6:	60d3      	str	r3, [r2, #12]
    conv2_weights_array.format |= AI_FMT_FLAG_CONST;
 8010dd8:	4b31      	ldr	r3, [pc, #196]	; (8010ea0 <network_configure_weights+0x1ec>)
 8010dda:	681b      	ldr	r3, [r3, #0]
 8010ddc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010de0:	4a2f      	ldr	r2, [pc, #188]	; (8010ea0 <network_configure_weights+0x1ec>)
 8010de2:	6013      	str	r3, [r2, #0]
    conv2_weights_array.data = AI_PTR(weights + 38272);
 8010de4:	68fb      	ldr	r3, [r7, #12]
 8010de6:	f503 4315 	add.w	r3, r3, #38144	; 0x9500
 8010dea:	3380      	adds	r3, #128	; 0x80
 8010dec:	4a2c      	ldr	r2, [pc, #176]	; (8010ea0 <network_configure_weights+0x1ec>)
 8010dee:	6093      	str	r3, [r2, #8]
    conv2_weights_array.data_start = AI_PTR(weights + 38272);
 8010df0:	68fb      	ldr	r3, [r7, #12]
 8010df2:	f503 4315 	add.w	r3, r3, #38144	; 0x9500
 8010df6:	3380      	adds	r3, #128	; 0x80
 8010df8:	4a29      	ldr	r2, [pc, #164]	; (8010ea0 <network_configure_weights+0x1ec>)
 8010dfa:	60d3      	str	r3, [r2, #12]
    conv1_bias_array.format |= AI_FMT_FLAG_CONST;
 8010dfc:	4b29      	ldr	r3, [pc, #164]	; (8010ea4 <network_configure_weights+0x1f0>)
 8010dfe:	681b      	ldr	r3, [r3, #0]
 8010e00:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010e04:	4a27      	ldr	r2, [pc, #156]	; (8010ea4 <network_configure_weights+0x1f0>)
 8010e06:	6013      	str	r3, [r2, #0]
    conv1_bias_array.data = AI_PTR(weights + 38144);
 8010e08:	68fb      	ldr	r3, [r7, #12]
 8010e0a:	f503 4315 	add.w	r3, r3, #38144	; 0x9500
 8010e0e:	4a25      	ldr	r2, [pc, #148]	; (8010ea4 <network_configure_weights+0x1f0>)
 8010e10:	6093      	str	r3, [r2, #8]
    conv1_bias_array.data_start = AI_PTR(weights + 38144);
 8010e12:	68fb      	ldr	r3, [r7, #12]
 8010e14:	f503 4315 	add.w	r3, r3, #38144	; 0x9500
 8010e18:	4a22      	ldr	r2, [pc, #136]	; (8010ea4 <network_configure_weights+0x1f0>)
 8010e1a:	60d3      	str	r3, [r2, #12]
    conv1_weights_array.format |= AI_FMT_FLAG_CONST;
 8010e1c:	4b22      	ldr	r3, [pc, #136]	; (8010ea8 <network_configure_weights+0x1f4>)
 8010e1e:	681b      	ldr	r3, [r3, #0]
 8010e20:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010e24:	4a20      	ldr	r2, [pc, #128]	; (8010ea8 <network_configure_weights+0x1f4>)
 8010e26:	6013      	str	r3, [r2, #0]
    conv1_weights_array.data = AI_PTR(weights + 1280);
 8010e28:	68fb      	ldr	r3, [r7, #12]
 8010e2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010e2e:	4a1e      	ldr	r2, [pc, #120]	; (8010ea8 <network_configure_weights+0x1f4>)
 8010e30:	6093      	str	r3, [r2, #8]
    conv1_weights_array.data_start = AI_PTR(weights + 1280);
 8010e32:	68fb      	ldr	r3, [r7, #12]
 8010e34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010e38:	4a1b      	ldr	r2, [pc, #108]	; (8010ea8 <network_configure_weights+0x1f4>)
 8010e3a:	60d3      	str	r3, [r2, #12]
    conv0_bias_array.format |= AI_FMT_FLAG_CONST;
 8010e3c:	4b1b      	ldr	r3, [pc, #108]	; (8010eac <network_configure_weights+0x1f8>)
 8010e3e:	681b      	ldr	r3, [r3, #0]
 8010e40:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010e44:	4a19      	ldr	r2, [pc, #100]	; (8010eac <network_configure_weights+0x1f8>)
 8010e46:	6013      	str	r3, [r2, #0]
    conv0_bias_array.data = AI_PTR(weights + 1152);
 8010e48:	68fb      	ldr	r3, [r7, #12]
 8010e4a:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8010e4e:	4a17      	ldr	r2, [pc, #92]	; (8010eac <network_configure_weights+0x1f8>)
 8010e50:	6093      	str	r3, [r2, #8]
    conv0_bias_array.data_start = AI_PTR(weights + 1152);
 8010e52:	68fb      	ldr	r3, [r7, #12]
 8010e54:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8010e58:	4a14      	ldr	r2, [pc, #80]	; (8010eac <network_configure_weights+0x1f8>)
 8010e5a:	60d3      	str	r3, [r2, #12]
    conv0_weights_array.format |= AI_FMT_FLAG_CONST;
 8010e5c:	4b14      	ldr	r3, [pc, #80]	; (8010eb0 <network_configure_weights+0x1fc>)
 8010e5e:	681b      	ldr	r3, [r3, #0]
 8010e60:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010e64:	4a12      	ldr	r2, [pc, #72]	; (8010eb0 <network_configure_weights+0x1fc>)
 8010e66:	6013      	str	r3, [r2, #0]
    conv0_weights_array.data = AI_PTR(weights + 0);
 8010e68:	4a11      	ldr	r2, [pc, #68]	; (8010eb0 <network_configure_weights+0x1fc>)
 8010e6a:	68fb      	ldr	r3, [r7, #12]
 8010e6c:	6093      	str	r3, [r2, #8]
    conv0_weights_array.data_start = AI_PTR(weights + 0);
 8010e6e:	4a10      	ldr	r2, [pc, #64]	; (8010eb0 <network_configure_weights+0x1fc>)
 8010e70:	68fb      	ldr	r3, [r7, #12]
 8010e72:	60d3      	str	r3, [r2, #12]
  }

  return true;
 8010e74:	2301      	movs	r3, #1
}
 8010e76:	4618      	mov	r0, r3
 8010e78:	3714      	adds	r7, #20
 8010e7a:	46bd      	mov	sp, r7
 8010e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e80:	4770      	bx	lr
 8010e82:	bf00      	nop
 8010e84:	20000174 	.word	0x20000174
 8010e88:	20000184 	.word	0x20000184
 8010e8c:	20000194 	.word	0x20000194
 8010e90:	200001a4 	.word	0x200001a4
 8010e94:	200001b4 	.word	0x200001b4
 8010e98:	200001c4 	.word	0x200001c4
 8010e9c:	200001d4 	.word	0x200001d4
 8010ea0:	200001e4 	.word	0x200001e4
 8010ea4:	200001f4 	.word	0x200001f4
 8010ea8:	20000204 	.word	0x20000204
 8010eac:	20000214 	.word	0x20000214
 8010eb0:	20000224 	.word	0x20000224

08010eb4 <ai_network_get_error>:
  return false;
}

AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
 8010eb4:	b580      	push	{r7, lr}
 8010eb6:	b082      	sub	sp, #8
 8010eb8:	af00      	add	r7, sp, #0
 8010eba:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 8010ebc:	6878      	ldr	r0, [r7, #4]
 8010ebe:	f7ef fa92 	bl	80003e6 <ai_platform_network_get_error>
 8010ec2:	4603      	mov	r3, r0
}
 8010ec4:	4618      	mov	r0, r3
 8010ec6:	3708      	adds	r7, #8
 8010ec8:	46bd      	mov	sp, r7
 8010eca:	bd80      	pop	{r7, pc}

08010ecc <ai_network_create>:

AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8010ecc:	b580      	push	{r7, lr}
 8010ece:	b084      	sub	sp, #16
 8010ed0:	af02      	add	r7, sp, #8
 8010ed2:	6078      	str	r0, [r7, #4]
 8010ed4:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 8010ed6:	2300      	movs	r3, #0
 8010ed8:	9301      	str	r3, [sp, #4]
 8010eda:	2303      	movs	r3, #3
 8010edc:	9300      	str	r3, [sp, #0]
 8010ede:	2301      	movs	r3, #1
 8010ee0:	4a04      	ldr	r2, [pc, #16]	; (8010ef4 <ai_network_create+0x28>)
 8010ee2:	6839      	ldr	r1, [r7, #0]
 8010ee4:	6878      	ldr	r0, [r7, #4]
 8010ee6:	f7ef fb69 	bl	80005bc <ai_platform_network_create>
 8010eea:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8010eec:	4618      	mov	r0, r3
 8010eee:	3708      	adds	r7, #8
 8010ef0:	46bd      	mov	sp, r7
 8010ef2:	bd80      	pop	{r7, pc}
 8010ef4:	200000fc 	.word	0x200000fc

08010ef8 <ai_network_destroy>:

AI_API_ENTRY
ai_handle ai_network_destroy(ai_handle network)
{
 8010ef8:	b580      	push	{r7, lr}
 8010efa:	b082      	sub	sp, #8
 8010efc:	af00      	add	r7, sp, #0
 8010efe:	6078      	str	r0, [r7, #4]
  return ai_platform_network_destroy(network);
 8010f00:	6878      	ldr	r0, [r7, #4]
 8010f02:	f7ef fba0 	bl	8000646 <ai_platform_network_destroy>
 8010f06:	4603      	mov	r3, r0
}
 8010f08:	4618      	mov	r0, r3
 8010f0a:	3708      	adds	r7, #8
 8010f0c:	46bd      	mov	sp, r7
 8010f0e:	bd80      	pop	{r7, pc}

08010f10 <ai_network_init>:

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 8010f10:	b580      	push	{r7, lr}
 8010f12:	b084      	sub	sp, #16
 8010f14:	af00      	add	r7, sp, #0
 8010f16:	6078      	str	r0, [r7, #4]
 8010f18:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8010f1a:	6839      	ldr	r1, [r7, #0]
 8010f1c:	6878      	ldr	r0, [r7, #4]
 8010f1e:	f7ef fbb5 	bl	800068c <ai_platform_network_init>
 8010f22:	60f8      	str	r0, [r7, #12]
  if ( !net_ctx ) return false;
 8010f24:	68fb      	ldr	r3, [r7, #12]
 8010f26:	2b00      	cmp	r3, #0
 8010f28:	d101      	bne.n	8010f2e <ai_network_init+0x1e>
 8010f2a:	2300      	movs	r3, #0
 8010f2c:	e01f      	b.n	8010f6e <ai_network_init+0x5e>

  ai_bool ok = true;
 8010f2e:	2301      	movs	r3, #1
 8010f30:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_weights(net_ctx, &params->params);
 8010f32:	683b      	ldr	r3, [r7, #0]
 8010f34:	4619      	mov	r1, r3
 8010f36:	68f8      	ldr	r0, [r7, #12]
 8010f38:	f7ff febc 	bl	8010cb4 <network_configure_weights>
 8010f3c:	4603      	mov	r3, r0
 8010f3e:	461a      	mov	r2, r3
 8010f40:	7afb      	ldrb	r3, [r7, #11]
 8010f42:	4013      	ands	r3, r2
 8010f44:	2b00      	cmp	r3, #0
 8010f46:	bf14      	ite	ne
 8010f48:	2301      	movne	r3, #1
 8010f4a:	2300      	moveq	r3, #0
 8010f4c:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_activations(net_ctx, &params->activations);
 8010f4e:	683b      	ldr	r3, [r7, #0]
 8010f50:	3318      	adds	r3, #24
 8010f52:	4619      	mov	r1, r3
 8010f54:	68f8      	ldr	r0, [r7, #12]
 8010f56:	f7ff fe15 	bl	8010b84 <network_configure_activations>
 8010f5a:	4603      	mov	r3, r0
 8010f5c:	461a      	mov	r2, r3
 8010f5e:	7afb      	ldrb	r3, [r7, #11]
 8010f60:	4013      	ands	r3, r2
 8010f62:	2b00      	cmp	r3, #0
 8010f64:	bf14      	ite	ne
 8010f66:	2301      	movne	r3, #1
 8010f68:	2300      	moveq	r3, #0
 8010f6a:	72fb      	strb	r3, [r7, #11]

  return ok;
 8010f6c:	7afb      	ldrb	r3, [r7, #11]
}
 8010f6e:	4618      	mov	r0, r3
 8010f70:	3710      	adds	r7, #16
 8010f72:	46bd      	mov	sp, r7
 8010f74:	bd80      	pop	{r7, pc}

08010f76 <ai_network_run>:


AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 8010f76:	b580      	push	{r7, lr}
 8010f78:	b084      	sub	sp, #16
 8010f7a:	af00      	add	r7, sp, #0
 8010f7c:	60f8      	str	r0, [r7, #12]
 8010f7e:	60b9      	str	r1, [r7, #8]
 8010f80:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 8010f82:	687a      	ldr	r2, [r7, #4]
 8010f84:	68b9      	ldr	r1, [r7, #8]
 8010f86:	68f8      	ldr	r0, [r7, #12]
 8010f88:	f7ef fbdc 	bl	8000744 <ai_platform_network_process>
 8010f8c:	4603      	mov	r3, r0
}
 8010f8e:	4618      	mov	r0, r3
 8010f90:	3710      	adds	r7, #16
 8010f92:	46bd      	mov	sp, r7
 8010f94:	bd80      	pop	{r7, pc}
	...

08010f98 <ai_network_data_weights_get>:
#include "network_data.h"

ai_handle ai_network_data_weights_get(void)
{
 8010f98:	b480      	push	{r7}
 8010f9a:	af00      	add	r7, sp, #0
    0xa7, 0x01, 0x57, 0xbc, 0x9b, 0x6e, 0x99, 0xbc, 0xe5, 0x46,
    0x5c, 0xbc, 0xc9, 0x21, 0x0e, 0xbd, 0x48, 0x8e, 0x80,
    0xbc, 0xd4, 0xb9, 0xa0, 0x3b, 0x6c, 0x07, 0x98, 0x3b
  };

  return AI_HANDLE_PTR(s_network_weights);
 8010f9c:	4b02      	ldr	r3, [pc, #8]	; (8010fa8 <ai_network_data_weights_get+0x10>)

}
 8010f9e:	4618      	mov	r0, r3
 8010fa0:	46bd      	mov	sp, r7
 8010fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fa6:	4770      	bx	lr
 8010fa8:	0801a86c 	.word	0x0801a86c

08010fac <__aeabi_memclr>:
 8010fac:	2200      	movs	r2, #0
 8010fae:	f7f5 b933 	b.w	8006218 <__aeabi_memset>

08010fb2 <__aeabi_memcpy>:
 8010fb2:	f000 b83b 	b.w	801102c <memcpy>
	...

08010fb8 <__errno>:
 8010fb8:	4b01      	ldr	r3, [pc, #4]	; (8010fc0 <__errno+0x8>)
 8010fba:	6818      	ldr	r0, [r3, #0]
 8010fbc:	4770      	bx	lr
 8010fbe:	bf00      	nop
 8010fc0:	20000c34 	.word	0x20000c34

08010fc4 <__libc_init_array>:
 8010fc4:	b570      	push	{r4, r5, r6, lr}
 8010fc6:	4d0d      	ldr	r5, [pc, #52]	; (8010ffc <__libc_init_array+0x38>)
 8010fc8:	4c0d      	ldr	r4, [pc, #52]	; (8011000 <__libc_init_array+0x3c>)
 8010fca:	1b64      	subs	r4, r4, r5
 8010fcc:	10a4      	asrs	r4, r4, #2
 8010fce:	2600      	movs	r6, #0
 8010fd0:	42a6      	cmp	r6, r4
 8010fd2:	d109      	bne.n	8010fe8 <__libc_init_array+0x24>
 8010fd4:	4d0b      	ldr	r5, [pc, #44]	; (8011004 <__libc_init_array+0x40>)
 8010fd6:	4c0c      	ldr	r4, [pc, #48]	; (8011008 <__libc_init_array+0x44>)
 8010fd8:	f005 fe2e 	bl	8016c38 <_init>
 8010fdc:	1b64      	subs	r4, r4, r5
 8010fde:	10a4      	asrs	r4, r4, #2
 8010fe0:	2600      	movs	r6, #0
 8010fe2:	42a6      	cmp	r6, r4
 8010fe4:	d105      	bne.n	8010ff2 <__libc_init_array+0x2e>
 8010fe6:	bd70      	pop	{r4, r5, r6, pc}
 8010fe8:	f855 3b04 	ldr.w	r3, [r5], #4
 8010fec:	4798      	blx	r3
 8010fee:	3601      	adds	r6, #1
 8010ff0:	e7ee      	b.n	8010fd0 <__libc_init_array+0xc>
 8010ff2:	f855 3b04 	ldr.w	r3, [r5], #4
 8010ff6:	4798      	blx	r3
 8010ff8:	3601      	adds	r6, #1
 8010ffa:	e7f2      	b.n	8010fe2 <__libc_init_array+0x1e>
 8010ffc:	0807d464 	.word	0x0807d464
 8011000:	0807d464 	.word	0x0807d464
 8011004:	0807d464 	.word	0x0807d464
 8011008:	0807d468 	.word	0x0807d468

0801100c <memcmp>:
 801100c:	b510      	push	{r4, lr}
 801100e:	3901      	subs	r1, #1
 8011010:	4402      	add	r2, r0
 8011012:	4290      	cmp	r0, r2
 8011014:	d101      	bne.n	801101a <memcmp+0xe>
 8011016:	2000      	movs	r0, #0
 8011018:	e005      	b.n	8011026 <memcmp+0x1a>
 801101a:	7803      	ldrb	r3, [r0, #0]
 801101c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8011020:	42a3      	cmp	r3, r4
 8011022:	d001      	beq.n	8011028 <memcmp+0x1c>
 8011024:	1b18      	subs	r0, r3, r4
 8011026:	bd10      	pop	{r4, pc}
 8011028:	3001      	adds	r0, #1
 801102a:	e7f2      	b.n	8011012 <memcmp+0x6>

0801102c <memcpy>:
 801102c:	440a      	add	r2, r1
 801102e:	4291      	cmp	r1, r2
 8011030:	f100 33ff 	add.w	r3, r0, #4294967295
 8011034:	d100      	bne.n	8011038 <memcpy+0xc>
 8011036:	4770      	bx	lr
 8011038:	b510      	push	{r4, lr}
 801103a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801103e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011042:	4291      	cmp	r1, r2
 8011044:	d1f9      	bne.n	801103a <memcpy+0xe>
 8011046:	bd10      	pop	{r4, pc}

08011048 <memset>:
 8011048:	4402      	add	r2, r0
 801104a:	4603      	mov	r3, r0
 801104c:	4293      	cmp	r3, r2
 801104e:	d100      	bne.n	8011052 <memset+0xa>
 8011050:	4770      	bx	lr
 8011052:	f803 1b01 	strb.w	r1, [r3], #1
 8011056:	e7f9      	b.n	801104c <memset+0x4>

08011058 <__cvt>:
 8011058:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801105c:	ec55 4b10 	vmov	r4, r5, d0
 8011060:	2d00      	cmp	r5, #0
 8011062:	460e      	mov	r6, r1
 8011064:	4619      	mov	r1, r3
 8011066:	462b      	mov	r3, r5
 8011068:	bfbb      	ittet	lt
 801106a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801106e:	461d      	movlt	r5, r3
 8011070:	2300      	movge	r3, #0
 8011072:	232d      	movlt	r3, #45	; 0x2d
 8011074:	700b      	strb	r3, [r1, #0]
 8011076:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011078:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801107c:	4691      	mov	r9, r2
 801107e:	f023 0820 	bic.w	r8, r3, #32
 8011082:	bfbc      	itt	lt
 8011084:	4622      	movlt	r2, r4
 8011086:	4614      	movlt	r4, r2
 8011088:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801108c:	d005      	beq.n	801109a <__cvt+0x42>
 801108e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8011092:	d100      	bne.n	8011096 <__cvt+0x3e>
 8011094:	3601      	adds	r6, #1
 8011096:	2102      	movs	r1, #2
 8011098:	e000      	b.n	801109c <__cvt+0x44>
 801109a:	2103      	movs	r1, #3
 801109c:	ab03      	add	r3, sp, #12
 801109e:	9301      	str	r3, [sp, #4]
 80110a0:	ab02      	add	r3, sp, #8
 80110a2:	9300      	str	r3, [sp, #0]
 80110a4:	ec45 4b10 	vmov	d0, r4, r5
 80110a8:	4653      	mov	r3, sl
 80110aa:	4632      	mov	r2, r6
 80110ac:	f000 fd08 	bl	8011ac0 <_dtoa_r>
 80110b0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80110b4:	4607      	mov	r7, r0
 80110b6:	d102      	bne.n	80110be <__cvt+0x66>
 80110b8:	f019 0f01 	tst.w	r9, #1
 80110bc:	d022      	beq.n	8011104 <__cvt+0xac>
 80110be:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80110c2:	eb07 0906 	add.w	r9, r7, r6
 80110c6:	d110      	bne.n	80110ea <__cvt+0x92>
 80110c8:	783b      	ldrb	r3, [r7, #0]
 80110ca:	2b30      	cmp	r3, #48	; 0x30
 80110cc:	d10a      	bne.n	80110e4 <__cvt+0x8c>
 80110ce:	2200      	movs	r2, #0
 80110d0:	2300      	movs	r3, #0
 80110d2:	4620      	mov	r0, r4
 80110d4:	4629      	mov	r1, r5
 80110d6:	f7f5 fd6f 	bl	8006bb8 <__aeabi_dcmpeq>
 80110da:	b918      	cbnz	r0, 80110e4 <__cvt+0x8c>
 80110dc:	f1c6 0601 	rsb	r6, r6, #1
 80110e0:	f8ca 6000 	str.w	r6, [sl]
 80110e4:	f8da 3000 	ldr.w	r3, [sl]
 80110e8:	4499      	add	r9, r3
 80110ea:	2200      	movs	r2, #0
 80110ec:	2300      	movs	r3, #0
 80110ee:	4620      	mov	r0, r4
 80110f0:	4629      	mov	r1, r5
 80110f2:	f7f5 fd61 	bl	8006bb8 <__aeabi_dcmpeq>
 80110f6:	b108      	cbz	r0, 80110fc <__cvt+0xa4>
 80110f8:	f8cd 900c 	str.w	r9, [sp, #12]
 80110fc:	2230      	movs	r2, #48	; 0x30
 80110fe:	9b03      	ldr	r3, [sp, #12]
 8011100:	454b      	cmp	r3, r9
 8011102:	d307      	bcc.n	8011114 <__cvt+0xbc>
 8011104:	9b03      	ldr	r3, [sp, #12]
 8011106:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011108:	1bdb      	subs	r3, r3, r7
 801110a:	4638      	mov	r0, r7
 801110c:	6013      	str	r3, [r2, #0]
 801110e:	b004      	add	sp, #16
 8011110:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011114:	1c59      	adds	r1, r3, #1
 8011116:	9103      	str	r1, [sp, #12]
 8011118:	701a      	strb	r2, [r3, #0]
 801111a:	e7f0      	b.n	80110fe <__cvt+0xa6>

0801111c <__exponent>:
 801111c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801111e:	4603      	mov	r3, r0
 8011120:	2900      	cmp	r1, #0
 8011122:	bfb8      	it	lt
 8011124:	4249      	neglt	r1, r1
 8011126:	f803 2b02 	strb.w	r2, [r3], #2
 801112a:	bfb4      	ite	lt
 801112c:	222d      	movlt	r2, #45	; 0x2d
 801112e:	222b      	movge	r2, #43	; 0x2b
 8011130:	2909      	cmp	r1, #9
 8011132:	7042      	strb	r2, [r0, #1]
 8011134:	dd2a      	ble.n	801118c <__exponent+0x70>
 8011136:	f10d 0407 	add.w	r4, sp, #7
 801113a:	46a4      	mov	ip, r4
 801113c:	270a      	movs	r7, #10
 801113e:	46a6      	mov	lr, r4
 8011140:	460a      	mov	r2, r1
 8011142:	fb91 f6f7 	sdiv	r6, r1, r7
 8011146:	fb07 1516 	mls	r5, r7, r6, r1
 801114a:	3530      	adds	r5, #48	; 0x30
 801114c:	2a63      	cmp	r2, #99	; 0x63
 801114e:	f104 34ff 	add.w	r4, r4, #4294967295
 8011152:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8011156:	4631      	mov	r1, r6
 8011158:	dcf1      	bgt.n	801113e <__exponent+0x22>
 801115a:	3130      	adds	r1, #48	; 0x30
 801115c:	f1ae 0502 	sub.w	r5, lr, #2
 8011160:	f804 1c01 	strb.w	r1, [r4, #-1]
 8011164:	1c44      	adds	r4, r0, #1
 8011166:	4629      	mov	r1, r5
 8011168:	4561      	cmp	r1, ip
 801116a:	d30a      	bcc.n	8011182 <__exponent+0x66>
 801116c:	f10d 0209 	add.w	r2, sp, #9
 8011170:	eba2 020e 	sub.w	r2, r2, lr
 8011174:	4565      	cmp	r5, ip
 8011176:	bf88      	it	hi
 8011178:	2200      	movhi	r2, #0
 801117a:	4413      	add	r3, r2
 801117c:	1a18      	subs	r0, r3, r0
 801117e:	b003      	add	sp, #12
 8011180:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011182:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011186:	f804 2f01 	strb.w	r2, [r4, #1]!
 801118a:	e7ed      	b.n	8011168 <__exponent+0x4c>
 801118c:	2330      	movs	r3, #48	; 0x30
 801118e:	3130      	adds	r1, #48	; 0x30
 8011190:	7083      	strb	r3, [r0, #2]
 8011192:	70c1      	strb	r1, [r0, #3]
 8011194:	1d03      	adds	r3, r0, #4
 8011196:	e7f1      	b.n	801117c <__exponent+0x60>

08011198 <_printf_float>:
 8011198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801119c:	ed2d 8b02 	vpush	{d8}
 80111a0:	b08d      	sub	sp, #52	; 0x34
 80111a2:	460c      	mov	r4, r1
 80111a4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80111a8:	4616      	mov	r6, r2
 80111aa:	461f      	mov	r7, r3
 80111ac:	4605      	mov	r5, r0
 80111ae:	f001 fa87 	bl	80126c0 <_localeconv_r>
 80111b2:	f8d0 a000 	ldr.w	sl, [r0]
 80111b6:	4650      	mov	r0, sl
 80111b8:	f7f5 f87b 	bl	80062b2 <strlen>
 80111bc:	2300      	movs	r3, #0
 80111be:	930a      	str	r3, [sp, #40]	; 0x28
 80111c0:	6823      	ldr	r3, [r4, #0]
 80111c2:	9305      	str	r3, [sp, #20]
 80111c4:	f8d8 3000 	ldr.w	r3, [r8]
 80111c8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80111cc:	3307      	adds	r3, #7
 80111ce:	f023 0307 	bic.w	r3, r3, #7
 80111d2:	f103 0208 	add.w	r2, r3, #8
 80111d6:	f8c8 2000 	str.w	r2, [r8]
 80111da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111de:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80111e2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80111e6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80111ea:	9307      	str	r3, [sp, #28]
 80111ec:	f8cd 8018 	str.w	r8, [sp, #24]
 80111f0:	ee08 0a10 	vmov	s16, r0
 80111f4:	4b9f      	ldr	r3, [pc, #636]	; (8011474 <_printf_float+0x2dc>)
 80111f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80111fa:	f04f 32ff 	mov.w	r2, #4294967295
 80111fe:	f7f5 fd0d 	bl	8006c1c <__aeabi_dcmpun>
 8011202:	bb88      	cbnz	r0, 8011268 <_printf_float+0xd0>
 8011204:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011208:	4b9a      	ldr	r3, [pc, #616]	; (8011474 <_printf_float+0x2dc>)
 801120a:	f04f 32ff 	mov.w	r2, #4294967295
 801120e:	f7f5 fce7 	bl	8006be0 <__aeabi_dcmple>
 8011212:	bb48      	cbnz	r0, 8011268 <_printf_float+0xd0>
 8011214:	2200      	movs	r2, #0
 8011216:	2300      	movs	r3, #0
 8011218:	4640      	mov	r0, r8
 801121a:	4649      	mov	r1, r9
 801121c:	f7f5 fcd6 	bl	8006bcc <__aeabi_dcmplt>
 8011220:	b110      	cbz	r0, 8011228 <_printf_float+0x90>
 8011222:	232d      	movs	r3, #45	; 0x2d
 8011224:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011228:	4b93      	ldr	r3, [pc, #588]	; (8011478 <_printf_float+0x2e0>)
 801122a:	4894      	ldr	r0, [pc, #592]	; (801147c <_printf_float+0x2e4>)
 801122c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8011230:	bf94      	ite	ls
 8011232:	4698      	movls	r8, r3
 8011234:	4680      	movhi	r8, r0
 8011236:	2303      	movs	r3, #3
 8011238:	6123      	str	r3, [r4, #16]
 801123a:	9b05      	ldr	r3, [sp, #20]
 801123c:	f023 0204 	bic.w	r2, r3, #4
 8011240:	6022      	str	r2, [r4, #0]
 8011242:	f04f 0900 	mov.w	r9, #0
 8011246:	9700      	str	r7, [sp, #0]
 8011248:	4633      	mov	r3, r6
 801124a:	aa0b      	add	r2, sp, #44	; 0x2c
 801124c:	4621      	mov	r1, r4
 801124e:	4628      	mov	r0, r5
 8011250:	f000 f9d8 	bl	8011604 <_printf_common>
 8011254:	3001      	adds	r0, #1
 8011256:	f040 8090 	bne.w	801137a <_printf_float+0x1e2>
 801125a:	f04f 30ff 	mov.w	r0, #4294967295
 801125e:	b00d      	add	sp, #52	; 0x34
 8011260:	ecbd 8b02 	vpop	{d8}
 8011264:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011268:	4642      	mov	r2, r8
 801126a:	464b      	mov	r3, r9
 801126c:	4640      	mov	r0, r8
 801126e:	4649      	mov	r1, r9
 8011270:	f7f5 fcd4 	bl	8006c1c <__aeabi_dcmpun>
 8011274:	b140      	cbz	r0, 8011288 <_printf_float+0xf0>
 8011276:	464b      	mov	r3, r9
 8011278:	2b00      	cmp	r3, #0
 801127a:	bfbc      	itt	lt
 801127c:	232d      	movlt	r3, #45	; 0x2d
 801127e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8011282:	487f      	ldr	r0, [pc, #508]	; (8011480 <_printf_float+0x2e8>)
 8011284:	4b7f      	ldr	r3, [pc, #508]	; (8011484 <_printf_float+0x2ec>)
 8011286:	e7d1      	b.n	801122c <_printf_float+0x94>
 8011288:	6863      	ldr	r3, [r4, #4]
 801128a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801128e:	9206      	str	r2, [sp, #24]
 8011290:	1c5a      	adds	r2, r3, #1
 8011292:	d13f      	bne.n	8011314 <_printf_float+0x17c>
 8011294:	2306      	movs	r3, #6
 8011296:	6063      	str	r3, [r4, #4]
 8011298:	9b05      	ldr	r3, [sp, #20]
 801129a:	6861      	ldr	r1, [r4, #4]
 801129c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80112a0:	2300      	movs	r3, #0
 80112a2:	9303      	str	r3, [sp, #12]
 80112a4:	ab0a      	add	r3, sp, #40	; 0x28
 80112a6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80112aa:	ab09      	add	r3, sp, #36	; 0x24
 80112ac:	ec49 8b10 	vmov	d0, r8, r9
 80112b0:	9300      	str	r3, [sp, #0]
 80112b2:	6022      	str	r2, [r4, #0]
 80112b4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80112b8:	4628      	mov	r0, r5
 80112ba:	f7ff fecd 	bl	8011058 <__cvt>
 80112be:	9b06      	ldr	r3, [sp, #24]
 80112c0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80112c2:	2b47      	cmp	r3, #71	; 0x47
 80112c4:	4680      	mov	r8, r0
 80112c6:	d108      	bne.n	80112da <_printf_float+0x142>
 80112c8:	1cc8      	adds	r0, r1, #3
 80112ca:	db02      	blt.n	80112d2 <_printf_float+0x13a>
 80112cc:	6863      	ldr	r3, [r4, #4]
 80112ce:	4299      	cmp	r1, r3
 80112d0:	dd41      	ble.n	8011356 <_printf_float+0x1be>
 80112d2:	f1ab 0b02 	sub.w	fp, fp, #2
 80112d6:	fa5f fb8b 	uxtb.w	fp, fp
 80112da:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80112de:	d820      	bhi.n	8011322 <_printf_float+0x18a>
 80112e0:	3901      	subs	r1, #1
 80112e2:	465a      	mov	r2, fp
 80112e4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80112e8:	9109      	str	r1, [sp, #36]	; 0x24
 80112ea:	f7ff ff17 	bl	801111c <__exponent>
 80112ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80112f0:	1813      	adds	r3, r2, r0
 80112f2:	2a01      	cmp	r2, #1
 80112f4:	4681      	mov	r9, r0
 80112f6:	6123      	str	r3, [r4, #16]
 80112f8:	dc02      	bgt.n	8011300 <_printf_float+0x168>
 80112fa:	6822      	ldr	r2, [r4, #0]
 80112fc:	07d2      	lsls	r2, r2, #31
 80112fe:	d501      	bpl.n	8011304 <_printf_float+0x16c>
 8011300:	3301      	adds	r3, #1
 8011302:	6123      	str	r3, [r4, #16]
 8011304:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8011308:	2b00      	cmp	r3, #0
 801130a:	d09c      	beq.n	8011246 <_printf_float+0xae>
 801130c:	232d      	movs	r3, #45	; 0x2d
 801130e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011312:	e798      	b.n	8011246 <_printf_float+0xae>
 8011314:	9a06      	ldr	r2, [sp, #24]
 8011316:	2a47      	cmp	r2, #71	; 0x47
 8011318:	d1be      	bne.n	8011298 <_printf_float+0x100>
 801131a:	2b00      	cmp	r3, #0
 801131c:	d1bc      	bne.n	8011298 <_printf_float+0x100>
 801131e:	2301      	movs	r3, #1
 8011320:	e7b9      	b.n	8011296 <_printf_float+0xfe>
 8011322:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8011326:	d118      	bne.n	801135a <_printf_float+0x1c2>
 8011328:	2900      	cmp	r1, #0
 801132a:	6863      	ldr	r3, [r4, #4]
 801132c:	dd0b      	ble.n	8011346 <_printf_float+0x1ae>
 801132e:	6121      	str	r1, [r4, #16]
 8011330:	b913      	cbnz	r3, 8011338 <_printf_float+0x1a0>
 8011332:	6822      	ldr	r2, [r4, #0]
 8011334:	07d0      	lsls	r0, r2, #31
 8011336:	d502      	bpl.n	801133e <_printf_float+0x1a6>
 8011338:	3301      	adds	r3, #1
 801133a:	440b      	add	r3, r1
 801133c:	6123      	str	r3, [r4, #16]
 801133e:	65a1      	str	r1, [r4, #88]	; 0x58
 8011340:	f04f 0900 	mov.w	r9, #0
 8011344:	e7de      	b.n	8011304 <_printf_float+0x16c>
 8011346:	b913      	cbnz	r3, 801134e <_printf_float+0x1b6>
 8011348:	6822      	ldr	r2, [r4, #0]
 801134a:	07d2      	lsls	r2, r2, #31
 801134c:	d501      	bpl.n	8011352 <_printf_float+0x1ba>
 801134e:	3302      	adds	r3, #2
 8011350:	e7f4      	b.n	801133c <_printf_float+0x1a4>
 8011352:	2301      	movs	r3, #1
 8011354:	e7f2      	b.n	801133c <_printf_float+0x1a4>
 8011356:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801135a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801135c:	4299      	cmp	r1, r3
 801135e:	db05      	blt.n	801136c <_printf_float+0x1d4>
 8011360:	6823      	ldr	r3, [r4, #0]
 8011362:	6121      	str	r1, [r4, #16]
 8011364:	07d8      	lsls	r0, r3, #31
 8011366:	d5ea      	bpl.n	801133e <_printf_float+0x1a6>
 8011368:	1c4b      	adds	r3, r1, #1
 801136a:	e7e7      	b.n	801133c <_printf_float+0x1a4>
 801136c:	2900      	cmp	r1, #0
 801136e:	bfd4      	ite	le
 8011370:	f1c1 0202 	rsble	r2, r1, #2
 8011374:	2201      	movgt	r2, #1
 8011376:	4413      	add	r3, r2
 8011378:	e7e0      	b.n	801133c <_printf_float+0x1a4>
 801137a:	6823      	ldr	r3, [r4, #0]
 801137c:	055a      	lsls	r2, r3, #21
 801137e:	d407      	bmi.n	8011390 <_printf_float+0x1f8>
 8011380:	6923      	ldr	r3, [r4, #16]
 8011382:	4642      	mov	r2, r8
 8011384:	4631      	mov	r1, r6
 8011386:	4628      	mov	r0, r5
 8011388:	47b8      	blx	r7
 801138a:	3001      	adds	r0, #1
 801138c:	d12c      	bne.n	80113e8 <_printf_float+0x250>
 801138e:	e764      	b.n	801125a <_printf_float+0xc2>
 8011390:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8011394:	f240 80e0 	bls.w	8011558 <_printf_float+0x3c0>
 8011398:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801139c:	2200      	movs	r2, #0
 801139e:	2300      	movs	r3, #0
 80113a0:	f7f5 fc0a 	bl	8006bb8 <__aeabi_dcmpeq>
 80113a4:	2800      	cmp	r0, #0
 80113a6:	d034      	beq.n	8011412 <_printf_float+0x27a>
 80113a8:	4a37      	ldr	r2, [pc, #220]	; (8011488 <_printf_float+0x2f0>)
 80113aa:	2301      	movs	r3, #1
 80113ac:	4631      	mov	r1, r6
 80113ae:	4628      	mov	r0, r5
 80113b0:	47b8      	blx	r7
 80113b2:	3001      	adds	r0, #1
 80113b4:	f43f af51 	beq.w	801125a <_printf_float+0xc2>
 80113b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80113bc:	429a      	cmp	r2, r3
 80113be:	db02      	blt.n	80113c6 <_printf_float+0x22e>
 80113c0:	6823      	ldr	r3, [r4, #0]
 80113c2:	07d8      	lsls	r0, r3, #31
 80113c4:	d510      	bpl.n	80113e8 <_printf_float+0x250>
 80113c6:	ee18 3a10 	vmov	r3, s16
 80113ca:	4652      	mov	r2, sl
 80113cc:	4631      	mov	r1, r6
 80113ce:	4628      	mov	r0, r5
 80113d0:	47b8      	blx	r7
 80113d2:	3001      	adds	r0, #1
 80113d4:	f43f af41 	beq.w	801125a <_printf_float+0xc2>
 80113d8:	f04f 0800 	mov.w	r8, #0
 80113dc:	f104 091a 	add.w	r9, r4, #26
 80113e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80113e2:	3b01      	subs	r3, #1
 80113e4:	4543      	cmp	r3, r8
 80113e6:	dc09      	bgt.n	80113fc <_printf_float+0x264>
 80113e8:	6823      	ldr	r3, [r4, #0]
 80113ea:	079b      	lsls	r3, r3, #30
 80113ec:	f100 8105 	bmi.w	80115fa <_printf_float+0x462>
 80113f0:	68e0      	ldr	r0, [r4, #12]
 80113f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80113f4:	4298      	cmp	r0, r3
 80113f6:	bfb8      	it	lt
 80113f8:	4618      	movlt	r0, r3
 80113fa:	e730      	b.n	801125e <_printf_float+0xc6>
 80113fc:	2301      	movs	r3, #1
 80113fe:	464a      	mov	r2, r9
 8011400:	4631      	mov	r1, r6
 8011402:	4628      	mov	r0, r5
 8011404:	47b8      	blx	r7
 8011406:	3001      	adds	r0, #1
 8011408:	f43f af27 	beq.w	801125a <_printf_float+0xc2>
 801140c:	f108 0801 	add.w	r8, r8, #1
 8011410:	e7e6      	b.n	80113e0 <_printf_float+0x248>
 8011412:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011414:	2b00      	cmp	r3, #0
 8011416:	dc39      	bgt.n	801148c <_printf_float+0x2f4>
 8011418:	4a1b      	ldr	r2, [pc, #108]	; (8011488 <_printf_float+0x2f0>)
 801141a:	2301      	movs	r3, #1
 801141c:	4631      	mov	r1, r6
 801141e:	4628      	mov	r0, r5
 8011420:	47b8      	blx	r7
 8011422:	3001      	adds	r0, #1
 8011424:	f43f af19 	beq.w	801125a <_printf_float+0xc2>
 8011428:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801142c:	4313      	orrs	r3, r2
 801142e:	d102      	bne.n	8011436 <_printf_float+0x29e>
 8011430:	6823      	ldr	r3, [r4, #0]
 8011432:	07d9      	lsls	r1, r3, #31
 8011434:	d5d8      	bpl.n	80113e8 <_printf_float+0x250>
 8011436:	ee18 3a10 	vmov	r3, s16
 801143a:	4652      	mov	r2, sl
 801143c:	4631      	mov	r1, r6
 801143e:	4628      	mov	r0, r5
 8011440:	47b8      	blx	r7
 8011442:	3001      	adds	r0, #1
 8011444:	f43f af09 	beq.w	801125a <_printf_float+0xc2>
 8011448:	f04f 0900 	mov.w	r9, #0
 801144c:	f104 0a1a 	add.w	sl, r4, #26
 8011450:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011452:	425b      	negs	r3, r3
 8011454:	454b      	cmp	r3, r9
 8011456:	dc01      	bgt.n	801145c <_printf_float+0x2c4>
 8011458:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801145a:	e792      	b.n	8011382 <_printf_float+0x1ea>
 801145c:	2301      	movs	r3, #1
 801145e:	4652      	mov	r2, sl
 8011460:	4631      	mov	r1, r6
 8011462:	4628      	mov	r0, r5
 8011464:	47b8      	blx	r7
 8011466:	3001      	adds	r0, #1
 8011468:	f43f aef7 	beq.w	801125a <_printf_float+0xc2>
 801146c:	f109 0901 	add.w	r9, r9, #1
 8011470:	e7ee      	b.n	8011450 <_printf_float+0x2b8>
 8011472:	bf00      	nop
 8011474:	7fefffff 	.word	0x7fefffff
 8011478:	0807cc58 	.word	0x0807cc58
 801147c:	0807cc5c 	.word	0x0807cc5c
 8011480:	0807cc64 	.word	0x0807cc64
 8011484:	0807cc60 	.word	0x0807cc60
 8011488:	0807cc68 	.word	0x0807cc68
 801148c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801148e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011490:	429a      	cmp	r2, r3
 8011492:	bfa8      	it	ge
 8011494:	461a      	movge	r2, r3
 8011496:	2a00      	cmp	r2, #0
 8011498:	4691      	mov	r9, r2
 801149a:	dc37      	bgt.n	801150c <_printf_float+0x374>
 801149c:	f04f 0b00 	mov.w	fp, #0
 80114a0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80114a4:	f104 021a 	add.w	r2, r4, #26
 80114a8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80114aa:	9305      	str	r3, [sp, #20]
 80114ac:	eba3 0309 	sub.w	r3, r3, r9
 80114b0:	455b      	cmp	r3, fp
 80114b2:	dc33      	bgt.n	801151c <_printf_float+0x384>
 80114b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80114b8:	429a      	cmp	r2, r3
 80114ba:	db3b      	blt.n	8011534 <_printf_float+0x39c>
 80114bc:	6823      	ldr	r3, [r4, #0]
 80114be:	07da      	lsls	r2, r3, #31
 80114c0:	d438      	bmi.n	8011534 <_printf_float+0x39c>
 80114c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80114c4:	9a05      	ldr	r2, [sp, #20]
 80114c6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80114c8:	1a9a      	subs	r2, r3, r2
 80114ca:	eba3 0901 	sub.w	r9, r3, r1
 80114ce:	4591      	cmp	r9, r2
 80114d0:	bfa8      	it	ge
 80114d2:	4691      	movge	r9, r2
 80114d4:	f1b9 0f00 	cmp.w	r9, #0
 80114d8:	dc35      	bgt.n	8011546 <_printf_float+0x3ae>
 80114da:	f04f 0800 	mov.w	r8, #0
 80114de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80114e2:	f104 0a1a 	add.w	sl, r4, #26
 80114e6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80114ea:	1a9b      	subs	r3, r3, r2
 80114ec:	eba3 0309 	sub.w	r3, r3, r9
 80114f0:	4543      	cmp	r3, r8
 80114f2:	f77f af79 	ble.w	80113e8 <_printf_float+0x250>
 80114f6:	2301      	movs	r3, #1
 80114f8:	4652      	mov	r2, sl
 80114fa:	4631      	mov	r1, r6
 80114fc:	4628      	mov	r0, r5
 80114fe:	47b8      	blx	r7
 8011500:	3001      	adds	r0, #1
 8011502:	f43f aeaa 	beq.w	801125a <_printf_float+0xc2>
 8011506:	f108 0801 	add.w	r8, r8, #1
 801150a:	e7ec      	b.n	80114e6 <_printf_float+0x34e>
 801150c:	4613      	mov	r3, r2
 801150e:	4631      	mov	r1, r6
 8011510:	4642      	mov	r2, r8
 8011512:	4628      	mov	r0, r5
 8011514:	47b8      	blx	r7
 8011516:	3001      	adds	r0, #1
 8011518:	d1c0      	bne.n	801149c <_printf_float+0x304>
 801151a:	e69e      	b.n	801125a <_printf_float+0xc2>
 801151c:	2301      	movs	r3, #1
 801151e:	4631      	mov	r1, r6
 8011520:	4628      	mov	r0, r5
 8011522:	9205      	str	r2, [sp, #20]
 8011524:	47b8      	blx	r7
 8011526:	3001      	adds	r0, #1
 8011528:	f43f ae97 	beq.w	801125a <_printf_float+0xc2>
 801152c:	9a05      	ldr	r2, [sp, #20]
 801152e:	f10b 0b01 	add.w	fp, fp, #1
 8011532:	e7b9      	b.n	80114a8 <_printf_float+0x310>
 8011534:	ee18 3a10 	vmov	r3, s16
 8011538:	4652      	mov	r2, sl
 801153a:	4631      	mov	r1, r6
 801153c:	4628      	mov	r0, r5
 801153e:	47b8      	blx	r7
 8011540:	3001      	adds	r0, #1
 8011542:	d1be      	bne.n	80114c2 <_printf_float+0x32a>
 8011544:	e689      	b.n	801125a <_printf_float+0xc2>
 8011546:	9a05      	ldr	r2, [sp, #20]
 8011548:	464b      	mov	r3, r9
 801154a:	4442      	add	r2, r8
 801154c:	4631      	mov	r1, r6
 801154e:	4628      	mov	r0, r5
 8011550:	47b8      	blx	r7
 8011552:	3001      	adds	r0, #1
 8011554:	d1c1      	bne.n	80114da <_printf_float+0x342>
 8011556:	e680      	b.n	801125a <_printf_float+0xc2>
 8011558:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801155a:	2a01      	cmp	r2, #1
 801155c:	dc01      	bgt.n	8011562 <_printf_float+0x3ca>
 801155e:	07db      	lsls	r3, r3, #31
 8011560:	d538      	bpl.n	80115d4 <_printf_float+0x43c>
 8011562:	2301      	movs	r3, #1
 8011564:	4642      	mov	r2, r8
 8011566:	4631      	mov	r1, r6
 8011568:	4628      	mov	r0, r5
 801156a:	47b8      	blx	r7
 801156c:	3001      	adds	r0, #1
 801156e:	f43f ae74 	beq.w	801125a <_printf_float+0xc2>
 8011572:	ee18 3a10 	vmov	r3, s16
 8011576:	4652      	mov	r2, sl
 8011578:	4631      	mov	r1, r6
 801157a:	4628      	mov	r0, r5
 801157c:	47b8      	blx	r7
 801157e:	3001      	adds	r0, #1
 8011580:	f43f ae6b 	beq.w	801125a <_printf_float+0xc2>
 8011584:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011588:	2200      	movs	r2, #0
 801158a:	2300      	movs	r3, #0
 801158c:	f7f5 fb14 	bl	8006bb8 <__aeabi_dcmpeq>
 8011590:	b9d8      	cbnz	r0, 80115ca <_printf_float+0x432>
 8011592:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011594:	f108 0201 	add.w	r2, r8, #1
 8011598:	3b01      	subs	r3, #1
 801159a:	4631      	mov	r1, r6
 801159c:	4628      	mov	r0, r5
 801159e:	47b8      	blx	r7
 80115a0:	3001      	adds	r0, #1
 80115a2:	d10e      	bne.n	80115c2 <_printf_float+0x42a>
 80115a4:	e659      	b.n	801125a <_printf_float+0xc2>
 80115a6:	2301      	movs	r3, #1
 80115a8:	4652      	mov	r2, sl
 80115aa:	4631      	mov	r1, r6
 80115ac:	4628      	mov	r0, r5
 80115ae:	47b8      	blx	r7
 80115b0:	3001      	adds	r0, #1
 80115b2:	f43f ae52 	beq.w	801125a <_printf_float+0xc2>
 80115b6:	f108 0801 	add.w	r8, r8, #1
 80115ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80115bc:	3b01      	subs	r3, #1
 80115be:	4543      	cmp	r3, r8
 80115c0:	dcf1      	bgt.n	80115a6 <_printf_float+0x40e>
 80115c2:	464b      	mov	r3, r9
 80115c4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80115c8:	e6dc      	b.n	8011384 <_printf_float+0x1ec>
 80115ca:	f04f 0800 	mov.w	r8, #0
 80115ce:	f104 0a1a 	add.w	sl, r4, #26
 80115d2:	e7f2      	b.n	80115ba <_printf_float+0x422>
 80115d4:	2301      	movs	r3, #1
 80115d6:	4642      	mov	r2, r8
 80115d8:	e7df      	b.n	801159a <_printf_float+0x402>
 80115da:	2301      	movs	r3, #1
 80115dc:	464a      	mov	r2, r9
 80115de:	4631      	mov	r1, r6
 80115e0:	4628      	mov	r0, r5
 80115e2:	47b8      	blx	r7
 80115e4:	3001      	adds	r0, #1
 80115e6:	f43f ae38 	beq.w	801125a <_printf_float+0xc2>
 80115ea:	f108 0801 	add.w	r8, r8, #1
 80115ee:	68e3      	ldr	r3, [r4, #12]
 80115f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80115f2:	1a5b      	subs	r3, r3, r1
 80115f4:	4543      	cmp	r3, r8
 80115f6:	dcf0      	bgt.n	80115da <_printf_float+0x442>
 80115f8:	e6fa      	b.n	80113f0 <_printf_float+0x258>
 80115fa:	f04f 0800 	mov.w	r8, #0
 80115fe:	f104 0919 	add.w	r9, r4, #25
 8011602:	e7f4      	b.n	80115ee <_printf_float+0x456>

08011604 <_printf_common>:
 8011604:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011608:	4616      	mov	r6, r2
 801160a:	4699      	mov	r9, r3
 801160c:	688a      	ldr	r2, [r1, #8]
 801160e:	690b      	ldr	r3, [r1, #16]
 8011610:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011614:	4293      	cmp	r3, r2
 8011616:	bfb8      	it	lt
 8011618:	4613      	movlt	r3, r2
 801161a:	6033      	str	r3, [r6, #0]
 801161c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011620:	4607      	mov	r7, r0
 8011622:	460c      	mov	r4, r1
 8011624:	b10a      	cbz	r2, 801162a <_printf_common+0x26>
 8011626:	3301      	adds	r3, #1
 8011628:	6033      	str	r3, [r6, #0]
 801162a:	6823      	ldr	r3, [r4, #0]
 801162c:	0699      	lsls	r1, r3, #26
 801162e:	bf42      	ittt	mi
 8011630:	6833      	ldrmi	r3, [r6, #0]
 8011632:	3302      	addmi	r3, #2
 8011634:	6033      	strmi	r3, [r6, #0]
 8011636:	6825      	ldr	r5, [r4, #0]
 8011638:	f015 0506 	ands.w	r5, r5, #6
 801163c:	d106      	bne.n	801164c <_printf_common+0x48>
 801163e:	f104 0a19 	add.w	sl, r4, #25
 8011642:	68e3      	ldr	r3, [r4, #12]
 8011644:	6832      	ldr	r2, [r6, #0]
 8011646:	1a9b      	subs	r3, r3, r2
 8011648:	42ab      	cmp	r3, r5
 801164a:	dc26      	bgt.n	801169a <_printf_common+0x96>
 801164c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011650:	1e13      	subs	r3, r2, #0
 8011652:	6822      	ldr	r2, [r4, #0]
 8011654:	bf18      	it	ne
 8011656:	2301      	movne	r3, #1
 8011658:	0692      	lsls	r2, r2, #26
 801165a:	d42b      	bmi.n	80116b4 <_printf_common+0xb0>
 801165c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011660:	4649      	mov	r1, r9
 8011662:	4638      	mov	r0, r7
 8011664:	47c0      	blx	r8
 8011666:	3001      	adds	r0, #1
 8011668:	d01e      	beq.n	80116a8 <_printf_common+0xa4>
 801166a:	6823      	ldr	r3, [r4, #0]
 801166c:	68e5      	ldr	r5, [r4, #12]
 801166e:	6832      	ldr	r2, [r6, #0]
 8011670:	f003 0306 	and.w	r3, r3, #6
 8011674:	2b04      	cmp	r3, #4
 8011676:	bf08      	it	eq
 8011678:	1aad      	subeq	r5, r5, r2
 801167a:	68a3      	ldr	r3, [r4, #8]
 801167c:	6922      	ldr	r2, [r4, #16]
 801167e:	bf0c      	ite	eq
 8011680:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011684:	2500      	movne	r5, #0
 8011686:	4293      	cmp	r3, r2
 8011688:	bfc4      	itt	gt
 801168a:	1a9b      	subgt	r3, r3, r2
 801168c:	18ed      	addgt	r5, r5, r3
 801168e:	2600      	movs	r6, #0
 8011690:	341a      	adds	r4, #26
 8011692:	42b5      	cmp	r5, r6
 8011694:	d11a      	bne.n	80116cc <_printf_common+0xc8>
 8011696:	2000      	movs	r0, #0
 8011698:	e008      	b.n	80116ac <_printf_common+0xa8>
 801169a:	2301      	movs	r3, #1
 801169c:	4652      	mov	r2, sl
 801169e:	4649      	mov	r1, r9
 80116a0:	4638      	mov	r0, r7
 80116a2:	47c0      	blx	r8
 80116a4:	3001      	adds	r0, #1
 80116a6:	d103      	bne.n	80116b0 <_printf_common+0xac>
 80116a8:	f04f 30ff 	mov.w	r0, #4294967295
 80116ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80116b0:	3501      	adds	r5, #1
 80116b2:	e7c6      	b.n	8011642 <_printf_common+0x3e>
 80116b4:	18e1      	adds	r1, r4, r3
 80116b6:	1c5a      	adds	r2, r3, #1
 80116b8:	2030      	movs	r0, #48	; 0x30
 80116ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80116be:	4422      	add	r2, r4
 80116c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80116c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80116c8:	3302      	adds	r3, #2
 80116ca:	e7c7      	b.n	801165c <_printf_common+0x58>
 80116cc:	2301      	movs	r3, #1
 80116ce:	4622      	mov	r2, r4
 80116d0:	4649      	mov	r1, r9
 80116d2:	4638      	mov	r0, r7
 80116d4:	47c0      	blx	r8
 80116d6:	3001      	adds	r0, #1
 80116d8:	d0e6      	beq.n	80116a8 <_printf_common+0xa4>
 80116da:	3601      	adds	r6, #1
 80116dc:	e7d9      	b.n	8011692 <_printf_common+0x8e>
	...

080116e0 <_printf_i>:
 80116e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80116e4:	7e0f      	ldrb	r7, [r1, #24]
 80116e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80116e8:	2f78      	cmp	r7, #120	; 0x78
 80116ea:	4691      	mov	r9, r2
 80116ec:	4680      	mov	r8, r0
 80116ee:	460c      	mov	r4, r1
 80116f0:	469a      	mov	sl, r3
 80116f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80116f6:	d807      	bhi.n	8011708 <_printf_i+0x28>
 80116f8:	2f62      	cmp	r7, #98	; 0x62
 80116fa:	d80a      	bhi.n	8011712 <_printf_i+0x32>
 80116fc:	2f00      	cmp	r7, #0
 80116fe:	f000 80d8 	beq.w	80118b2 <_printf_i+0x1d2>
 8011702:	2f58      	cmp	r7, #88	; 0x58
 8011704:	f000 80a3 	beq.w	801184e <_printf_i+0x16e>
 8011708:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801170c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011710:	e03a      	b.n	8011788 <_printf_i+0xa8>
 8011712:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011716:	2b15      	cmp	r3, #21
 8011718:	d8f6      	bhi.n	8011708 <_printf_i+0x28>
 801171a:	a101      	add	r1, pc, #4	; (adr r1, 8011720 <_printf_i+0x40>)
 801171c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011720:	08011779 	.word	0x08011779
 8011724:	0801178d 	.word	0x0801178d
 8011728:	08011709 	.word	0x08011709
 801172c:	08011709 	.word	0x08011709
 8011730:	08011709 	.word	0x08011709
 8011734:	08011709 	.word	0x08011709
 8011738:	0801178d 	.word	0x0801178d
 801173c:	08011709 	.word	0x08011709
 8011740:	08011709 	.word	0x08011709
 8011744:	08011709 	.word	0x08011709
 8011748:	08011709 	.word	0x08011709
 801174c:	08011899 	.word	0x08011899
 8011750:	080117bd 	.word	0x080117bd
 8011754:	0801187b 	.word	0x0801187b
 8011758:	08011709 	.word	0x08011709
 801175c:	08011709 	.word	0x08011709
 8011760:	080118bb 	.word	0x080118bb
 8011764:	08011709 	.word	0x08011709
 8011768:	080117bd 	.word	0x080117bd
 801176c:	08011709 	.word	0x08011709
 8011770:	08011709 	.word	0x08011709
 8011774:	08011883 	.word	0x08011883
 8011778:	682b      	ldr	r3, [r5, #0]
 801177a:	1d1a      	adds	r2, r3, #4
 801177c:	681b      	ldr	r3, [r3, #0]
 801177e:	602a      	str	r2, [r5, #0]
 8011780:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011784:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011788:	2301      	movs	r3, #1
 801178a:	e0a3      	b.n	80118d4 <_printf_i+0x1f4>
 801178c:	6820      	ldr	r0, [r4, #0]
 801178e:	6829      	ldr	r1, [r5, #0]
 8011790:	0606      	lsls	r6, r0, #24
 8011792:	f101 0304 	add.w	r3, r1, #4
 8011796:	d50a      	bpl.n	80117ae <_printf_i+0xce>
 8011798:	680e      	ldr	r6, [r1, #0]
 801179a:	602b      	str	r3, [r5, #0]
 801179c:	2e00      	cmp	r6, #0
 801179e:	da03      	bge.n	80117a8 <_printf_i+0xc8>
 80117a0:	232d      	movs	r3, #45	; 0x2d
 80117a2:	4276      	negs	r6, r6
 80117a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80117a8:	485e      	ldr	r0, [pc, #376]	; (8011924 <_printf_i+0x244>)
 80117aa:	230a      	movs	r3, #10
 80117ac:	e019      	b.n	80117e2 <_printf_i+0x102>
 80117ae:	680e      	ldr	r6, [r1, #0]
 80117b0:	602b      	str	r3, [r5, #0]
 80117b2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80117b6:	bf18      	it	ne
 80117b8:	b236      	sxthne	r6, r6
 80117ba:	e7ef      	b.n	801179c <_printf_i+0xbc>
 80117bc:	682b      	ldr	r3, [r5, #0]
 80117be:	6820      	ldr	r0, [r4, #0]
 80117c0:	1d19      	adds	r1, r3, #4
 80117c2:	6029      	str	r1, [r5, #0]
 80117c4:	0601      	lsls	r1, r0, #24
 80117c6:	d501      	bpl.n	80117cc <_printf_i+0xec>
 80117c8:	681e      	ldr	r6, [r3, #0]
 80117ca:	e002      	b.n	80117d2 <_printf_i+0xf2>
 80117cc:	0646      	lsls	r6, r0, #25
 80117ce:	d5fb      	bpl.n	80117c8 <_printf_i+0xe8>
 80117d0:	881e      	ldrh	r6, [r3, #0]
 80117d2:	4854      	ldr	r0, [pc, #336]	; (8011924 <_printf_i+0x244>)
 80117d4:	2f6f      	cmp	r7, #111	; 0x6f
 80117d6:	bf0c      	ite	eq
 80117d8:	2308      	moveq	r3, #8
 80117da:	230a      	movne	r3, #10
 80117dc:	2100      	movs	r1, #0
 80117de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80117e2:	6865      	ldr	r5, [r4, #4]
 80117e4:	60a5      	str	r5, [r4, #8]
 80117e6:	2d00      	cmp	r5, #0
 80117e8:	bfa2      	ittt	ge
 80117ea:	6821      	ldrge	r1, [r4, #0]
 80117ec:	f021 0104 	bicge.w	r1, r1, #4
 80117f0:	6021      	strge	r1, [r4, #0]
 80117f2:	b90e      	cbnz	r6, 80117f8 <_printf_i+0x118>
 80117f4:	2d00      	cmp	r5, #0
 80117f6:	d04d      	beq.n	8011894 <_printf_i+0x1b4>
 80117f8:	4615      	mov	r5, r2
 80117fa:	fbb6 f1f3 	udiv	r1, r6, r3
 80117fe:	fb03 6711 	mls	r7, r3, r1, r6
 8011802:	5dc7      	ldrb	r7, [r0, r7]
 8011804:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8011808:	4637      	mov	r7, r6
 801180a:	42bb      	cmp	r3, r7
 801180c:	460e      	mov	r6, r1
 801180e:	d9f4      	bls.n	80117fa <_printf_i+0x11a>
 8011810:	2b08      	cmp	r3, #8
 8011812:	d10b      	bne.n	801182c <_printf_i+0x14c>
 8011814:	6823      	ldr	r3, [r4, #0]
 8011816:	07de      	lsls	r6, r3, #31
 8011818:	d508      	bpl.n	801182c <_printf_i+0x14c>
 801181a:	6923      	ldr	r3, [r4, #16]
 801181c:	6861      	ldr	r1, [r4, #4]
 801181e:	4299      	cmp	r1, r3
 8011820:	bfde      	ittt	le
 8011822:	2330      	movle	r3, #48	; 0x30
 8011824:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011828:	f105 35ff 	addle.w	r5, r5, #4294967295
 801182c:	1b52      	subs	r2, r2, r5
 801182e:	6122      	str	r2, [r4, #16]
 8011830:	f8cd a000 	str.w	sl, [sp]
 8011834:	464b      	mov	r3, r9
 8011836:	aa03      	add	r2, sp, #12
 8011838:	4621      	mov	r1, r4
 801183a:	4640      	mov	r0, r8
 801183c:	f7ff fee2 	bl	8011604 <_printf_common>
 8011840:	3001      	adds	r0, #1
 8011842:	d14c      	bne.n	80118de <_printf_i+0x1fe>
 8011844:	f04f 30ff 	mov.w	r0, #4294967295
 8011848:	b004      	add	sp, #16
 801184a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801184e:	4835      	ldr	r0, [pc, #212]	; (8011924 <_printf_i+0x244>)
 8011850:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8011854:	6829      	ldr	r1, [r5, #0]
 8011856:	6823      	ldr	r3, [r4, #0]
 8011858:	f851 6b04 	ldr.w	r6, [r1], #4
 801185c:	6029      	str	r1, [r5, #0]
 801185e:	061d      	lsls	r5, r3, #24
 8011860:	d514      	bpl.n	801188c <_printf_i+0x1ac>
 8011862:	07df      	lsls	r7, r3, #31
 8011864:	bf44      	itt	mi
 8011866:	f043 0320 	orrmi.w	r3, r3, #32
 801186a:	6023      	strmi	r3, [r4, #0]
 801186c:	b91e      	cbnz	r6, 8011876 <_printf_i+0x196>
 801186e:	6823      	ldr	r3, [r4, #0]
 8011870:	f023 0320 	bic.w	r3, r3, #32
 8011874:	6023      	str	r3, [r4, #0]
 8011876:	2310      	movs	r3, #16
 8011878:	e7b0      	b.n	80117dc <_printf_i+0xfc>
 801187a:	6823      	ldr	r3, [r4, #0]
 801187c:	f043 0320 	orr.w	r3, r3, #32
 8011880:	6023      	str	r3, [r4, #0]
 8011882:	2378      	movs	r3, #120	; 0x78
 8011884:	4828      	ldr	r0, [pc, #160]	; (8011928 <_printf_i+0x248>)
 8011886:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801188a:	e7e3      	b.n	8011854 <_printf_i+0x174>
 801188c:	0659      	lsls	r1, r3, #25
 801188e:	bf48      	it	mi
 8011890:	b2b6      	uxthmi	r6, r6
 8011892:	e7e6      	b.n	8011862 <_printf_i+0x182>
 8011894:	4615      	mov	r5, r2
 8011896:	e7bb      	b.n	8011810 <_printf_i+0x130>
 8011898:	682b      	ldr	r3, [r5, #0]
 801189a:	6826      	ldr	r6, [r4, #0]
 801189c:	6961      	ldr	r1, [r4, #20]
 801189e:	1d18      	adds	r0, r3, #4
 80118a0:	6028      	str	r0, [r5, #0]
 80118a2:	0635      	lsls	r5, r6, #24
 80118a4:	681b      	ldr	r3, [r3, #0]
 80118a6:	d501      	bpl.n	80118ac <_printf_i+0x1cc>
 80118a8:	6019      	str	r1, [r3, #0]
 80118aa:	e002      	b.n	80118b2 <_printf_i+0x1d2>
 80118ac:	0670      	lsls	r0, r6, #25
 80118ae:	d5fb      	bpl.n	80118a8 <_printf_i+0x1c8>
 80118b0:	8019      	strh	r1, [r3, #0]
 80118b2:	2300      	movs	r3, #0
 80118b4:	6123      	str	r3, [r4, #16]
 80118b6:	4615      	mov	r5, r2
 80118b8:	e7ba      	b.n	8011830 <_printf_i+0x150>
 80118ba:	682b      	ldr	r3, [r5, #0]
 80118bc:	1d1a      	adds	r2, r3, #4
 80118be:	602a      	str	r2, [r5, #0]
 80118c0:	681d      	ldr	r5, [r3, #0]
 80118c2:	6862      	ldr	r2, [r4, #4]
 80118c4:	2100      	movs	r1, #0
 80118c6:	4628      	mov	r0, r5
 80118c8:	f7f4 fd02 	bl	80062d0 <memchr>
 80118cc:	b108      	cbz	r0, 80118d2 <_printf_i+0x1f2>
 80118ce:	1b40      	subs	r0, r0, r5
 80118d0:	6060      	str	r0, [r4, #4]
 80118d2:	6863      	ldr	r3, [r4, #4]
 80118d4:	6123      	str	r3, [r4, #16]
 80118d6:	2300      	movs	r3, #0
 80118d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80118dc:	e7a8      	b.n	8011830 <_printf_i+0x150>
 80118de:	6923      	ldr	r3, [r4, #16]
 80118e0:	462a      	mov	r2, r5
 80118e2:	4649      	mov	r1, r9
 80118e4:	4640      	mov	r0, r8
 80118e6:	47d0      	blx	sl
 80118e8:	3001      	adds	r0, #1
 80118ea:	d0ab      	beq.n	8011844 <_printf_i+0x164>
 80118ec:	6823      	ldr	r3, [r4, #0]
 80118ee:	079b      	lsls	r3, r3, #30
 80118f0:	d413      	bmi.n	801191a <_printf_i+0x23a>
 80118f2:	68e0      	ldr	r0, [r4, #12]
 80118f4:	9b03      	ldr	r3, [sp, #12]
 80118f6:	4298      	cmp	r0, r3
 80118f8:	bfb8      	it	lt
 80118fa:	4618      	movlt	r0, r3
 80118fc:	e7a4      	b.n	8011848 <_printf_i+0x168>
 80118fe:	2301      	movs	r3, #1
 8011900:	4632      	mov	r2, r6
 8011902:	4649      	mov	r1, r9
 8011904:	4640      	mov	r0, r8
 8011906:	47d0      	blx	sl
 8011908:	3001      	adds	r0, #1
 801190a:	d09b      	beq.n	8011844 <_printf_i+0x164>
 801190c:	3501      	adds	r5, #1
 801190e:	68e3      	ldr	r3, [r4, #12]
 8011910:	9903      	ldr	r1, [sp, #12]
 8011912:	1a5b      	subs	r3, r3, r1
 8011914:	42ab      	cmp	r3, r5
 8011916:	dcf2      	bgt.n	80118fe <_printf_i+0x21e>
 8011918:	e7eb      	b.n	80118f2 <_printf_i+0x212>
 801191a:	2500      	movs	r5, #0
 801191c:	f104 0619 	add.w	r6, r4, #25
 8011920:	e7f5      	b.n	801190e <_printf_i+0x22e>
 8011922:	bf00      	nop
 8011924:	0807cc6a 	.word	0x0807cc6a
 8011928:	0807cc7b 	.word	0x0807cc7b

0801192c <siprintf>:
 801192c:	b40e      	push	{r1, r2, r3}
 801192e:	b500      	push	{lr}
 8011930:	b09c      	sub	sp, #112	; 0x70
 8011932:	ab1d      	add	r3, sp, #116	; 0x74
 8011934:	9002      	str	r0, [sp, #8]
 8011936:	9006      	str	r0, [sp, #24]
 8011938:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801193c:	4809      	ldr	r0, [pc, #36]	; (8011964 <siprintf+0x38>)
 801193e:	9107      	str	r1, [sp, #28]
 8011940:	9104      	str	r1, [sp, #16]
 8011942:	4909      	ldr	r1, [pc, #36]	; (8011968 <siprintf+0x3c>)
 8011944:	f853 2b04 	ldr.w	r2, [r3], #4
 8011948:	9105      	str	r1, [sp, #20]
 801194a:	6800      	ldr	r0, [r0, #0]
 801194c:	9301      	str	r3, [sp, #4]
 801194e:	a902      	add	r1, sp, #8
 8011950:	f001 fb98 	bl	8013084 <_svfiprintf_r>
 8011954:	9b02      	ldr	r3, [sp, #8]
 8011956:	2200      	movs	r2, #0
 8011958:	701a      	strb	r2, [r3, #0]
 801195a:	b01c      	add	sp, #112	; 0x70
 801195c:	f85d eb04 	ldr.w	lr, [sp], #4
 8011960:	b003      	add	sp, #12
 8011962:	4770      	bx	lr
 8011964:	20000c34 	.word	0x20000c34
 8011968:	ffff0208 	.word	0xffff0208

0801196c <__assert_func>:
 801196c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801196e:	4614      	mov	r4, r2
 8011970:	461a      	mov	r2, r3
 8011972:	4b09      	ldr	r3, [pc, #36]	; (8011998 <__assert_func+0x2c>)
 8011974:	681b      	ldr	r3, [r3, #0]
 8011976:	4605      	mov	r5, r0
 8011978:	68d8      	ldr	r0, [r3, #12]
 801197a:	b14c      	cbz	r4, 8011990 <__assert_func+0x24>
 801197c:	4b07      	ldr	r3, [pc, #28]	; (801199c <__assert_func+0x30>)
 801197e:	9100      	str	r1, [sp, #0]
 8011980:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011984:	4906      	ldr	r1, [pc, #24]	; (80119a0 <__assert_func+0x34>)
 8011986:	462b      	mov	r3, r5
 8011988:	f000 fe88 	bl	801269c <fiprintf>
 801198c:	f001 fea4 	bl	80136d8 <abort>
 8011990:	4b04      	ldr	r3, [pc, #16]	; (80119a4 <__assert_func+0x38>)
 8011992:	461c      	mov	r4, r3
 8011994:	e7f3      	b.n	801197e <__assert_func+0x12>
 8011996:	bf00      	nop
 8011998:	20000c34 	.word	0x20000c34
 801199c:	0807cc8c 	.word	0x0807cc8c
 80119a0:	0807cc99 	.word	0x0807cc99
 80119a4:	0807ccc7 	.word	0x0807ccc7

080119a8 <quorem>:
 80119a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119ac:	6903      	ldr	r3, [r0, #16]
 80119ae:	690c      	ldr	r4, [r1, #16]
 80119b0:	42a3      	cmp	r3, r4
 80119b2:	4607      	mov	r7, r0
 80119b4:	f2c0 8081 	blt.w	8011aba <quorem+0x112>
 80119b8:	3c01      	subs	r4, #1
 80119ba:	f101 0814 	add.w	r8, r1, #20
 80119be:	f100 0514 	add.w	r5, r0, #20
 80119c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80119c6:	9301      	str	r3, [sp, #4]
 80119c8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80119cc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80119d0:	3301      	adds	r3, #1
 80119d2:	429a      	cmp	r2, r3
 80119d4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80119d8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80119dc:	fbb2 f6f3 	udiv	r6, r2, r3
 80119e0:	d331      	bcc.n	8011a46 <quorem+0x9e>
 80119e2:	f04f 0e00 	mov.w	lr, #0
 80119e6:	4640      	mov	r0, r8
 80119e8:	46ac      	mov	ip, r5
 80119ea:	46f2      	mov	sl, lr
 80119ec:	f850 2b04 	ldr.w	r2, [r0], #4
 80119f0:	b293      	uxth	r3, r2
 80119f2:	fb06 e303 	mla	r3, r6, r3, lr
 80119f6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80119fa:	b29b      	uxth	r3, r3
 80119fc:	ebaa 0303 	sub.w	r3, sl, r3
 8011a00:	f8dc a000 	ldr.w	sl, [ip]
 8011a04:	0c12      	lsrs	r2, r2, #16
 8011a06:	fa13 f38a 	uxtah	r3, r3, sl
 8011a0a:	fb06 e202 	mla	r2, r6, r2, lr
 8011a0e:	9300      	str	r3, [sp, #0]
 8011a10:	9b00      	ldr	r3, [sp, #0]
 8011a12:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8011a16:	b292      	uxth	r2, r2
 8011a18:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8011a1c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011a20:	f8bd 3000 	ldrh.w	r3, [sp]
 8011a24:	4581      	cmp	r9, r0
 8011a26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011a2a:	f84c 3b04 	str.w	r3, [ip], #4
 8011a2e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8011a32:	d2db      	bcs.n	80119ec <quorem+0x44>
 8011a34:	f855 300b 	ldr.w	r3, [r5, fp]
 8011a38:	b92b      	cbnz	r3, 8011a46 <quorem+0x9e>
 8011a3a:	9b01      	ldr	r3, [sp, #4]
 8011a3c:	3b04      	subs	r3, #4
 8011a3e:	429d      	cmp	r5, r3
 8011a40:	461a      	mov	r2, r3
 8011a42:	d32e      	bcc.n	8011aa2 <quorem+0xfa>
 8011a44:	613c      	str	r4, [r7, #16]
 8011a46:	4638      	mov	r0, r7
 8011a48:	f001 f8c8 	bl	8012bdc <__mcmp>
 8011a4c:	2800      	cmp	r0, #0
 8011a4e:	db24      	blt.n	8011a9a <quorem+0xf2>
 8011a50:	3601      	adds	r6, #1
 8011a52:	4628      	mov	r0, r5
 8011a54:	f04f 0c00 	mov.w	ip, #0
 8011a58:	f858 2b04 	ldr.w	r2, [r8], #4
 8011a5c:	f8d0 e000 	ldr.w	lr, [r0]
 8011a60:	b293      	uxth	r3, r2
 8011a62:	ebac 0303 	sub.w	r3, ip, r3
 8011a66:	0c12      	lsrs	r2, r2, #16
 8011a68:	fa13 f38e 	uxtah	r3, r3, lr
 8011a6c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8011a70:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011a74:	b29b      	uxth	r3, r3
 8011a76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011a7a:	45c1      	cmp	r9, r8
 8011a7c:	f840 3b04 	str.w	r3, [r0], #4
 8011a80:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8011a84:	d2e8      	bcs.n	8011a58 <quorem+0xb0>
 8011a86:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011a8a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011a8e:	b922      	cbnz	r2, 8011a9a <quorem+0xf2>
 8011a90:	3b04      	subs	r3, #4
 8011a92:	429d      	cmp	r5, r3
 8011a94:	461a      	mov	r2, r3
 8011a96:	d30a      	bcc.n	8011aae <quorem+0x106>
 8011a98:	613c      	str	r4, [r7, #16]
 8011a9a:	4630      	mov	r0, r6
 8011a9c:	b003      	add	sp, #12
 8011a9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011aa2:	6812      	ldr	r2, [r2, #0]
 8011aa4:	3b04      	subs	r3, #4
 8011aa6:	2a00      	cmp	r2, #0
 8011aa8:	d1cc      	bne.n	8011a44 <quorem+0x9c>
 8011aaa:	3c01      	subs	r4, #1
 8011aac:	e7c7      	b.n	8011a3e <quorem+0x96>
 8011aae:	6812      	ldr	r2, [r2, #0]
 8011ab0:	3b04      	subs	r3, #4
 8011ab2:	2a00      	cmp	r2, #0
 8011ab4:	d1f0      	bne.n	8011a98 <quorem+0xf0>
 8011ab6:	3c01      	subs	r4, #1
 8011ab8:	e7eb      	b.n	8011a92 <quorem+0xea>
 8011aba:	2000      	movs	r0, #0
 8011abc:	e7ee      	b.n	8011a9c <quorem+0xf4>
	...

08011ac0 <_dtoa_r>:
 8011ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ac4:	ed2d 8b04 	vpush	{d8-d9}
 8011ac8:	ec57 6b10 	vmov	r6, r7, d0
 8011acc:	b093      	sub	sp, #76	; 0x4c
 8011ace:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8011ad0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8011ad4:	9106      	str	r1, [sp, #24]
 8011ad6:	ee10 aa10 	vmov	sl, s0
 8011ada:	4604      	mov	r4, r0
 8011adc:	9209      	str	r2, [sp, #36]	; 0x24
 8011ade:	930c      	str	r3, [sp, #48]	; 0x30
 8011ae0:	46bb      	mov	fp, r7
 8011ae2:	b975      	cbnz	r5, 8011b02 <_dtoa_r+0x42>
 8011ae4:	2010      	movs	r0, #16
 8011ae6:	f000 fdef 	bl	80126c8 <malloc>
 8011aea:	4602      	mov	r2, r0
 8011aec:	6260      	str	r0, [r4, #36]	; 0x24
 8011aee:	b920      	cbnz	r0, 8011afa <_dtoa_r+0x3a>
 8011af0:	4ba7      	ldr	r3, [pc, #668]	; (8011d90 <_dtoa_r+0x2d0>)
 8011af2:	21ea      	movs	r1, #234	; 0xea
 8011af4:	48a7      	ldr	r0, [pc, #668]	; (8011d94 <_dtoa_r+0x2d4>)
 8011af6:	f7ff ff39 	bl	801196c <__assert_func>
 8011afa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8011afe:	6005      	str	r5, [r0, #0]
 8011b00:	60c5      	str	r5, [r0, #12]
 8011b02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011b04:	6819      	ldr	r1, [r3, #0]
 8011b06:	b151      	cbz	r1, 8011b1e <_dtoa_r+0x5e>
 8011b08:	685a      	ldr	r2, [r3, #4]
 8011b0a:	604a      	str	r2, [r1, #4]
 8011b0c:	2301      	movs	r3, #1
 8011b0e:	4093      	lsls	r3, r2
 8011b10:	608b      	str	r3, [r1, #8]
 8011b12:	4620      	mov	r0, r4
 8011b14:	f000 fe20 	bl	8012758 <_Bfree>
 8011b18:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011b1a:	2200      	movs	r2, #0
 8011b1c:	601a      	str	r2, [r3, #0]
 8011b1e:	1e3b      	subs	r3, r7, #0
 8011b20:	bfaa      	itet	ge
 8011b22:	2300      	movge	r3, #0
 8011b24:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8011b28:	f8c8 3000 	strge.w	r3, [r8]
 8011b2c:	4b9a      	ldr	r3, [pc, #616]	; (8011d98 <_dtoa_r+0x2d8>)
 8011b2e:	bfbc      	itt	lt
 8011b30:	2201      	movlt	r2, #1
 8011b32:	f8c8 2000 	strlt.w	r2, [r8]
 8011b36:	ea33 030b 	bics.w	r3, r3, fp
 8011b3a:	d11b      	bne.n	8011b74 <_dtoa_r+0xb4>
 8011b3c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011b3e:	f242 730f 	movw	r3, #9999	; 0x270f
 8011b42:	6013      	str	r3, [r2, #0]
 8011b44:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011b48:	4333      	orrs	r3, r6
 8011b4a:	f000 8592 	beq.w	8012672 <_dtoa_r+0xbb2>
 8011b4e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011b50:	b963      	cbnz	r3, 8011b6c <_dtoa_r+0xac>
 8011b52:	4b92      	ldr	r3, [pc, #584]	; (8011d9c <_dtoa_r+0x2dc>)
 8011b54:	e022      	b.n	8011b9c <_dtoa_r+0xdc>
 8011b56:	4b92      	ldr	r3, [pc, #584]	; (8011da0 <_dtoa_r+0x2e0>)
 8011b58:	9301      	str	r3, [sp, #4]
 8011b5a:	3308      	adds	r3, #8
 8011b5c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8011b5e:	6013      	str	r3, [r2, #0]
 8011b60:	9801      	ldr	r0, [sp, #4]
 8011b62:	b013      	add	sp, #76	; 0x4c
 8011b64:	ecbd 8b04 	vpop	{d8-d9}
 8011b68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b6c:	4b8b      	ldr	r3, [pc, #556]	; (8011d9c <_dtoa_r+0x2dc>)
 8011b6e:	9301      	str	r3, [sp, #4]
 8011b70:	3303      	adds	r3, #3
 8011b72:	e7f3      	b.n	8011b5c <_dtoa_r+0x9c>
 8011b74:	2200      	movs	r2, #0
 8011b76:	2300      	movs	r3, #0
 8011b78:	4650      	mov	r0, sl
 8011b7a:	4659      	mov	r1, fp
 8011b7c:	f7f5 f81c 	bl	8006bb8 <__aeabi_dcmpeq>
 8011b80:	ec4b ab19 	vmov	d9, sl, fp
 8011b84:	4680      	mov	r8, r0
 8011b86:	b158      	cbz	r0, 8011ba0 <_dtoa_r+0xe0>
 8011b88:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011b8a:	2301      	movs	r3, #1
 8011b8c:	6013      	str	r3, [r2, #0]
 8011b8e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011b90:	2b00      	cmp	r3, #0
 8011b92:	f000 856b 	beq.w	801266c <_dtoa_r+0xbac>
 8011b96:	4883      	ldr	r0, [pc, #524]	; (8011da4 <_dtoa_r+0x2e4>)
 8011b98:	6018      	str	r0, [r3, #0]
 8011b9a:	1e43      	subs	r3, r0, #1
 8011b9c:	9301      	str	r3, [sp, #4]
 8011b9e:	e7df      	b.n	8011b60 <_dtoa_r+0xa0>
 8011ba0:	ec4b ab10 	vmov	d0, sl, fp
 8011ba4:	aa10      	add	r2, sp, #64	; 0x40
 8011ba6:	a911      	add	r1, sp, #68	; 0x44
 8011ba8:	4620      	mov	r0, r4
 8011baa:	f001 f8bd 	bl	8012d28 <__d2b>
 8011bae:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8011bb2:	ee08 0a10 	vmov	s16, r0
 8011bb6:	2d00      	cmp	r5, #0
 8011bb8:	f000 8084 	beq.w	8011cc4 <_dtoa_r+0x204>
 8011bbc:	ee19 3a90 	vmov	r3, s19
 8011bc0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011bc4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8011bc8:	4656      	mov	r6, sl
 8011bca:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8011bce:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8011bd2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8011bd6:	4b74      	ldr	r3, [pc, #464]	; (8011da8 <_dtoa_r+0x2e8>)
 8011bd8:	2200      	movs	r2, #0
 8011bda:	4630      	mov	r0, r6
 8011bdc:	4639      	mov	r1, r7
 8011bde:	f7f4 fbcb 	bl	8006378 <__aeabi_dsub>
 8011be2:	a365      	add	r3, pc, #404	; (adr r3, 8011d78 <_dtoa_r+0x2b8>)
 8011be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011be8:	f7f4 fd7e 	bl	80066e8 <__aeabi_dmul>
 8011bec:	a364      	add	r3, pc, #400	; (adr r3, 8011d80 <_dtoa_r+0x2c0>)
 8011bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bf2:	f7f4 fbc3 	bl	800637c <__adddf3>
 8011bf6:	4606      	mov	r6, r0
 8011bf8:	4628      	mov	r0, r5
 8011bfa:	460f      	mov	r7, r1
 8011bfc:	f7f4 fd0a 	bl	8006614 <__aeabi_i2d>
 8011c00:	a361      	add	r3, pc, #388	; (adr r3, 8011d88 <_dtoa_r+0x2c8>)
 8011c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c06:	f7f4 fd6f 	bl	80066e8 <__aeabi_dmul>
 8011c0a:	4602      	mov	r2, r0
 8011c0c:	460b      	mov	r3, r1
 8011c0e:	4630      	mov	r0, r6
 8011c10:	4639      	mov	r1, r7
 8011c12:	f7f4 fbb3 	bl	800637c <__adddf3>
 8011c16:	4606      	mov	r6, r0
 8011c18:	460f      	mov	r7, r1
 8011c1a:	f7f5 f815 	bl	8006c48 <__aeabi_d2iz>
 8011c1e:	2200      	movs	r2, #0
 8011c20:	9000      	str	r0, [sp, #0]
 8011c22:	2300      	movs	r3, #0
 8011c24:	4630      	mov	r0, r6
 8011c26:	4639      	mov	r1, r7
 8011c28:	f7f4 ffd0 	bl	8006bcc <__aeabi_dcmplt>
 8011c2c:	b150      	cbz	r0, 8011c44 <_dtoa_r+0x184>
 8011c2e:	9800      	ldr	r0, [sp, #0]
 8011c30:	f7f4 fcf0 	bl	8006614 <__aeabi_i2d>
 8011c34:	4632      	mov	r2, r6
 8011c36:	463b      	mov	r3, r7
 8011c38:	f7f4 ffbe 	bl	8006bb8 <__aeabi_dcmpeq>
 8011c3c:	b910      	cbnz	r0, 8011c44 <_dtoa_r+0x184>
 8011c3e:	9b00      	ldr	r3, [sp, #0]
 8011c40:	3b01      	subs	r3, #1
 8011c42:	9300      	str	r3, [sp, #0]
 8011c44:	9b00      	ldr	r3, [sp, #0]
 8011c46:	2b16      	cmp	r3, #22
 8011c48:	d85a      	bhi.n	8011d00 <_dtoa_r+0x240>
 8011c4a:	9a00      	ldr	r2, [sp, #0]
 8011c4c:	4b57      	ldr	r3, [pc, #348]	; (8011dac <_dtoa_r+0x2ec>)
 8011c4e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c56:	ec51 0b19 	vmov	r0, r1, d9
 8011c5a:	f7f4 ffb7 	bl	8006bcc <__aeabi_dcmplt>
 8011c5e:	2800      	cmp	r0, #0
 8011c60:	d050      	beq.n	8011d04 <_dtoa_r+0x244>
 8011c62:	9b00      	ldr	r3, [sp, #0]
 8011c64:	3b01      	subs	r3, #1
 8011c66:	9300      	str	r3, [sp, #0]
 8011c68:	2300      	movs	r3, #0
 8011c6a:	930b      	str	r3, [sp, #44]	; 0x2c
 8011c6c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011c6e:	1b5d      	subs	r5, r3, r5
 8011c70:	1e6b      	subs	r3, r5, #1
 8011c72:	9305      	str	r3, [sp, #20]
 8011c74:	bf45      	ittet	mi
 8011c76:	f1c5 0301 	rsbmi	r3, r5, #1
 8011c7a:	9304      	strmi	r3, [sp, #16]
 8011c7c:	2300      	movpl	r3, #0
 8011c7e:	2300      	movmi	r3, #0
 8011c80:	bf4c      	ite	mi
 8011c82:	9305      	strmi	r3, [sp, #20]
 8011c84:	9304      	strpl	r3, [sp, #16]
 8011c86:	9b00      	ldr	r3, [sp, #0]
 8011c88:	2b00      	cmp	r3, #0
 8011c8a:	db3d      	blt.n	8011d08 <_dtoa_r+0x248>
 8011c8c:	9b05      	ldr	r3, [sp, #20]
 8011c8e:	9a00      	ldr	r2, [sp, #0]
 8011c90:	920a      	str	r2, [sp, #40]	; 0x28
 8011c92:	4413      	add	r3, r2
 8011c94:	9305      	str	r3, [sp, #20]
 8011c96:	2300      	movs	r3, #0
 8011c98:	9307      	str	r3, [sp, #28]
 8011c9a:	9b06      	ldr	r3, [sp, #24]
 8011c9c:	2b09      	cmp	r3, #9
 8011c9e:	f200 8089 	bhi.w	8011db4 <_dtoa_r+0x2f4>
 8011ca2:	2b05      	cmp	r3, #5
 8011ca4:	bfc4      	itt	gt
 8011ca6:	3b04      	subgt	r3, #4
 8011ca8:	9306      	strgt	r3, [sp, #24]
 8011caa:	9b06      	ldr	r3, [sp, #24]
 8011cac:	f1a3 0302 	sub.w	r3, r3, #2
 8011cb0:	bfcc      	ite	gt
 8011cb2:	2500      	movgt	r5, #0
 8011cb4:	2501      	movle	r5, #1
 8011cb6:	2b03      	cmp	r3, #3
 8011cb8:	f200 8087 	bhi.w	8011dca <_dtoa_r+0x30a>
 8011cbc:	e8df f003 	tbb	[pc, r3]
 8011cc0:	59383a2d 	.word	0x59383a2d
 8011cc4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8011cc8:	441d      	add	r5, r3
 8011cca:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8011cce:	2b20      	cmp	r3, #32
 8011cd0:	bfc1      	itttt	gt
 8011cd2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8011cd6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8011cda:	fa0b f303 	lslgt.w	r3, fp, r3
 8011cde:	fa26 f000 	lsrgt.w	r0, r6, r0
 8011ce2:	bfda      	itte	le
 8011ce4:	f1c3 0320 	rsble	r3, r3, #32
 8011ce8:	fa06 f003 	lslle.w	r0, r6, r3
 8011cec:	4318      	orrgt	r0, r3
 8011cee:	f7f4 fc81 	bl	80065f4 <__aeabi_ui2d>
 8011cf2:	2301      	movs	r3, #1
 8011cf4:	4606      	mov	r6, r0
 8011cf6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8011cfa:	3d01      	subs	r5, #1
 8011cfc:	930e      	str	r3, [sp, #56]	; 0x38
 8011cfe:	e76a      	b.n	8011bd6 <_dtoa_r+0x116>
 8011d00:	2301      	movs	r3, #1
 8011d02:	e7b2      	b.n	8011c6a <_dtoa_r+0x1aa>
 8011d04:	900b      	str	r0, [sp, #44]	; 0x2c
 8011d06:	e7b1      	b.n	8011c6c <_dtoa_r+0x1ac>
 8011d08:	9b04      	ldr	r3, [sp, #16]
 8011d0a:	9a00      	ldr	r2, [sp, #0]
 8011d0c:	1a9b      	subs	r3, r3, r2
 8011d0e:	9304      	str	r3, [sp, #16]
 8011d10:	4253      	negs	r3, r2
 8011d12:	9307      	str	r3, [sp, #28]
 8011d14:	2300      	movs	r3, #0
 8011d16:	930a      	str	r3, [sp, #40]	; 0x28
 8011d18:	e7bf      	b.n	8011c9a <_dtoa_r+0x1da>
 8011d1a:	2300      	movs	r3, #0
 8011d1c:	9308      	str	r3, [sp, #32]
 8011d1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011d20:	2b00      	cmp	r3, #0
 8011d22:	dc55      	bgt.n	8011dd0 <_dtoa_r+0x310>
 8011d24:	2301      	movs	r3, #1
 8011d26:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8011d2a:	461a      	mov	r2, r3
 8011d2c:	9209      	str	r2, [sp, #36]	; 0x24
 8011d2e:	e00c      	b.n	8011d4a <_dtoa_r+0x28a>
 8011d30:	2301      	movs	r3, #1
 8011d32:	e7f3      	b.n	8011d1c <_dtoa_r+0x25c>
 8011d34:	2300      	movs	r3, #0
 8011d36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011d38:	9308      	str	r3, [sp, #32]
 8011d3a:	9b00      	ldr	r3, [sp, #0]
 8011d3c:	4413      	add	r3, r2
 8011d3e:	9302      	str	r3, [sp, #8]
 8011d40:	3301      	adds	r3, #1
 8011d42:	2b01      	cmp	r3, #1
 8011d44:	9303      	str	r3, [sp, #12]
 8011d46:	bfb8      	it	lt
 8011d48:	2301      	movlt	r3, #1
 8011d4a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8011d4c:	2200      	movs	r2, #0
 8011d4e:	6042      	str	r2, [r0, #4]
 8011d50:	2204      	movs	r2, #4
 8011d52:	f102 0614 	add.w	r6, r2, #20
 8011d56:	429e      	cmp	r6, r3
 8011d58:	6841      	ldr	r1, [r0, #4]
 8011d5a:	d93d      	bls.n	8011dd8 <_dtoa_r+0x318>
 8011d5c:	4620      	mov	r0, r4
 8011d5e:	f000 fcbb 	bl	80126d8 <_Balloc>
 8011d62:	9001      	str	r0, [sp, #4]
 8011d64:	2800      	cmp	r0, #0
 8011d66:	d13b      	bne.n	8011de0 <_dtoa_r+0x320>
 8011d68:	4b11      	ldr	r3, [pc, #68]	; (8011db0 <_dtoa_r+0x2f0>)
 8011d6a:	4602      	mov	r2, r0
 8011d6c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8011d70:	e6c0      	b.n	8011af4 <_dtoa_r+0x34>
 8011d72:	2301      	movs	r3, #1
 8011d74:	e7df      	b.n	8011d36 <_dtoa_r+0x276>
 8011d76:	bf00      	nop
 8011d78:	636f4361 	.word	0x636f4361
 8011d7c:	3fd287a7 	.word	0x3fd287a7
 8011d80:	8b60c8b3 	.word	0x8b60c8b3
 8011d84:	3fc68a28 	.word	0x3fc68a28
 8011d88:	509f79fb 	.word	0x509f79fb
 8011d8c:	3fd34413 	.word	0x3fd34413
 8011d90:	0807ccd5 	.word	0x0807ccd5
 8011d94:	0807ccec 	.word	0x0807ccec
 8011d98:	7ff00000 	.word	0x7ff00000
 8011d9c:	0807ccd1 	.word	0x0807ccd1
 8011da0:	0807ccc8 	.word	0x0807ccc8
 8011da4:	0807cc69 	.word	0x0807cc69
 8011da8:	3ff80000 	.word	0x3ff80000
 8011dac:	0807cde0 	.word	0x0807cde0
 8011db0:	0807cd47 	.word	0x0807cd47
 8011db4:	2501      	movs	r5, #1
 8011db6:	2300      	movs	r3, #0
 8011db8:	9306      	str	r3, [sp, #24]
 8011dba:	9508      	str	r5, [sp, #32]
 8011dbc:	f04f 33ff 	mov.w	r3, #4294967295
 8011dc0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8011dc4:	2200      	movs	r2, #0
 8011dc6:	2312      	movs	r3, #18
 8011dc8:	e7b0      	b.n	8011d2c <_dtoa_r+0x26c>
 8011dca:	2301      	movs	r3, #1
 8011dcc:	9308      	str	r3, [sp, #32]
 8011dce:	e7f5      	b.n	8011dbc <_dtoa_r+0x2fc>
 8011dd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011dd2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8011dd6:	e7b8      	b.n	8011d4a <_dtoa_r+0x28a>
 8011dd8:	3101      	adds	r1, #1
 8011dda:	6041      	str	r1, [r0, #4]
 8011ddc:	0052      	lsls	r2, r2, #1
 8011dde:	e7b8      	b.n	8011d52 <_dtoa_r+0x292>
 8011de0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011de2:	9a01      	ldr	r2, [sp, #4]
 8011de4:	601a      	str	r2, [r3, #0]
 8011de6:	9b03      	ldr	r3, [sp, #12]
 8011de8:	2b0e      	cmp	r3, #14
 8011dea:	f200 809d 	bhi.w	8011f28 <_dtoa_r+0x468>
 8011dee:	2d00      	cmp	r5, #0
 8011df0:	f000 809a 	beq.w	8011f28 <_dtoa_r+0x468>
 8011df4:	9b00      	ldr	r3, [sp, #0]
 8011df6:	2b00      	cmp	r3, #0
 8011df8:	dd32      	ble.n	8011e60 <_dtoa_r+0x3a0>
 8011dfa:	4ab7      	ldr	r2, [pc, #732]	; (80120d8 <_dtoa_r+0x618>)
 8011dfc:	f003 030f 	and.w	r3, r3, #15
 8011e00:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8011e04:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011e08:	9b00      	ldr	r3, [sp, #0]
 8011e0a:	05d8      	lsls	r0, r3, #23
 8011e0c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8011e10:	d516      	bpl.n	8011e40 <_dtoa_r+0x380>
 8011e12:	4bb2      	ldr	r3, [pc, #712]	; (80120dc <_dtoa_r+0x61c>)
 8011e14:	ec51 0b19 	vmov	r0, r1, d9
 8011e18:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8011e1c:	f7f4 fd8e 	bl	800693c <__aeabi_ddiv>
 8011e20:	f007 070f 	and.w	r7, r7, #15
 8011e24:	4682      	mov	sl, r0
 8011e26:	468b      	mov	fp, r1
 8011e28:	2503      	movs	r5, #3
 8011e2a:	4eac      	ldr	r6, [pc, #688]	; (80120dc <_dtoa_r+0x61c>)
 8011e2c:	b957      	cbnz	r7, 8011e44 <_dtoa_r+0x384>
 8011e2e:	4642      	mov	r2, r8
 8011e30:	464b      	mov	r3, r9
 8011e32:	4650      	mov	r0, sl
 8011e34:	4659      	mov	r1, fp
 8011e36:	f7f4 fd81 	bl	800693c <__aeabi_ddiv>
 8011e3a:	4682      	mov	sl, r0
 8011e3c:	468b      	mov	fp, r1
 8011e3e:	e028      	b.n	8011e92 <_dtoa_r+0x3d2>
 8011e40:	2502      	movs	r5, #2
 8011e42:	e7f2      	b.n	8011e2a <_dtoa_r+0x36a>
 8011e44:	07f9      	lsls	r1, r7, #31
 8011e46:	d508      	bpl.n	8011e5a <_dtoa_r+0x39a>
 8011e48:	4640      	mov	r0, r8
 8011e4a:	4649      	mov	r1, r9
 8011e4c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8011e50:	f7f4 fc4a 	bl	80066e8 <__aeabi_dmul>
 8011e54:	3501      	adds	r5, #1
 8011e56:	4680      	mov	r8, r0
 8011e58:	4689      	mov	r9, r1
 8011e5a:	107f      	asrs	r7, r7, #1
 8011e5c:	3608      	adds	r6, #8
 8011e5e:	e7e5      	b.n	8011e2c <_dtoa_r+0x36c>
 8011e60:	f000 809b 	beq.w	8011f9a <_dtoa_r+0x4da>
 8011e64:	9b00      	ldr	r3, [sp, #0]
 8011e66:	4f9d      	ldr	r7, [pc, #628]	; (80120dc <_dtoa_r+0x61c>)
 8011e68:	425e      	negs	r6, r3
 8011e6a:	4b9b      	ldr	r3, [pc, #620]	; (80120d8 <_dtoa_r+0x618>)
 8011e6c:	f006 020f 	and.w	r2, r6, #15
 8011e70:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e78:	ec51 0b19 	vmov	r0, r1, d9
 8011e7c:	f7f4 fc34 	bl	80066e8 <__aeabi_dmul>
 8011e80:	1136      	asrs	r6, r6, #4
 8011e82:	4682      	mov	sl, r0
 8011e84:	468b      	mov	fp, r1
 8011e86:	2300      	movs	r3, #0
 8011e88:	2502      	movs	r5, #2
 8011e8a:	2e00      	cmp	r6, #0
 8011e8c:	d17a      	bne.n	8011f84 <_dtoa_r+0x4c4>
 8011e8e:	2b00      	cmp	r3, #0
 8011e90:	d1d3      	bne.n	8011e3a <_dtoa_r+0x37a>
 8011e92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011e94:	2b00      	cmp	r3, #0
 8011e96:	f000 8082 	beq.w	8011f9e <_dtoa_r+0x4de>
 8011e9a:	4b91      	ldr	r3, [pc, #580]	; (80120e0 <_dtoa_r+0x620>)
 8011e9c:	2200      	movs	r2, #0
 8011e9e:	4650      	mov	r0, sl
 8011ea0:	4659      	mov	r1, fp
 8011ea2:	f7f4 fe93 	bl	8006bcc <__aeabi_dcmplt>
 8011ea6:	2800      	cmp	r0, #0
 8011ea8:	d079      	beq.n	8011f9e <_dtoa_r+0x4de>
 8011eaa:	9b03      	ldr	r3, [sp, #12]
 8011eac:	2b00      	cmp	r3, #0
 8011eae:	d076      	beq.n	8011f9e <_dtoa_r+0x4de>
 8011eb0:	9b02      	ldr	r3, [sp, #8]
 8011eb2:	2b00      	cmp	r3, #0
 8011eb4:	dd36      	ble.n	8011f24 <_dtoa_r+0x464>
 8011eb6:	9b00      	ldr	r3, [sp, #0]
 8011eb8:	4650      	mov	r0, sl
 8011eba:	4659      	mov	r1, fp
 8011ebc:	1e5f      	subs	r7, r3, #1
 8011ebe:	2200      	movs	r2, #0
 8011ec0:	4b88      	ldr	r3, [pc, #544]	; (80120e4 <_dtoa_r+0x624>)
 8011ec2:	f7f4 fc11 	bl	80066e8 <__aeabi_dmul>
 8011ec6:	9e02      	ldr	r6, [sp, #8]
 8011ec8:	4682      	mov	sl, r0
 8011eca:	468b      	mov	fp, r1
 8011ecc:	3501      	adds	r5, #1
 8011ece:	4628      	mov	r0, r5
 8011ed0:	f7f4 fba0 	bl	8006614 <__aeabi_i2d>
 8011ed4:	4652      	mov	r2, sl
 8011ed6:	465b      	mov	r3, fp
 8011ed8:	f7f4 fc06 	bl	80066e8 <__aeabi_dmul>
 8011edc:	4b82      	ldr	r3, [pc, #520]	; (80120e8 <_dtoa_r+0x628>)
 8011ede:	2200      	movs	r2, #0
 8011ee0:	f7f4 fa4c 	bl	800637c <__adddf3>
 8011ee4:	46d0      	mov	r8, sl
 8011ee6:	46d9      	mov	r9, fp
 8011ee8:	4682      	mov	sl, r0
 8011eea:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8011eee:	2e00      	cmp	r6, #0
 8011ef0:	d158      	bne.n	8011fa4 <_dtoa_r+0x4e4>
 8011ef2:	4b7e      	ldr	r3, [pc, #504]	; (80120ec <_dtoa_r+0x62c>)
 8011ef4:	2200      	movs	r2, #0
 8011ef6:	4640      	mov	r0, r8
 8011ef8:	4649      	mov	r1, r9
 8011efa:	f7f4 fa3d 	bl	8006378 <__aeabi_dsub>
 8011efe:	4652      	mov	r2, sl
 8011f00:	465b      	mov	r3, fp
 8011f02:	4680      	mov	r8, r0
 8011f04:	4689      	mov	r9, r1
 8011f06:	f7f4 fe7f 	bl	8006c08 <__aeabi_dcmpgt>
 8011f0a:	2800      	cmp	r0, #0
 8011f0c:	f040 8295 	bne.w	801243a <_dtoa_r+0x97a>
 8011f10:	4652      	mov	r2, sl
 8011f12:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8011f16:	4640      	mov	r0, r8
 8011f18:	4649      	mov	r1, r9
 8011f1a:	f7f4 fe57 	bl	8006bcc <__aeabi_dcmplt>
 8011f1e:	2800      	cmp	r0, #0
 8011f20:	f040 8289 	bne.w	8012436 <_dtoa_r+0x976>
 8011f24:	ec5b ab19 	vmov	sl, fp, d9
 8011f28:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011f2a:	2b00      	cmp	r3, #0
 8011f2c:	f2c0 8148 	blt.w	80121c0 <_dtoa_r+0x700>
 8011f30:	9a00      	ldr	r2, [sp, #0]
 8011f32:	2a0e      	cmp	r2, #14
 8011f34:	f300 8144 	bgt.w	80121c0 <_dtoa_r+0x700>
 8011f38:	4b67      	ldr	r3, [pc, #412]	; (80120d8 <_dtoa_r+0x618>)
 8011f3a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011f3e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011f42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011f44:	2b00      	cmp	r3, #0
 8011f46:	f280 80d5 	bge.w	80120f4 <_dtoa_r+0x634>
 8011f4a:	9b03      	ldr	r3, [sp, #12]
 8011f4c:	2b00      	cmp	r3, #0
 8011f4e:	f300 80d1 	bgt.w	80120f4 <_dtoa_r+0x634>
 8011f52:	f040 826f 	bne.w	8012434 <_dtoa_r+0x974>
 8011f56:	4b65      	ldr	r3, [pc, #404]	; (80120ec <_dtoa_r+0x62c>)
 8011f58:	2200      	movs	r2, #0
 8011f5a:	4640      	mov	r0, r8
 8011f5c:	4649      	mov	r1, r9
 8011f5e:	f7f4 fbc3 	bl	80066e8 <__aeabi_dmul>
 8011f62:	4652      	mov	r2, sl
 8011f64:	465b      	mov	r3, fp
 8011f66:	f7f4 fe45 	bl	8006bf4 <__aeabi_dcmpge>
 8011f6a:	9e03      	ldr	r6, [sp, #12]
 8011f6c:	4637      	mov	r7, r6
 8011f6e:	2800      	cmp	r0, #0
 8011f70:	f040 8245 	bne.w	80123fe <_dtoa_r+0x93e>
 8011f74:	9d01      	ldr	r5, [sp, #4]
 8011f76:	2331      	movs	r3, #49	; 0x31
 8011f78:	f805 3b01 	strb.w	r3, [r5], #1
 8011f7c:	9b00      	ldr	r3, [sp, #0]
 8011f7e:	3301      	adds	r3, #1
 8011f80:	9300      	str	r3, [sp, #0]
 8011f82:	e240      	b.n	8012406 <_dtoa_r+0x946>
 8011f84:	07f2      	lsls	r2, r6, #31
 8011f86:	d505      	bpl.n	8011f94 <_dtoa_r+0x4d4>
 8011f88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011f8c:	f7f4 fbac 	bl	80066e8 <__aeabi_dmul>
 8011f90:	3501      	adds	r5, #1
 8011f92:	2301      	movs	r3, #1
 8011f94:	1076      	asrs	r6, r6, #1
 8011f96:	3708      	adds	r7, #8
 8011f98:	e777      	b.n	8011e8a <_dtoa_r+0x3ca>
 8011f9a:	2502      	movs	r5, #2
 8011f9c:	e779      	b.n	8011e92 <_dtoa_r+0x3d2>
 8011f9e:	9f00      	ldr	r7, [sp, #0]
 8011fa0:	9e03      	ldr	r6, [sp, #12]
 8011fa2:	e794      	b.n	8011ece <_dtoa_r+0x40e>
 8011fa4:	9901      	ldr	r1, [sp, #4]
 8011fa6:	4b4c      	ldr	r3, [pc, #304]	; (80120d8 <_dtoa_r+0x618>)
 8011fa8:	4431      	add	r1, r6
 8011faa:	910d      	str	r1, [sp, #52]	; 0x34
 8011fac:	9908      	ldr	r1, [sp, #32]
 8011fae:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8011fb2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8011fb6:	2900      	cmp	r1, #0
 8011fb8:	d043      	beq.n	8012042 <_dtoa_r+0x582>
 8011fba:	494d      	ldr	r1, [pc, #308]	; (80120f0 <_dtoa_r+0x630>)
 8011fbc:	2000      	movs	r0, #0
 8011fbe:	f7f4 fcbd 	bl	800693c <__aeabi_ddiv>
 8011fc2:	4652      	mov	r2, sl
 8011fc4:	465b      	mov	r3, fp
 8011fc6:	f7f4 f9d7 	bl	8006378 <__aeabi_dsub>
 8011fca:	9d01      	ldr	r5, [sp, #4]
 8011fcc:	4682      	mov	sl, r0
 8011fce:	468b      	mov	fp, r1
 8011fd0:	4649      	mov	r1, r9
 8011fd2:	4640      	mov	r0, r8
 8011fd4:	f7f4 fe38 	bl	8006c48 <__aeabi_d2iz>
 8011fd8:	4606      	mov	r6, r0
 8011fda:	f7f4 fb1b 	bl	8006614 <__aeabi_i2d>
 8011fde:	4602      	mov	r2, r0
 8011fe0:	460b      	mov	r3, r1
 8011fe2:	4640      	mov	r0, r8
 8011fe4:	4649      	mov	r1, r9
 8011fe6:	f7f4 f9c7 	bl	8006378 <__aeabi_dsub>
 8011fea:	3630      	adds	r6, #48	; 0x30
 8011fec:	f805 6b01 	strb.w	r6, [r5], #1
 8011ff0:	4652      	mov	r2, sl
 8011ff2:	465b      	mov	r3, fp
 8011ff4:	4680      	mov	r8, r0
 8011ff6:	4689      	mov	r9, r1
 8011ff8:	f7f4 fde8 	bl	8006bcc <__aeabi_dcmplt>
 8011ffc:	2800      	cmp	r0, #0
 8011ffe:	d163      	bne.n	80120c8 <_dtoa_r+0x608>
 8012000:	4642      	mov	r2, r8
 8012002:	464b      	mov	r3, r9
 8012004:	4936      	ldr	r1, [pc, #216]	; (80120e0 <_dtoa_r+0x620>)
 8012006:	2000      	movs	r0, #0
 8012008:	f7f4 f9b6 	bl	8006378 <__aeabi_dsub>
 801200c:	4652      	mov	r2, sl
 801200e:	465b      	mov	r3, fp
 8012010:	f7f4 fddc 	bl	8006bcc <__aeabi_dcmplt>
 8012014:	2800      	cmp	r0, #0
 8012016:	f040 80b5 	bne.w	8012184 <_dtoa_r+0x6c4>
 801201a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801201c:	429d      	cmp	r5, r3
 801201e:	d081      	beq.n	8011f24 <_dtoa_r+0x464>
 8012020:	4b30      	ldr	r3, [pc, #192]	; (80120e4 <_dtoa_r+0x624>)
 8012022:	2200      	movs	r2, #0
 8012024:	4650      	mov	r0, sl
 8012026:	4659      	mov	r1, fp
 8012028:	f7f4 fb5e 	bl	80066e8 <__aeabi_dmul>
 801202c:	4b2d      	ldr	r3, [pc, #180]	; (80120e4 <_dtoa_r+0x624>)
 801202e:	4682      	mov	sl, r0
 8012030:	468b      	mov	fp, r1
 8012032:	4640      	mov	r0, r8
 8012034:	4649      	mov	r1, r9
 8012036:	2200      	movs	r2, #0
 8012038:	f7f4 fb56 	bl	80066e8 <__aeabi_dmul>
 801203c:	4680      	mov	r8, r0
 801203e:	4689      	mov	r9, r1
 8012040:	e7c6      	b.n	8011fd0 <_dtoa_r+0x510>
 8012042:	4650      	mov	r0, sl
 8012044:	4659      	mov	r1, fp
 8012046:	f7f4 fb4f 	bl	80066e8 <__aeabi_dmul>
 801204a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801204c:	9d01      	ldr	r5, [sp, #4]
 801204e:	930f      	str	r3, [sp, #60]	; 0x3c
 8012050:	4682      	mov	sl, r0
 8012052:	468b      	mov	fp, r1
 8012054:	4649      	mov	r1, r9
 8012056:	4640      	mov	r0, r8
 8012058:	f7f4 fdf6 	bl	8006c48 <__aeabi_d2iz>
 801205c:	4606      	mov	r6, r0
 801205e:	f7f4 fad9 	bl	8006614 <__aeabi_i2d>
 8012062:	3630      	adds	r6, #48	; 0x30
 8012064:	4602      	mov	r2, r0
 8012066:	460b      	mov	r3, r1
 8012068:	4640      	mov	r0, r8
 801206a:	4649      	mov	r1, r9
 801206c:	f7f4 f984 	bl	8006378 <__aeabi_dsub>
 8012070:	f805 6b01 	strb.w	r6, [r5], #1
 8012074:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012076:	429d      	cmp	r5, r3
 8012078:	4680      	mov	r8, r0
 801207a:	4689      	mov	r9, r1
 801207c:	f04f 0200 	mov.w	r2, #0
 8012080:	d124      	bne.n	80120cc <_dtoa_r+0x60c>
 8012082:	4b1b      	ldr	r3, [pc, #108]	; (80120f0 <_dtoa_r+0x630>)
 8012084:	4650      	mov	r0, sl
 8012086:	4659      	mov	r1, fp
 8012088:	f7f4 f978 	bl	800637c <__adddf3>
 801208c:	4602      	mov	r2, r0
 801208e:	460b      	mov	r3, r1
 8012090:	4640      	mov	r0, r8
 8012092:	4649      	mov	r1, r9
 8012094:	f7f4 fdb8 	bl	8006c08 <__aeabi_dcmpgt>
 8012098:	2800      	cmp	r0, #0
 801209a:	d173      	bne.n	8012184 <_dtoa_r+0x6c4>
 801209c:	4652      	mov	r2, sl
 801209e:	465b      	mov	r3, fp
 80120a0:	4913      	ldr	r1, [pc, #76]	; (80120f0 <_dtoa_r+0x630>)
 80120a2:	2000      	movs	r0, #0
 80120a4:	f7f4 f968 	bl	8006378 <__aeabi_dsub>
 80120a8:	4602      	mov	r2, r0
 80120aa:	460b      	mov	r3, r1
 80120ac:	4640      	mov	r0, r8
 80120ae:	4649      	mov	r1, r9
 80120b0:	f7f4 fd8c 	bl	8006bcc <__aeabi_dcmplt>
 80120b4:	2800      	cmp	r0, #0
 80120b6:	f43f af35 	beq.w	8011f24 <_dtoa_r+0x464>
 80120ba:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80120bc:	1e6b      	subs	r3, r5, #1
 80120be:	930f      	str	r3, [sp, #60]	; 0x3c
 80120c0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80120c4:	2b30      	cmp	r3, #48	; 0x30
 80120c6:	d0f8      	beq.n	80120ba <_dtoa_r+0x5fa>
 80120c8:	9700      	str	r7, [sp, #0]
 80120ca:	e049      	b.n	8012160 <_dtoa_r+0x6a0>
 80120cc:	4b05      	ldr	r3, [pc, #20]	; (80120e4 <_dtoa_r+0x624>)
 80120ce:	f7f4 fb0b 	bl	80066e8 <__aeabi_dmul>
 80120d2:	4680      	mov	r8, r0
 80120d4:	4689      	mov	r9, r1
 80120d6:	e7bd      	b.n	8012054 <_dtoa_r+0x594>
 80120d8:	0807cde0 	.word	0x0807cde0
 80120dc:	0807cdb8 	.word	0x0807cdb8
 80120e0:	3ff00000 	.word	0x3ff00000
 80120e4:	40240000 	.word	0x40240000
 80120e8:	401c0000 	.word	0x401c0000
 80120ec:	40140000 	.word	0x40140000
 80120f0:	3fe00000 	.word	0x3fe00000
 80120f4:	9d01      	ldr	r5, [sp, #4]
 80120f6:	4656      	mov	r6, sl
 80120f8:	465f      	mov	r7, fp
 80120fa:	4642      	mov	r2, r8
 80120fc:	464b      	mov	r3, r9
 80120fe:	4630      	mov	r0, r6
 8012100:	4639      	mov	r1, r7
 8012102:	f7f4 fc1b 	bl	800693c <__aeabi_ddiv>
 8012106:	f7f4 fd9f 	bl	8006c48 <__aeabi_d2iz>
 801210a:	4682      	mov	sl, r0
 801210c:	f7f4 fa82 	bl	8006614 <__aeabi_i2d>
 8012110:	4642      	mov	r2, r8
 8012112:	464b      	mov	r3, r9
 8012114:	f7f4 fae8 	bl	80066e8 <__aeabi_dmul>
 8012118:	4602      	mov	r2, r0
 801211a:	460b      	mov	r3, r1
 801211c:	4630      	mov	r0, r6
 801211e:	4639      	mov	r1, r7
 8012120:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8012124:	f7f4 f928 	bl	8006378 <__aeabi_dsub>
 8012128:	f805 6b01 	strb.w	r6, [r5], #1
 801212c:	9e01      	ldr	r6, [sp, #4]
 801212e:	9f03      	ldr	r7, [sp, #12]
 8012130:	1bae      	subs	r6, r5, r6
 8012132:	42b7      	cmp	r7, r6
 8012134:	4602      	mov	r2, r0
 8012136:	460b      	mov	r3, r1
 8012138:	d135      	bne.n	80121a6 <_dtoa_r+0x6e6>
 801213a:	f7f4 f91f 	bl	800637c <__adddf3>
 801213e:	4642      	mov	r2, r8
 8012140:	464b      	mov	r3, r9
 8012142:	4606      	mov	r6, r0
 8012144:	460f      	mov	r7, r1
 8012146:	f7f4 fd5f 	bl	8006c08 <__aeabi_dcmpgt>
 801214a:	b9d0      	cbnz	r0, 8012182 <_dtoa_r+0x6c2>
 801214c:	4642      	mov	r2, r8
 801214e:	464b      	mov	r3, r9
 8012150:	4630      	mov	r0, r6
 8012152:	4639      	mov	r1, r7
 8012154:	f7f4 fd30 	bl	8006bb8 <__aeabi_dcmpeq>
 8012158:	b110      	cbz	r0, 8012160 <_dtoa_r+0x6a0>
 801215a:	f01a 0f01 	tst.w	sl, #1
 801215e:	d110      	bne.n	8012182 <_dtoa_r+0x6c2>
 8012160:	4620      	mov	r0, r4
 8012162:	ee18 1a10 	vmov	r1, s16
 8012166:	f000 faf7 	bl	8012758 <_Bfree>
 801216a:	2300      	movs	r3, #0
 801216c:	9800      	ldr	r0, [sp, #0]
 801216e:	702b      	strb	r3, [r5, #0]
 8012170:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012172:	3001      	adds	r0, #1
 8012174:	6018      	str	r0, [r3, #0]
 8012176:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012178:	2b00      	cmp	r3, #0
 801217a:	f43f acf1 	beq.w	8011b60 <_dtoa_r+0xa0>
 801217e:	601d      	str	r5, [r3, #0]
 8012180:	e4ee      	b.n	8011b60 <_dtoa_r+0xa0>
 8012182:	9f00      	ldr	r7, [sp, #0]
 8012184:	462b      	mov	r3, r5
 8012186:	461d      	mov	r5, r3
 8012188:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801218c:	2a39      	cmp	r2, #57	; 0x39
 801218e:	d106      	bne.n	801219e <_dtoa_r+0x6de>
 8012190:	9a01      	ldr	r2, [sp, #4]
 8012192:	429a      	cmp	r2, r3
 8012194:	d1f7      	bne.n	8012186 <_dtoa_r+0x6c6>
 8012196:	9901      	ldr	r1, [sp, #4]
 8012198:	2230      	movs	r2, #48	; 0x30
 801219a:	3701      	adds	r7, #1
 801219c:	700a      	strb	r2, [r1, #0]
 801219e:	781a      	ldrb	r2, [r3, #0]
 80121a0:	3201      	adds	r2, #1
 80121a2:	701a      	strb	r2, [r3, #0]
 80121a4:	e790      	b.n	80120c8 <_dtoa_r+0x608>
 80121a6:	4ba6      	ldr	r3, [pc, #664]	; (8012440 <_dtoa_r+0x980>)
 80121a8:	2200      	movs	r2, #0
 80121aa:	f7f4 fa9d 	bl	80066e8 <__aeabi_dmul>
 80121ae:	2200      	movs	r2, #0
 80121b0:	2300      	movs	r3, #0
 80121b2:	4606      	mov	r6, r0
 80121b4:	460f      	mov	r7, r1
 80121b6:	f7f4 fcff 	bl	8006bb8 <__aeabi_dcmpeq>
 80121ba:	2800      	cmp	r0, #0
 80121bc:	d09d      	beq.n	80120fa <_dtoa_r+0x63a>
 80121be:	e7cf      	b.n	8012160 <_dtoa_r+0x6a0>
 80121c0:	9a08      	ldr	r2, [sp, #32]
 80121c2:	2a00      	cmp	r2, #0
 80121c4:	f000 80d7 	beq.w	8012376 <_dtoa_r+0x8b6>
 80121c8:	9a06      	ldr	r2, [sp, #24]
 80121ca:	2a01      	cmp	r2, #1
 80121cc:	f300 80ba 	bgt.w	8012344 <_dtoa_r+0x884>
 80121d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80121d2:	2a00      	cmp	r2, #0
 80121d4:	f000 80b2 	beq.w	801233c <_dtoa_r+0x87c>
 80121d8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80121dc:	9e07      	ldr	r6, [sp, #28]
 80121de:	9d04      	ldr	r5, [sp, #16]
 80121e0:	9a04      	ldr	r2, [sp, #16]
 80121e2:	441a      	add	r2, r3
 80121e4:	9204      	str	r2, [sp, #16]
 80121e6:	9a05      	ldr	r2, [sp, #20]
 80121e8:	2101      	movs	r1, #1
 80121ea:	441a      	add	r2, r3
 80121ec:	4620      	mov	r0, r4
 80121ee:	9205      	str	r2, [sp, #20]
 80121f0:	f000 fb6a 	bl	80128c8 <__i2b>
 80121f4:	4607      	mov	r7, r0
 80121f6:	2d00      	cmp	r5, #0
 80121f8:	dd0c      	ble.n	8012214 <_dtoa_r+0x754>
 80121fa:	9b05      	ldr	r3, [sp, #20]
 80121fc:	2b00      	cmp	r3, #0
 80121fe:	dd09      	ble.n	8012214 <_dtoa_r+0x754>
 8012200:	42ab      	cmp	r3, r5
 8012202:	9a04      	ldr	r2, [sp, #16]
 8012204:	bfa8      	it	ge
 8012206:	462b      	movge	r3, r5
 8012208:	1ad2      	subs	r2, r2, r3
 801220a:	9204      	str	r2, [sp, #16]
 801220c:	9a05      	ldr	r2, [sp, #20]
 801220e:	1aed      	subs	r5, r5, r3
 8012210:	1ad3      	subs	r3, r2, r3
 8012212:	9305      	str	r3, [sp, #20]
 8012214:	9b07      	ldr	r3, [sp, #28]
 8012216:	b31b      	cbz	r3, 8012260 <_dtoa_r+0x7a0>
 8012218:	9b08      	ldr	r3, [sp, #32]
 801221a:	2b00      	cmp	r3, #0
 801221c:	f000 80af 	beq.w	801237e <_dtoa_r+0x8be>
 8012220:	2e00      	cmp	r6, #0
 8012222:	dd13      	ble.n	801224c <_dtoa_r+0x78c>
 8012224:	4639      	mov	r1, r7
 8012226:	4632      	mov	r2, r6
 8012228:	4620      	mov	r0, r4
 801222a:	f000 fc0d 	bl	8012a48 <__pow5mult>
 801222e:	ee18 2a10 	vmov	r2, s16
 8012232:	4601      	mov	r1, r0
 8012234:	4607      	mov	r7, r0
 8012236:	4620      	mov	r0, r4
 8012238:	f000 fb5c 	bl	80128f4 <__multiply>
 801223c:	ee18 1a10 	vmov	r1, s16
 8012240:	4680      	mov	r8, r0
 8012242:	4620      	mov	r0, r4
 8012244:	f000 fa88 	bl	8012758 <_Bfree>
 8012248:	ee08 8a10 	vmov	s16, r8
 801224c:	9b07      	ldr	r3, [sp, #28]
 801224e:	1b9a      	subs	r2, r3, r6
 8012250:	d006      	beq.n	8012260 <_dtoa_r+0x7a0>
 8012252:	ee18 1a10 	vmov	r1, s16
 8012256:	4620      	mov	r0, r4
 8012258:	f000 fbf6 	bl	8012a48 <__pow5mult>
 801225c:	ee08 0a10 	vmov	s16, r0
 8012260:	2101      	movs	r1, #1
 8012262:	4620      	mov	r0, r4
 8012264:	f000 fb30 	bl	80128c8 <__i2b>
 8012268:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801226a:	2b00      	cmp	r3, #0
 801226c:	4606      	mov	r6, r0
 801226e:	f340 8088 	ble.w	8012382 <_dtoa_r+0x8c2>
 8012272:	461a      	mov	r2, r3
 8012274:	4601      	mov	r1, r0
 8012276:	4620      	mov	r0, r4
 8012278:	f000 fbe6 	bl	8012a48 <__pow5mult>
 801227c:	9b06      	ldr	r3, [sp, #24]
 801227e:	2b01      	cmp	r3, #1
 8012280:	4606      	mov	r6, r0
 8012282:	f340 8081 	ble.w	8012388 <_dtoa_r+0x8c8>
 8012286:	f04f 0800 	mov.w	r8, #0
 801228a:	6933      	ldr	r3, [r6, #16]
 801228c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8012290:	6918      	ldr	r0, [r3, #16]
 8012292:	f000 fac9 	bl	8012828 <__hi0bits>
 8012296:	f1c0 0020 	rsb	r0, r0, #32
 801229a:	9b05      	ldr	r3, [sp, #20]
 801229c:	4418      	add	r0, r3
 801229e:	f010 001f 	ands.w	r0, r0, #31
 80122a2:	f000 8092 	beq.w	80123ca <_dtoa_r+0x90a>
 80122a6:	f1c0 0320 	rsb	r3, r0, #32
 80122aa:	2b04      	cmp	r3, #4
 80122ac:	f340 808a 	ble.w	80123c4 <_dtoa_r+0x904>
 80122b0:	f1c0 001c 	rsb	r0, r0, #28
 80122b4:	9b04      	ldr	r3, [sp, #16]
 80122b6:	4403      	add	r3, r0
 80122b8:	9304      	str	r3, [sp, #16]
 80122ba:	9b05      	ldr	r3, [sp, #20]
 80122bc:	4403      	add	r3, r0
 80122be:	4405      	add	r5, r0
 80122c0:	9305      	str	r3, [sp, #20]
 80122c2:	9b04      	ldr	r3, [sp, #16]
 80122c4:	2b00      	cmp	r3, #0
 80122c6:	dd07      	ble.n	80122d8 <_dtoa_r+0x818>
 80122c8:	ee18 1a10 	vmov	r1, s16
 80122cc:	461a      	mov	r2, r3
 80122ce:	4620      	mov	r0, r4
 80122d0:	f000 fc14 	bl	8012afc <__lshift>
 80122d4:	ee08 0a10 	vmov	s16, r0
 80122d8:	9b05      	ldr	r3, [sp, #20]
 80122da:	2b00      	cmp	r3, #0
 80122dc:	dd05      	ble.n	80122ea <_dtoa_r+0x82a>
 80122de:	4631      	mov	r1, r6
 80122e0:	461a      	mov	r2, r3
 80122e2:	4620      	mov	r0, r4
 80122e4:	f000 fc0a 	bl	8012afc <__lshift>
 80122e8:	4606      	mov	r6, r0
 80122ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80122ec:	2b00      	cmp	r3, #0
 80122ee:	d06e      	beq.n	80123ce <_dtoa_r+0x90e>
 80122f0:	ee18 0a10 	vmov	r0, s16
 80122f4:	4631      	mov	r1, r6
 80122f6:	f000 fc71 	bl	8012bdc <__mcmp>
 80122fa:	2800      	cmp	r0, #0
 80122fc:	da67      	bge.n	80123ce <_dtoa_r+0x90e>
 80122fe:	9b00      	ldr	r3, [sp, #0]
 8012300:	3b01      	subs	r3, #1
 8012302:	ee18 1a10 	vmov	r1, s16
 8012306:	9300      	str	r3, [sp, #0]
 8012308:	220a      	movs	r2, #10
 801230a:	2300      	movs	r3, #0
 801230c:	4620      	mov	r0, r4
 801230e:	f000 fa45 	bl	801279c <__multadd>
 8012312:	9b08      	ldr	r3, [sp, #32]
 8012314:	ee08 0a10 	vmov	s16, r0
 8012318:	2b00      	cmp	r3, #0
 801231a:	f000 81b1 	beq.w	8012680 <_dtoa_r+0xbc0>
 801231e:	2300      	movs	r3, #0
 8012320:	4639      	mov	r1, r7
 8012322:	220a      	movs	r2, #10
 8012324:	4620      	mov	r0, r4
 8012326:	f000 fa39 	bl	801279c <__multadd>
 801232a:	9b02      	ldr	r3, [sp, #8]
 801232c:	2b00      	cmp	r3, #0
 801232e:	4607      	mov	r7, r0
 8012330:	f300 808e 	bgt.w	8012450 <_dtoa_r+0x990>
 8012334:	9b06      	ldr	r3, [sp, #24]
 8012336:	2b02      	cmp	r3, #2
 8012338:	dc51      	bgt.n	80123de <_dtoa_r+0x91e>
 801233a:	e089      	b.n	8012450 <_dtoa_r+0x990>
 801233c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801233e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8012342:	e74b      	b.n	80121dc <_dtoa_r+0x71c>
 8012344:	9b03      	ldr	r3, [sp, #12]
 8012346:	1e5e      	subs	r6, r3, #1
 8012348:	9b07      	ldr	r3, [sp, #28]
 801234a:	42b3      	cmp	r3, r6
 801234c:	bfbf      	itttt	lt
 801234e:	9b07      	ldrlt	r3, [sp, #28]
 8012350:	9607      	strlt	r6, [sp, #28]
 8012352:	1af2      	sublt	r2, r6, r3
 8012354:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8012356:	bfb6      	itet	lt
 8012358:	189b      	addlt	r3, r3, r2
 801235a:	1b9e      	subge	r6, r3, r6
 801235c:	930a      	strlt	r3, [sp, #40]	; 0x28
 801235e:	9b03      	ldr	r3, [sp, #12]
 8012360:	bfb8      	it	lt
 8012362:	2600      	movlt	r6, #0
 8012364:	2b00      	cmp	r3, #0
 8012366:	bfb7      	itett	lt
 8012368:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 801236c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8012370:	1a9d      	sublt	r5, r3, r2
 8012372:	2300      	movlt	r3, #0
 8012374:	e734      	b.n	80121e0 <_dtoa_r+0x720>
 8012376:	9e07      	ldr	r6, [sp, #28]
 8012378:	9d04      	ldr	r5, [sp, #16]
 801237a:	9f08      	ldr	r7, [sp, #32]
 801237c:	e73b      	b.n	80121f6 <_dtoa_r+0x736>
 801237e:	9a07      	ldr	r2, [sp, #28]
 8012380:	e767      	b.n	8012252 <_dtoa_r+0x792>
 8012382:	9b06      	ldr	r3, [sp, #24]
 8012384:	2b01      	cmp	r3, #1
 8012386:	dc18      	bgt.n	80123ba <_dtoa_r+0x8fa>
 8012388:	f1ba 0f00 	cmp.w	sl, #0
 801238c:	d115      	bne.n	80123ba <_dtoa_r+0x8fa>
 801238e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012392:	b993      	cbnz	r3, 80123ba <_dtoa_r+0x8fa>
 8012394:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8012398:	0d1b      	lsrs	r3, r3, #20
 801239a:	051b      	lsls	r3, r3, #20
 801239c:	b183      	cbz	r3, 80123c0 <_dtoa_r+0x900>
 801239e:	9b04      	ldr	r3, [sp, #16]
 80123a0:	3301      	adds	r3, #1
 80123a2:	9304      	str	r3, [sp, #16]
 80123a4:	9b05      	ldr	r3, [sp, #20]
 80123a6:	3301      	adds	r3, #1
 80123a8:	9305      	str	r3, [sp, #20]
 80123aa:	f04f 0801 	mov.w	r8, #1
 80123ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80123b0:	2b00      	cmp	r3, #0
 80123b2:	f47f af6a 	bne.w	801228a <_dtoa_r+0x7ca>
 80123b6:	2001      	movs	r0, #1
 80123b8:	e76f      	b.n	801229a <_dtoa_r+0x7da>
 80123ba:	f04f 0800 	mov.w	r8, #0
 80123be:	e7f6      	b.n	80123ae <_dtoa_r+0x8ee>
 80123c0:	4698      	mov	r8, r3
 80123c2:	e7f4      	b.n	80123ae <_dtoa_r+0x8ee>
 80123c4:	f43f af7d 	beq.w	80122c2 <_dtoa_r+0x802>
 80123c8:	4618      	mov	r0, r3
 80123ca:	301c      	adds	r0, #28
 80123cc:	e772      	b.n	80122b4 <_dtoa_r+0x7f4>
 80123ce:	9b03      	ldr	r3, [sp, #12]
 80123d0:	2b00      	cmp	r3, #0
 80123d2:	dc37      	bgt.n	8012444 <_dtoa_r+0x984>
 80123d4:	9b06      	ldr	r3, [sp, #24]
 80123d6:	2b02      	cmp	r3, #2
 80123d8:	dd34      	ble.n	8012444 <_dtoa_r+0x984>
 80123da:	9b03      	ldr	r3, [sp, #12]
 80123dc:	9302      	str	r3, [sp, #8]
 80123de:	9b02      	ldr	r3, [sp, #8]
 80123e0:	b96b      	cbnz	r3, 80123fe <_dtoa_r+0x93e>
 80123e2:	4631      	mov	r1, r6
 80123e4:	2205      	movs	r2, #5
 80123e6:	4620      	mov	r0, r4
 80123e8:	f000 f9d8 	bl	801279c <__multadd>
 80123ec:	4601      	mov	r1, r0
 80123ee:	4606      	mov	r6, r0
 80123f0:	ee18 0a10 	vmov	r0, s16
 80123f4:	f000 fbf2 	bl	8012bdc <__mcmp>
 80123f8:	2800      	cmp	r0, #0
 80123fa:	f73f adbb 	bgt.w	8011f74 <_dtoa_r+0x4b4>
 80123fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012400:	9d01      	ldr	r5, [sp, #4]
 8012402:	43db      	mvns	r3, r3
 8012404:	9300      	str	r3, [sp, #0]
 8012406:	f04f 0800 	mov.w	r8, #0
 801240a:	4631      	mov	r1, r6
 801240c:	4620      	mov	r0, r4
 801240e:	f000 f9a3 	bl	8012758 <_Bfree>
 8012412:	2f00      	cmp	r7, #0
 8012414:	f43f aea4 	beq.w	8012160 <_dtoa_r+0x6a0>
 8012418:	f1b8 0f00 	cmp.w	r8, #0
 801241c:	d005      	beq.n	801242a <_dtoa_r+0x96a>
 801241e:	45b8      	cmp	r8, r7
 8012420:	d003      	beq.n	801242a <_dtoa_r+0x96a>
 8012422:	4641      	mov	r1, r8
 8012424:	4620      	mov	r0, r4
 8012426:	f000 f997 	bl	8012758 <_Bfree>
 801242a:	4639      	mov	r1, r7
 801242c:	4620      	mov	r0, r4
 801242e:	f000 f993 	bl	8012758 <_Bfree>
 8012432:	e695      	b.n	8012160 <_dtoa_r+0x6a0>
 8012434:	2600      	movs	r6, #0
 8012436:	4637      	mov	r7, r6
 8012438:	e7e1      	b.n	80123fe <_dtoa_r+0x93e>
 801243a:	9700      	str	r7, [sp, #0]
 801243c:	4637      	mov	r7, r6
 801243e:	e599      	b.n	8011f74 <_dtoa_r+0x4b4>
 8012440:	40240000 	.word	0x40240000
 8012444:	9b08      	ldr	r3, [sp, #32]
 8012446:	2b00      	cmp	r3, #0
 8012448:	f000 80ca 	beq.w	80125e0 <_dtoa_r+0xb20>
 801244c:	9b03      	ldr	r3, [sp, #12]
 801244e:	9302      	str	r3, [sp, #8]
 8012450:	2d00      	cmp	r5, #0
 8012452:	dd05      	ble.n	8012460 <_dtoa_r+0x9a0>
 8012454:	4639      	mov	r1, r7
 8012456:	462a      	mov	r2, r5
 8012458:	4620      	mov	r0, r4
 801245a:	f000 fb4f 	bl	8012afc <__lshift>
 801245e:	4607      	mov	r7, r0
 8012460:	f1b8 0f00 	cmp.w	r8, #0
 8012464:	d05b      	beq.n	801251e <_dtoa_r+0xa5e>
 8012466:	6879      	ldr	r1, [r7, #4]
 8012468:	4620      	mov	r0, r4
 801246a:	f000 f935 	bl	80126d8 <_Balloc>
 801246e:	4605      	mov	r5, r0
 8012470:	b928      	cbnz	r0, 801247e <_dtoa_r+0x9be>
 8012472:	4b87      	ldr	r3, [pc, #540]	; (8012690 <_dtoa_r+0xbd0>)
 8012474:	4602      	mov	r2, r0
 8012476:	f240 21ea 	movw	r1, #746	; 0x2ea
 801247a:	f7ff bb3b 	b.w	8011af4 <_dtoa_r+0x34>
 801247e:	693a      	ldr	r2, [r7, #16]
 8012480:	3202      	adds	r2, #2
 8012482:	0092      	lsls	r2, r2, #2
 8012484:	f107 010c 	add.w	r1, r7, #12
 8012488:	300c      	adds	r0, #12
 801248a:	f7fe fdcf 	bl	801102c <memcpy>
 801248e:	2201      	movs	r2, #1
 8012490:	4629      	mov	r1, r5
 8012492:	4620      	mov	r0, r4
 8012494:	f000 fb32 	bl	8012afc <__lshift>
 8012498:	9b01      	ldr	r3, [sp, #4]
 801249a:	f103 0901 	add.w	r9, r3, #1
 801249e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80124a2:	4413      	add	r3, r2
 80124a4:	9305      	str	r3, [sp, #20]
 80124a6:	f00a 0301 	and.w	r3, sl, #1
 80124aa:	46b8      	mov	r8, r7
 80124ac:	9304      	str	r3, [sp, #16]
 80124ae:	4607      	mov	r7, r0
 80124b0:	4631      	mov	r1, r6
 80124b2:	ee18 0a10 	vmov	r0, s16
 80124b6:	f7ff fa77 	bl	80119a8 <quorem>
 80124ba:	4641      	mov	r1, r8
 80124bc:	9002      	str	r0, [sp, #8]
 80124be:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80124c2:	ee18 0a10 	vmov	r0, s16
 80124c6:	f000 fb89 	bl	8012bdc <__mcmp>
 80124ca:	463a      	mov	r2, r7
 80124cc:	9003      	str	r0, [sp, #12]
 80124ce:	4631      	mov	r1, r6
 80124d0:	4620      	mov	r0, r4
 80124d2:	f000 fb9f 	bl	8012c14 <__mdiff>
 80124d6:	68c2      	ldr	r2, [r0, #12]
 80124d8:	f109 3bff 	add.w	fp, r9, #4294967295
 80124dc:	4605      	mov	r5, r0
 80124de:	bb02      	cbnz	r2, 8012522 <_dtoa_r+0xa62>
 80124e0:	4601      	mov	r1, r0
 80124e2:	ee18 0a10 	vmov	r0, s16
 80124e6:	f000 fb79 	bl	8012bdc <__mcmp>
 80124ea:	4602      	mov	r2, r0
 80124ec:	4629      	mov	r1, r5
 80124ee:	4620      	mov	r0, r4
 80124f0:	9207      	str	r2, [sp, #28]
 80124f2:	f000 f931 	bl	8012758 <_Bfree>
 80124f6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80124fa:	ea43 0102 	orr.w	r1, r3, r2
 80124fe:	9b04      	ldr	r3, [sp, #16]
 8012500:	430b      	orrs	r3, r1
 8012502:	464d      	mov	r5, r9
 8012504:	d10f      	bne.n	8012526 <_dtoa_r+0xa66>
 8012506:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801250a:	d02a      	beq.n	8012562 <_dtoa_r+0xaa2>
 801250c:	9b03      	ldr	r3, [sp, #12]
 801250e:	2b00      	cmp	r3, #0
 8012510:	dd02      	ble.n	8012518 <_dtoa_r+0xa58>
 8012512:	9b02      	ldr	r3, [sp, #8]
 8012514:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8012518:	f88b a000 	strb.w	sl, [fp]
 801251c:	e775      	b.n	801240a <_dtoa_r+0x94a>
 801251e:	4638      	mov	r0, r7
 8012520:	e7ba      	b.n	8012498 <_dtoa_r+0x9d8>
 8012522:	2201      	movs	r2, #1
 8012524:	e7e2      	b.n	80124ec <_dtoa_r+0xa2c>
 8012526:	9b03      	ldr	r3, [sp, #12]
 8012528:	2b00      	cmp	r3, #0
 801252a:	db04      	blt.n	8012536 <_dtoa_r+0xa76>
 801252c:	9906      	ldr	r1, [sp, #24]
 801252e:	430b      	orrs	r3, r1
 8012530:	9904      	ldr	r1, [sp, #16]
 8012532:	430b      	orrs	r3, r1
 8012534:	d122      	bne.n	801257c <_dtoa_r+0xabc>
 8012536:	2a00      	cmp	r2, #0
 8012538:	ddee      	ble.n	8012518 <_dtoa_r+0xa58>
 801253a:	ee18 1a10 	vmov	r1, s16
 801253e:	2201      	movs	r2, #1
 8012540:	4620      	mov	r0, r4
 8012542:	f000 fadb 	bl	8012afc <__lshift>
 8012546:	4631      	mov	r1, r6
 8012548:	ee08 0a10 	vmov	s16, r0
 801254c:	f000 fb46 	bl	8012bdc <__mcmp>
 8012550:	2800      	cmp	r0, #0
 8012552:	dc03      	bgt.n	801255c <_dtoa_r+0xa9c>
 8012554:	d1e0      	bne.n	8012518 <_dtoa_r+0xa58>
 8012556:	f01a 0f01 	tst.w	sl, #1
 801255a:	d0dd      	beq.n	8012518 <_dtoa_r+0xa58>
 801255c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8012560:	d1d7      	bne.n	8012512 <_dtoa_r+0xa52>
 8012562:	2339      	movs	r3, #57	; 0x39
 8012564:	f88b 3000 	strb.w	r3, [fp]
 8012568:	462b      	mov	r3, r5
 801256a:	461d      	mov	r5, r3
 801256c:	3b01      	subs	r3, #1
 801256e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8012572:	2a39      	cmp	r2, #57	; 0x39
 8012574:	d071      	beq.n	801265a <_dtoa_r+0xb9a>
 8012576:	3201      	adds	r2, #1
 8012578:	701a      	strb	r2, [r3, #0]
 801257a:	e746      	b.n	801240a <_dtoa_r+0x94a>
 801257c:	2a00      	cmp	r2, #0
 801257e:	dd07      	ble.n	8012590 <_dtoa_r+0xad0>
 8012580:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8012584:	d0ed      	beq.n	8012562 <_dtoa_r+0xaa2>
 8012586:	f10a 0301 	add.w	r3, sl, #1
 801258a:	f88b 3000 	strb.w	r3, [fp]
 801258e:	e73c      	b.n	801240a <_dtoa_r+0x94a>
 8012590:	9b05      	ldr	r3, [sp, #20]
 8012592:	f809 ac01 	strb.w	sl, [r9, #-1]
 8012596:	4599      	cmp	r9, r3
 8012598:	d047      	beq.n	801262a <_dtoa_r+0xb6a>
 801259a:	ee18 1a10 	vmov	r1, s16
 801259e:	2300      	movs	r3, #0
 80125a0:	220a      	movs	r2, #10
 80125a2:	4620      	mov	r0, r4
 80125a4:	f000 f8fa 	bl	801279c <__multadd>
 80125a8:	45b8      	cmp	r8, r7
 80125aa:	ee08 0a10 	vmov	s16, r0
 80125ae:	f04f 0300 	mov.w	r3, #0
 80125b2:	f04f 020a 	mov.w	r2, #10
 80125b6:	4641      	mov	r1, r8
 80125b8:	4620      	mov	r0, r4
 80125ba:	d106      	bne.n	80125ca <_dtoa_r+0xb0a>
 80125bc:	f000 f8ee 	bl	801279c <__multadd>
 80125c0:	4680      	mov	r8, r0
 80125c2:	4607      	mov	r7, r0
 80125c4:	f109 0901 	add.w	r9, r9, #1
 80125c8:	e772      	b.n	80124b0 <_dtoa_r+0x9f0>
 80125ca:	f000 f8e7 	bl	801279c <__multadd>
 80125ce:	4639      	mov	r1, r7
 80125d0:	4680      	mov	r8, r0
 80125d2:	2300      	movs	r3, #0
 80125d4:	220a      	movs	r2, #10
 80125d6:	4620      	mov	r0, r4
 80125d8:	f000 f8e0 	bl	801279c <__multadd>
 80125dc:	4607      	mov	r7, r0
 80125de:	e7f1      	b.n	80125c4 <_dtoa_r+0xb04>
 80125e0:	9b03      	ldr	r3, [sp, #12]
 80125e2:	9302      	str	r3, [sp, #8]
 80125e4:	9d01      	ldr	r5, [sp, #4]
 80125e6:	ee18 0a10 	vmov	r0, s16
 80125ea:	4631      	mov	r1, r6
 80125ec:	f7ff f9dc 	bl	80119a8 <quorem>
 80125f0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80125f4:	9b01      	ldr	r3, [sp, #4]
 80125f6:	f805 ab01 	strb.w	sl, [r5], #1
 80125fa:	1aea      	subs	r2, r5, r3
 80125fc:	9b02      	ldr	r3, [sp, #8]
 80125fe:	4293      	cmp	r3, r2
 8012600:	dd09      	ble.n	8012616 <_dtoa_r+0xb56>
 8012602:	ee18 1a10 	vmov	r1, s16
 8012606:	2300      	movs	r3, #0
 8012608:	220a      	movs	r2, #10
 801260a:	4620      	mov	r0, r4
 801260c:	f000 f8c6 	bl	801279c <__multadd>
 8012610:	ee08 0a10 	vmov	s16, r0
 8012614:	e7e7      	b.n	80125e6 <_dtoa_r+0xb26>
 8012616:	9b02      	ldr	r3, [sp, #8]
 8012618:	2b00      	cmp	r3, #0
 801261a:	bfc8      	it	gt
 801261c:	461d      	movgt	r5, r3
 801261e:	9b01      	ldr	r3, [sp, #4]
 8012620:	bfd8      	it	le
 8012622:	2501      	movle	r5, #1
 8012624:	441d      	add	r5, r3
 8012626:	f04f 0800 	mov.w	r8, #0
 801262a:	ee18 1a10 	vmov	r1, s16
 801262e:	2201      	movs	r2, #1
 8012630:	4620      	mov	r0, r4
 8012632:	f000 fa63 	bl	8012afc <__lshift>
 8012636:	4631      	mov	r1, r6
 8012638:	ee08 0a10 	vmov	s16, r0
 801263c:	f000 face 	bl	8012bdc <__mcmp>
 8012640:	2800      	cmp	r0, #0
 8012642:	dc91      	bgt.n	8012568 <_dtoa_r+0xaa8>
 8012644:	d102      	bne.n	801264c <_dtoa_r+0xb8c>
 8012646:	f01a 0f01 	tst.w	sl, #1
 801264a:	d18d      	bne.n	8012568 <_dtoa_r+0xaa8>
 801264c:	462b      	mov	r3, r5
 801264e:	461d      	mov	r5, r3
 8012650:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012654:	2a30      	cmp	r2, #48	; 0x30
 8012656:	d0fa      	beq.n	801264e <_dtoa_r+0xb8e>
 8012658:	e6d7      	b.n	801240a <_dtoa_r+0x94a>
 801265a:	9a01      	ldr	r2, [sp, #4]
 801265c:	429a      	cmp	r2, r3
 801265e:	d184      	bne.n	801256a <_dtoa_r+0xaaa>
 8012660:	9b00      	ldr	r3, [sp, #0]
 8012662:	3301      	adds	r3, #1
 8012664:	9300      	str	r3, [sp, #0]
 8012666:	2331      	movs	r3, #49	; 0x31
 8012668:	7013      	strb	r3, [r2, #0]
 801266a:	e6ce      	b.n	801240a <_dtoa_r+0x94a>
 801266c:	4b09      	ldr	r3, [pc, #36]	; (8012694 <_dtoa_r+0xbd4>)
 801266e:	f7ff ba95 	b.w	8011b9c <_dtoa_r+0xdc>
 8012672:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012674:	2b00      	cmp	r3, #0
 8012676:	f47f aa6e 	bne.w	8011b56 <_dtoa_r+0x96>
 801267a:	4b07      	ldr	r3, [pc, #28]	; (8012698 <_dtoa_r+0xbd8>)
 801267c:	f7ff ba8e 	b.w	8011b9c <_dtoa_r+0xdc>
 8012680:	9b02      	ldr	r3, [sp, #8]
 8012682:	2b00      	cmp	r3, #0
 8012684:	dcae      	bgt.n	80125e4 <_dtoa_r+0xb24>
 8012686:	9b06      	ldr	r3, [sp, #24]
 8012688:	2b02      	cmp	r3, #2
 801268a:	f73f aea8 	bgt.w	80123de <_dtoa_r+0x91e>
 801268e:	e7a9      	b.n	80125e4 <_dtoa_r+0xb24>
 8012690:	0807cd47 	.word	0x0807cd47
 8012694:	0807cc68 	.word	0x0807cc68
 8012698:	0807ccc8 	.word	0x0807ccc8

0801269c <fiprintf>:
 801269c:	b40e      	push	{r1, r2, r3}
 801269e:	b503      	push	{r0, r1, lr}
 80126a0:	4601      	mov	r1, r0
 80126a2:	ab03      	add	r3, sp, #12
 80126a4:	4805      	ldr	r0, [pc, #20]	; (80126bc <fiprintf+0x20>)
 80126a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80126aa:	6800      	ldr	r0, [r0, #0]
 80126ac:	9301      	str	r3, [sp, #4]
 80126ae:	f000 fe13 	bl	80132d8 <_vfiprintf_r>
 80126b2:	b002      	add	sp, #8
 80126b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80126b8:	b003      	add	sp, #12
 80126ba:	4770      	bx	lr
 80126bc:	20000c34 	.word	0x20000c34

080126c0 <_localeconv_r>:
 80126c0:	4800      	ldr	r0, [pc, #0]	; (80126c4 <_localeconv_r+0x4>)
 80126c2:	4770      	bx	lr
 80126c4:	20000d88 	.word	0x20000d88

080126c8 <malloc>:
 80126c8:	4b02      	ldr	r3, [pc, #8]	; (80126d4 <malloc+0xc>)
 80126ca:	4601      	mov	r1, r0
 80126cc:	6818      	ldr	r0, [r3, #0]
 80126ce:	f000 bc09 	b.w	8012ee4 <_malloc_r>
 80126d2:	bf00      	nop
 80126d4:	20000c34 	.word	0x20000c34

080126d8 <_Balloc>:
 80126d8:	b570      	push	{r4, r5, r6, lr}
 80126da:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80126dc:	4604      	mov	r4, r0
 80126de:	460d      	mov	r5, r1
 80126e0:	b976      	cbnz	r6, 8012700 <_Balloc+0x28>
 80126e2:	2010      	movs	r0, #16
 80126e4:	f7ff fff0 	bl	80126c8 <malloc>
 80126e8:	4602      	mov	r2, r0
 80126ea:	6260      	str	r0, [r4, #36]	; 0x24
 80126ec:	b920      	cbnz	r0, 80126f8 <_Balloc+0x20>
 80126ee:	4b18      	ldr	r3, [pc, #96]	; (8012750 <_Balloc+0x78>)
 80126f0:	4818      	ldr	r0, [pc, #96]	; (8012754 <_Balloc+0x7c>)
 80126f2:	2166      	movs	r1, #102	; 0x66
 80126f4:	f7ff f93a 	bl	801196c <__assert_func>
 80126f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80126fc:	6006      	str	r6, [r0, #0]
 80126fe:	60c6      	str	r6, [r0, #12]
 8012700:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8012702:	68f3      	ldr	r3, [r6, #12]
 8012704:	b183      	cbz	r3, 8012728 <_Balloc+0x50>
 8012706:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012708:	68db      	ldr	r3, [r3, #12]
 801270a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801270e:	b9b8      	cbnz	r0, 8012740 <_Balloc+0x68>
 8012710:	2101      	movs	r1, #1
 8012712:	fa01 f605 	lsl.w	r6, r1, r5
 8012716:	1d72      	adds	r2, r6, #5
 8012718:	0092      	lsls	r2, r2, #2
 801271a:	4620      	mov	r0, r4
 801271c:	f000 fb60 	bl	8012de0 <_calloc_r>
 8012720:	b160      	cbz	r0, 801273c <_Balloc+0x64>
 8012722:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8012726:	e00e      	b.n	8012746 <_Balloc+0x6e>
 8012728:	2221      	movs	r2, #33	; 0x21
 801272a:	2104      	movs	r1, #4
 801272c:	4620      	mov	r0, r4
 801272e:	f000 fb57 	bl	8012de0 <_calloc_r>
 8012732:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012734:	60f0      	str	r0, [r6, #12]
 8012736:	68db      	ldr	r3, [r3, #12]
 8012738:	2b00      	cmp	r3, #0
 801273a:	d1e4      	bne.n	8012706 <_Balloc+0x2e>
 801273c:	2000      	movs	r0, #0
 801273e:	bd70      	pop	{r4, r5, r6, pc}
 8012740:	6802      	ldr	r2, [r0, #0]
 8012742:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012746:	2300      	movs	r3, #0
 8012748:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801274c:	e7f7      	b.n	801273e <_Balloc+0x66>
 801274e:	bf00      	nop
 8012750:	0807ccd5 	.word	0x0807ccd5
 8012754:	0807cd58 	.word	0x0807cd58

08012758 <_Bfree>:
 8012758:	b570      	push	{r4, r5, r6, lr}
 801275a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801275c:	4605      	mov	r5, r0
 801275e:	460c      	mov	r4, r1
 8012760:	b976      	cbnz	r6, 8012780 <_Bfree+0x28>
 8012762:	2010      	movs	r0, #16
 8012764:	f7ff ffb0 	bl	80126c8 <malloc>
 8012768:	4602      	mov	r2, r0
 801276a:	6268      	str	r0, [r5, #36]	; 0x24
 801276c:	b920      	cbnz	r0, 8012778 <_Bfree+0x20>
 801276e:	4b09      	ldr	r3, [pc, #36]	; (8012794 <_Bfree+0x3c>)
 8012770:	4809      	ldr	r0, [pc, #36]	; (8012798 <_Bfree+0x40>)
 8012772:	218a      	movs	r1, #138	; 0x8a
 8012774:	f7ff f8fa 	bl	801196c <__assert_func>
 8012778:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801277c:	6006      	str	r6, [r0, #0]
 801277e:	60c6      	str	r6, [r0, #12]
 8012780:	b13c      	cbz	r4, 8012792 <_Bfree+0x3a>
 8012782:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8012784:	6862      	ldr	r2, [r4, #4]
 8012786:	68db      	ldr	r3, [r3, #12]
 8012788:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801278c:	6021      	str	r1, [r4, #0]
 801278e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8012792:	bd70      	pop	{r4, r5, r6, pc}
 8012794:	0807ccd5 	.word	0x0807ccd5
 8012798:	0807cd58 	.word	0x0807cd58

0801279c <__multadd>:
 801279c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80127a0:	690d      	ldr	r5, [r1, #16]
 80127a2:	4607      	mov	r7, r0
 80127a4:	460c      	mov	r4, r1
 80127a6:	461e      	mov	r6, r3
 80127a8:	f101 0c14 	add.w	ip, r1, #20
 80127ac:	2000      	movs	r0, #0
 80127ae:	f8dc 3000 	ldr.w	r3, [ip]
 80127b2:	b299      	uxth	r1, r3
 80127b4:	fb02 6101 	mla	r1, r2, r1, r6
 80127b8:	0c1e      	lsrs	r6, r3, #16
 80127ba:	0c0b      	lsrs	r3, r1, #16
 80127bc:	fb02 3306 	mla	r3, r2, r6, r3
 80127c0:	b289      	uxth	r1, r1
 80127c2:	3001      	adds	r0, #1
 80127c4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80127c8:	4285      	cmp	r5, r0
 80127ca:	f84c 1b04 	str.w	r1, [ip], #4
 80127ce:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80127d2:	dcec      	bgt.n	80127ae <__multadd+0x12>
 80127d4:	b30e      	cbz	r6, 801281a <__multadd+0x7e>
 80127d6:	68a3      	ldr	r3, [r4, #8]
 80127d8:	42ab      	cmp	r3, r5
 80127da:	dc19      	bgt.n	8012810 <__multadd+0x74>
 80127dc:	6861      	ldr	r1, [r4, #4]
 80127de:	4638      	mov	r0, r7
 80127e0:	3101      	adds	r1, #1
 80127e2:	f7ff ff79 	bl	80126d8 <_Balloc>
 80127e6:	4680      	mov	r8, r0
 80127e8:	b928      	cbnz	r0, 80127f6 <__multadd+0x5a>
 80127ea:	4602      	mov	r2, r0
 80127ec:	4b0c      	ldr	r3, [pc, #48]	; (8012820 <__multadd+0x84>)
 80127ee:	480d      	ldr	r0, [pc, #52]	; (8012824 <__multadd+0x88>)
 80127f0:	21b5      	movs	r1, #181	; 0xb5
 80127f2:	f7ff f8bb 	bl	801196c <__assert_func>
 80127f6:	6922      	ldr	r2, [r4, #16]
 80127f8:	3202      	adds	r2, #2
 80127fa:	f104 010c 	add.w	r1, r4, #12
 80127fe:	0092      	lsls	r2, r2, #2
 8012800:	300c      	adds	r0, #12
 8012802:	f7fe fc13 	bl	801102c <memcpy>
 8012806:	4621      	mov	r1, r4
 8012808:	4638      	mov	r0, r7
 801280a:	f7ff ffa5 	bl	8012758 <_Bfree>
 801280e:	4644      	mov	r4, r8
 8012810:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012814:	3501      	adds	r5, #1
 8012816:	615e      	str	r6, [r3, #20]
 8012818:	6125      	str	r5, [r4, #16]
 801281a:	4620      	mov	r0, r4
 801281c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012820:	0807cd47 	.word	0x0807cd47
 8012824:	0807cd58 	.word	0x0807cd58

08012828 <__hi0bits>:
 8012828:	0c03      	lsrs	r3, r0, #16
 801282a:	041b      	lsls	r3, r3, #16
 801282c:	b9d3      	cbnz	r3, 8012864 <__hi0bits+0x3c>
 801282e:	0400      	lsls	r0, r0, #16
 8012830:	2310      	movs	r3, #16
 8012832:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8012836:	bf04      	itt	eq
 8012838:	0200      	lsleq	r0, r0, #8
 801283a:	3308      	addeq	r3, #8
 801283c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8012840:	bf04      	itt	eq
 8012842:	0100      	lsleq	r0, r0, #4
 8012844:	3304      	addeq	r3, #4
 8012846:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801284a:	bf04      	itt	eq
 801284c:	0080      	lsleq	r0, r0, #2
 801284e:	3302      	addeq	r3, #2
 8012850:	2800      	cmp	r0, #0
 8012852:	db05      	blt.n	8012860 <__hi0bits+0x38>
 8012854:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8012858:	f103 0301 	add.w	r3, r3, #1
 801285c:	bf08      	it	eq
 801285e:	2320      	moveq	r3, #32
 8012860:	4618      	mov	r0, r3
 8012862:	4770      	bx	lr
 8012864:	2300      	movs	r3, #0
 8012866:	e7e4      	b.n	8012832 <__hi0bits+0xa>

08012868 <__lo0bits>:
 8012868:	6803      	ldr	r3, [r0, #0]
 801286a:	f013 0207 	ands.w	r2, r3, #7
 801286e:	4601      	mov	r1, r0
 8012870:	d00b      	beq.n	801288a <__lo0bits+0x22>
 8012872:	07da      	lsls	r2, r3, #31
 8012874:	d423      	bmi.n	80128be <__lo0bits+0x56>
 8012876:	0798      	lsls	r0, r3, #30
 8012878:	bf49      	itett	mi
 801287a:	085b      	lsrmi	r3, r3, #1
 801287c:	089b      	lsrpl	r3, r3, #2
 801287e:	2001      	movmi	r0, #1
 8012880:	600b      	strmi	r3, [r1, #0]
 8012882:	bf5c      	itt	pl
 8012884:	600b      	strpl	r3, [r1, #0]
 8012886:	2002      	movpl	r0, #2
 8012888:	4770      	bx	lr
 801288a:	b298      	uxth	r0, r3
 801288c:	b9a8      	cbnz	r0, 80128ba <__lo0bits+0x52>
 801288e:	0c1b      	lsrs	r3, r3, #16
 8012890:	2010      	movs	r0, #16
 8012892:	b2da      	uxtb	r2, r3
 8012894:	b90a      	cbnz	r2, 801289a <__lo0bits+0x32>
 8012896:	3008      	adds	r0, #8
 8012898:	0a1b      	lsrs	r3, r3, #8
 801289a:	071a      	lsls	r2, r3, #28
 801289c:	bf04      	itt	eq
 801289e:	091b      	lsreq	r3, r3, #4
 80128a0:	3004      	addeq	r0, #4
 80128a2:	079a      	lsls	r2, r3, #30
 80128a4:	bf04      	itt	eq
 80128a6:	089b      	lsreq	r3, r3, #2
 80128a8:	3002      	addeq	r0, #2
 80128aa:	07da      	lsls	r2, r3, #31
 80128ac:	d403      	bmi.n	80128b6 <__lo0bits+0x4e>
 80128ae:	085b      	lsrs	r3, r3, #1
 80128b0:	f100 0001 	add.w	r0, r0, #1
 80128b4:	d005      	beq.n	80128c2 <__lo0bits+0x5a>
 80128b6:	600b      	str	r3, [r1, #0]
 80128b8:	4770      	bx	lr
 80128ba:	4610      	mov	r0, r2
 80128bc:	e7e9      	b.n	8012892 <__lo0bits+0x2a>
 80128be:	2000      	movs	r0, #0
 80128c0:	4770      	bx	lr
 80128c2:	2020      	movs	r0, #32
 80128c4:	4770      	bx	lr
	...

080128c8 <__i2b>:
 80128c8:	b510      	push	{r4, lr}
 80128ca:	460c      	mov	r4, r1
 80128cc:	2101      	movs	r1, #1
 80128ce:	f7ff ff03 	bl	80126d8 <_Balloc>
 80128d2:	4602      	mov	r2, r0
 80128d4:	b928      	cbnz	r0, 80128e2 <__i2b+0x1a>
 80128d6:	4b05      	ldr	r3, [pc, #20]	; (80128ec <__i2b+0x24>)
 80128d8:	4805      	ldr	r0, [pc, #20]	; (80128f0 <__i2b+0x28>)
 80128da:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80128de:	f7ff f845 	bl	801196c <__assert_func>
 80128e2:	2301      	movs	r3, #1
 80128e4:	6144      	str	r4, [r0, #20]
 80128e6:	6103      	str	r3, [r0, #16]
 80128e8:	bd10      	pop	{r4, pc}
 80128ea:	bf00      	nop
 80128ec:	0807cd47 	.word	0x0807cd47
 80128f0:	0807cd58 	.word	0x0807cd58

080128f4 <__multiply>:
 80128f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80128f8:	4691      	mov	r9, r2
 80128fa:	690a      	ldr	r2, [r1, #16]
 80128fc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8012900:	429a      	cmp	r2, r3
 8012902:	bfb8      	it	lt
 8012904:	460b      	movlt	r3, r1
 8012906:	460c      	mov	r4, r1
 8012908:	bfbc      	itt	lt
 801290a:	464c      	movlt	r4, r9
 801290c:	4699      	movlt	r9, r3
 801290e:	6927      	ldr	r7, [r4, #16]
 8012910:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8012914:	68a3      	ldr	r3, [r4, #8]
 8012916:	6861      	ldr	r1, [r4, #4]
 8012918:	eb07 060a 	add.w	r6, r7, sl
 801291c:	42b3      	cmp	r3, r6
 801291e:	b085      	sub	sp, #20
 8012920:	bfb8      	it	lt
 8012922:	3101      	addlt	r1, #1
 8012924:	f7ff fed8 	bl	80126d8 <_Balloc>
 8012928:	b930      	cbnz	r0, 8012938 <__multiply+0x44>
 801292a:	4602      	mov	r2, r0
 801292c:	4b44      	ldr	r3, [pc, #272]	; (8012a40 <__multiply+0x14c>)
 801292e:	4845      	ldr	r0, [pc, #276]	; (8012a44 <__multiply+0x150>)
 8012930:	f240 115d 	movw	r1, #349	; 0x15d
 8012934:	f7ff f81a 	bl	801196c <__assert_func>
 8012938:	f100 0514 	add.w	r5, r0, #20
 801293c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8012940:	462b      	mov	r3, r5
 8012942:	2200      	movs	r2, #0
 8012944:	4543      	cmp	r3, r8
 8012946:	d321      	bcc.n	801298c <__multiply+0x98>
 8012948:	f104 0314 	add.w	r3, r4, #20
 801294c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8012950:	f109 0314 	add.w	r3, r9, #20
 8012954:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8012958:	9202      	str	r2, [sp, #8]
 801295a:	1b3a      	subs	r2, r7, r4
 801295c:	3a15      	subs	r2, #21
 801295e:	f022 0203 	bic.w	r2, r2, #3
 8012962:	3204      	adds	r2, #4
 8012964:	f104 0115 	add.w	r1, r4, #21
 8012968:	428f      	cmp	r7, r1
 801296a:	bf38      	it	cc
 801296c:	2204      	movcc	r2, #4
 801296e:	9201      	str	r2, [sp, #4]
 8012970:	9a02      	ldr	r2, [sp, #8]
 8012972:	9303      	str	r3, [sp, #12]
 8012974:	429a      	cmp	r2, r3
 8012976:	d80c      	bhi.n	8012992 <__multiply+0x9e>
 8012978:	2e00      	cmp	r6, #0
 801297a:	dd03      	ble.n	8012984 <__multiply+0x90>
 801297c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012980:	2b00      	cmp	r3, #0
 8012982:	d05a      	beq.n	8012a3a <__multiply+0x146>
 8012984:	6106      	str	r6, [r0, #16]
 8012986:	b005      	add	sp, #20
 8012988:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801298c:	f843 2b04 	str.w	r2, [r3], #4
 8012990:	e7d8      	b.n	8012944 <__multiply+0x50>
 8012992:	f8b3 a000 	ldrh.w	sl, [r3]
 8012996:	f1ba 0f00 	cmp.w	sl, #0
 801299a:	d024      	beq.n	80129e6 <__multiply+0xf2>
 801299c:	f104 0e14 	add.w	lr, r4, #20
 80129a0:	46a9      	mov	r9, r5
 80129a2:	f04f 0c00 	mov.w	ip, #0
 80129a6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80129aa:	f8d9 1000 	ldr.w	r1, [r9]
 80129ae:	fa1f fb82 	uxth.w	fp, r2
 80129b2:	b289      	uxth	r1, r1
 80129b4:	fb0a 110b 	mla	r1, sl, fp, r1
 80129b8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80129bc:	f8d9 2000 	ldr.w	r2, [r9]
 80129c0:	4461      	add	r1, ip
 80129c2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80129c6:	fb0a c20b 	mla	r2, sl, fp, ip
 80129ca:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80129ce:	b289      	uxth	r1, r1
 80129d0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80129d4:	4577      	cmp	r7, lr
 80129d6:	f849 1b04 	str.w	r1, [r9], #4
 80129da:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80129de:	d8e2      	bhi.n	80129a6 <__multiply+0xb2>
 80129e0:	9a01      	ldr	r2, [sp, #4]
 80129e2:	f845 c002 	str.w	ip, [r5, r2]
 80129e6:	9a03      	ldr	r2, [sp, #12]
 80129e8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80129ec:	3304      	adds	r3, #4
 80129ee:	f1b9 0f00 	cmp.w	r9, #0
 80129f2:	d020      	beq.n	8012a36 <__multiply+0x142>
 80129f4:	6829      	ldr	r1, [r5, #0]
 80129f6:	f104 0c14 	add.w	ip, r4, #20
 80129fa:	46ae      	mov	lr, r5
 80129fc:	f04f 0a00 	mov.w	sl, #0
 8012a00:	f8bc b000 	ldrh.w	fp, [ip]
 8012a04:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8012a08:	fb09 220b 	mla	r2, r9, fp, r2
 8012a0c:	4492      	add	sl, r2
 8012a0e:	b289      	uxth	r1, r1
 8012a10:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8012a14:	f84e 1b04 	str.w	r1, [lr], #4
 8012a18:	f85c 2b04 	ldr.w	r2, [ip], #4
 8012a1c:	f8be 1000 	ldrh.w	r1, [lr]
 8012a20:	0c12      	lsrs	r2, r2, #16
 8012a22:	fb09 1102 	mla	r1, r9, r2, r1
 8012a26:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8012a2a:	4567      	cmp	r7, ip
 8012a2c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8012a30:	d8e6      	bhi.n	8012a00 <__multiply+0x10c>
 8012a32:	9a01      	ldr	r2, [sp, #4]
 8012a34:	50a9      	str	r1, [r5, r2]
 8012a36:	3504      	adds	r5, #4
 8012a38:	e79a      	b.n	8012970 <__multiply+0x7c>
 8012a3a:	3e01      	subs	r6, #1
 8012a3c:	e79c      	b.n	8012978 <__multiply+0x84>
 8012a3e:	bf00      	nop
 8012a40:	0807cd47 	.word	0x0807cd47
 8012a44:	0807cd58 	.word	0x0807cd58

08012a48 <__pow5mult>:
 8012a48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012a4c:	4615      	mov	r5, r2
 8012a4e:	f012 0203 	ands.w	r2, r2, #3
 8012a52:	4606      	mov	r6, r0
 8012a54:	460f      	mov	r7, r1
 8012a56:	d007      	beq.n	8012a68 <__pow5mult+0x20>
 8012a58:	4c25      	ldr	r4, [pc, #148]	; (8012af0 <__pow5mult+0xa8>)
 8012a5a:	3a01      	subs	r2, #1
 8012a5c:	2300      	movs	r3, #0
 8012a5e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012a62:	f7ff fe9b 	bl	801279c <__multadd>
 8012a66:	4607      	mov	r7, r0
 8012a68:	10ad      	asrs	r5, r5, #2
 8012a6a:	d03d      	beq.n	8012ae8 <__pow5mult+0xa0>
 8012a6c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8012a6e:	b97c      	cbnz	r4, 8012a90 <__pow5mult+0x48>
 8012a70:	2010      	movs	r0, #16
 8012a72:	f7ff fe29 	bl	80126c8 <malloc>
 8012a76:	4602      	mov	r2, r0
 8012a78:	6270      	str	r0, [r6, #36]	; 0x24
 8012a7a:	b928      	cbnz	r0, 8012a88 <__pow5mult+0x40>
 8012a7c:	4b1d      	ldr	r3, [pc, #116]	; (8012af4 <__pow5mult+0xac>)
 8012a7e:	481e      	ldr	r0, [pc, #120]	; (8012af8 <__pow5mult+0xb0>)
 8012a80:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8012a84:	f7fe ff72 	bl	801196c <__assert_func>
 8012a88:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012a8c:	6004      	str	r4, [r0, #0]
 8012a8e:	60c4      	str	r4, [r0, #12]
 8012a90:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8012a94:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012a98:	b94c      	cbnz	r4, 8012aae <__pow5mult+0x66>
 8012a9a:	f240 2171 	movw	r1, #625	; 0x271
 8012a9e:	4630      	mov	r0, r6
 8012aa0:	f7ff ff12 	bl	80128c8 <__i2b>
 8012aa4:	2300      	movs	r3, #0
 8012aa6:	f8c8 0008 	str.w	r0, [r8, #8]
 8012aaa:	4604      	mov	r4, r0
 8012aac:	6003      	str	r3, [r0, #0]
 8012aae:	f04f 0900 	mov.w	r9, #0
 8012ab2:	07eb      	lsls	r3, r5, #31
 8012ab4:	d50a      	bpl.n	8012acc <__pow5mult+0x84>
 8012ab6:	4639      	mov	r1, r7
 8012ab8:	4622      	mov	r2, r4
 8012aba:	4630      	mov	r0, r6
 8012abc:	f7ff ff1a 	bl	80128f4 <__multiply>
 8012ac0:	4639      	mov	r1, r7
 8012ac2:	4680      	mov	r8, r0
 8012ac4:	4630      	mov	r0, r6
 8012ac6:	f7ff fe47 	bl	8012758 <_Bfree>
 8012aca:	4647      	mov	r7, r8
 8012acc:	106d      	asrs	r5, r5, #1
 8012ace:	d00b      	beq.n	8012ae8 <__pow5mult+0xa0>
 8012ad0:	6820      	ldr	r0, [r4, #0]
 8012ad2:	b938      	cbnz	r0, 8012ae4 <__pow5mult+0x9c>
 8012ad4:	4622      	mov	r2, r4
 8012ad6:	4621      	mov	r1, r4
 8012ad8:	4630      	mov	r0, r6
 8012ada:	f7ff ff0b 	bl	80128f4 <__multiply>
 8012ade:	6020      	str	r0, [r4, #0]
 8012ae0:	f8c0 9000 	str.w	r9, [r0]
 8012ae4:	4604      	mov	r4, r0
 8012ae6:	e7e4      	b.n	8012ab2 <__pow5mult+0x6a>
 8012ae8:	4638      	mov	r0, r7
 8012aea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012aee:	bf00      	nop
 8012af0:	0807cea8 	.word	0x0807cea8
 8012af4:	0807ccd5 	.word	0x0807ccd5
 8012af8:	0807cd58 	.word	0x0807cd58

08012afc <__lshift>:
 8012afc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012b00:	460c      	mov	r4, r1
 8012b02:	6849      	ldr	r1, [r1, #4]
 8012b04:	6923      	ldr	r3, [r4, #16]
 8012b06:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8012b0a:	68a3      	ldr	r3, [r4, #8]
 8012b0c:	4607      	mov	r7, r0
 8012b0e:	4691      	mov	r9, r2
 8012b10:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012b14:	f108 0601 	add.w	r6, r8, #1
 8012b18:	42b3      	cmp	r3, r6
 8012b1a:	db0b      	blt.n	8012b34 <__lshift+0x38>
 8012b1c:	4638      	mov	r0, r7
 8012b1e:	f7ff fddb 	bl	80126d8 <_Balloc>
 8012b22:	4605      	mov	r5, r0
 8012b24:	b948      	cbnz	r0, 8012b3a <__lshift+0x3e>
 8012b26:	4602      	mov	r2, r0
 8012b28:	4b2a      	ldr	r3, [pc, #168]	; (8012bd4 <__lshift+0xd8>)
 8012b2a:	482b      	ldr	r0, [pc, #172]	; (8012bd8 <__lshift+0xdc>)
 8012b2c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8012b30:	f7fe ff1c 	bl	801196c <__assert_func>
 8012b34:	3101      	adds	r1, #1
 8012b36:	005b      	lsls	r3, r3, #1
 8012b38:	e7ee      	b.n	8012b18 <__lshift+0x1c>
 8012b3a:	2300      	movs	r3, #0
 8012b3c:	f100 0114 	add.w	r1, r0, #20
 8012b40:	f100 0210 	add.w	r2, r0, #16
 8012b44:	4618      	mov	r0, r3
 8012b46:	4553      	cmp	r3, sl
 8012b48:	db37      	blt.n	8012bba <__lshift+0xbe>
 8012b4a:	6920      	ldr	r0, [r4, #16]
 8012b4c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012b50:	f104 0314 	add.w	r3, r4, #20
 8012b54:	f019 091f 	ands.w	r9, r9, #31
 8012b58:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012b5c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8012b60:	d02f      	beq.n	8012bc2 <__lshift+0xc6>
 8012b62:	f1c9 0e20 	rsb	lr, r9, #32
 8012b66:	468a      	mov	sl, r1
 8012b68:	f04f 0c00 	mov.w	ip, #0
 8012b6c:	681a      	ldr	r2, [r3, #0]
 8012b6e:	fa02 f209 	lsl.w	r2, r2, r9
 8012b72:	ea42 020c 	orr.w	r2, r2, ip
 8012b76:	f84a 2b04 	str.w	r2, [sl], #4
 8012b7a:	f853 2b04 	ldr.w	r2, [r3], #4
 8012b7e:	4298      	cmp	r0, r3
 8012b80:	fa22 fc0e 	lsr.w	ip, r2, lr
 8012b84:	d8f2      	bhi.n	8012b6c <__lshift+0x70>
 8012b86:	1b03      	subs	r3, r0, r4
 8012b88:	3b15      	subs	r3, #21
 8012b8a:	f023 0303 	bic.w	r3, r3, #3
 8012b8e:	3304      	adds	r3, #4
 8012b90:	f104 0215 	add.w	r2, r4, #21
 8012b94:	4290      	cmp	r0, r2
 8012b96:	bf38      	it	cc
 8012b98:	2304      	movcc	r3, #4
 8012b9a:	f841 c003 	str.w	ip, [r1, r3]
 8012b9e:	f1bc 0f00 	cmp.w	ip, #0
 8012ba2:	d001      	beq.n	8012ba8 <__lshift+0xac>
 8012ba4:	f108 0602 	add.w	r6, r8, #2
 8012ba8:	3e01      	subs	r6, #1
 8012baa:	4638      	mov	r0, r7
 8012bac:	612e      	str	r6, [r5, #16]
 8012bae:	4621      	mov	r1, r4
 8012bb0:	f7ff fdd2 	bl	8012758 <_Bfree>
 8012bb4:	4628      	mov	r0, r5
 8012bb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012bba:	f842 0f04 	str.w	r0, [r2, #4]!
 8012bbe:	3301      	adds	r3, #1
 8012bc0:	e7c1      	b.n	8012b46 <__lshift+0x4a>
 8012bc2:	3904      	subs	r1, #4
 8012bc4:	f853 2b04 	ldr.w	r2, [r3], #4
 8012bc8:	f841 2f04 	str.w	r2, [r1, #4]!
 8012bcc:	4298      	cmp	r0, r3
 8012bce:	d8f9      	bhi.n	8012bc4 <__lshift+0xc8>
 8012bd0:	e7ea      	b.n	8012ba8 <__lshift+0xac>
 8012bd2:	bf00      	nop
 8012bd4:	0807cd47 	.word	0x0807cd47
 8012bd8:	0807cd58 	.word	0x0807cd58

08012bdc <__mcmp>:
 8012bdc:	b530      	push	{r4, r5, lr}
 8012bde:	6902      	ldr	r2, [r0, #16]
 8012be0:	690c      	ldr	r4, [r1, #16]
 8012be2:	1b12      	subs	r2, r2, r4
 8012be4:	d10e      	bne.n	8012c04 <__mcmp+0x28>
 8012be6:	f100 0314 	add.w	r3, r0, #20
 8012bea:	3114      	adds	r1, #20
 8012bec:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8012bf0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8012bf4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8012bf8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8012bfc:	42a5      	cmp	r5, r4
 8012bfe:	d003      	beq.n	8012c08 <__mcmp+0x2c>
 8012c00:	d305      	bcc.n	8012c0e <__mcmp+0x32>
 8012c02:	2201      	movs	r2, #1
 8012c04:	4610      	mov	r0, r2
 8012c06:	bd30      	pop	{r4, r5, pc}
 8012c08:	4283      	cmp	r3, r0
 8012c0a:	d3f3      	bcc.n	8012bf4 <__mcmp+0x18>
 8012c0c:	e7fa      	b.n	8012c04 <__mcmp+0x28>
 8012c0e:	f04f 32ff 	mov.w	r2, #4294967295
 8012c12:	e7f7      	b.n	8012c04 <__mcmp+0x28>

08012c14 <__mdiff>:
 8012c14:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c18:	460c      	mov	r4, r1
 8012c1a:	4606      	mov	r6, r0
 8012c1c:	4611      	mov	r1, r2
 8012c1e:	4620      	mov	r0, r4
 8012c20:	4690      	mov	r8, r2
 8012c22:	f7ff ffdb 	bl	8012bdc <__mcmp>
 8012c26:	1e05      	subs	r5, r0, #0
 8012c28:	d110      	bne.n	8012c4c <__mdiff+0x38>
 8012c2a:	4629      	mov	r1, r5
 8012c2c:	4630      	mov	r0, r6
 8012c2e:	f7ff fd53 	bl	80126d8 <_Balloc>
 8012c32:	b930      	cbnz	r0, 8012c42 <__mdiff+0x2e>
 8012c34:	4b3a      	ldr	r3, [pc, #232]	; (8012d20 <__mdiff+0x10c>)
 8012c36:	4602      	mov	r2, r0
 8012c38:	f240 2132 	movw	r1, #562	; 0x232
 8012c3c:	4839      	ldr	r0, [pc, #228]	; (8012d24 <__mdiff+0x110>)
 8012c3e:	f7fe fe95 	bl	801196c <__assert_func>
 8012c42:	2301      	movs	r3, #1
 8012c44:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012c48:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c4c:	bfa4      	itt	ge
 8012c4e:	4643      	movge	r3, r8
 8012c50:	46a0      	movge	r8, r4
 8012c52:	4630      	mov	r0, r6
 8012c54:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8012c58:	bfa6      	itte	ge
 8012c5a:	461c      	movge	r4, r3
 8012c5c:	2500      	movge	r5, #0
 8012c5e:	2501      	movlt	r5, #1
 8012c60:	f7ff fd3a 	bl	80126d8 <_Balloc>
 8012c64:	b920      	cbnz	r0, 8012c70 <__mdiff+0x5c>
 8012c66:	4b2e      	ldr	r3, [pc, #184]	; (8012d20 <__mdiff+0x10c>)
 8012c68:	4602      	mov	r2, r0
 8012c6a:	f44f 7110 	mov.w	r1, #576	; 0x240
 8012c6e:	e7e5      	b.n	8012c3c <__mdiff+0x28>
 8012c70:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8012c74:	6926      	ldr	r6, [r4, #16]
 8012c76:	60c5      	str	r5, [r0, #12]
 8012c78:	f104 0914 	add.w	r9, r4, #20
 8012c7c:	f108 0514 	add.w	r5, r8, #20
 8012c80:	f100 0e14 	add.w	lr, r0, #20
 8012c84:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8012c88:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8012c8c:	f108 0210 	add.w	r2, r8, #16
 8012c90:	46f2      	mov	sl, lr
 8012c92:	2100      	movs	r1, #0
 8012c94:	f859 3b04 	ldr.w	r3, [r9], #4
 8012c98:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8012c9c:	fa1f f883 	uxth.w	r8, r3
 8012ca0:	fa11 f18b 	uxtah	r1, r1, fp
 8012ca4:	0c1b      	lsrs	r3, r3, #16
 8012ca6:	eba1 0808 	sub.w	r8, r1, r8
 8012caa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8012cae:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8012cb2:	fa1f f888 	uxth.w	r8, r8
 8012cb6:	1419      	asrs	r1, r3, #16
 8012cb8:	454e      	cmp	r6, r9
 8012cba:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8012cbe:	f84a 3b04 	str.w	r3, [sl], #4
 8012cc2:	d8e7      	bhi.n	8012c94 <__mdiff+0x80>
 8012cc4:	1b33      	subs	r3, r6, r4
 8012cc6:	3b15      	subs	r3, #21
 8012cc8:	f023 0303 	bic.w	r3, r3, #3
 8012ccc:	3304      	adds	r3, #4
 8012cce:	3415      	adds	r4, #21
 8012cd0:	42a6      	cmp	r6, r4
 8012cd2:	bf38      	it	cc
 8012cd4:	2304      	movcc	r3, #4
 8012cd6:	441d      	add	r5, r3
 8012cd8:	4473      	add	r3, lr
 8012cda:	469e      	mov	lr, r3
 8012cdc:	462e      	mov	r6, r5
 8012cde:	4566      	cmp	r6, ip
 8012ce0:	d30e      	bcc.n	8012d00 <__mdiff+0xec>
 8012ce2:	f10c 0203 	add.w	r2, ip, #3
 8012ce6:	1b52      	subs	r2, r2, r5
 8012ce8:	f022 0203 	bic.w	r2, r2, #3
 8012cec:	3d03      	subs	r5, #3
 8012cee:	45ac      	cmp	ip, r5
 8012cf0:	bf38      	it	cc
 8012cf2:	2200      	movcc	r2, #0
 8012cf4:	441a      	add	r2, r3
 8012cf6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8012cfa:	b17b      	cbz	r3, 8012d1c <__mdiff+0x108>
 8012cfc:	6107      	str	r7, [r0, #16]
 8012cfe:	e7a3      	b.n	8012c48 <__mdiff+0x34>
 8012d00:	f856 8b04 	ldr.w	r8, [r6], #4
 8012d04:	fa11 f288 	uxtah	r2, r1, r8
 8012d08:	1414      	asrs	r4, r2, #16
 8012d0a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8012d0e:	b292      	uxth	r2, r2
 8012d10:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8012d14:	f84e 2b04 	str.w	r2, [lr], #4
 8012d18:	1421      	asrs	r1, r4, #16
 8012d1a:	e7e0      	b.n	8012cde <__mdiff+0xca>
 8012d1c:	3f01      	subs	r7, #1
 8012d1e:	e7ea      	b.n	8012cf6 <__mdiff+0xe2>
 8012d20:	0807cd47 	.word	0x0807cd47
 8012d24:	0807cd58 	.word	0x0807cd58

08012d28 <__d2b>:
 8012d28:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012d2c:	4689      	mov	r9, r1
 8012d2e:	2101      	movs	r1, #1
 8012d30:	ec57 6b10 	vmov	r6, r7, d0
 8012d34:	4690      	mov	r8, r2
 8012d36:	f7ff fccf 	bl	80126d8 <_Balloc>
 8012d3a:	4604      	mov	r4, r0
 8012d3c:	b930      	cbnz	r0, 8012d4c <__d2b+0x24>
 8012d3e:	4602      	mov	r2, r0
 8012d40:	4b25      	ldr	r3, [pc, #148]	; (8012dd8 <__d2b+0xb0>)
 8012d42:	4826      	ldr	r0, [pc, #152]	; (8012ddc <__d2b+0xb4>)
 8012d44:	f240 310a 	movw	r1, #778	; 0x30a
 8012d48:	f7fe fe10 	bl	801196c <__assert_func>
 8012d4c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8012d50:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8012d54:	bb35      	cbnz	r5, 8012da4 <__d2b+0x7c>
 8012d56:	2e00      	cmp	r6, #0
 8012d58:	9301      	str	r3, [sp, #4]
 8012d5a:	d028      	beq.n	8012dae <__d2b+0x86>
 8012d5c:	4668      	mov	r0, sp
 8012d5e:	9600      	str	r6, [sp, #0]
 8012d60:	f7ff fd82 	bl	8012868 <__lo0bits>
 8012d64:	9900      	ldr	r1, [sp, #0]
 8012d66:	b300      	cbz	r0, 8012daa <__d2b+0x82>
 8012d68:	9a01      	ldr	r2, [sp, #4]
 8012d6a:	f1c0 0320 	rsb	r3, r0, #32
 8012d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8012d72:	430b      	orrs	r3, r1
 8012d74:	40c2      	lsrs	r2, r0
 8012d76:	6163      	str	r3, [r4, #20]
 8012d78:	9201      	str	r2, [sp, #4]
 8012d7a:	9b01      	ldr	r3, [sp, #4]
 8012d7c:	61a3      	str	r3, [r4, #24]
 8012d7e:	2b00      	cmp	r3, #0
 8012d80:	bf14      	ite	ne
 8012d82:	2202      	movne	r2, #2
 8012d84:	2201      	moveq	r2, #1
 8012d86:	6122      	str	r2, [r4, #16]
 8012d88:	b1d5      	cbz	r5, 8012dc0 <__d2b+0x98>
 8012d8a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8012d8e:	4405      	add	r5, r0
 8012d90:	f8c9 5000 	str.w	r5, [r9]
 8012d94:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8012d98:	f8c8 0000 	str.w	r0, [r8]
 8012d9c:	4620      	mov	r0, r4
 8012d9e:	b003      	add	sp, #12
 8012da0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012da4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012da8:	e7d5      	b.n	8012d56 <__d2b+0x2e>
 8012daa:	6161      	str	r1, [r4, #20]
 8012dac:	e7e5      	b.n	8012d7a <__d2b+0x52>
 8012dae:	a801      	add	r0, sp, #4
 8012db0:	f7ff fd5a 	bl	8012868 <__lo0bits>
 8012db4:	9b01      	ldr	r3, [sp, #4]
 8012db6:	6163      	str	r3, [r4, #20]
 8012db8:	2201      	movs	r2, #1
 8012dba:	6122      	str	r2, [r4, #16]
 8012dbc:	3020      	adds	r0, #32
 8012dbe:	e7e3      	b.n	8012d88 <__d2b+0x60>
 8012dc0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012dc4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8012dc8:	f8c9 0000 	str.w	r0, [r9]
 8012dcc:	6918      	ldr	r0, [r3, #16]
 8012dce:	f7ff fd2b 	bl	8012828 <__hi0bits>
 8012dd2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8012dd6:	e7df      	b.n	8012d98 <__d2b+0x70>
 8012dd8:	0807cd47 	.word	0x0807cd47
 8012ddc:	0807cd58 	.word	0x0807cd58

08012de0 <_calloc_r>:
 8012de0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012de2:	fba1 2402 	umull	r2, r4, r1, r2
 8012de6:	b94c      	cbnz	r4, 8012dfc <_calloc_r+0x1c>
 8012de8:	4611      	mov	r1, r2
 8012dea:	9201      	str	r2, [sp, #4]
 8012dec:	f000 f87a 	bl	8012ee4 <_malloc_r>
 8012df0:	9a01      	ldr	r2, [sp, #4]
 8012df2:	4605      	mov	r5, r0
 8012df4:	b930      	cbnz	r0, 8012e04 <_calloc_r+0x24>
 8012df6:	4628      	mov	r0, r5
 8012df8:	b003      	add	sp, #12
 8012dfa:	bd30      	pop	{r4, r5, pc}
 8012dfc:	220c      	movs	r2, #12
 8012dfe:	6002      	str	r2, [r0, #0]
 8012e00:	2500      	movs	r5, #0
 8012e02:	e7f8      	b.n	8012df6 <_calloc_r+0x16>
 8012e04:	4621      	mov	r1, r4
 8012e06:	f7fe f91f 	bl	8011048 <memset>
 8012e0a:	e7f4      	b.n	8012df6 <_calloc_r+0x16>

08012e0c <_free_r>:
 8012e0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012e0e:	2900      	cmp	r1, #0
 8012e10:	d044      	beq.n	8012e9c <_free_r+0x90>
 8012e12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012e16:	9001      	str	r0, [sp, #4]
 8012e18:	2b00      	cmp	r3, #0
 8012e1a:	f1a1 0404 	sub.w	r4, r1, #4
 8012e1e:	bfb8      	it	lt
 8012e20:	18e4      	addlt	r4, r4, r3
 8012e22:	f000 fead 	bl	8013b80 <__malloc_lock>
 8012e26:	4a1e      	ldr	r2, [pc, #120]	; (8012ea0 <_free_r+0x94>)
 8012e28:	9801      	ldr	r0, [sp, #4]
 8012e2a:	6813      	ldr	r3, [r2, #0]
 8012e2c:	b933      	cbnz	r3, 8012e3c <_free_r+0x30>
 8012e2e:	6063      	str	r3, [r4, #4]
 8012e30:	6014      	str	r4, [r2, #0]
 8012e32:	b003      	add	sp, #12
 8012e34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012e38:	f000 bea8 	b.w	8013b8c <__malloc_unlock>
 8012e3c:	42a3      	cmp	r3, r4
 8012e3e:	d908      	bls.n	8012e52 <_free_r+0x46>
 8012e40:	6825      	ldr	r5, [r4, #0]
 8012e42:	1961      	adds	r1, r4, r5
 8012e44:	428b      	cmp	r3, r1
 8012e46:	bf01      	itttt	eq
 8012e48:	6819      	ldreq	r1, [r3, #0]
 8012e4a:	685b      	ldreq	r3, [r3, #4]
 8012e4c:	1949      	addeq	r1, r1, r5
 8012e4e:	6021      	streq	r1, [r4, #0]
 8012e50:	e7ed      	b.n	8012e2e <_free_r+0x22>
 8012e52:	461a      	mov	r2, r3
 8012e54:	685b      	ldr	r3, [r3, #4]
 8012e56:	b10b      	cbz	r3, 8012e5c <_free_r+0x50>
 8012e58:	42a3      	cmp	r3, r4
 8012e5a:	d9fa      	bls.n	8012e52 <_free_r+0x46>
 8012e5c:	6811      	ldr	r1, [r2, #0]
 8012e5e:	1855      	adds	r5, r2, r1
 8012e60:	42a5      	cmp	r5, r4
 8012e62:	d10b      	bne.n	8012e7c <_free_r+0x70>
 8012e64:	6824      	ldr	r4, [r4, #0]
 8012e66:	4421      	add	r1, r4
 8012e68:	1854      	adds	r4, r2, r1
 8012e6a:	42a3      	cmp	r3, r4
 8012e6c:	6011      	str	r1, [r2, #0]
 8012e6e:	d1e0      	bne.n	8012e32 <_free_r+0x26>
 8012e70:	681c      	ldr	r4, [r3, #0]
 8012e72:	685b      	ldr	r3, [r3, #4]
 8012e74:	6053      	str	r3, [r2, #4]
 8012e76:	4421      	add	r1, r4
 8012e78:	6011      	str	r1, [r2, #0]
 8012e7a:	e7da      	b.n	8012e32 <_free_r+0x26>
 8012e7c:	d902      	bls.n	8012e84 <_free_r+0x78>
 8012e7e:	230c      	movs	r3, #12
 8012e80:	6003      	str	r3, [r0, #0]
 8012e82:	e7d6      	b.n	8012e32 <_free_r+0x26>
 8012e84:	6825      	ldr	r5, [r4, #0]
 8012e86:	1961      	adds	r1, r4, r5
 8012e88:	428b      	cmp	r3, r1
 8012e8a:	bf04      	itt	eq
 8012e8c:	6819      	ldreq	r1, [r3, #0]
 8012e8e:	685b      	ldreq	r3, [r3, #4]
 8012e90:	6063      	str	r3, [r4, #4]
 8012e92:	bf04      	itt	eq
 8012e94:	1949      	addeq	r1, r1, r5
 8012e96:	6021      	streq	r1, [r4, #0]
 8012e98:	6054      	str	r4, [r2, #4]
 8012e9a:	e7ca      	b.n	8012e32 <_free_r+0x26>
 8012e9c:	b003      	add	sp, #12
 8012e9e:	bd30      	pop	{r4, r5, pc}
 8012ea0:	20019e0c 	.word	0x20019e0c

08012ea4 <sbrk_aligned>:
 8012ea4:	b570      	push	{r4, r5, r6, lr}
 8012ea6:	4e0e      	ldr	r6, [pc, #56]	; (8012ee0 <sbrk_aligned+0x3c>)
 8012ea8:	460c      	mov	r4, r1
 8012eaa:	6831      	ldr	r1, [r6, #0]
 8012eac:	4605      	mov	r5, r0
 8012eae:	b911      	cbnz	r1, 8012eb6 <sbrk_aligned+0x12>
 8012eb0:	f000 fb42 	bl	8013538 <_sbrk_r>
 8012eb4:	6030      	str	r0, [r6, #0]
 8012eb6:	4621      	mov	r1, r4
 8012eb8:	4628      	mov	r0, r5
 8012eba:	f000 fb3d 	bl	8013538 <_sbrk_r>
 8012ebe:	1c43      	adds	r3, r0, #1
 8012ec0:	d00a      	beq.n	8012ed8 <sbrk_aligned+0x34>
 8012ec2:	1cc4      	adds	r4, r0, #3
 8012ec4:	f024 0403 	bic.w	r4, r4, #3
 8012ec8:	42a0      	cmp	r0, r4
 8012eca:	d007      	beq.n	8012edc <sbrk_aligned+0x38>
 8012ecc:	1a21      	subs	r1, r4, r0
 8012ece:	4628      	mov	r0, r5
 8012ed0:	f000 fb32 	bl	8013538 <_sbrk_r>
 8012ed4:	3001      	adds	r0, #1
 8012ed6:	d101      	bne.n	8012edc <sbrk_aligned+0x38>
 8012ed8:	f04f 34ff 	mov.w	r4, #4294967295
 8012edc:	4620      	mov	r0, r4
 8012ede:	bd70      	pop	{r4, r5, r6, pc}
 8012ee0:	20019e10 	.word	0x20019e10

08012ee4 <_malloc_r>:
 8012ee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012ee8:	1ccd      	adds	r5, r1, #3
 8012eea:	f025 0503 	bic.w	r5, r5, #3
 8012eee:	3508      	adds	r5, #8
 8012ef0:	2d0c      	cmp	r5, #12
 8012ef2:	bf38      	it	cc
 8012ef4:	250c      	movcc	r5, #12
 8012ef6:	2d00      	cmp	r5, #0
 8012ef8:	4607      	mov	r7, r0
 8012efa:	db01      	blt.n	8012f00 <_malloc_r+0x1c>
 8012efc:	42a9      	cmp	r1, r5
 8012efe:	d905      	bls.n	8012f0c <_malloc_r+0x28>
 8012f00:	230c      	movs	r3, #12
 8012f02:	603b      	str	r3, [r7, #0]
 8012f04:	2600      	movs	r6, #0
 8012f06:	4630      	mov	r0, r6
 8012f08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012f0c:	4e2e      	ldr	r6, [pc, #184]	; (8012fc8 <_malloc_r+0xe4>)
 8012f0e:	f000 fe37 	bl	8013b80 <__malloc_lock>
 8012f12:	6833      	ldr	r3, [r6, #0]
 8012f14:	461c      	mov	r4, r3
 8012f16:	bb34      	cbnz	r4, 8012f66 <_malloc_r+0x82>
 8012f18:	4629      	mov	r1, r5
 8012f1a:	4638      	mov	r0, r7
 8012f1c:	f7ff ffc2 	bl	8012ea4 <sbrk_aligned>
 8012f20:	1c43      	adds	r3, r0, #1
 8012f22:	4604      	mov	r4, r0
 8012f24:	d14d      	bne.n	8012fc2 <_malloc_r+0xde>
 8012f26:	6834      	ldr	r4, [r6, #0]
 8012f28:	4626      	mov	r6, r4
 8012f2a:	2e00      	cmp	r6, #0
 8012f2c:	d140      	bne.n	8012fb0 <_malloc_r+0xcc>
 8012f2e:	6823      	ldr	r3, [r4, #0]
 8012f30:	4631      	mov	r1, r6
 8012f32:	4638      	mov	r0, r7
 8012f34:	eb04 0803 	add.w	r8, r4, r3
 8012f38:	f000 fafe 	bl	8013538 <_sbrk_r>
 8012f3c:	4580      	cmp	r8, r0
 8012f3e:	d13a      	bne.n	8012fb6 <_malloc_r+0xd2>
 8012f40:	6821      	ldr	r1, [r4, #0]
 8012f42:	3503      	adds	r5, #3
 8012f44:	1a6d      	subs	r5, r5, r1
 8012f46:	f025 0503 	bic.w	r5, r5, #3
 8012f4a:	3508      	adds	r5, #8
 8012f4c:	2d0c      	cmp	r5, #12
 8012f4e:	bf38      	it	cc
 8012f50:	250c      	movcc	r5, #12
 8012f52:	4629      	mov	r1, r5
 8012f54:	4638      	mov	r0, r7
 8012f56:	f7ff ffa5 	bl	8012ea4 <sbrk_aligned>
 8012f5a:	3001      	adds	r0, #1
 8012f5c:	d02b      	beq.n	8012fb6 <_malloc_r+0xd2>
 8012f5e:	6823      	ldr	r3, [r4, #0]
 8012f60:	442b      	add	r3, r5
 8012f62:	6023      	str	r3, [r4, #0]
 8012f64:	e00e      	b.n	8012f84 <_malloc_r+0xa0>
 8012f66:	6822      	ldr	r2, [r4, #0]
 8012f68:	1b52      	subs	r2, r2, r5
 8012f6a:	d41e      	bmi.n	8012faa <_malloc_r+0xc6>
 8012f6c:	2a0b      	cmp	r2, #11
 8012f6e:	d916      	bls.n	8012f9e <_malloc_r+0xba>
 8012f70:	1961      	adds	r1, r4, r5
 8012f72:	42a3      	cmp	r3, r4
 8012f74:	6025      	str	r5, [r4, #0]
 8012f76:	bf18      	it	ne
 8012f78:	6059      	strne	r1, [r3, #4]
 8012f7a:	6863      	ldr	r3, [r4, #4]
 8012f7c:	bf08      	it	eq
 8012f7e:	6031      	streq	r1, [r6, #0]
 8012f80:	5162      	str	r2, [r4, r5]
 8012f82:	604b      	str	r3, [r1, #4]
 8012f84:	4638      	mov	r0, r7
 8012f86:	f104 060b 	add.w	r6, r4, #11
 8012f8a:	f000 fdff 	bl	8013b8c <__malloc_unlock>
 8012f8e:	f026 0607 	bic.w	r6, r6, #7
 8012f92:	1d23      	adds	r3, r4, #4
 8012f94:	1af2      	subs	r2, r6, r3
 8012f96:	d0b6      	beq.n	8012f06 <_malloc_r+0x22>
 8012f98:	1b9b      	subs	r3, r3, r6
 8012f9a:	50a3      	str	r3, [r4, r2]
 8012f9c:	e7b3      	b.n	8012f06 <_malloc_r+0x22>
 8012f9e:	6862      	ldr	r2, [r4, #4]
 8012fa0:	42a3      	cmp	r3, r4
 8012fa2:	bf0c      	ite	eq
 8012fa4:	6032      	streq	r2, [r6, #0]
 8012fa6:	605a      	strne	r2, [r3, #4]
 8012fa8:	e7ec      	b.n	8012f84 <_malloc_r+0xa0>
 8012faa:	4623      	mov	r3, r4
 8012fac:	6864      	ldr	r4, [r4, #4]
 8012fae:	e7b2      	b.n	8012f16 <_malloc_r+0x32>
 8012fb0:	4634      	mov	r4, r6
 8012fb2:	6876      	ldr	r6, [r6, #4]
 8012fb4:	e7b9      	b.n	8012f2a <_malloc_r+0x46>
 8012fb6:	230c      	movs	r3, #12
 8012fb8:	603b      	str	r3, [r7, #0]
 8012fba:	4638      	mov	r0, r7
 8012fbc:	f000 fde6 	bl	8013b8c <__malloc_unlock>
 8012fc0:	e7a1      	b.n	8012f06 <_malloc_r+0x22>
 8012fc2:	6025      	str	r5, [r4, #0]
 8012fc4:	e7de      	b.n	8012f84 <_malloc_r+0xa0>
 8012fc6:	bf00      	nop
 8012fc8:	20019e0c 	.word	0x20019e0c

08012fcc <__ssputs_r>:
 8012fcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012fd0:	688e      	ldr	r6, [r1, #8]
 8012fd2:	429e      	cmp	r6, r3
 8012fd4:	4682      	mov	sl, r0
 8012fd6:	460c      	mov	r4, r1
 8012fd8:	4690      	mov	r8, r2
 8012fda:	461f      	mov	r7, r3
 8012fdc:	d838      	bhi.n	8013050 <__ssputs_r+0x84>
 8012fde:	898a      	ldrh	r2, [r1, #12]
 8012fe0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8012fe4:	d032      	beq.n	801304c <__ssputs_r+0x80>
 8012fe6:	6825      	ldr	r5, [r4, #0]
 8012fe8:	6909      	ldr	r1, [r1, #16]
 8012fea:	eba5 0901 	sub.w	r9, r5, r1
 8012fee:	6965      	ldr	r5, [r4, #20]
 8012ff0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012ff4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012ff8:	3301      	adds	r3, #1
 8012ffa:	444b      	add	r3, r9
 8012ffc:	106d      	asrs	r5, r5, #1
 8012ffe:	429d      	cmp	r5, r3
 8013000:	bf38      	it	cc
 8013002:	461d      	movcc	r5, r3
 8013004:	0553      	lsls	r3, r2, #21
 8013006:	d531      	bpl.n	801306c <__ssputs_r+0xa0>
 8013008:	4629      	mov	r1, r5
 801300a:	f7ff ff6b 	bl	8012ee4 <_malloc_r>
 801300e:	4606      	mov	r6, r0
 8013010:	b950      	cbnz	r0, 8013028 <__ssputs_r+0x5c>
 8013012:	230c      	movs	r3, #12
 8013014:	f8ca 3000 	str.w	r3, [sl]
 8013018:	89a3      	ldrh	r3, [r4, #12]
 801301a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801301e:	81a3      	strh	r3, [r4, #12]
 8013020:	f04f 30ff 	mov.w	r0, #4294967295
 8013024:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013028:	6921      	ldr	r1, [r4, #16]
 801302a:	464a      	mov	r2, r9
 801302c:	f7fd fffe 	bl	801102c <memcpy>
 8013030:	89a3      	ldrh	r3, [r4, #12]
 8013032:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8013036:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801303a:	81a3      	strh	r3, [r4, #12]
 801303c:	6126      	str	r6, [r4, #16]
 801303e:	6165      	str	r5, [r4, #20]
 8013040:	444e      	add	r6, r9
 8013042:	eba5 0509 	sub.w	r5, r5, r9
 8013046:	6026      	str	r6, [r4, #0]
 8013048:	60a5      	str	r5, [r4, #8]
 801304a:	463e      	mov	r6, r7
 801304c:	42be      	cmp	r6, r7
 801304e:	d900      	bls.n	8013052 <__ssputs_r+0x86>
 8013050:	463e      	mov	r6, r7
 8013052:	6820      	ldr	r0, [r4, #0]
 8013054:	4632      	mov	r2, r6
 8013056:	4641      	mov	r1, r8
 8013058:	f000 fd78 	bl	8013b4c <memmove>
 801305c:	68a3      	ldr	r3, [r4, #8]
 801305e:	1b9b      	subs	r3, r3, r6
 8013060:	60a3      	str	r3, [r4, #8]
 8013062:	6823      	ldr	r3, [r4, #0]
 8013064:	4433      	add	r3, r6
 8013066:	6023      	str	r3, [r4, #0]
 8013068:	2000      	movs	r0, #0
 801306a:	e7db      	b.n	8013024 <__ssputs_r+0x58>
 801306c:	462a      	mov	r2, r5
 801306e:	f000 fd93 	bl	8013b98 <_realloc_r>
 8013072:	4606      	mov	r6, r0
 8013074:	2800      	cmp	r0, #0
 8013076:	d1e1      	bne.n	801303c <__ssputs_r+0x70>
 8013078:	6921      	ldr	r1, [r4, #16]
 801307a:	4650      	mov	r0, sl
 801307c:	f7ff fec6 	bl	8012e0c <_free_r>
 8013080:	e7c7      	b.n	8013012 <__ssputs_r+0x46>
	...

08013084 <_svfiprintf_r>:
 8013084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013088:	4698      	mov	r8, r3
 801308a:	898b      	ldrh	r3, [r1, #12]
 801308c:	061b      	lsls	r3, r3, #24
 801308e:	b09d      	sub	sp, #116	; 0x74
 8013090:	4607      	mov	r7, r0
 8013092:	460d      	mov	r5, r1
 8013094:	4614      	mov	r4, r2
 8013096:	d50e      	bpl.n	80130b6 <_svfiprintf_r+0x32>
 8013098:	690b      	ldr	r3, [r1, #16]
 801309a:	b963      	cbnz	r3, 80130b6 <_svfiprintf_r+0x32>
 801309c:	2140      	movs	r1, #64	; 0x40
 801309e:	f7ff ff21 	bl	8012ee4 <_malloc_r>
 80130a2:	6028      	str	r0, [r5, #0]
 80130a4:	6128      	str	r0, [r5, #16]
 80130a6:	b920      	cbnz	r0, 80130b2 <_svfiprintf_r+0x2e>
 80130a8:	230c      	movs	r3, #12
 80130aa:	603b      	str	r3, [r7, #0]
 80130ac:	f04f 30ff 	mov.w	r0, #4294967295
 80130b0:	e0d1      	b.n	8013256 <_svfiprintf_r+0x1d2>
 80130b2:	2340      	movs	r3, #64	; 0x40
 80130b4:	616b      	str	r3, [r5, #20]
 80130b6:	2300      	movs	r3, #0
 80130b8:	9309      	str	r3, [sp, #36]	; 0x24
 80130ba:	2320      	movs	r3, #32
 80130bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80130c0:	f8cd 800c 	str.w	r8, [sp, #12]
 80130c4:	2330      	movs	r3, #48	; 0x30
 80130c6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8013270 <_svfiprintf_r+0x1ec>
 80130ca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80130ce:	f04f 0901 	mov.w	r9, #1
 80130d2:	4623      	mov	r3, r4
 80130d4:	469a      	mov	sl, r3
 80130d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80130da:	b10a      	cbz	r2, 80130e0 <_svfiprintf_r+0x5c>
 80130dc:	2a25      	cmp	r2, #37	; 0x25
 80130de:	d1f9      	bne.n	80130d4 <_svfiprintf_r+0x50>
 80130e0:	ebba 0b04 	subs.w	fp, sl, r4
 80130e4:	d00b      	beq.n	80130fe <_svfiprintf_r+0x7a>
 80130e6:	465b      	mov	r3, fp
 80130e8:	4622      	mov	r2, r4
 80130ea:	4629      	mov	r1, r5
 80130ec:	4638      	mov	r0, r7
 80130ee:	f7ff ff6d 	bl	8012fcc <__ssputs_r>
 80130f2:	3001      	adds	r0, #1
 80130f4:	f000 80aa 	beq.w	801324c <_svfiprintf_r+0x1c8>
 80130f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80130fa:	445a      	add	r2, fp
 80130fc:	9209      	str	r2, [sp, #36]	; 0x24
 80130fe:	f89a 3000 	ldrb.w	r3, [sl]
 8013102:	2b00      	cmp	r3, #0
 8013104:	f000 80a2 	beq.w	801324c <_svfiprintf_r+0x1c8>
 8013108:	2300      	movs	r3, #0
 801310a:	f04f 32ff 	mov.w	r2, #4294967295
 801310e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013112:	f10a 0a01 	add.w	sl, sl, #1
 8013116:	9304      	str	r3, [sp, #16]
 8013118:	9307      	str	r3, [sp, #28]
 801311a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801311e:	931a      	str	r3, [sp, #104]	; 0x68
 8013120:	4654      	mov	r4, sl
 8013122:	2205      	movs	r2, #5
 8013124:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013128:	4851      	ldr	r0, [pc, #324]	; (8013270 <_svfiprintf_r+0x1ec>)
 801312a:	f7f3 f8d1 	bl	80062d0 <memchr>
 801312e:	9a04      	ldr	r2, [sp, #16]
 8013130:	b9d8      	cbnz	r0, 801316a <_svfiprintf_r+0xe6>
 8013132:	06d0      	lsls	r0, r2, #27
 8013134:	bf44      	itt	mi
 8013136:	2320      	movmi	r3, #32
 8013138:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801313c:	0711      	lsls	r1, r2, #28
 801313e:	bf44      	itt	mi
 8013140:	232b      	movmi	r3, #43	; 0x2b
 8013142:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013146:	f89a 3000 	ldrb.w	r3, [sl]
 801314a:	2b2a      	cmp	r3, #42	; 0x2a
 801314c:	d015      	beq.n	801317a <_svfiprintf_r+0xf6>
 801314e:	9a07      	ldr	r2, [sp, #28]
 8013150:	4654      	mov	r4, sl
 8013152:	2000      	movs	r0, #0
 8013154:	f04f 0c0a 	mov.w	ip, #10
 8013158:	4621      	mov	r1, r4
 801315a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801315e:	3b30      	subs	r3, #48	; 0x30
 8013160:	2b09      	cmp	r3, #9
 8013162:	d94e      	bls.n	8013202 <_svfiprintf_r+0x17e>
 8013164:	b1b0      	cbz	r0, 8013194 <_svfiprintf_r+0x110>
 8013166:	9207      	str	r2, [sp, #28]
 8013168:	e014      	b.n	8013194 <_svfiprintf_r+0x110>
 801316a:	eba0 0308 	sub.w	r3, r0, r8
 801316e:	fa09 f303 	lsl.w	r3, r9, r3
 8013172:	4313      	orrs	r3, r2
 8013174:	9304      	str	r3, [sp, #16]
 8013176:	46a2      	mov	sl, r4
 8013178:	e7d2      	b.n	8013120 <_svfiprintf_r+0x9c>
 801317a:	9b03      	ldr	r3, [sp, #12]
 801317c:	1d19      	adds	r1, r3, #4
 801317e:	681b      	ldr	r3, [r3, #0]
 8013180:	9103      	str	r1, [sp, #12]
 8013182:	2b00      	cmp	r3, #0
 8013184:	bfbb      	ittet	lt
 8013186:	425b      	neglt	r3, r3
 8013188:	f042 0202 	orrlt.w	r2, r2, #2
 801318c:	9307      	strge	r3, [sp, #28]
 801318e:	9307      	strlt	r3, [sp, #28]
 8013190:	bfb8      	it	lt
 8013192:	9204      	strlt	r2, [sp, #16]
 8013194:	7823      	ldrb	r3, [r4, #0]
 8013196:	2b2e      	cmp	r3, #46	; 0x2e
 8013198:	d10c      	bne.n	80131b4 <_svfiprintf_r+0x130>
 801319a:	7863      	ldrb	r3, [r4, #1]
 801319c:	2b2a      	cmp	r3, #42	; 0x2a
 801319e:	d135      	bne.n	801320c <_svfiprintf_r+0x188>
 80131a0:	9b03      	ldr	r3, [sp, #12]
 80131a2:	1d1a      	adds	r2, r3, #4
 80131a4:	681b      	ldr	r3, [r3, #0]
 80131a6:	9203      	str	r2, [sp, #12]
 80131a8:	2b00      	cmp	r3, #0
 80131aa:	bfb8      	it	lt
 80131ac:	f04f 33ff 	movlt.w	r3, #4294967295
 80131b0:	3402      	adds	r4, #2
 80131b2:	9305      	str	r3, [sp, #20]
 80131b4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8013280 <_svfiprintf_r+0x1fc>
 80131b8:	7821      	ldrb	r1, [r4, #0]
 80131ba:	2203      	movs	r2, #3
 80131bc:	4650      	mov	r0, sl
 80131be:	f7f3 f887 	bl	80062d0 <memchr>
 80131c2:	b140      	cbz	r0, 80131d6 <_svfiprintf_r+0x152>
 80131c4:	2340      	movs	r3, #64	; 0x40
 80131c6:	eba0 000a 	sub.w	r0, r0, sl
 80131ca:	fa03 f000 	lsl.w	r0, r3, r0
 80131ce:	9b04      	ldr	r3, [sp, #16]
 80131d0:	4303      	orrs	r3, r0
 80131d2:	3401      	adds	r4, #1
 80131d4:	9304      	str	r3, [sp, #16]
 80131d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80131da:	4826      	ldr	r0, [pc, #152]	; (8013274 <_svfiprintf_r+0x1f0>)
 80131dc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80131e0:	2206      	movs	r2, #6
 80131e2:	f7f3 f875 	bl	80062d0 <memchr>
 80131e6:	2800      	cmp	r0, #0
 80131e8:	d038      	beq.n	801325c <_svfiprintf_r+0x1d8>
 80131ea:	4b23      	ldr	r3, [pc, #140]	; (8013278 <_svfiprintf_r+0x1f4>)
 80131ec:	bb1b      	cbnz	r3, 8013236 <_svfiprintf_r+0x1b2>
 80131ee:	9b03      	ldr	r3, [sp, #12]
 80131f0:	3307      	adds	r3, #7
 80131f2:	f023 0307 	bic.w	r3, r3, #7
 80131f6:	3308      	adds	r3, #8
 80131f8:	9303      	str	r3, [sp, #12]
 80131fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80131fc:	4433      	add	r3, r6
 80131fe:	9309      	str	r3, [sp, #36]	; 0x24
 8013200:	e767      	b.n	80130d2 <_svfiprintf_r+0x4e>
 8013202:	fb0c 3202 	mla	r2, ip, r2, r3
 8013206:	460c      	mov	r4, r1
 8013208:	2001      	movs	r0, #1
 801320a:	e7a5      	b.n	8013158 <_svfiprintf_r+0xd4>
 801320c:	2300      	movs	r3, #0
 801320e:	3401      	adds	r4, #1
 8013210:	9305      	str	r3, [sp, #20]
 8013212:	4619      	mov	r1, r3
 8013214:	f04f 0c0a 	mov.w	ip, #10
 8013218:	4620      	mov	r0, r4
 801321a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801321e:	3a30      	subs	r2, #48	; 0x30
 8013220:	2a09      	cmp	r2, #9
 8013222:	d903      	bls.n	801322c <_svfiprintf_r+0x1a8>
 8013224:	2b00      	cmp	r3, #0
 8013226:	d0c5      	beq.n	80131b4 <_svfiprintf_r+0x130>
 8013228:	9105      	str	r1, [sp, #20]
 801322a:	e7c3      	b.n	80131b4 <_svfiprintf_r+0x130>
 801322c:	fb0c 2101 	mla	r1, ip, r1, r2
 8013230:	4604      	mov	r4, r0
 8013232:	2301      	movs	r3, #1
 8013234:	e7f0      	b.n	8013218 <_svfiprintf_r+0x194>
 8013236:	ab03      	add	r3, sp, #12
 8013238:	9300      	str	r3, [sp, #0]
 801323a:	462a      	mov	r2, r5
 801323c:	4b0f      	ldr	r3, [pc, #60]	; (801327c <_svfiprintf_r+0x1f8>)
 801323e:	a904      	add	r1, sp, #16
 8013240:	4638      	mov	r0, r7
 8013242:	f7fd ffa9 	bl	8011198 <_printf_float>
 8013246:	1c42      	adds	r2, r0, #1
 8013248:	4606      	mov	r6, r0
 801324a:	d1d6      	bne.n	80131fa <_svfiprintf_r+0x176>
 801324c:	89ab      	ldrh	r3, [r5, #12]
 801324e:	065b      	lsls	r3, r3, #25
 8013250:	f53f af2c 	bmi.w	80130ac <_svfiprintf_r+0x28>
 8013254:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013256:	b01d      	add	sp, #116	; 0x74
 8013258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801325c:	ab03      	add	r3, sp, #12
 801325e:	9300      	str	r3, [sp, #0]
 8013260:	462a      	mov	r2, r5
 8013262:	4b06      	ldr	r3, [pc, #24]	; (801327c <_svfiprintf_r+0x1f8>)
 8013264:	a904      	add	r1, sp, #16
 8013266:	4638      	mov	r0, r7
 8013268:	f7fe fa3a 	bl	80116e0 <_printf_i>
 801326c:	e7eb      	b.n	8013246 <_svfiprintf_r+0x1c2>
 801326e:	bf00      	nop
 8013270:	0807ceb4 	.word	0x0807ceb4
 8013274:	0807cebe 	.word	0x0807cebe
 8013278:	08011199 	.word	0x08011199
 801327c:	08012fcd 	.word	0x08012fcd
 8013280:	0807ceba 	.word	0x0807ceba

08013284 <__sfputc_r>:
 8013284:	6893      	ldr	r3, [r2, #8]
 8013286:	3b01      	subs	r3, #1
 8013288:	2b00      	cmp	r3, #0
 801328a:	b410      	push	{r4}
 801328c:	6093      	str	r3, [r2, #8]
 801328e:	da08      	bge.n	80132a2 <__sfputc_r+0x1e>
 8013290:	6994      	ldr	r4, [r2, #24]
 8013292:	42a3      	cmp	r3, r4
 8013294:	db01      	blt.n	801329a <__sfputc_r+0x16>
 8013296:	290a      	cmp	r1, #10
 8013298:	d103      	bne.n	80132a2 <__sfputc_r+0x1e>
 801329a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801329e:	f000 b95b 	b.w	8013558 <__swbuf_r>
 80132a2:	6813      	ldr	r3, [r2, #0]
 80132a4:	1c58      	adds	r0, r3, #1
 80132a6:	6010      	str	r0, [r2, #0]
 80132a8:	7019      	strb	r1, [r3, #0]
 80132aa:	4608      	mov	r0, r1
 80132ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80132b0:	4770      	bx	lr

080132b2 <__sfputs_r>:
 80132b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80132b4:	4606      	mov	r6, r0
 80132b6:	460f      	mov	r7, r1
 80132b8:	4614      	mov	r4, r2
 80132ba:	18d5      	adds	r5, r2, r3
 80132bc:	42ac      	cmp	r4, r5
 80132be:	d101      	bne.n	80132c4 <__sfputs_r+0x12>
 80132c0:	2000      	movs	r0, #0
 80132c2:	e007      	b.n	80132d4 <__sfputs_r+0x22>
 80132c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80132c8:	463a      	mov	r2, r7
 80132ca:	4630      	mov	r0, r6
 80132cc:	f7ff ffda 	bl	8013284 <__sfputc_r>
 80132d0:	1c43      	adds	r3, r0, #1
 80132d2:	d1f3      	bne.n	80132bc <__sfputs_r+0xa>
 80132d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080132d8 <_vfiprintf_r>:
 80132d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80132dc:	460d      	mov	r5, r1
 80132de:	b09d      	sub	sp, #116	; 0x74
 80132e0:	4614      	mov	r4, r2
 80132e2:	4698      	mov	r8, r3
 80132e4:	4606      	mov	r6, r0
 80132e6:	b118      	cbz	r0, 80132f0 <_vfiprintf_r+0x18>
 80132e8:	6983      	ldr	r3, [r0, #24]
 80132ea:	b90b      	cbnz	r3, 80132f0 <_vfiprintf_r+0x18>
 80132ec:	f000 fb16 	bl	801391c <__sinit>
 80132f0:	4b89      	ldr	r3, [pc, #548]	; (8013518 <_vfiprintf_r+0x240>)
 80132f2:	429d      	cmp	r5, r3
 80132f4:	d11b      	bne.n	801332e <_vfiprintf_r+0x56>
 80132f6:	6875      	ldr	r5, [r6, #4]
 80132f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80132fa:	07d9      	lsls	r1, r3, #31
 80132fc:	d405      	bmi.n	801330a <_vfiprintf_r+0x32>
 80132fe:	89ab      	ldrh	r3, [r5, #12]
 8013300:	059a      	lsls	r2, r3, #22
 8013302:	d402      	bmi.n	801330a <_vfiprintf_r+0x32>
 8013304:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013306:	f000 fba7 	bl	8013a58 <__retarget_lock_acquire_recursive>
 801330a:	89ab      	ldrh	r3, [r5, #12]
 801330c:	071b      	lsls	r3, r3, #28
 801330e:	d501      	bpl.n	8013314 <_vfiprintf_r+0x3c>
 8013310:	692b      	ldr	r3, [r5, #16]
 8013312:	b9eb      	cbnz	r3, 8013350 <_vfiprintf_r+0x78>
 8013314:	4629      	mov	r1, r5
 8013316:	4630      	mov	r0, r6
 8013318:	f000 f970 	bl	80135fc <__swsetup_r>
 801331c:	b1c0      	cbz	r0, 8013350 <_vfiprintf_r+0x78>
 801331e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013320:	07dc      	lsls	r4, r3, #31
 8013322:	d50e      	bpl.n	8013342 <_vfiprintf_r+0x6a>
 8013324:	f04f 30ff 	mov.w	r0, #4294967295
 8013328:	b01d      	add	sp, #116	; 0x74
 801332a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801332e:	4b7b      	ldr	r3, [pc, #492]	; (801351c <_vfiprintf_r+0x244>)
 8013330:	429d      	cmp	r5, r3
 8013332:	d101      	bne.n	8013338 <_vfiprintf_r+0x60>
 8013334:	68b5      	ldr	r5, [r6, #8]
 8013336:	e7df      	b.n	80132f8 <_vfiprintf_r+0x20>
 8013338:	4b79      	ldr	r3, [pc, #484]	; (8013520 <_vfiprintf_r+0x248>)
 801333a:	429d      	cmp	r5, r3
 801333c:	bf08      	it	eq
 801333e:	68f5      	ldreq	r5, [r6, #12]
 8013340:	e7da      	b.n	80132f8 <_vfiprintf_r+0x20>
 8013342:	89ab      	ldrh	r3, [r5, #12]
 8013344:	0598      	lsls	r0, r3, #22
 8013346:	d4ed      	bmi.n	8013324 <_vfiprintf_r+0x4c>
 8013348:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801334a:	f000 fb86 	bl	8013a5a <__retarget_lock_release_recursive>
 801334e:	e7e9      	b.n	8013324 <_vfiprintf_r+0x4c>
 8013350:	2300      	movs	r3, #0
 8013352:	9309      	str	r3, [sp, #36]	; 0x24
 8013354:	2320      	movs	r3, #32
 8013356:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801335a:	f8cd 800c 	str.w	r8, [sp, #12]
 801335e:	2330      	movs	r3, #48	; 0x30
 8013360:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8013524 <_vfiprintf_r+0x24c>
 8013364:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013368:	f04f 0901 	mov.w	r9, #1
 801336c:	4623      	mov	r3, r4
 801336e:	469a      	mov	sl, r3
 8013370:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013374:	b10a      	cbz	r2, 801337a <_vfiprintf_r+0xa2>
 8013376:	2a25      	cmp	r2, #37	; 0x25
 8013378:	d1f9      	bne.n	801336e <_vfiprintf_r+0x96>
 801337a:	ebba 0b04 	subs.w	fp, sl, r4
 801337e:	d00b      	beq.n	8013398 <_vfiprintf_r+0xc0>
 8013380:	465b      	mov	r3, fp
 8013382:	4622      	mov	r2, r4
 8013384:	4629      	mov	r1, r5
 8013386:	4630      	mov	r0, r6
 8013388:	f7ff ff93 	bl	80132b2 <__sfputs_r>
 801338c:	3001      	adds	r0, #1
 801338e:	f000 80aa 	beq.w	80134e6 <_vfiprintf_r+0x20e>
 8013392:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013394:	445a      	add	r2, fp
 8013396:	9209      	str	r2, [sp, #36]	; 0x24
 8013398:	f89a 3000 	ldrb.w	r3, [sl]
 801339c:	2b00      	cmp	r3, #0
 801339e:	f000 80a2 	beq.w	80134e6 <_vfiprintf_r+0x20e>
 80133a2:	2300      	movs	r3, #0
 80133a4:	f04f 32ff 	mov.w	r2, #4294967295
 80133a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80133ac:	f10a 0a01 	add.w	sl, sl, #1
 80133b0:	9304      	str	r3, [sp, #16]
 80133b2:	9307      	str	r3, [sp, #28]
 80133b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80133b8:	931a      	str	r3, [sp, #104]	; 0x68
 80133ba:	4654      	mov	r4, sl
 80133bc:	2205      	movs	r2, #5
 80133be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80133c2:	4858      	ldr	r0, [pc, #352]	; (8013524 <_vfiprintf_r+0x24c>)
 80133c4:	f7f2 ff84 	bl	80062d0 <memchr>
 80133c8:	9a04      	ldr	r2, [sp, #16]
 80133ca:	b9d8      	cbnz	r0, 8013404 <_vfiprintf_r+0x12c>
 80133cc:	06d1      	lsls	r1, r2, #27
 80133ce:	bf44      	itt	mi
 80133d0:	2320      	movmi	r3, #32
 80133d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80133d6:	0713      	lsls	r3, r2, #28
 80133d8:	bf44      	itt	mi
 80133da:	232b      	movmi	r3, #43	; 0x2b
 80133dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80133e0:	f89a 3000 	ldrb.w	r3, [sl]
 80133e4:	2b2a      	cmp	r3, #42	; 0x2a
 80133e6:	d015      	beq.n	8013414 <_vfiprintf_r+0x13c>
 80133e8:	9a07      	ldr	r2, [sp, #28]
 80133ea:	4654      	mov	r4, sl
 80133ec:	2000      	movs	r0, #0
 80133ee:	f04f 0c0a 	mov.w	ip, #10
 80133f2:	4621      	mov	r1, r4
 80133f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80133f8:	3b30      	subs	r3, #48	; 0x30
 80133fa:	2b09      	cmp	r3, #9
 80133fc:	d94e      	bls.n	801349c <_vfiprintf_r+0x1c4>
 80133fe:	b1b0      	cbz	r0, 801342e <_vfiprintf_r+0x156>
 8013400:	9207      	str	r2, [sp, #28]
 8013402:	e014      	b.n	801342e <_vfiprintf_r+0x156>
 8013404:	eba0 0308 	sub.w	r3, r0, r8
 8013408:	fa09 f303 	lsl.w	r3, r9, r3
 801340c:	4313      	orrs	r3, r2
 801340e:	9304      	str	r3, [sp, #16]
 8013410:	46a2      	mov	sl, r4
 8013412:	e7d2      	b.n	80133ba <_vfiprintf_r+0xe2>
 8013414:	9b03      	ldr	r3, [sp, #12]
 8013416:	1d19      	adds	r1, r3, #4
 8013418:	681b      	ldr	r3, [r3, #0]
 801341a:	9103      	str	r1, [sp, #12]
 801341c:	2b00      	cmp	r3, #0
 801341e:	bfbb      	ittet	lt
 8013420:	425b      	neglt	r3, r3
 8013422:	f042 0202 	orrlt.w	r2, r2, #2
 8013426:	9307      	strge	r3, [sp, #28]
 8013428:	9307      	strlt	r3, [sp, #28]
 801342a:	bfb8      	it	lt
 801342c:	9204      	strlt	r2, [sp, #16]
 801342e:	7823      	ldrb	r3, [r4, #0]
 8013430:	2b2e      	cmp	r3, #46	; 0x2e
 8013432:	d10c      	bne.n	801344e <_vfiprintf_r+0x176>
 8013434:	7863      	ldrb	r3, [r4, #1]
 8013436:	2b2a      	cmp	r3, #42	; 0x2a
 8013438:	d135      	bne.n	80134a6 <_vfiprintf_r+0x1ce>
 801343a:	9b03      	ldr	r3, [sp, #12]
 801343c:	1d1a      	adds	r2, r3, #4
 801343e:	681b      	ldr	r3, [r3, #0]
 8013440:	9203      	str	r2, [sp, #12]
 8013442:	2b00      	cmp	r3, #0
 8013444:	bfb8      	it	lt
 8013446:	f04f 33ff 	movlt.w	r3, #4294967295
 801344a:	3402      	adds	r4, #2
 801344c:	9305      	str	r3, [sp, #20]
 801344e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8013534 <_vfiprintf_r+0x25c>
 8013452:	7821      	ldrb	r1, [r4, #0]
 8013454:	2203      	movs	r2, #3
 8013456:	4650      	mov	r0, sl
 8013458:	f7f2 ff3a 	bl	80062d0 <memchr>
 801345c:	b140      	cbz	r0, 8013470 <_vfiprintf_r+0x198>
 801345e:	2340      	movs	r3, #64	; 0x40
 8013460:	eba0 000a 	sub.w	r0, r0, sl
 8013464:	fa03 f000 	lsl.w	r0, r3, r0
 8013468:	9b04      	ldr	r3, [sp, #16]
 801346a:	4303      	orrs	r3, r0
 801346c:	3401      	adds	r4, #1
 801346e:	9304      	str	r3, [sp, #16]
 8013470:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013474:	482c      	ldr	r0, [pc, #176]	; (8013528 <_vfiprintf_r+0x250>)
 8013476:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801347a:	2206      	movs	r2, #6
 801347c:	f7f2 ff28 	bl	80062d0 <memchr>
 8013480:	2800      	cmp	r0, #0
 8013482:	d03f      	beq.n	8013504 <_vfiprintf_r+0x22c>
 8013484:	4b29      	ldr	r3, [pc, #164]	; (801352c <_vfiprintf_r+0x254>)
 8013486:	bb1b      	cbnz	r3, 80134d0 <_vfiprintf_r+0x1f8>
 8013488:	9b03      	ldr	r3, [sp, #12]
 801348a:	3307      	adds	r3, #7
 801348c:	f023 0307 	bic.w	r3, r3, #7
 8013490:	3308      	adds	r3, #8
 8013492:	9303      	str	r3, [sp, #12]
 8013494:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013496:	443b      	add	r3, r7
 8013498:	9309      	str	r3, [sp, #36]	; 0x24
 801349a:	e767      	b.n	801336c <_vfiprintf_r+0x94>
 801349c:	fb0c 3202 	mla	r2, ip, r2, r3
 80134a0:	460c      	mov	r4, r1
 80134a2:	2001      	movs	r0, #1
 80134a4:	e7a5      	b.n	80133f2 <_vfiprintf_r+0x11a>
 80134a6:	2300      	movs	r3, #0
 80134a8:	3401      	adds	r4, #1
 80134aa:	9305      	str	r3, [sp, #20]
 80134ac:	4619      	mov	r1, r3
 80134ae:	f04f 0c0a 	mov.w	ip, #10
 80134b2:	4620      	mov	r0, r4
 80134b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80134b8:	3a30      	subs	r2, #48	; 0x30
 80134ba:	2a09      	cmp	r2, #9
 80134bc:	d903      	bls.n	80134c6 <_vfiprintf_r+0x1ee>
 80134be:	2b00      	cmp	r3, #0
 80134c0:	d0c5      	beq.n	801344e <_vfiprintf_r+0x176>
 80134c2:	9105      	str	r1, [sp, #20]
 80134c4:	e7c3      	b.n	801344e <_vfiprintf_r+0x176>
 80134c6:	fb0c 2101 	mla	r1, ip, r1, r2
 80134ca:	4604      	mov	r4, r0
 80134cc:	2301      	movs	r3, #1
 80134ce:	e7f0      	b.n	80134b2 <_vfiprintf_r+0x1da>
 80134d0:	ab03      	add	r3, sp, #12
 80134d2:	9300      	str	r3, [sp, #0]
 80134d4:	462a      	mov	r2, r5
 80134d6:	4b16      	ldr	r3, [pc, #88]	; (8013530 <_vfiprintf_r+0x258>)
 80134d8:	a904      	add	r1, sp, #16
 80134da:	4630      	mov	r0, r6
 80134dc:	f7fd fe5c 	bl	8011198 <_printf_float>
 80134e0:	4607      	mov	r7, r0
 80134e2:	1c78      	adds	r0, r7, #1
 80134e4:	d1d6      	bne.n	8013494 <_vfiprintf_r+0x1bc>
 80134e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80134e8:	07d9      	lsls	r1, r3, #31
 80134ea:	d405      	bmi.n	80134f8 <_vfiprintf_r+0x220>
 80134ec:	89ab      	ldrh	r3, [r5, #12]
 80134ee:	059a      	lsls	r2, r3, #22
 80134f0:	d402      	bmi.n	80134f8 <_vfiprintf_r+0x220>
 80134f2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80134f4:	f000 fab1 	bl	8013a5a <__retarget_lock_release_recursive>
 80134f8:	89ab      	ldrh	r3, [r5, #12]
 80134fa:	065b      	lsls	r3, r3, #25
 80134fc:	f53f af12 	bmi.w	8013324 <_vfiprintf_r+0x4c>
 8013500:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013502:	e711      	b.n	8013328 <_vfiprintf_r+0x50>
 8013504:	ab03      	add	r3, sp, #12
 8013506:	9300      	str	r3, [sp, #0]
 8013508:	462a      	mov	r2, r5
 801350a:	4b09      	ldr	r3, [pc, #36]	; (8013530 <_vfiprintf_r+0x258>)
 801350c:	a904      	add	r1, sp, #16
 801350e:	4630      	mov	r0, r6
 8013510:	f7fe f8e6 	bl	80116e0 <_printf_i>
 8013514:	e7e4      	b.n	80134e0 <_vfiprintf_r+0x208>
 8013516:	bf00      	nop
 8013518:	0807cee8 	.word	0x0807cee8
 801351c:	0807cf08 	.word	0x0807cf08
 8013520:	0807cec8 	.word	0x0807cec8
 8013524:	0807ceb4 	.word	0x0807ceb4
 8013528:	0807cebe 	.word	0x0807cebe
 801352c:	08011199 	.word	0x08011199
 8013530:	080132b3 	.word	0x080132b3
 8013534:	0807ceba 	.word	0x0807ceba

08013538 <_sbrk_r>:
 8013538:	b538      	push	{r3, r4, r5, lr}
 801353a:	4d06      	ldr	r5, [pc, #24]	; (8013554 <_sbrk_r+0x1c>)
 801353c:	2300      	movs	r3, #0
 801353e:	4604      	mov	r4, r0
 8013540:	4608      	mov	r0, r1
 8013542:	602b      	str	r3, [r5, #0]
 8013544:	f7f4 fd1c 	bl	8007f80 <_sbrk>
 8013548:	1c43      	adds	r3, r0, #1
 801354a:	d102      	bne.n	8013552 <_sbrk_r+0x1a>
 801354c:	682b      	ldr	r3, [r5, #0]
 801354e:	b103      	cbz	r3, 8013552 <_sbrk_r+0x1a>
 8013550:	6023      	str	r3, [r4, #0]
 8013552:	bd38      	pop	{r3, r4, r5, pc}
 8013554:	20019e18 	.word	0x20019e18

08013558 <__swbuf_r>:
 8013558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801355a:	460e      	mov	r6, r1
 801355c:	4614      	mov	r4, r2
 801355e:	4605      	mov	r5, r0
 8013560:	b118      	cbz	r0, 801356a <__swbuf_r+0x12>
 8013562:	6983      	ldr	r3, [r0, #24]
 8013564:	b90b      	cbnz	r3, 801356a <__swbuf_r+0x12>
 8013566:	f000 f9d9 	bl	801391c <__sinit>
 801356a:	4b21      	ldr	r3, [pc, #132]	; (80135f0 <__swbuf_r+0x98>)
 801356c:	429c      	cmp	r4, r3
 801356e:	d12b      	bne.n	80135c8 <__swbuf_r+0x70>
 8013570:	686c      	ldr	r4, [r5, #4]
 8013572:	69a3      	ldr	r3, [r4, #24]
 8013574:	60a3      	str	r3, [r4, #8]
 8013576:	89a3      	ldrh	r3, [r4, #12]
 8013578:	071a      	lsls	r2, r3, #28
 801357a:	d52f      	bpl.n	80135dc <__swbuf_r+0x84>
 801357c:	6923      	ldr	r3, [r4, #16]
 801357e:	b36b      	cbz	r3, 80135dc <__swbuf_r+0x84>
 8013580:	6923      	ldr	r3, [r4, #16]
 8013582:	6820      	ldr	r0, [r4, #0]
 8013584:	1ac0      	subs	r0, r0, r3
 8013586:	6963      	ldr	r3, [r4, #20]
 8013588:	b2f6      	uxtb	r6, r6
 801358a:	4283      	cmp	r3, r0
 801358c:	4637      	mov	r7, r6
 801358e:	dc04      	bgt.n	801359a <__swbuf_r+0x42>
 8013590:	4621      	mov	r1, r4
 8013592:	4628      	mov	r0, r5
 8013594:	f000 f92e 	bl	80137f4 <_fflush_r>
 8013598:	bb30      	cbnz	r0, 80135e8 <__swbuf_r+0x90>
 801359a:	68a3      	ldr	r3, [r4, #8]
 801359c:	3b01      	subs	r3, #1
 801359e:	60a3      	str	r3, [r4, #8]
 80135a0:	6823      	ldr	r3, [r4, #0]
 80135a2:	1c5a      	adds	r2, r3, #1
 80135a4:	6022      	str	r2, [r4, #0]
 80135a6:	701e      	strb	r6, [r3, #0]
 80135a8:	6963      	ldr	r3, [r4, #20]
 80135aa:	3001      	adds	r0, #1
 80135ac:	4283      	cmp	r3, r0
 80135ae:	d004      	beq.n	80135ba <__swbuf_r+0x62>
 80135b0:	89a3      	ldrh	r3, [r4, #12]
 80135b2:	07db      	lsls	r3, r3, #31
 80135b4:	d506      	bpl.n	80135c4 <__swbuf_r+0x6c>
 80135b6:	2e0a      	cmp	r6, #10
 80135b8:	d104      	bne.n	80135c4 <__swbuf_r+0x6c>
 80135ba:	4621      	mov	r1, r4
 80135bc:	4628      	mov	r0, r5
 80135be:	f000 f919 	bl	80137f4 <_fflush_r>
 80135c2:	b988      	cbnz	r0, 80135e8 <__swbuf_r+0x90>
 80135c4:	4638      	mov	r0, r7
 80135c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80135c8:	4b0a      	ldr	r3, [pc, #40]	; (80135f4 <__swbuf_r+0x9c>)
 80135ca:	429c      	cmp	r4, r3
 80135cc:	d101      	bne.n	80135d2 <__swbuf_r+0x7a>
 80135ce:	68ac      	ldr	r4, [r5, #8]
 80135d0:	e7cf      	b.n	8013572 <__swbuf_r+0x1a>
 80135d2:	4b09      	ldr	r3, [pc, #36]	; (80135f8 <__swbuf_r+0xa0>)
 80135d4:	429c      	cmp	r4, r3
 80135d6:	bf08      	it	eq
 80135d8:	68ec      	ldreq	r4, [r5, #12]
 80135da:	e7ca      	b.n	8013572 <__swbuf_r+0x1a>
 80135dc:	4621      	mov	r1, r4
 80135de:	4628      	mov	r0, r5
 80135e0:	f000 f80c 	bl	80135fc <__swsetup_r>
 80135e4:	2800      	cmp	r0, #0
 80135e6:	d0cb      	beq.n	8013580 <__swbuf_r+0x28>
 80135e8:	f04f 37ff 	mov.w	r7, #4294967295
 80135ec:	e7ea      	b.n	80135c4 <__swbuf_r+0x6c>
 80135ee:	bf00      	nop
 80135f0:	0807cee8 	.word	0x0807cee8
 80135f4:	0807cf08 	.word	0x0807cf08
 80135f8:	0807cec8 	.word	0x0807cec8

080135fc <__swsetup_r>:
 80135fc:	4b32      	ldr	r3, [pc, #200]	; (80136c8 <__swsetup_r+0xcc>)
 80135fe:	b570      	push	{r4, r5, r6, lr}
 8013600:	681d      	ldr	r5, [r3, #0]
 8013602:	4606      	mov	r6, r0
 8013604:	460c      	mov	r4, r1
 8013606:	b125      	cbz	r5, 8013612 <__swsetup_r+0x16>
 8013608:	69ab      	ldr	r3, [r5, #24]
 801360a:	b913      	cbnz	r3, 8013612 <__swsetup_r+0x16>
 801360c:	4628      	mov	r0, r5
 801360e:	f000 f985 	bl	801391c <__sinit>
 8013612:	4b2e      	ldr	r3, [pc, #184]	; (80136cc <__swsetup_r+0xd0>)
 8013614:	429c      	cmp	r4, r3
 8013616:	d10f      	bne.n	8013638 <__swsetup_r+0x3c>
 8013618:	686c      	ldr	r4, [r5, #4]
 801361a:	89a3      	ldrh	r3, [r4, #12]
 801361c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013620:	0719      	lsls	r1, r3, #28
 8013622:	d42c      	bmi.n	801367e <__swsetup_r+0x82>
 8013624:	06dd      	lsls	r5, r3, #27
 8013626:	d411      	bmi.n	801364c <__swsetup_r+0x50>
 8013628:	2309      	movs	r3, #9
 801362a:	6033      	str	r3, [r6, #0]
 801362c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013630:	81a3      	strh	r3, [r4, #12]
 8013632:	f04f 30ff 	mov.w	r0, #4294967295
 8013636:	e03e      	b.n	80136b6 <__swsetup_r+0xba>
 8013638:	4b25      	ldr	r3, [pc, #148]	; (80136d0 <__swsetup_r+0xd4>)
 801363a:	429c      	cmp	r4, r3
 801363c:	d101      	bne.n	8013642 <__swsetup_r+0x46>
 801363e:	68ac      	ldr	r4, [r5, #8]
 8013640:	e7eb      	b.n	801361a <__swsetup_r+0x1e>
 8013642:	4b24      	ldr	r3, [pc, #144]	; (80136d4 <__swsetup_r+0xd8>)
 8013644:	429c      	cmp	r4, r3
 8013646:	bf08      	it	eq
 8013648:	68ec      	ldreq	r4, [r5, #12]
 801364a:	e7e6      	b.n	801361a <__swsetup_r+0x1e>
 801364c:	0758      	lsls	r0, r3, #29
 801364e:	d512      	bpl.n	8013676 <__swsetup_r+0x7a>
 8013650:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013652:	b141      	cbz	r1, 8013666 <__swsetup_r+0x6a>
 8013654:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013658:	4299      	cmp	r1, r3
 801365a:	d002      	beq.n	8013662 <__swsetup_r+0x66>
 801365c:	4630      	mov	r0, r6
 801365e:	f7ff fbd5 	bl	8012e0c <_free_r>
 8013662:	2300      	movs	r3, #0
 8013664:	6363      	str	r3, [r4, #52]	; 0x34
 8013666:	89a3      	ldrh	r3, [r4, #12]
 8013668:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801366c:	81a3      	strh	r3, [r4, #12]
 801366e:	2300      	movs	r3, #0
 8013670:	6063      	str	r3, [r4, #4]
 8013672:	6923      	ldr	r3, [r4, #16]
 8013674:	6023      	str	r3, [r4, #0]
 8013676:	89a3      	ldrh	r3, [r4, #12]
 8013678:	f043 0308 	orr.w	r3, r3, #8
 801367c:	81a3      	strh	r3, [r4, #12]
 801367e:	6923      	ldr	r3, [r4, #16]
 8013680:	b94b      	cbnz	r3, 8013696 <__swsetup_r+0x9a>
 8013682:	89a3      	ldrh	r3, [r4, #12]
 8013684:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013688:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801368c:	d003      	beq.n	8013696 <__swsetup_r+0x9a>
 801368e:	4621      	mov	r1, r4
 8013690:	4630      	mov	r0, r6
 8013692:	f000 fa09 	bl	8013aa8 <__smakebuf_r>
 8013696:	89a0      	ldrh	r0, [r4, #12]
 8013698:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801369c:	f010 0301 	ands.w	r3, r0, #1
 80136a0:	d00a      	beq.n	80136b8 <__swsetup_r+0xbc>
 80136a2:	2300      	movs	r3, #0
 80136a4:	60a3      	str	r3, [r4, #8]
 80136a6:	6963      	ldr	r3, [r4, #20]
 80136a8:	425b      	negs	r3, r3
 80136aa:	61a3      	str	r3, [r4, #24]
 80136ac:	6923      	ldr	r3, [r4, #16]
 80136ae:	b943      	cbnz	r3, 80136c2 <__swsetup_r+0xc6>
 80136b0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80136b4:	d1ba      	bne.n	801362c <__swsetup_r+0x30>
 80136b6:	bd70      	pop	{r4, r5, r6, pc}
 80136b8:	0781      	lsls	r1, r0, #30
 80136ba:	bf58      	it	pl
 80136bc:	6963      	ldrpl	r3, [r4, #20]
 80136be:	60a3      	str	r3, [r4, #8]
 80136c0:	e7f4      	b.n	80136ac <__swsetup_r+0xb0>
 80136c2:	2000      	movs	r0, #0
 80136c4:	e7f7      	b.n	80136b6 <__swsetup_r+0xba>
 80136c6:	bf00      	nop
 80136c8:	20000c34 	.word	0x20000c34
 80136cc:	0807cee8 	.word	0x0807cee8
 80136d0:	0807cf08 	.word	0x0807cf08
 80136d4:	0807cec8 	.word	0x0807cec8

080136d8 <abort>:
 80136d8:	b508      	push	{r3, lr}
 80136da:	2006      	movs	r0, #6
 80136dc:	f000 fab4 	bl	8013c48 <raise>
 80136e0:	2001      	movs	r0, #1
 80136e2:	f7f4 fbd5 	bl	8007e90 <_exit>
	...

080136e8 <__sflush_r>:
 80136e8:	898a      	ldrh	r2, [r1, #12]
 80136ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80136ee:	4605      	mov	r5, r0
 80136f0:	0710      	lsls	r0, r2, #28
 80136f2:	460c      	mov	r4, r1
 80136f4:	d458      	bmi.n	80137a8 <__sflush_r+0xc0>
 80136f6:	684b      	ldr	r3, [r1, #4]
 80136f8:	2b00      	cmp	r3, #0
 80136fa:	dc05      	bgt.n	8013708 <__sflush_r+0x20>
 80136fc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80136fe:	2b00      	cmp	r3, #0
 8013700:	dc02      	bgt.n	8013708 <__sflush_r+0x20>
 8013702:	2000      	movs	r0, #0
 8013704:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013708:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801370a:	2e00      	cmp	r6, #0
 801370c:	d0f9      	beq.n	8013702 <__sflush_r+0x1a>
 801370e:	2300      	movs	r3, #0
 8013710:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013714:	682f      	ldr	r7, [r5, #0]
 8013716:	602b      	str	r3, [r5, #0]
 8013718:	d032      	beq.n	8013780 <__sflush_r+0x98>
 801371a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801371c:	89a3      	ldrh	r3, [r4, #12]
 801371e:	075a      	lsls	r2, r3, #29
 8013720:	d505      	bpl.n	801372e <__sflush_r+0x46>
 8013722:	6863      	ldr	r3, [r4, #4]
 8013724:	1ac0      	subs	r0, r0, r3
 8013726:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013728:	b10b      	cbz	r3, 801372e <__sflush_r+0x46>
 801372a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801372c:	1ac0      	subs	r0, r0, r3
 801372e:	2300      	movs	r3, #0
 8013730:	4602      	mov	r2, r0
 8013732:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013734:	6a21      	ldr	r1, [r4, #32]
 8013736:	4628      	mov	r0, r5
 8013738:	47b0      	blx	r6
 801373a:	1c43      	adds	r3, r0, #1
 801373c:	89a3      	ldrh	r3, [r4, #12]
 801373e:	d106      	bne.n	801374e <__sflush_r+0x66>
 8013740:	6829      	ldr	r1, [r5, #0]
 8013742:	291d      	cmp	r1, #29
 8013744:	d82c      	bhi.n	80137a0 <__sflush_r+0xb8>
 8013746:	4a2a      	ldr	r2, [pc, #168]	; (80137f0 <__sflush_r+0x108>)
 8013748:	40ca      	lsrs	r2, r1
 801374a:	07d6      	lsls	r6, r2, #31
 801374c:	d528      	bpl.n	80137a0 <__sflush_r+0xb8>
 801374e:	2200      	movs	r2, #0
 8013750:	6062      	str	r2, [r4, #4]
 8013752:	04d9      	lsls	r1, r3, #19
 8013754:	6922      	ldr	r2, [r4, #16]
 8013756:	6022      	str	r2, [r4, #0]
 8013758:	d504      	bpl.n	8013764 <__sflush_r+0x7c>
 801375a:	1c42      	adds	r2, r0, #1
 801375c:	d101      	bne.n	8013762 <__sflush_r+0x7a>
 801375e:	682b      	ldr	r3, [r5, #0]
 8013760:	b903      	cbnz	r3, 8013764 <__sflush_r+0x7c>
 8013762:	6560      	str	r0, [r4, #84]	; 0x54
 8013764:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013766:	602f      	str	r7, [r5, #0]
 8013768:	2900      	cmp	r1, #0
 801376a:	d0ca      	beq.n	8013702 <__sflush_r+0x1a>
 801376c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013770:	4299      	cmp	r1, r3
 8013772:	d002      	beq.n	801377a <__sflush_r+0x92>
 8013774:	4628      	mov	r0, r5
 8013776:	f7ff fb49 	bl	8012e0c <_free_r>
 801377a:	2000      	movs	r0, #0
 801377c:	6360      	str	r0, [r4, #52]	; 0x34
 801377e:	e7c1      	b.n	8013704 <__sflush_r+0x1c>
 8013780:	6a21      	ldr	r1, [r4, #32]
 8013782:	2301      	movs	r3, #1
 8013784:	4628      	mov	r0, r5
 8013786:	47b0      	blx	r6
 8013788:	1c41      	adds	r1, r0, #1
 801378a:	d1c7      	bne.n	801371c <__sflush_r+0x34>
 801378c:	682b      	ldr	r3, [r5, #0]
 801378e:	2b00      	cmp	r3, #0
 8013790:	d0c4      	beq.n	801371c <__sflush_r+0x34>
 8013792:	2b1d      	cmp	r3, #29
 8013794:	d001      	beq.n	801379a <__sflush_r+0xb2>
 8013796:	2b16      	cmp	r3, #22
 8013798:	d101      	bne.n	801379e <__sflush_r+0xb6>
 801379a:	602f      	str	r7, [r5, #0]
 801379c:	e7b1      	b.n	8013702 <__sflush_r+0x1a>
 801379e:	89a3      	ldrh	r3, [r4, #12]
 80137a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80137a4:	81a3      	strh	r3, [r4, #12]
 80137a6:	e7ad      	b.n	8013704 <__sflush_r+0x1c>
 80137a8:	690f      	ldr	r7, [r1, #16]
 80137aa:	2f00      	cmp	r7, #0
 80137ac:	d0a9      	beq.n	8013702 <__sflush_r+0x1a>
 80137ae:	0793      	lsls	r3, r2, #30
 80137b0:	680e      	ldr	r6, [r1, #0]
 80137b2:	bf08      	it	eq
 80137b4:	694b      	ldreq	r3, [r1, #20]
 80137b6:	600f      	str	r7, [r1, #0]
 80137b8:	bf18      	it	ne
 80137ba:	2300      	movne	r3, #0
 80137bc:	eba6 0807 	sub.w	r8, r6, r7
 80137c0:	608b      	str	r3, [r1, #8]
 80137c2:	f1b8 0f00 	cmp.w	r8, #0
 80137c6:	dd9c      	ble.n	8013702 <__sflush_r+0x1a>
 80137c8:	6a21      	ldr	r1, [r4, #32]
 80137ca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80137cc:	4643      	mov	r3, r8
 80137ce:	463a      	mov	r2, r7
 80137d0:	4628      	mov	r0, r5
 80137d2:	47b0      	blx	r6
 80137d4:	2800      	cmp	r0, #0
 80137d6:	dc06      	bgt.n	80137e6 <__sflush_r+0xfe>
 80137d8:	89a3      	ldrh	r3, [r4, #12]
 80137da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80137de:	81a3      	strh	r3, [r4, #12]
 80137e0:	f04f 30ff 	mov.w	r0, #4294967295
 80137e4:	e78e      	b.n	8013704 <__sflush_r+0x1c>
 80137e6:	4407      	add	r7, r0
 80137e8:	eba8 0800 	sub.w	r8, r8, r0
 80137ec:	e7e9      	b.n	80137c2 <__sflush_r+0xda>
 80137ee:	bf00      	nop
 80137f0:	20400001 	.word	0x20400001

080137f4 <_fflush_r>:
 80137f4:	b538      	push	{r3, r4, r5, lr}
 80137f6:	690b      	ldr	r3, [r1, #16]
 80137f8:	4605      	mov	r5, r0
 80137fa:	460c      	mov	r4, r1
 80137fc:	b913      	cbnz	r3, 8013804 <_fflush_r+0x10>
 80137fe:	2500      	movs	r5, #0
 8013800:	4628      	mov	r0, r5
 8013802:	bd38      	pop	{r3, r4, r5, pc}
 8013804:	b118      	cbz	r0, 801380e <_fflush_r+0x1a>
 8013806:	6983      	ldr	r3, [r0, #24]
 8013808:	b90b      	cbnz	r3, 801380e <_fflush_r+0x1a>
 801380a:	f000 f887 	bl	801391c <__sinit>
 801380e:	4b14      	ldr	r3, [pc, #80]	; (8013860 <_fflush_r+0x6c>)
 8013810:	429c      	cmp	r4, r3
 8013812:	d11b      	bne.n	801384c <_fflush_r+0x58>
 8013814:	686c      	ldr	r4, [r5, #4]
 8013816:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801381a:	2b00      	cmp	r3, #0
 801381c:	d0ef      	beq.n	80137fe <_fflush_r+0xa>
 801381e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013820:	07d0      	lsls	r0, r2, #31
 8013822:	d404      	bmi.n	801382e <_fflush_r+0x3a>
 8013824:	0599      	lsls	r1, r3, #22
 8013826:	d402      	bmi.n	801382e <_fflush_r+0x3a>
 8013828:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801382a:	f000 f915 	bl	8013a58 <__retarget_lock_acquire_recursive>
 801382e:	4628      	mov	r0, r5
 8013830:	4621      	mov	r1, r4
 8013832:	f7ff ff59 	bl	80136e8 <__sflush_r>
 8013836:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013838:	07da      	lsls	r2, r3, #31
 801383a:	4605      	mov	r5, r0
 801383c:	d4e0      	bmi.n	8013800 <_fflush_r+0xc>
 801383e:	89a3      	ldrh	r3, [r4, #12]
 8013840:	059b      	lsls	r3, r3, #22
 8013842:	d4dd      	bmi.n	8013800 <_fflush_r+0xc>
 8013844:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013846:	f000 f908 	bl	8013a5a <__retarget_lock_release_recursive>
 801384a:	e7d9      	b.n	8013800 <_fflush_r+0xc>
 801384c:	4b05      	ldr	r3, [pc, #20]	; (8013864 <_fflush_r+0x70>)
 801384e:	429c      	cmp	r4, r3
 8013850:	d101      	bne.n	8013856 <_fflush_r+0x62>
 8013852:	68ac      	ldr	r4, [r5, #8]
 8013854:	e7df      	b.n	8013816 <_fflush_r+0x22>
 8013856:	4b04      	ldr	r3, [pc, #16]	; (8013868 <_fflush_r+0x74>)
 8013858:	429c      	cmp	r4, r3
 801385a:	bf08      	it	eq
 801385c:	68ec      	ldreq	r4, [r5, #12]
 801385e:	e7da      	b.n	8013816 <_fflush_r+0x22>
 8013860:	0807cee8 	.word	0x0807cee8
 8013864:	0807cf08 	.word	0x0807cf08
 8013868:	0807cec8 	.word	0x0807cec8

0801386c <std>:
 801386c:	2300      	movs	r3, #0
 801386e:	b510      	push	{r4, lr}
 8013870:	4604      	mov	r4, r0
 8013872:	e9c0 3300 	strd	r3, r3, [r0]
 8013876:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801387a:	6083      	str	r3, [r0, #8]
 801387c:	8181      	strh	r1, [r0, #12]
 801387e:	6643      	str	r3, [r0, #100]	; 0x64
 8013880:	81c2      	strh	r2, [r0, #14]
 8013882:	6183      	str	r3, [r0, #24]
 8013884:	4619      	mov	r1, r3
 8013886:	2208      	movs	r2, #8
 8013888:	305c      	adds	r0, #92	; 0x5c
 801388a:	f7fd fbdd 	bl	8011048 <memset>
 801388e:	4b05      	ldr	r3, [pc, #20]	; (80138a4 <std+0x38>)
 8013890:	6263      	str	r3, [r4, #36]	; 0x24
 8013892:	4b05      	ldr	r3, [pc, #20]	; (80138a8 <std+0x3c>)
 8013894:	62a3      	str	r3, [r4, #40]	; 0x28
 8013896:	4b05      	ldr	r3, [pc, #20]	; (80138ac <std+0x40>)
 8013898:	62e3      	str	r3, [r4, #44]	; 0x2c
 801389a:	4b05      	ldr	r3, [pc, #20]	; (80138b0 <std+0x44>)
 801389c:	6224      	str	r4, [r4, #32]
 801389e:	6323      	str	r3, [r4, #48]	; 0x30
 80138a0:	bd10      	pop	{r4, pc}
 80138a2:	bf00      	nop
 80138a4:	08013c81 	.word	0x08013c81
 80138a8:	08013ca3 	.word	0x08013ca3
 80138ac:	08013cdb 	.word	0x08013cdb
 80138b0:	08013cff 	.word	0x08013cff

080138b4 <_cleanup_r>:
 80138b4:	4901      	ldr	r1, [pc, #4]	; (80138bc <_cleanup_r+0x8>)
 80138b6:	f000 b8af 	b.w	8013a18 <_fwalk_reent>
 80138ba:	bf00      	nop
 80138bc:	080137f5 	.word	0x080137f5

080138c0 <__sfmoreglue>:
 80138c0:	b570      	push	{r4, r5, r6, lr}
 80138c2:	2268      	movs	r2, #104	; 0x68
 80138c4:	1e4d      	subs	r5, r1, #1
 80138c6:	4355      	muls	r5, r2
 80138c8:	460e      	mov	r6, r1
 80138ca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80138ce:	f7ff fb09 	bl	8012ee4 <_malloc_r>
 80138d2:	4604      	mov	r4, r0
 80138d4:	b140      	cbz	r0, 80138e8 <__sfmoreglue+0x28>
 80138d6:	2100      	movs	r1, #0
 80138d8:	e9c0 1600 	strd	r1, r6, [r0]
 80138dc:	300c      	adds	r0, #12
 80138de:	60a0      	str	r0, [r4, #8]
 80138e0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80138e4:	f7fd fbb0 	bl	8011048 <memset>
 80138e8:	4620      	mov	r0, r4
 80138ea:	bd70      	pop	{r4, r5, r6, pc}

080138ec <__sfp_lock_acquire>:
 80138ec:	4801      	ldr	r0, [pc, #4]	; (80138f4 <__sfp_lock_acquire+0x8>)
 80138ee:	f000 b8b3 	b.w	8013a58 <__retarget_lock_acquire_recursive>
 80138f2:	bf00      	nop
 80138f4:	20019e15 	.word	0x20019e15

080138f8 <__sfp_lock_release>:
 80138f8:	4801      	ldr	r0, [pc, #4]	; (8013900 <__sfp_lock_release+0x8>)
 80138fa:	f000 b8ae 	b.w	8013a5a <__retarget_lock_release_recursive>
 80138fe:	bf00      	nop
 8013900:	20019e15 	.word	0x20019e15

08013904 <__sinit_lock_acquire>:
 8013904:	4801      	ldr	r0, [pc, #4]	; (801390c <__sinit_lock_acquire+0x8>)
 8013906:	f000 b8a7 	b.w	8013a58 <__retarget_lock_acquire_recursive>
 801390a:	bf00      	nop
 801390c:	20019e16 	.word	0x20019e16

08013910 <__sinit_lock_release>:
 8013910:	4801      	ldr	r0, [pc, #4]	; (8013918 <__sinit_lock_release+0x8>)
 8013912:	f000 b8a2 	b.w	8013a5a <__retarget_lock_release_recursive>
 8013916:	bf00      	nop
 8013918:	20019e16 	.word	0x20019e16

0801391c <__sinit>:
 801391c:	b510      	push	{r4, lr}
 801391e:	4604      	mov	r4, r0
 8013920:	f7ff fff0 	bl	8013904 <__sinit_lock_acquire>
 8013924:	69a3      	ldr	r3, [r4, #24]
 8013926:	b11b      	cbz	r3, 8013930 <__sinit+0x14>
 8013928:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801392c:	f7ff bff0 	b.w	8013910 <__sinit_lock_release>
 8013930:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8013934:	6523      	str	r3, [r4, #80]	; 0x50
 8013936:	4b13      	ldr	r3, [pc, #76]	; (8013984 <__sinit+0x68>)
 8013938:	4a13      	ldr	r2, [pc, #76]	; (8013988 <__sinit+0x6c>)
 801393a:	681b      	ldr	r3, [r3, #0]
 801393c:	62a2      	str	r2, [r4, #40]	; 0x28
 801393e:	42a3      	cmp	r3, r4
 8013940:	bf04      	itt	eq
 8013942:	2301      	moveq	r3, #1
 8013944:	61a3      	streq	r3, [r4, #24]
 8013946:	4620      	mov	r0, r4
 8013948:	f000 f820 	bl	801398c <__sfp>
 801394c:	6060      	str	r0, [r4, #4]
 801394e:	4620      	mov	r0, r4
 8013950:	f000 f81c 	bl	801398c <__sfp>
 8013954:	60a0      	str	r0, [r4, #8]
 8013956:	4620      	mov	r0, r4
 8013958:	f000 f818 	bl	801398c <__sfp>
 801395c:	2200      	movs	r2, #0
 801395e:	60e0      	str	r0, [r4, #12]
 8013960:	2104      	movs	r1, #4
 8013962:	6860      	ldr	r0, [r4, #4]
 8013964:	f7ff ff82 	bl	801386c <std>
 8013968:	68a0      	ldr	r0, [r4, #8]
 801396a:	2201      	movs	r2, #1
 801396c:	2109      	movs	r1, #9
 801396e:	f7ff ff7d 	bl	801386c <std>
 8013972:	68e0      	ldr	r0, [r4, #12]
 8013974:	2202      	movs	r2, #2
 8013976:	2112      	movs	r1, #18
 8013978:	f7ff ff78 	bl	801386c <std>
 801397c:	2301      	movs	r3, #1
 801397e:	61a3      	str	r3, [r4, #24]
 8013980:	e7d2      	b.n	8013928 <__sinit+0xc>
 8013982:	bf00      	nop
 8013984:	0807cc54 	.word	0x0807cc54
 8013988:	080138b5 	.word	0x080138b5

0801398c <__sfp>:
 801398c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801398e:	4607      	mov	r7, r0
 8013990:	f7ff ffac 	bl	80138ec <__sfp_lock_acquire>
 8013994:	4b1e      	ldr	r3, [pc, #120]	; (8013a10 <__sfp+0x84>)
 8013996:	681e      	ldr	r6, [r3, #0]
 8013998:	69b3      	ldr	r3, [r6, #24]
 801399a:	b913      	cbnz	r3, 80139a2 <__sfp+0x16>
 801399c:	4630      	mov	r0, r6
 801399e:	f7ff ffbd 	bl	801391c <__sinit>
 80139a2:	3648      	adds	r6, #72	; 0x48
 80139a4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80139a8:	3b01      	subs	r3, #1
 80139aa:	d503      	bpl.n	80139b4 <__sfp+0x28>
 80139ac:	6833      	ldr	r3, [r6, #0]
 80139ae:	b30b      	cbz	r3, 80139f4 <__sfp+0x68>
 80139b0:	6836      	ldr	r6, [r6, #0]
 80139b2:	e7f7      	b.n	80139a4 <__sfp+0x18>
 80139b4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80139b8:	b9d5      	cbnz	r5, 80139f0 <__sfp+0x64>
 80139ba:	4b16      	ldr	r3, [pc, #88]	; (8013a14 <__sfp+0x88>)
 80139bc:	60e3      	str	r3, [r4, #12]
 80139be:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80139c2:	6665      	str	r5, [r4, #100]	; 0x64
 80139c4:	f000 f847 	bl	8013a56 <__retarget_lock_init_recursive>
 80139c8:	f7ff ff96 	bl	80138f8 <__sfp_lock_release>
 80139cc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80139d0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80139d4:	6025      	str	r5, [r4, #0]
 80139d6:	61a5      	str	r5, [r4, #24]
 80139d8:	2208      	movs	r2, #8
 80139da:	4629      	mov	r1, r5
 80139dc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80139e0:	f7fd fb32 	bl	8011048 <memset>
 80139e4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80139e8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80139ec:	4620      	mov	r0, r4
 80139ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80139f0:	3468      	adds	r4, #104	; 0x68
 80139f2:	e7d9      	b.n	80139a8 <__sfp+0x1c>
 80139f4:	2104      	movs	r1, #4
 80139f6:	4638      	mov	r0, r7
 80139f8:	f7ff ff62 	bl	80138c0 <__sfmoreglue>
 80139fc:	4604      	mov	r4, r0
 80139fe:	6030      	str	r0, [r6, #0]
 8013a00:	2800      	cmp	r0, #0
 8013a02:	d1d5      	bne.n	80139b0 <__sfp+0x24>
 8013a04:	f7ff ff78 	bl	80138f8 <__sfp_lock_release>
 8013a08:	230c      	movs	r3, #12
 8013a0a:	603b      	str	r3, [r7, #0]
 8013a0c:	e7ee      	b.n	80139ec <__sfp+0x60>
 8013a0e:	bf00      	nop
 8013a10:	0807cc54 	.word	0x0807cc54
 8013a14:	ffff0001 	.word	0xffff0001

08013a18 <_fwalk_reent>:
 8013a18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013a1c:	4606      	mov	r6, r0
 8013a1e:	4688      	mov	r8, r1
 8013a20:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013a24:	2700      	movs	r7, #0
 8013a26:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013a2a:	f1b9 0901 	subs.w	r9, r9, #1
 8013a2e:	d505      	bpl.n	8013a3c <_fwalk_reent+0x24>
 8013a30:	6824      	ldr	r4, [r4, #0]
 8013a32:	2c00      	cmp	r4, #0
 8013a34:	d1f7      	bne.n	8013a26 <_fwalk_reent+0xe>
 8013a36:	4638      	mov	r0, r7
 8013a38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013a3c:	89ab      	ldrh	r3, [r5, #12]
 8013a3e:	2b01      	cmp	r3, #1
 8013a40:	d907      	bls.n	8013a52 <_fwalk_reent+0x3a>
 8013a42:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013a46:	3301      	adds	r3, #1
 8013a48:	d003      	beq.n	8013a52 <_fwalk_reent+0x3a>
 8013a4a:	4629      	mov	r1, r5
 8013a4c:	4630      	mov	r0, r6
 8013a4e:	47c0      	blx	r8
 8013a50:	4307      	orrs	r7, r0
 8013a52:	3568      	adds	r5, #104	; 0x68
 8013a54:	e7e9      	b.n	8013a2a <_fwalk_reent+0x12>

08013a56 <__retarget_lock_init_recursive>:
 8013a56:	4770      	bx	lr

08013a58 <__retarget_lock_acquire_recursive>:
 8013a58:	4770      	bx	lr

08013a5a <__retarget_lock_release_recursive>:
 8013a5a:	4770      	bx	lr

08013a5c <__swhatbuf_r>:
 8013a5c:	b570      	push	{r4, r5, r6, lr}
 8013a5e:	460e      	mov	r6, r1
 8013a60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013a64:	2900      	cmp	r1, #0
 8013a66:	b096      	sub	sp, #88	; 0x58
 8013a68:	4614      	mov	r4, r2
 8013a6a:	461d      	mov	r5, r3
 8013a6c:	da08      	bge.n	8013a80 <__swhatbuf_r+0x24>
 8013a6e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8013a72:	2200      	movs	r2, #0
 8013a74:	602a      	str	r2, [r5, #0]
 8013a76:	061a      	lsls	r2, r3, #24
 8013a78:	d410      	bmi.n	8013a9c <__swhatbuf_r+0x40>
 8013a7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013a7e:	e00e      	b.n	8013a9e <__swhatbuf_r+0x42>
 8013a80:	466a      	mov	r2, sp
 8013a82:	f000 f96f 	bl	8013d64 <_fstat_r>
 8013a86:	2800      	cmp	r0, #0
 8013a88:	dbf1      	blt.n	8013a6e <__swhatbuf_r+0x12>
 8013a8a:	9a01      	ldr	r2, [sp, #4]
 8013a8c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8013a90:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8013a94:	425a      	negs	r2, r3
 8013a96:	415a      	adcs	r2, r3
 8013a98:	602a      	str	r2, [r5, #0]
 8013a9a:	e7ee      	b.n	8013a7a <__swhatbuf_r+0x1e>
 8013a9c:	2340      	movs	r3, #64	; 0x40
 8013a9e:	2000      	movs	r0, #0
 8013aa0:	6023      	str	r3, [r4, #0]
 8013aa2:	b016      	add	sp, #88	; 0x58
 8013aa4:	bd70      	pop	{r4, r5, r6, pc}
	...

08013aa8 <__smakebuf_r>:
 8013aa8:	898b      	ldrh	r3, [r1, #12]
 8013aaa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013aac:	079d      	lsls	r5, r3, #30
 8013aae:	4606      	mov	r6, r0
 8013ab0:	460c      	mov	r4, r1
 8013ab2:	d507      	bpl.n	8013ac4 <__smakebuf_r+0x1c>
 8013ab4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013ab8:	6023      	str	r3, [r4, #0]
 8013aba:	6123      	str	r3, [r4, #16]
 8013abc:	2301      	movs	r3, #1
 8013abe:	6163      	str	r3, [r4, #20]
 8013ac0:	b002      	add	sp, #8
 8013ac2:	bd70      	pop	{r4, r5, r6, pc}
 8013ac4:	ab01      	add	r3, sp, #4
 8013ac6:	466a      	mov	r2, sp
 8013ac8:	f7ff ffc8 	bl	8013a5c <__swhatbuf_r>
 8013acc:	9900      	ldr	r1, [sp, #0]
 8013ace:	4605      	mov	r5, r0
 8013ad0:	4630      	mov	r0, r6
 8013ad2:	f7ff fa07 	bl	8012ee4 <_malloc_r>
 8013ad6:	b948      	cbnz	r0, 8013aec <__smakebuf_r+0x44>
 8013ad8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013adc:	059a      	lsls	r2, r3, #22
 8013ade:	d4ef      	bmi.n	8013ac0 <__smakebuf_r+0x18>
 8013ae0:	f023 0303 	bic.w	r3, r3, #3
 8013ae4:	f043 0302 	orr.w	r3, r3, #2
 8013ae8:	81a3      	strh	r3, [r4, #12]
 8013aea:	e7e3      	b.n	8013ab4 <__smakebuf_r+0xc>
 8013aec:	4b0d      	ldr	r3, [pc, #52]	; (8013b24 <__smakebuf_r+0x7c>)
 8013aee:	62b3      	str	r3, [r6, #40]	; 0x28
 8013af0:	89a3      	ldrh	r3, [r4, #12]
 8013af2:	6020      	str	r0, [r4, #0]
 8013af4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013af8:	81a3      	strh	r3, [r4, #12]
 8013afa:	9b00      	ldr	r3, [sp, #0]
 8013afc:	6163      	str	r3, [r4, #20]
 8013afe:	9b01      	ldr	r3, [sp, #4]
 8013b00:	6120      	str	r0, [r4, #16]
 8013b02:	b15b      	cbz	r3, 8013b1c <__smakebuf_r+0x74>
 8013b04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013b08:	4630      	mov	r0, r6
 8013b0a:	f000 f93d 	bl	8013d88 <_isatty_r>
 8013b0e:	b128      	cbz	r0, 8013b1c <__smakebuf_r+0x74>
 8013b10:	89a3      	ldrh	r3, [r4, #12]
 8013b12:	f023 0303 	bic.w	r3, r3, #3
 8013b16:	f043 0301 	orr.w	r3, r3, #1
 8013b1a:	81a3      	strh	r3, [r4, #12]
 8013b1c:	89a0      	ldrh	r0, [r4, #12]
 8013b1e:	4305      	orrs	r5, r0
 8013b20:	81a5      	strh	r5, [r4, #12]
 8013b22:	e7cd      	b.n	8013ac0 <__smakebuf_r+0x18>
 8013b24:	080138b5 	.word	0x080138b5

08013b28 <__ascii_mbtowc>:
 8013b28:	b082      	sub	sp, #8
 8013b2a:	b901      	cbnz	r1, 8013b2e <__ascii_mbtowc+0x6>
 8013b2c:	a901      	add	r1, sp, #4
 8013b2e:	b142      	cbz	r2, 8013b42 <__ascii_mbtowc+0x1a>
 8013b30:	b14b      	cbz	r3, 8013b46 <__ascii_mbtowc+0x1e>
 8013b32:	7813      	ldrb	r3, [r2, #0]
 8013b34:	600b      	str	r3, [r1, #0]
 8013b36:	7812      	ldrb	r2, [r2, #0]
 8013b38:	1e10      	subs	r0, r2, #0
 8013b3a:	bf18      	it	ne
 8013b3c:	2001      	movne	r0, #1
 8013b3e:	b002      	add	sp, #8
 8013b40:	4770      	bx	lr
 8013b42:	4610      	mov	r0, r2
 8013b44:	e7fb      	b.n	8013b3e <__ascii_mbtowc+0x16>
 8013b46:	f06f 0001 	mvn.w	r0, #1
 8013b4a:	e7f8      	b.n	8013b3e <__ascii_mbtowc+0x16>

08013b4c <memmove>:
 8013b4c:	4288      	cmp	r0, r1
 8013b4e:	b510      	push	{r4, lr}
 8013b50:	eb01 0402 	add.w	r4, r1, r2
 8013b54:	d902      	bls.n	8013b5c <memmove+0x10>
 8013b56:	4284      	cmp	r4, r0
 8013b58:	4623      	mov	r3, r4
 8013b5a:	d807      	bhi.n	8013b6c <memmove+0x20>
 8013b5c:	1e43      	subs	r3, r0, #1
 8013b5e:	42a1      	cmp	r1, r4
 8013b60:	d008      	beq.n	8013b74 <memmove+0x28>
 8013b62:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013b66:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013b6a:	e7f8      	b.n	8013b5e <memmove+0x12>
 8013b6c:	4402      	add	r2, r0
 8013b6e:	4601      	mov	r1, r0
 8013b70:	428a      	cmp	r2, r1
 8013b72:	d100      	bne.n	8013b76 <memmove+0x2a>
 8013b74:	bd10      	pop	{r4, pc}
 8013b76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013b7a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013b7e:	e7f7      	b.n	8013b70 <memmove+0x24>

08013b80 <__malloc_lock>:
 8013b80:	4801      	ldr	r0, [pc, #4]	; (8013b88 <__malloc_lock+0x8>)
 8013b82:	f7ff bf69 	b.w	8013a58 <__retarget_lock_acquire_recursive>
 8013b86:	bf00      	nop
 8013b88:	20019e14 	.word	0x20019e14

08013b8c <__malloc_unlock>:
 8013b8c:	4801      	ldr	r0, [pc, #4]	; (8013b94 <__malloc_unlock+0x8>)
 8013b8e:	f7ff bf64 	b.w	8013a5a <__retarget_lock_release_recursive>
 8013b92:	bf00      	nop
 8013b94:	20019e14 	.word	0x20019e14

08013b98 <_realloc_r>:
 8013b98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013b9c:	4680      	mov	r8, r0
 8013b9e:	4614      	mov	r4, r2
 8013ba0:	460e      	mov	r6, r1
 8013ba2:	b921      	cbnz	r1, 8013bae <_realloc_r+0x16>
 8013ba4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013ba8:	4611      	mov	r1, r2
 8013baa:	f7ff b99b 	b.w	8012ee4 <_malloc_r>
 8013bae:	b92a      	cbnz	r2, 8013bbc <_realloc_r+0x24>
 8013bb0:	f7ff f92c 	bl	8012e0c <_free_r>
 8013bb4:	4625      	mov	r5, r4
 8013bb6:	4628      	mov	r0, r5
 8013bb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013bbc:	f000 f906 	bl	8013dcc <_malloc_usable_size_r>
 8013bc0:	4284      	cmp	r4, r0
 8013bc2:	4607      	mov	r7, r0
 8013bc4:	d802      	bhi.n	8013bcc <_realloc_r+0x34>
 8013bc6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8013bca:	d812      	bhi.n	8013bf2 <_realloc_r+0x5a>
 8013bcc:	4621      	mov	r1, r4
 8013bce:	4640      	mov	r0, r8
 8013bd0:	f7ff f988 	bl	8012ee4 <_malloc_r>
 8013bd4:	4605      	mov	r5, r0
 8013bd6:	2800      	cmp	r0, #0
 8013bd8:	d0ed      	beq.n	8013bb6 <_realloc_r+0x1e>
 8013bda:	42bc      	cmp	r4, r7
 8013bdc:	4622      	mov	r2, r4
 8013bde:	4631      	mov	r1, r6
 8013be0:	bf28      	it	cs
 8013be2:	463a      	movcs	r2, r7
 8013be4:	f7fd fa22 	bl	801102c <memcpy>
 8013be8:	4631      	mov	r1, r6
 8013bea:	4640      	mov	r0, r8
 8013bec:	f7ff f90e 	bl	8012e0c <_free_r>
 8013bf0:	e7e1      	b.n	8013bb6 <_realloc_r+0x1e>
 8013bf2:	4635      	mov	r5, r6
 8013bf4:	e7df      	b.n	8013bb6 <_realloc_r+0x1e>

08013bf6 <_raise_r>:
 8013bf6:	291f      	cmp	r1, #31
 8013bf8:	b538      	push	{r3, r4, r5, lr}
 8013bfa:	4604      	mov	r4, r0
 8013bfc:	460d      	mov	r5, r1
 8013bfe:	d904      	bls.n	8013c0a <_raise_r+0x14>
 8013c00:	2316      	movs	r3, #22
 8013c02:	6003      	str	r3, [r0, #0]
 8013c04:	f04f 30ff 	mov.w	r0, #4294967295
 8013c08:	bd38      	pop	{r3, r4, r5, pc}
 8013c0a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8013c0c:	b112      	cbz	r2, 8013c14 <_raise_r+0x1e>
 8013c0e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013c12:	b94b      	cbnz	r3, 8013c28 <_raise_r+0x32>
 8013c14:	4620      	mov	r0, r4
 8013c16:	f000 f831 	bl	8013c7c <_getpid_r>
 8013c1a:	462a      	mov	r2, r5
 8013c1c:	4601      	mov	r1, r0
 8013c1e:	4620      	mov	r0, r4
 8013c20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013c24:	f000 b818 	b.w	8013c58 <_kill_r>
 8013c28:	2b01      	cmp	r3, #1
 8013c2a:	d00a      	beq.n	8013c42 <_raise_r+0x4c>
 8013c2c:	1c59      	adds	r1, r3, #1
 8013c2e:	d103      	bne.n	8013c38 <_raise_r+0x42>
 8013c30:	2316      	movs	r3, #22
 8013c32:	6003      	str	r3, [r0, #0]
 8013c34:	2001      	movs	r0, #1
 8013c36:	e7e7      	b.n	8013c08 <_raise_r+0x12>
 8013c38:	2400      	movs	r4, #0
 8013c3a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8013c3e:	4628      	mov	r0, r5
 8013c40:	4798      	blx	r3
 8013c42:	2000      	movs	r0, #0
 8013c44:	e7e0      	b.n	8013c08 <_raise_r+0x12>
	...

08013c48 <raise>:
 8013c48:	4b02      	ldr	r3, [pc, #8]	; (8013c54 <raise+0xc>)
 8013c4a:	4601      	mov	r1, r0
 8013c4c:	6818      	ldr	r0, [r3, #0]
 8013c4e:	f7ff bfd2 	b.w	8013bf6 <_raise_r>
 8013c52:	bf00      	nop
 8013c54:	20000c34 	.word	0x20000c34

08013c58 <_kill_r>:
 8013c58:	b538      	push	{r3, r4, r5, lr}
 8013c5a:	4d07      	ldr	r5, [pc, #28]	; (8013c78 <_kill_r+0x20>)
 8013c5c:	2300      	movs	r3, #0
 8013c5e:	4604      	mov	r4, r0
 8013c60:	4608      	mov	r0, r1
 8013c62:	4611      	mov	r1, r2
 8013c64:	602b      	str	r3, [r5, #0]
 8013c66:	f7f4 f903 	bl	8007e70 <_kill>
 8013c6a:	1c43      	adds	r3, r0, #1
 8013c6c:	d102      	bne.n	8013c74 <_kill_r+0x1c>
 8013c6e:	682b      	ldr	r3, [r5, #0]
 8013c70:	b103      	cbz	r3, 8013c74 <_kill_r+0x1c>
 8013c72:	6023      	str	r3, [r4, #0]
 8013c74:	bd38      	pop	{r3, r4, r5, pc}
 8013c76:	bf00      	nop
 8013c78:	20019e18 	.word	0x20019e18

08013c7c <_getpid_r>:
 8013c7c:	f7f4 b8f0 	b.w	8007e60 <_getpid>

08013c80 <__sread>:
 8013c80:	b510      	push	{r4, lr}
 8013c82:	460c      	mov	r4, r1
 8013c84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013c88:	f000 f8a8 	bl	8013ddc <_read_r>
 8013c8c:	2800      	cmp	r0, #0
 8013c8e:	bfab      	itete	ge
 8013c90:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013c92:	89a3      	ldrhlt	r3, [r4, #12]
 8013c94:	181b      	addge	r3, r3, r0
 8013c96:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8013c9a:	bfac      	ite	ge
 8013c9c:	6563      	strge	r3, [r4, #84]	; 0x54
 8013c9e:	81a3      	strhlt	r3, [r4, #12]
 8013ca0:	bd10      	pop	{r4, pc}

08013ca2 <__swrite>:
 8013ca2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013ca6:	461f      	mov	r7, r3
 8013ca8:	898b      	ldrh	r3, [r1, #12]
 8013caa:	05db      	lsls	r3, r3, #23
 8013cac:	4605      	mov	r5, r0
 8013cae:	460c      	mov	r4, r1
 8013cb0:	4616      	mov	r6, r2
 8013cb2:	d505      	bpl.n	8013cc0 <__swrite+0x1e>
 8013cb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013cb8:	2302      	movs	r3, #2
 8013cba:	2200      	movs	r2, #0
 8013cbc:	f000 f874 	bl	8013da8 <_lseek_r>
 8013cc0:	89a3      	ldrh	r3, [r4, #12]
 8013cc2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013cc6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013cca:	81a3      	strh	r3, [r4, #12]
 8013ccc:	4632      	mov	r2, r6
 8013cce:	463b      	mov	r3, r7
 8013cd0:	4628      	mov	r0, r5
 8013cd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013cd6:	f000 b823 	b.w	8013d20 <_write_r>

08013cda <__sseek>:
 8013cda:	b510      	push	{r4, lr}
 8013cdc:	460c      	mov	r4, r1
 8013cde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013ce2:	f000 f861 	bl	8013da8 <_lseek_r>
 8013ce6:	1c43      	adds	r3, r0, #1
 8013ce8:	89a3      	ldrh	r3, [r4, #12]
 8013cea:	bf15      	itete	ne
 8013cec:	6560      	strne	r0, [r4, #84]	; 0x54
 8013cee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013cf2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013cf6:	81a3      	strheq	r3, [r4, #12]
 8013cf8:	bf18      	it	ne
 8013cfa:	81a3      	strhne	r3, [r4, #12]
 8013cfc:	bd10      	pop	{r4, pc}

08013cfe <__sclose>:
 8013cfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013d02:	f000 b81f 	b.w	8013d44 <_close_r>

08013d06 <__ascii_wctomb>:
 8013d06:	b149      	cbz	r1, 8013d1c <__ascii_wctomb+0x16>
 8013d08:	2aff      	cmp	r2, #255	; 0xff
 8013d0a:	bf85      	ittet	hi
 8013d0c:	238a      	movhi	r3, #138	; 0x8a
 8013d0e:	6003      	strhi	r3, [r0, #0]
 8013d10:	700a      	strbls	r2, [r1, #0]
 8013d12:	f04f 30ff 	movhi.w	r0, #4294967295
 8013d16:	bf98      	it	ls
 8013d18:	2001      	movls	r0, #1
 8013d1a:	4770      	bx	lr
 8013d1c:	4608      	mov	r0, r1
 8013d1e:	4770      	bx	lr

08013d20 <_write_r>:
 8013d20:	b538      	push	{r3, r4, r5, lr}
 8013d22:	4d07      	ldr	r5, [pc, #28]	; (8013d40 <_write_r+0x20>)
 8013d24:	4604      	mov	r4, r0
 8013d26:	4608      	mov	r0, r1
 8013d28:	4611      	mov	r1, r2
 8013d2a:	2200      	movs	r2, #0
 8013d2c:	602a      	str	r2, [r5, #0]
 8013d2e:	461a      	mov	r2, r3
 8013d30:	f7f4 f8d5 	bl	8007ede <_write>
 8013d34:	1c43      	adds	r3, r0, #1
 8013d36:	d102      	bne.n	8013d3e <_write_r+0x1e>
 8013d38:	682b      	ldr	r3, [r5, #0]
 8013d3a:	b103      	cbz	r3, 8013d3e <_write_r+0x1e>
 8013d3c:	6023      	str	r3, [r4, #0]
 8013d3e:	bd38      	pop	{r3, r4, r5, pc}
 8013d40:	20019e18 	.word	0x20019e18

08013d44 <_close_r>:
 8013d44:	b538      	push	{r3, r4, r5, lr}
 8013d46:	4d06      	ldr	r5, [pc, #24]	; (8013d60 <_close_r+0x1c>)
 8013d48:	2300      	movs	r3, #0
 8013d4a:	4604      	mov	r4, r0
 8013d4c:	4608      	mov	r0, r1
 8013d4e:	602b      	str	r3, [r5, #0]
 8013d50:	f7f4 f8e1 	bl	8007f16 <_close>
 8013d54:	1c43      	adds	r3, r0, #1
 8013d56:	d102      	bne.n	8013d5e <_close_r+0x1a>
 8013d58:	682b      	ldr	r3, [r5, #0]
 8013d5a:	b103      	cbz	r3, 8013d5e <_close_r+0x1a>
 8013d5c:	6023      	str	r3, [r4, #0]
 8013d5e:	bd38      	pop	{r3, r4, r5, pc}
 8013d60:	20019e18 	.word	0x20019e18

08013d64 <_fstat_r>:
 8013d64:	b538      	push	{r3, r4, r5, lr}
 8013d66:	4d07      	ldr	r5, [pc, #28]	; (8013d84 <_fstat_r+0x20>)
 8013d68:	2300      	movs	r3, #0
 8013d6a:	4604      	mov	r4, r0
 8013d6c:	4608      	mov	r0, r1
 8013d6e:	4611      	mov	r1, r2
 8013d70:	602b      	str	r3, [r5, #0]
 8013d72:	f7f4 f8dc 	bl	8007f2e <_fstat>
 8013d76:	1c43      	adds	r3, r0, #1
 8013d78:	d102      	bne.n	8013d80 <_fstat_r+0x1c>
 8013d7a:	682b      	ldr	r3, [r5, #0]
 8013d7c:	b103      	cbz	r3, 8013d80 <_fstat_r+0x1c>
 8013d7e:	6023      	str	r3, [r4, #0]
 8013d80:	bd38      	pop	{r3, r4, r5, pc}
 8013d82:	bf00      	nop
 8013d84:	20019e18 	.word	0x20019e18

08013d88 <_isatty_r>:
 8013d88:	b538      	push	{r3, r4, r5, lr}
 8013d8a:	4d06      	ldr	r5, [pc, #24]	; (8013da4 <_isatty_r+0x1c>)
 8013d8c:	2300      	movs	r3, #0
 8013d8e:	4604      	mov	r4, r0
 8013d90:	4608      	mov	r0, r1
 8013d92:	602b      	str	r3, [r5, #0]
 8013d94:	f7f4 f8db 	bl	8007f4e <_isatty>
 8013d98:	1c43      	adds	r3, r0, #1
 8013d9a:	d102      	bne.n	8013da2 <_isatty_r+0x1a>
 8013d9c:	682b      	ldr	r3, [r5, #0]
 8013d9e:	b103      	cbz	r3, 8013da2 <_isatty_r+0x1a>
 8013da0:	6023      	str	r3, [r4, #0]
 8013da2:	bd38      	pop	{r3, r4, r5, pc}
 8013da4:	20019e18 	.word	0x20019e18

08013da8 <_lseek_r>:
 8013da8:	b538      	push	{r3, r4, r5, lr}
 8013daa:	4d07      	ldr	r5, [pc, #28]	; (8013dc8 <_lseek_r+0x20>)
 8013dac:	4604      	mov	r4, r0
 8013dae:	4608      	mov	r0, r1
 8013db0:	4611      	mov	r1, r2
 8013db2:	2200      	movs	r2, #0
 8013db4:	602a      	str	r2, [r5, #0]
 8013db6:	461a      	mov	r2, r3
 8013db8:	f7f4 f8d4 	bl	8007f64 <_lseek>
 8013dbc:	1c43      	adds	r3, r0, #1
 8013dbe:	d102      	bne.n	8013dc6 <_lseek_r+0x1e>
 8013dc0:	682b      	ldr	r3, [r5, #0]
 8013dc2:	b103      	cbz	r3, 8013dc6 <_lseek_r+0x1e>
 8013dc4:	6023      	str	r3, [r4, #0]
 8013dc6:	bd38      	pop	{r3, r4, r5, pc}
 8013dc8:	20019e18 	.word	0x20019e18

08013dcc <_malloc_usable_size_r>:
 8013dcc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013dd0:	1f18      	subs	r0, r3, #4
 8013dd2:	2b00      	cmp	r3, #0
 8013dd4:	bfbc      	itt	lt
 8013dd6:	580b      	ldrlt	r3, [r1, r0]
 8013dd8:	18c0      	addlt	r0, r0, r3
 8013dda:	4770      	bx	lr

08013ddc <_read_r>:
 8013ddc:	b538      	push	{r3, r4, r5, lr}
 8013dde:	4d07      	ldr	r5, [pc, #28]	; (8013dfc <_read_r+0x20>)
 8013de0:	4604      	mov	r4, r0
 8013de2:	4608      	mov	r0, r1
 8013de4:	4611      	mov	r1, r2
 8013de6:	2200      	movs	r2, #0
 8013de8:	602a      	str	r2, [r5, #0]
 8013dea:	461a      	mov	r2, r3
 8013dec:	f7f4 f85a 	bl	8007ea4 <_read>
 8013df0:	1c43      	adds	r3, r0, #1
 8013df2:	d102      	bne.n	8013dfa <_read_r+0x1e>
 8013df4:	682b      	ldr	r3, [r5, #0]
 8013df6:	b103      	cbz	r3, 8013dfa <_read_r+0x1e>
 8013df8:	6023      	str	r3, [r4, #0]
 8013dfa:	bd38      	pop	{r3, r4, r5, pc}
 8013dfc:	20019e18 	.word	0x20019e18

08013e00 <asinhf>:
 8013e00:	b510      	push	{r4, lr}
 8013e02:	ee10 4a10 	vmov	r4, s0
 8013e06:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8013e0a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8013e0e:	ed2d 8b04 	vpush	{d8-d9}
 8013e12:	eeb0 8a40 	vmov.f32	s16, s0
 8013e16:	db06      	blt.n	8013e26 <asinhf+0x26>
 8013e18:	ee30 8a00 	vadd.f32	s16, s0, s0
 8013e1c:	eeb0 0a48 	vmov.f32	s0, s16
 8013e20:	ecbd 8b04 	vpop	{d8-d9}
 8013e24:	bd10      	pop	{r4, pc}
 8013e26:	f1b3 5f46 	cmp.w	r3, #830472192	; 0x31800000
 8013e2a:	da21      	bge.n	8013e70 <asinhf+0x70>
 8013e2c:	eddf 7a26 	vldr	s15, [pc, #152]	; 8013ec8 <asinhf+0xc8>
 8013e30:	ee70 7a27 	vadd.f32	s15, s0, s15
 8013e34:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013e38:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013e3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e40:	dcec      	bgt.n	8013e1c <asinhf+0x1c>
 8013e42:	eeb0 0a48 	vmov.f32	s0, s16
 8013e46:	f000 fb77 	bl	8014538 <fabsf>
 8013e4a:	ee68 8a08 	vmul.f32	s17, s16, s16
 8013e4e:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8013e52:	eeb0 8a40 	vmov.f32	s16, s0
 8013e56:	ee38 0a89 	vadd.f32	s0, s17, s18
 8013e5a:	f002 f905 	bl	8016068 <__ieee754_sqrtf>
 8013e5e:	ee30 0a09 	vadd.f32	s0, s0, s18
 8013e62:	eec8 7a80 	vdiv.f32	s15, s17, s0
 8013e66:	ee37 0a88 	vadd.f32	s0, s15, s16
 8013e6a:	f000 fbaf 	bl	80145cc <log1pf>
 8013e6e:	e028      	b.n	8013ec2 <asinhf+0xc2>
 8013e70:	f1b3 4f9b 	cmp.w	r3, #1300234240	; 0x4d800000
 8013e74:	dd0c      	ble.n	8013e90 <asinhf+0x90>
 8013e76:	f000 fb5f 	bl	8014538 <fabsf>
 8013e7a:	f001 fb8b 	bl	8015594 <__ieee754_logf>
 8013e7e:	ed9f 8a13 	vldr	s16, [pc, #76]	; 8013ecc <asinhf+0xcc>
 8013e82:	ee30 8a08 	vadd.f32	s16, s0, s16
 8013e86:	2c00      	cmp	r4, #0
 8013e88:	bfd8      	it	le
 8013e8a:	eeb1 8a48 	vnegle.f32	s16, s16
 8013e8e:	e7c5      	b.n	8013e1c <asinhf+0x1c>
 8013e90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013e94:	ddd5      	ble.n	8013e42 <asinhf+0x42>
 8013e96:	f000 fb4f 	bl	8014538 <fabsf>
 8013e9a:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8013e9e:	eef0 8a40 	vmov.f32	s17, s0
 8013ea2:	eeb0 0a49 	vmov.f32	s0, s18
 8013ea6:	eea8 0a08 	vfma.f32	s0, s16, s16
 8013eaa:	f002 f8dd 	bl	8016068 <__ieee754_sqrtf>
 8013eae:	ee70 7a28 	vadd.f32	s15, s0, s17
 8013eb2:	ee89 0a27 	vdiv.f32	s0, s18, s15
 8013eb6:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8013eba:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8013ebe:	f001 fb69 	bl	8015594 <__ieee754_logf>
 8013ec2:	eeb0 8a40 	vmov.f32	s16, s0
 8013ec6:	e7de      	b.n	8013e86 <asinhf+0x86>
 8013ec8:	7149f2ca 	.word	0x7149f2ca
 8013ecc:	3f317218 	.word	0x3f317218

08013ed0 <atanf>:
 8013ed0:	b538      	push	{r3, r4, r5, lr}
 8013ed2:	ee10 5a10 	vmov	r5, s0
 8013ed6:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8013eda:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8013ede:	eef0 7a40 	vmov.f32	s15, s0
 8013ee2:	db10      	blt.n	8013f06 <atanf+0x36>
 8013ee4:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8013ee8:	dd04      	ble.n	8013ef4 <atanf+0x24>
 8013eea:	ee70 7a00 	vadd.f32	s15, s0, s0
 8013eee:	eeb0 0a67 	vmov.f32	s0, s15
 8013ef2:	bd38      	pop	{r3, r4, r5, pc}
 8013ef4:	eddf 7a4d 	vldr	s15, [pc, #308]	; 801402c <atanf+0x15c>
 8013ef8:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 8014030 <atanf+0x160>
 8013efc:	2d00      	cmp	r5, #0
 8013efe:	bfd8      	it	le
 8013f00:	eef0 7a40 	vmovle.f32	s15, s0
 8013f04:	e7f3      	b.n	8013eee <atanf+0x1e>
 8013f06:	4b4b      	ldr	r3, [pc, #300]	; (8014034 <atanf+0x164>)
 8013f08:	429c      	cmp	r4, r3
 8013f0a:	dc10      	bgt.n	8013f2e <atanf+0x5e>
 8013f0c:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8013f10:	da0a      	bge.n	8013f28 <atanf+0x58>
 8013f12:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8014038 <atanf+0x168>
 8013f16:	ee30 7a07 	vadd.f32	s14, s0, s14
 8013f1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8013f1e:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8013f22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f26:	dce2      	bgt.n	8013eee <atanf+0x1e>
 8013f28:	f04f 33ff 	mov.w	r3, #4294967295
 8013f2c:	e013      	b.n	8013f56 <atanf+0x86>
 8013f2e:	f000 fb03 	bl	8014538 <fabsf>
 8013f32:	4b42      	ldr	r3, [pc, #264]	; (801403c <atanf+0x16c>)
 8013f34:	429c      	cmp	r4, r3
 8013f36:	dc4f      	bgt.n	8013fd8 <atanf+0x108>
 8013f38:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8013f3c:	429c      	cmp	r4, r3
 8013f3e:	dc41      	bgt.n	8013fc4 <atanf+0xf4>
 8013f40:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8013f44:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8013f48:	eea0 7a27 	vfma.f32	s14, s0, s15
 8013f4c:	2300      	movs	r3, #0
 8013f4e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8013f52:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8013f56:	1c5a      	adds	r2, r3, #1
 8013f58:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8013f5c:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8014040 <atanf+0x170>
 8013f60:	eddf 5a38 	vldr	s11, [pc, #224]	; 8014044 <atanf+0x174>
 8013f64:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8014048 <atanf+0x178>
 8013f68:	ee66 6a06 	vmul.f32	s13, s12, s12
 8013f6c:	eee6 5a87 	vfma.f32	s11, s13, s14
 8013f70:	ed9f 7a36 	vldr	s14, [pc, #216]	; 801404c <atanf+0x17c>
 8013f74:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8013f78:	eddf 5a35 	vldr	s11, [pc, #212]	; 8014050 <atanf+0x180>
 8013f7c:	eee7 5a26 	vfma.f32	s11, s14, s13
 8013f80:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8014054 <atanf+0x184>
 8013f84:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8013f88:	eddf 5a33 	vldr	s11, [pc, #204]	; 8014058 <atanf+0x188>
 8013f8c:	eee7 5a26 	vfma.f32	s11, s14, s13
 8013f90:	ed9f 7a32 	vldr	s14, [pc, #200]	; 801405c <atanf+0x18c>
 8013f94:	eea6 5a87 	vfma.f32	s10, s13, s14
 8013f98:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8014060 <atanf+0x190>
 8013f9c:	eea5 7a26 	vfma.f32	s14, s10, s13
 8013fa0:	ed9f 5a30 	vldr	s10, [pc, #192]	; 8014064 <atanf+0x194>
 8013fa4:	eea7 5a26 	vfma.f32	s10, s14, s13
 8013fa8:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8014068 <atanf+0x198>
 8013fac:	eea5 7a26 	vfma.f32	s14, s10, s13
 8013fb0:	ee27 7a26 	vmul.f32	s14, s14, s13
 8013fb4:	eea5 7a86 	vfma.f32	s14, s11, s12
 8013fb8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8013fbc:	d121      	bne.n	8014002 <atanf+0x132>
 8013fbe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013fc2:	e794      	b.n	8013eee <atanf+0x1e>
 8013fc4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8013fc8:	ee30 7a67 	vsub.f32	s14, s0, s15
 8013fcc:	ee30 0a27 	vadd.f32	s0, s0, s15
 8013fd0:	2301      	movs	r3, #1
 8013fd2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8013fd6:	e7be      	b.n	8013f56 <atanf+0x86>
 8013fd8:	4b24      	ldr	r3, [pc, #144]	; (801406c <atanf+0x19c>)
 8013fda:	429c      	cmp	r4, r3
 8013fdc:	dc0b      	bgt.n	8013ff6 <atanf+0x126>
 8013fde:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8013fe2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013fe6:	eea0 7a27 	vfma.f32	s14, s0, s15
 8013fea:	2302      	movs	r3, #2
 8013fec:	ee70 6a67 	vsub.f32	s13, s0, s15
 8013ff0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013ff4:	e7af      	b.n	8013f56 <atanf+0x86>
 8013ff6:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8013ffa:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8013ffe:	2303      	movs	r3, #3
 8014000:	e7a9      	b.n	8013f56 <atanf+0x86>
 8014002:	4a1b      	ldr	r2, [pc, #108]	; (8014070 <atanf+0x1a0>)
 8014004:	491b      	ldr	r1, [pc, #108]	; (8014074 <atanf+0x1a4>)
 8014006:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801400a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801400e:	ed93 0a00 	vldr	s0, [r3]
 8014012:	ee37 7a40 	vsub.f32	s14, s14, s0
 8014016:	ed92 0a00 	vldr	s0, [r2]
 801401a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801401e:	2d00      	cmp	r5, #0
 8014020:	ee70 7a67 	vsub.f32	s15, s0, s15
 8014024:	bfb8      	it	lt
 8014026:	eef1 7a67 	vneglt.f32	s15, s15
 801402a:	e760      	b.n	8013eee <atanf+0x1e>
 801402c:	3fc90fdb 	.word	0x3fc90fdb
 8014030:	bfc90fdb 	.word	0xbfc90fdb
 8014034:	3edfffff 	.word	0x3edfffff
 8014038:	7149f2ca 	.word	0x7149f2ca
 801403c:	3f97ffff 	.word	0x3f97ffff
 8014040:	3c8569d7 	.word	0x3c8569d7
 8014044:	3d4bda59 	.word	0x3d4bda59
 8014048:	bd6ef16b 	.word	0xbd6ef16b
 801404c:	3d886b35 	.word	0x3d886b35
 8014050:	3dba2e6e 	.word	0x3dba2e6e
 8014054:	3e124925 	.word	0x3e124925
 8014058:	3eaaaaab 	.word	0x3eaaaaab
 801405c:	bd15a221 	.word	0xbd15a221
 8014060:	bd9d8795 	.word	0xbd9d8795
 8014064:	bde38e38 	.word	0xbde38e38
 8014068:	be4ccccd 	.word	0xbe4ccccd
 801406c:	401bffff 	.word	0x401bffff
 8014070:	0807d034 	.word	0x0807d034
 8014074:	0807d044 	.word	0x0807d044

08014078 <ceilf>:
 8014078:	ee10 3a10 	vmov	r3, s0
 801407c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8014080:	3a7f      	subs	r2, #127	; 0x7f
 8014082:	2a16      	cmp	r2, #22
 8014084:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8014088:	dc2a      	bgt.n	80140e0 <ceilf+0x68>
 801408a:	2a00      	cmp	r2, #0
 801408c:	da11      	bge.n	80140b2 <ceilf+0x3a>
 801408e:	eddf 7a19 	vldr	s15, [pc, #100]	; 80140f4 <ceilf+0x7c>
 8014092:	ee30 0a27 	vadd.f32	s0, s0, s15
 8014096:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801409a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801409e:	dd05      	ble.n	80140ac <ceilf+0x34>
 80140a0:	2b00      	cmp	r3, #0
 80140a2:	db23      	blt.n	80140ec <ceilf+0x74>
 80140a4:	2900      	cmp	r1, #0
 80140a6:	bf18      	it	ne
 80140a8:	f04f 537e 	movne.w	r3, #1065353216	; 0x3f800000
 80140ac:	ee00 3a10 	vmov	s0, r3
 80140b0:	4770      	bx	lr
 80140b2:	4911      	ldr	r1, [pc, #68]	; (80140f8 <ceilf+0x80>)
 80140b4:	4111      	asrs	r1, r2
 80140b6:	420b      	tst	r3, r1
 80140b8:	d0fa      	beq.n	80140b0 <ceilf+0x38>
 80140ba:	eddf 7a0e 	vldr	s15, [pc, #56]	; 80140f4 <ceilf+0x7c>
 80140be:	ee30 0a27 	vadd.f32	s0, s0, s15
 80140c2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80140c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80140ca:	ddef      	ble.n	80140ac <ceilf+0x34>
 80140cc:	2b00      	cmp	r3, #0
 80140ce:	bfc2      	ittt	gt
 80140d0:	f44f 0000 	movgt.w	r0, #8388608	; 0x800000
 80140d4:	fa40 f202 	asrgt.w	r2, r0, r2
 80140d8:	189b      	addgt	r3, r3, r2
 80140da:	ea23 0301 	bic.w	r3, r3, r1
 80140de:	e7e5      	b.n	80140ac <ceilf+0x34>
 80140e0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80140e4:	d3e4      	bcc.n	80140b0 <ceilf+0x38>
 80140e6:	ee30 0a00 	vadd.f32	s0, s0, s0
 80140ea:	4770      	bx	lr
 80140ec:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80140f0:	e7dc      	b.n	80140ac <ceilf+0x34>
 80140f2:	bf00      	nop
 80140f4:	7149f2ca 	.word	0x7149f2ca
 80140f8:	007fffff 	.word	0x007fffff

080140fc <cosf>:
 80140fc:	ee10 3a10 	vmov	r3, s0
 8014100:	b507      	push	{r0, r1, r2, lr}
 8014102:	4a1e      	ldr	r2, [pc, #120]	; (801417c <cosf+0x80>)
 8014104:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014108:	4293      	cmp	r3, r2
 801410a:	dc06      	bgt.n	801411a <cosf+0x1e>
 801410c:	eddf 0a1c 	vldr	s1, [pc, #112]	; 8014180 <cosf+0x84>
 8014110:	b003      	add	sp, #12
 8014112:	f85d eb04 	ldr.w	lr, [sp], #4
 8014116:	f001 bfab 	b.w	8016070 <__kernel_cosf>
 801411a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801411e:	db04      	blt.n	801412a <cosf+0x2e>
 8014120:	ee30 0a40 	vsub.f32	s0, s0, s0
 8014124:	b003      	add	sp, #12
 8014126:	f85d fb04 	ldr.w	pc, [sp], #4
 801412a:	4668      	mov	r0, sp
 801412c:	f001 fdf0 	bl	8015d10 <__ieee754_rem_pio2f>
 8014130:	f000 0003 	and.w	r0, r0, #3
 8014134:	2801      	cmp	r0, #1
 8014136:	d009      	beq.n	801414c <cosf+0x50>
 8014138:	2802      	cmp	r0, #2
 801413a:	d010      	beq.n	801415e <cosf+0x62>
 801413c:	b9b0      	cbnz	r0, 801416c <cosf+0x70>
 801413e:	eddd 0a01 	vldr	s1, [sp, #4]
 8014142:	ed9d 0a00 	vldr	s0, [sp]
 8014146:	f001 ff93 	bl	8016070 <__kernel_cosf>
 801414a:	e7eb      	b.n	8014124 <cosf+0x28>
 801414c:	eddd 0a01 	vldr	s1, [sp, #4]
 8014150:	ed9d 0a00 	vldr	s0, [sp]
 8014154:	f002 fa62 	bl	801661c <__kernel_sinf>
 8014158:	eeb1 0a40 	vneg.f32	s0, s0
 801415c:	e7e2      	b.n	8014124 <cosf+0x28>
 801415e:	eddd 0a01 	vldr	s1, [sp, #4]
 8014162:	ed9d 0a00 	vldr	s0, [sp]
 8014166:	f001 ff83 	bl	8016070 <__kernel_cosf>
 801416a:	e7f5      	b.n	8014158 <cosf+0x5c>
 801416c:	eddd 0a01 	vldr	s1, [sp, #4]
 8014170:	ed9d 0a00 	vldr	s0, [sp]
 8014174:	2001      	movs	r0, #1
 8014176:	f002 fa51 	bl	801661c <__kernel_sinf>
 801417a:	e7d3      	b.n	8014124 <cosf+0x28>
 801417c:	3f490fd8 	.word	0x3f490fd8
 8014180:	00000000 	.word	0x00000000

08014184 <erff>:
 8014184:	b538      	push	{r3, r4, r5, lr}
 8014186:	ee10 4a10 	vmov	r4, s0
 801418a:	f024 4500 	bic.w	r5, r4, #2147483648	; 0x80000000
 801418e:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8014192:	ed2d 8b06 	vpush	{d8-d10}
 8014196:	eef0 7a40 	vmov.f32	s15, s0
 801419a:	db10      	blt.n	80141be <erff+0x3a>
 801419c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80141a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80141a4:	0fe4      	lsrs	r4, r4, #31
 80141a6:	0064      	lsls	r4, r4, #1
 80141a8:	f1c4 0301 	rsb	r3, r4, #1
 80141ac:	ee00 3a10 	vmov	s0, r3
 80141b0:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 80141b4:	ee30 0a07 	vadd.f32	s0, s0, s14
 80141b8:	ecbd 8b06 	vpop	{d8-d10}
 80141bc:	bd38      	pop	{r3, r4, r5, pc}
 80141be:	4ba2      	ldr	r3, [pc, #648]	; (8014448 <erff+0x2c4>)
 80141c0:	429d      	cmp	r5, r3
 80141c2:	dc48      	bgt.n	8014256 <erff+0xd2>
 80141c4:	f1b5 5f46 	cmp.w	r5, #830472192	; 0x31800000
 80141c8:	da18      	bge.n	80141fc <erff+0x78>
 80141ca:	f014 4ff8 	tst.w	r4, #2080374784	; 0x7c000000
 80141ce:	d10e      	bne.n	80141ee <erff+0x6a>
 80141d0:	ed9f 0a9e 	vldr	s0, [pc, #632]	; 801444c <erff+0x2c8>
 80141d4:	ee27 0a80 	vmul.f32	s0, s15, s0
 80141d8:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 80141dc:	eeb0 7a40 	vmov.f32	s14, s0
 80141e0:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80141e4:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 80141e8:	ee27 0a00 	vmul.f32	s0, s14, s0
 80141ec:	e7e4      	b.n	80141b8 <erff+0x34>
 80141ee:	ed9f 7a98 	vldr	s14, [pc, #608]	; 8014450 <erff+0x2cc>
 80141f2:	eee7 7a87 	vfma.f32	s15, s15, s14
 80141f6:	eeb0 0a67 	vmov.f32	s0, s15
 80141fa:	e7dd      	b.n	80141b8 <erff+0x34>
 80141fc:	ee20 7a00 	vmul.f32	s14, s0, s0
 8014200:	ed9f 6a94 	vldr	s12, [pc, #592]	; 8014454 <erff+0x2d0>
 8014204:	eddf 6a94 	vldr	s13, [pc, #592]	; 8014458 <erff+0x2d4>
 8014208:	eddf 5a94 	vldr	s11, [pc, #592]	; 801445c <erff+0x2d8>
 801420c:	eee7 6a06 	vfma.f32	s13, s14, s12
 8014210:	ed9f 6a93 	vldr	s12, [pc, #588]	; 8014460 <erff+0x2dc>
 8014214:	eea6 6a87 	vfma.f32	s12, s13, s14
 8014218:	eddf 6a92 	vldr	s13, [pc, #584]	; 8014464 <erff+0x2e0>
 801421c:	eee6 6a07 	vfma.f32	s13, s12, s14
 8014220:	ed9f 6a8b 	vldr	s12, [pc, #556]	; 8014450 <erff+0x2cc>
 8014224:	eea6 6a87 	vfma.f32	s12, s13, s14
 8014228:	eddf 6a8f 	vldr	s13, [pc, #572]	; 8014468 <erff+0x2e4>
 801422c:	eee7 6a25 	vfma.f32	s13, s14, s11
 8014230:	eddf 5a8e 	vldr	s11, [pc, #568]	; 801446c <erff+0x2e8>
 8014234:	eee6 5a87 	vfma.f32	s11, s13, s14
 8014238:	eddf 6a8d 	vldr	s13, [pc, #564]	; 8014470 <erff+0x2ec>
 801423c:	eee5 6a87 	vfma.f32	s13, s11, s14
 8014240:	eddf 5a8c 	vldr	s11, [pc, #560]	; 8014474 <erff+0x2f0>
 8014244:	eee6 5a87 	vfma.f32	s11, s13, s14
 8014248:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801424c:	eee5 6a87 	vfma.f32	s13, s11, s14
 8014250:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8014254:	e7cd      	b.n	80141f2 <erff+0x6e>
 8014256:	4b88      	ldr	r3, [pc, #544]	; (8014478 <erff+0x2f4>)
 8014258:	429d      	cmp	r5, r3
 801425a:	dc44      	bgt.n	80142e6 <erff+0x162>
 801425c:	f000 f96c 	bl	8014538 <fabsf>
 8014260:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8014264:	ee30 0a67 	vsub.f32	s0, s0, s15
 8014268:	ed9f 7a84 	vldr	s14, [pc, #528]	; 801447c <erff+0x2f8>
 801426c:	eddf 6a84 	vldr	s13, [pc, #528]	; 8014480 <erff+0x2fc>
 8014270:	ed9f 6a84 	vldr	s12, [pc, #528]	; 8014484 <erff+0x300>
 8014274:	eee0 6a07 	vfma.f32	s13, s0, s14
 8014278:	2c00      	cmp	r4, #0
 801427a:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8014488 <erff+0x304>
 801427e:	eea6 7a80 	vfma.f32	s14, s13, s0
 8014282:	eddf 6a82 	vldr	s13, [pc, #520]	; 801448c <erff+0x308>
 8014286:	eee7 6a00 	vfma.f32	s13, s14, s0
 801428a:	ed9f 7a81 	vldr	s14, [pc, #516]	; 8014490 <erff+0x30c>
 801428e:	eea6 7a80 	vfma.f32	s14, s13, s0
 8014292:	eddf 6a80 	vldr	s13, [pc, #512]	; 8014494 <erff+0x310>
 8014296:	eee7 6a00 	vfma.f32	s13, s14, s0
 801429a:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8014498 <erff+0x314>
 801429e:	eea6 7a80 	vfma.f32	s14, s13, s0
 80142a2:	eddf 6a7e 	vldr	s13, [pc, #504]	; 801449c <erff+0x318>
 80142a6:	eee0 6a06 	vfma.f32	s13, s0, s12
 80142aa:	ed9f 6a7d 	vldr	s12, [pc, #500]	; 80144a0 <erff+0x31c>
 80142ae:	eea6 6a80 	vfma.f32	s12, s13, s0
 80142b2:	eddf 6a7c 	vldr	s13, [pc, #496]	; 80144a4 <erff+0x320>
 80142b6:	eee6 6a00 	vfma.f32	s13, s12, s0
 80142ba:	ed9f 6a7b 	vldr	s12, [pc, #492]	; 80144a8 <erff+0x324>
 80142be:	eea6 6a80 	vfma.f32	s12, s13, s0
 80142c2:	eddf 6a7a 	vldr	s13, [pc, #488]	; 80144ac <erff+0x328>
 80142c6:	eee6 6a00 	vfma.f32	s13, s12, s0
 80142ca:	eee6 7a80 	vfma.f32	s15, s13, s0
 80142ce:	ee87 0a27 	vdiv.f32	s0, s14, s15
 80142d2:	bfab      	itete	ge
 80142d4:	eddf 7a76 	vldrge	s15, [pc, #472]	; 80144b0 <erff+0x32c>
 80142d8:	eddf 7a76 	vldrlt	s15, [pc, #472]	; 80144b4 <erff+0x330>
 80142dc:	ee30 0a27 	vaddge.f32	s0, s0, s15
 80142e0:	ee37 0ac0 	vsublt.f32	s0, s15, s0
 80142e4:	e768      	b.n	80141b8 <erff+0x34>
 80142e6:	4b74      	ldr	r3, [pc, #464]	; (80144b8 <erff+0x334>)
 80142e8:	429d      	cmp	r5, r3
 80142ea:	dd08      	ble.n	80142fe <erff+0x17a>
 80142ec:	2c00      	cmp	r4, #0
 80142ee:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80142f2:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 80142f6:	bfb8      	it	lt
 80142f8:	eeb0 0a67 	vmovlt.f32	s0, s15
 80142fc:	e75c      	b.n	80141b8 <erff+0x34>
 80142fe:	f000 f91b 	bl	8014538 <fabsf>
 8014302:	4b6e      	ldr	r3, [pc, #440]	; (80144bc <erff+0x338>)
 8014304:	ee60 7a00 	vmul.f32	s15, s0, s0
 8014308:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
 801430c:	429d      	cmp	r5, r3
 801430e:	ee89 7aa7 	vdiv.f32	s14, s19, s15
 8014312:	eeb0 8a40 	vmov.f32	s16, s0
 8014316:	dc64      	bgt.n	80143e2 <erff+0x25e>
 8014318:	eddf 7a69 	vldr	s15, [pc, #420]	; 80144c0 <erff+0x33c>
 801431c:	eddf 6a69 	vldr	s13, [pc, #420]	; 80144c4 <erff+0x340>
 8014320:	ed9f 9a69 	vldr	s18, [pc, #420]	; 80144c8 <erff+0x344>
 8014324:	eee7 6a27 	vfma.f32	s13, s14, s15
 8014328:	eddf 7a68 	vldr	s15, [pc, #416]	; 80144cc <erff+0x348>
 801432c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8014330:	eddf 6a67 	vldr	s13, [pc, #412]	; 80144d0 <erff+0x34c>
 8014334:	eee7 6a87 	vfma.f32	s13, s15, s14
 8014338:	eddf 7a66 	vldr	s15, [pc, #408]	; 80144d4 <erff+0x350>
 801433c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8014340:	eddf 6a65 	vldr	s13, [pc, #404]	; 80144d8 <erff+0x354>
 8014344:	eee7 6a87 	vfma.f32	s13, s15, s14
 8014348:	eddf 7a64 	vldr	s15, [pc, #400]	; 80144dc <erff+0x358>
 801434c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8014350:	eddf 6a63 	vldr	s13, [pc, #396]	; 80144e0 <erff+0x35c>
 8014354:	eea7 9a87 	vfma.f32	s18, s15, s14
 8014358:	eddf 7a62 	vldr	s15, [pc, #392]	; 80144e4 <erff+0x360>
 801435c:	eee7 7a26 	vfma.f32	s15, s14, s13
 8014360:	eddf 6a61 	vldr	s13, [pc, #388]	; 80144e8 <erff+0x364>
 8014364:	eee7 6a87 	vfma.f32	s13, s15, s14
 8014368:	eddf 7a60 	vldr	s15, [pc, #384]	; 80144ec <erff+0x368>
 801436c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8014370:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80144f0 <erff+0x36c>
 8014374:	eee7 6a87 	vfma.f32	s13, s15, s14
 8014378:	eddf 7a5e 	vldr	s15, [pc, #376]	; 80144f4 <erff+0x370>
 801437c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8014380:	eddf 6a5d 	vldr	s13, [pc, #372]	; 80144f8 <erff+0x374>
 8014384:	eee7 6a87 	vfma.f32	s13, s15, s14
 8014388:	eddf 7a5c 	vldr	s15, [pc, #368]	; 80144fc <erff+0x378>
 801438c:	ee18 3a10 	vmov	r3, s16
 8014390:	eee6 7a87 	vfma.f32	s15, s13, s14
 8014394:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8014398:	f023 030f 	bic.w	r3, r3, #15
 801439c:	ee08 3a90 	vmov	s17, r3
 80143a0:	eef0 aa69 	vmov.f32	s21, s19
 80143a4:	eebe 0a02 	vmov.f32	s0, #226	; 0xbf100000 -0.5625000
 80143a8:	eee7 aa87 	vfma.f32	s21, s15, s14
 80143ac:	eea8 0ae8 	vfms.f32	s0, s17, s17
 80143b0:	f000 ffa0 	bl	80152f4 <__ieee754_expf>
 80143b4:	eeb0 aa40 	vmov.f32	s20, s0
 80143b8:	ee89 0a2a 	vdiv.f32	s0, s18, s21
 80143bc:	ee78 7ac8 	vsub.f32	s15, s17, s16
 80143c0:	ee78 8a28 	vadd.f32	s17, s16, s17
 80143c4:	eea7 0aa8 	vfma.f32	s0, s15, s17
 80143c8:	f000 ff94 	bl	80152f4 <__ieee754_expf>
 80143cc:	ee2a 0a00 	vmul.f32	s0, s20, s0
 80143d0:	2c00      	cmp	r4, #0
 80143d2:	eec0 7a08 	vdiv.f32	s15, s0, s16
 80143d6:	bfac      	ite	ge
 80143d8:	ee39 0ae7 	vsubge.f32	s0, s19, s15
 80143dc:	ee37 0ae9 	vsublt.f32	s0, s15, s19
 80143e0:	e6ea      	b.n	80141b8 <erff+0x34>
 80143e2:	eddf 6a47 	vldr	s13, [pc, #284]	; 8014500 <erff+0x37c>
 80143e6:	eddf 7a47 	vldr	s15, [pc, #284]	; 8014504 <erff+0x380>
 80143ea:	ed9f 9a47 	vldr	s18, [pc, #284]	; 8014508 <erff+0x384>
 80143ee:	eee7 7a26 	vfma.f32	s15, s14, s13
 80143f2:	eddf 6a46 	vldr	s13, [pc, #280]	; 801450c <erff+0x388>
 80143f6:	eee7 6a87 	vfma.f32	s13, s15, s14
 80143fa:	eddf 7a45 	vldr	s15, [pc, #276]	; 8014510 <erff+0x38c>
 80143fe:	eee6 7a87 	vfma.f32	s15, s13, s14
 8014402:	eddf 6a44 	vldr	s13, [pc, #272]	; 8014514 <erff+0x390>
 8014406:	eee7 6a87 	vfma.f32	s13, s15, s14
 801440a:	eddf 7a43 	vldr	s15, [pc, #268]	; 8014518 <erff+0x394>
 801440e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8014412:	eddf 6a42 	vldr	s13, [pc, #264]	; 801451c <erff+0x398>
 8014416:	eea7 9a87 	vfma.f32	s18, s15, s14
 801441a:	eddf 7a41 	vldr	s15, [pc, #260]	; 8014520 <erff+0x39c>
 801441e:	eee7 6a27 	vfma.f32	s13, s14, s15
 8014422:	eddf 7a40 	vldr	s15, [pc, #256]	; 8014524 <erff+0x3a0>
 8014426:	eee6 7a87 	vfma.f32	s15, s13, s14
 801442a:	eddf 6a3f 	vldr	s13, [pc, #252]	; 8014528 <erff+0x3a4>
 801442e:	eee7 6a87 	vfma.f32	s13, s15, s14
 8014432:	eddf 7a3e 	vldr	s15, [pc, #248]	; 801452c <erff+0x3a8>
 8014436:	eee6 7a87 	vfma.f32	s15, s13, s14
 801443a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8014530 <erff+0x3ac>
 801443e:	eee7 6a87 	vfma.f32	s13, s15, s14
 8014442:	eddf 7a3c 	vldr	s15, [pc, #240]	; 8014534 <erff+0x3b0>
 8014446:	e7a1      	b.n	801438c <erff+0x208>
 8014448:	3f57ffff 	.word	0x3f57ffff
 801444c:	3f8375d4 	.word	0x3f8375d4
 8014450:	3e0375d4 	.word	0x3e0375d4
 8014454:	b7c756b1 	.word	0xb7c756b1
 8014458:	bbbd1489 	.word	0xbbbd1489
 801445c:	b684e21a 	.word	0xb684e21a
 8014460:	bce9528f 	.word	0xbce9528f
 8014464:	bea66beb 	.word	0xbea66beb
 8014468:	390aee49 	.word	0x390aee49
 801446c:	3ba68116 	.word	0x3ba68116
 8014470:	3d852a63 	.word	0x3d852a63
 8014474:	3ecbbbce 	.word	0x3ecbbbce
 8014478:	3f9fffff 	.word	0x3f9fffff
 801447c:	bb0df9c0 	.word	0xbb0df9c0
 8014480:	3d1151b3 	.word	0x3d1151b3
 8014484:	3c445aa3 	.word	0x3c445aa3
 8014488:	bde31cc2 	.word	0xbde31cc2
 801448c:	3ea2fe54 	.word	0x3ea2fe54
 8014490:	bebe9208 	.word	0xbebe9208
 8014494:	3ed46805 	.word	0x3ed46805
 8014498:	bb1acdc6 	.word	0xbb1acdc6
 801449c:	3c5f6e13 	.word	0x3c5f6e13
 80144a0:	3e013307 	.word	0x3e013307
 80144a4:	3d931ae7 	.word	0x3d931ae7
 80144a8:	3f0a5785 	.word	0x3f0a5785
 80144ac:	3dd9f331 	.word	0x3dd9f331
 80144b0:	3f58560b 	.word	0x3f58560b
 80144b4:	bf58560b 	.word	0xbf58560b
 80144b8:	40bfffff 	.word	0x40bfffff
 80144bc:	4036db6d 	.word	0x4036db6d
 80144c0:	c11d077e 	.word	0xc11d077e
 80144c4:	c2a2932b 	.word	0xc2a2932b
 80144c8:	bc21a093 	.word	0xbc21a093
 80144cc:	c3389ae7 	.word	0xc3389ae7
 80144d0:	c322658c 	.word	0xc322658c
 80144d4:	c2798057 	.word	0xc2798057
 80144d8:	c128f022 	.word	0xc128f022
 80144dc:	bf31a0b7 	.word	0xbf31a0b7
 80144e0:	bd777f97 	.word	0xbd777f97
 80144e4:	40d23f7c 	.word	0x40d23f7c
 80144e8:	42d9451f 	.word	0x42d9451f
 80144ec:	43d6810b 	.word	0x43d6810b
 80144f0:	442158c9 	.word	0x442158c9
 80144f4:	43d9486f 	.word	0x43d9486f
 80144f8:	4309a863 	.word	0x4309a863
 80144fc:	419d35ce 	.word	0x419d35ce
 8014500:	c3f1c275 	.word	0xc3f1c275
 8014504:	c480230b 	.word	0xc480230b
 8014508:	bc21a092 	.word	0xbc21a092
 801450c:	c41f6441 	.word	0xc41f6441
 8014510:	c320a2ea 	.word	0xc320a2ea
 8014514:	c18e104b 	.word	0xc18e104b
 8014518:	bf4c9dd4 	.word	0xbf4c9dd4
 801451c:	43ed43a7 	.word	0x43ed43a7
 8014520:	c1b38712 	.word	0xc1b38712
 8014524:	451f90ce 	.word	0x451f90ce
 8014528:	4547fdbb 	.word	0x4547fdbb
 801452c:	44c01759 	.word	0x44c01759
 8014530:	43a2e571 	.word	0x43a2e571
 8014534:	41f2b459 	.word	0x41f2b459

08014538 <fabsf>:
 8014538:	ee10 3a10 	vmov	r3, s0
 801453c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014540:	ee00 3a10 	vmov	s0, r3
 8014544:	4770      	bx	lr
	...

08014548 <floorf>:
 8014548:	ee10 3a10 	vmov	r3, s0
 801454c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8014550:	3a7f      	subs	r2, #127	; 0x7f
 8014552:	2a16      	cmp	r2, #22
 8014554:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8014558:	dc2a      	bgt.n	80145b0 <floorf+0x68>
 801455a:	2a00      	cmp	r2, #0
 801455c:	da11      	bge.n	8014582 <floorf+0x3a>
 801455e:	eddf 7a18 	vldr	s15, [pc, #96]	; 80145c0 <floorf+0x78>
 8014562:	ee30 0a27 	vadd.f32	s0, s0, s15
 8014566:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801456a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801456e:	dd05      	ble.n	801457c <floorf+0x34>
 8014570:	2b00      	cmp	r3, #0
 8014572:	da23      	bge.n	80145bc <floorf+0x74>
 8014574:	4a13      	ldr	r2, [pc, #76]	; (80145c4 <floorf+0x7c>)
 8014576:	2900      	cmp	r1, #0
 8014578:	bf18      	it	ne
 801457a:	4613      	movne	r3, r2
 801457c:	ee00 3a10 	vmov	s0, r3
 8014580:	4770      	bx	lr
 8014582:	4911      	ldr	r1, [pc, #68]	; (80145c8 <floorf+0x80>)
 8014584:	4111      	asrs	r1, r2
 8014586:	420b      	tst	r3, r1
 8014588:	d0fa      	beq.n	8014580 <floorf+0x38>
 801458a:	eddf 7a0d 	vldr	s15, [pc, #52]	; 80145c0 <floorf+0x78>
 801458e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8014592:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8014596:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801459a:	ddef      	ble.n	801457c <floorf+0x34>
 801459c:	2b00      	cmp	r3, #0
 801459e:	bfbe      	ittt	lt
 80145a0:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 80145a4:	fa40 f202 	asrlt.w	r2, r0, r2
 80145a8:	189b      	addlt	r3, r3, r2
 80145aa:	ea23 0301 	bic.w	r3, r3, r1
 80145ae:	e7e5      	b.n	801457c <floorf+0x34>
 80145b0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80145b4:	d3e4      	bcc.n	8014580 <floorf+0x38>
 80145b6:	ee30 0a00 	vadd.f32	s0, s0, s0
 80145ba:	4770      	bx	lr
 80145bc:	2300      	movs	r3, #0
 80145be:	e7dd      	b.n	801457c <floorf+0x34>
 80145c0:	7149f2ca 	.word	0x7149f2ca
 80145c4:	bf800000 	.word	0xbf800000
 80145c8:	007fffff 	.word	0x007fffff

080145cc <log1pf>:
 80145cc:	ee10 2a10 	vmov	r2, s0
 80145d0:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80145d4:	eef0 7a40 	vmov.f32	s15, s0
 80145d8:	db04      	blt.n	80145e4 <log1pf+0x18>
 80145da:	ee70 7a00 	vadd.f32	s15, s0, s0
 80145de:	eeb0 0a67 	vmov.f32	s0, s15
 80145e2:	4770      	bx	lr
 80145e4:	4b6a      	ldr	r3, [pc, #424]	; (8014790 <log1pf+0x1c4>)
 80145e6:	429a      	cmp	r2, r3
 80145e8:	dc6f      	bgt.n	80146ca <log1pf+0xfe>
 80145ea:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 80145ee:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 80145f2:	db0b      	blt.n	801460c <log1pf+0x40>
 80145f4:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80145f8:	eeb4 0a47 	vcmp.f32	s0, s14
 80145fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014600:	d102      	bne.n	8014608 <log1pf+0x3c>
 8014602:	2001      	movs	r0, #1
 8014604:	f002 b954 	b.w	80168b0 <__math_divzerof>
 8014608:	f002 b964 	b.w	80168d4 <__math_invalidf>
 801460c:	f1b3 5f44 	cmp.w	r3, #822083584	; 0x31000000
 8014610:	da12      	bge.n	8014638 <log1pf+0x6c>
 8014612:	ed9f 7a60 	vldr	s14, [pc, #384]	; 8014794 <log1pf+0x1c8>
 8014616:	ee30 7a07 	vadd.f32	s14, s0, s14
 801461a:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801461e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014622:	dd02      	ble.n	801462a <log1pf+0x5e>
 8014624:	f1b3 5f12 	cmp.w	r3, #612368384	; 0x24800000
 8014628:	dbd9      	blt.n	80145de <log1pf+0x12>
 801462a:	ee67 6ae7 	vnmul.f32	s13, s15, s15
 801462e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8014632:	eee6 7a87 	vfma.f32	s15, s13, s14
 8014636:	e7d2      	b.n	80145de <log1pf+0x12>
 8014638:	4b57      	ldr	r3, [pc, #348]	; (8014798 <log1pf+0x1cc>)
 801463a:	441a      	add	r2, r3
 801463c:	429a      	cmp	r2, r3
 801463e:	d84c      	bhi.n	80146da <log1pf+0x10e>
 8014640:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8014644:	ee77 6a87 	vadd.f32	s13, s15, s14
 8014648:	ee16 2a90 	vmov	r2, s13
 801464c:	15d3      	asrs	r3, r2, #23
 801464e:	3b7f      	subs	r3, #127	; 0x7f
 8014650:	2b00      	cmp	r3, #0
 8014652:	bfcb      	itete	gt
 8014654:	ee76 7ae7 	vsubgt.f32	s15, s13, s15
 8014658:	ee36 7ac7 	vsuble.f32	s14, s13, s14
 801465c:	ee77 7a67 	vsubgt.f32	s15, s14, s15
 8014660:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 8014664:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 8014668:	494c      	ldr	r1, [pc, #304]	; (801479c <log1pf+0x1d0>)
 801466a:	f3c2 0216 	ubfx	r2, r2, #0, #23
 801466e:	428a      	cmp	r2, r1
 8014670:	bfc9      	itett	gt
 8014672:	f042 517c 	orrgt.w	r1, r2, #1056964608	; 0x3f000000
 8014676:	f042 517e 	orrle.w	r1, r2, #1065353216	; 0x3f800000
 801467a:	f5c2 0200 	rsbgt	r2, r2, #8388608	; 0x800000
 801467e:	3301      	addgt	r3, #1
 8014680:	bfc8      	it	gt
 8014682:	1092      	asrgt	r2, r2, #2
 8014684:	ee07 1a10 	vmov	s14, r1
 8014688:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801468c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014690:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8014694:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8014698:	ee66 6aa7 	vmul.f32	s13, s13, s15
 801469c:	bbea      	cbnz	r2, 801471a <log1pf+0x14e>
 801469e:	eef5 7a40 	vcmp.f32	s15, #0.0
 80146a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80146a6:	d11b      	bne.n	80146e0 <log1pf+0x114>
 80146a8:	2b00      	cmp	r3, #0
 80146aa:	d06d      	beq.n	8014788 <log1pf+0x1bc>
 80146ac:	ee07 3a90 	vmov	s15, r3
 80146b0:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80147a0 <log1pf+0x1d4>
 80146b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80146b8:	eef0 7a46 	vmov.f32	s15, s12
 80146bc:	eee7 7a26 	vfma.f32	s15, s14, s13
 80146c0:	eddf 6a38 	vldr	s13, [pc, #224]	; 80147a4 <log1pf+0x1d8>
 80146c4:	eee7 7a26 	vfma.f32	s15, s14, s13
 80146c8:	e789      	b.n	80145de <log1pf+0x12>
 80146ca:	f1b2 4fb4 	cmp.w	r2, #1509949440	; 0x5a000000
 80146ce:	dbb7      	blt.n	8014640 <log1pf+0x74>
 80146d0:	15d3      	asrs	r3, r2, #23
 80146d2:	ed9f 6a35 	vldr	s12, [pc, #212]	; 80147a8 <log1pf+0x1dc>
 80146d6:	3b7f      	subs	r3, #127	; 0x7f
 80146d8:	e7c6      	b.n	8014668 <log1pf+0x9c>
 80146da:	2201      	movs	r2, #1
 80146dc:	2300      	movs	r3, #0
 80146de:	e7d7      	b.n	8014690 <log1pf+0xc4>
 80146e0:	eddf 5a32 	vldr	s11, [pc, #200]	; 80147ac <log1pf+0x1e0>
 80146e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80146e8:	eea7 7ae5 	vfms.f32	s14, s15, s11
 80146ec:	ee67 6a26 	vmul.f32	s13, s14, s13
 80146f0:	b913      	cbnz	r3, 80146f8 <log1pf+0x12c>
 80146f2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80146f6:	e772      	b.n	80145de <log1pf+0x12>
 80146f8:	ee07 3a10 	vmov	s14, r3
 80146fc:	eddf 5a28 	vldr	s11, [pc, #160]	; 80147a0 <log1pf+0x1d4>
 8014700:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014704:	eea7 6a25 	vfma.f32	s12, s14, s11
 8014708:	ee76 6ac6 	vsub.f32	s13, s13, s12
 801470c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8014710:	eddf 6a24 	vldr	s13, [pc, #144]	; 80147a4 <log1pf+0x1d8>
 8014714:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8014718:	e761      	b.n	80145de <log1pf+0x12>
 801471a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 801471e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8014722:	ed9f 5a23 	vldr	s10, [pc, #140]	; 80147b0 <log1pf+0x1e4>
 8014726:	eddf 4a23 	vldr	s9, [pc, #140]	; 80147b4 <log1pf+0x1e8>
 801472a:	eec7 5a87 	vdiv.f32	s11, s15, s14
 801472e:	ee25 7aa5 	vmul.f32	s14, s11, s11
 8014732:	eee7 4a05 	vfma.f32	s9, s14, s10
 8014736:	ed9f 5a20 	vldr	s10, [pc, #128]	; 80147b8 <log1pf+0x1ec>
 801473a:	eea4 5a87 	vfma.f32	s10, s9, s14
 801473e:	eddf 4a1f 	vldr	s9, [pc, #124]	; 80147bc <log1pf+0x1f0>
 8014742:	eee5 4a07 	vfma.f32	s9, s10, s14
 8014746:	ed9f 5a1e 	vldr	s10, [pc, #120]	; 80147c0 <log1pf+0x1f4>
 801474a:	eea4 5a87 	vfma.f32	s10, s9, s14
 801474e:	eddf 4a1d 	vldr	s9, [pc, #116]	; 80147c4 <log1pf+0x1f8>
 8014752:	eee5 4a07 	vfma.f32	s9, s10, s14
 8014756:	ed9f 5a15 	vldr	s10, [pc, #84]	; 80147ac <log1pf+0x1e0>
 801475a:	eea4 5a87 	vfma.f32	s10, s9, s14
 801475e:	eef0 4a66 	vmov.f32	s9, s13
 8014762:	eee5 4a07 	vfma.f32	s9, s10, s14
 8014766:	ee65 5aa4 	vmul.f32	s11, s11, s9
 801476a:	b913      	cbnz	r3, 8014772 <log1pf+0x1a6>
 801476c:	ee76 6ae5 	vsub.f32	s13, s13, s11
 8014770:	e7bf      	b.n	80146f2 <log1pf+0x126>
 8014772:	ee07 3a10 	vmov	s14, r3
 8014776:	ed9f 5a0a 	vldr	s10, [pc, #40]	; 80147a0 <log1pf+0x1d4>
 801477a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801477e:	eea7 6a05 	vfma.f32	s12, s14, s10
 8014782:	ee36 6a25 	vadd.f32	s12, s12, s11
 8014786:	e7bf      	b.n	8014708 <log1pf+0x13c>
 8014788:	eddf 7a07 	vldr	s15, [pc, #28]	; 80147a8 <log1pf+0x1dc>
 801478c:	e727      	b.n	80145de <log1pf+0x12>
 801478e:	bf00      	nop
 8014790:	3ed413d6 	.word	0x3ed413d6
 8014794:	4c000000 	.word	0x4c000000
 8014798:	416a09e0 	.word	0x416a09e0
 801479c:	003504f6 	.word	0x003504f6
 80147a0:	3717f7d1 	.word	0x3717f7d1
 80147a4:	3f317180 	.word	0x3f317180
 80147a8:	00000000 	.word	0x00000000
 80147ac:	3f2aaaab 	.word	0x3f2aaaab
 80147b0:	3e178897 	.word	0x3e178897
 80147b4:	3e1cd04f 	.word	0x3e1cd04f
 80147b8:	3e3a3325 	.word	0x3e3a3325
 80147bc:	3e638e29 	.word	0x3e638e29
 80147c0:	3e924925 	.word	0x3e924925
 80147c4:	3ecccccd 	.word	0x3ecccccd

080147c8 <roundf>:
 80147c8:	ee10 0a10 	vmov	r0, s0
 80147cc:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 80147d0:	3a7f      	subs	r2, #127	; 0x7f
 80147d2:	2a16      	cmp	r2, #22
 80147d4:	dc15      	bgt.n	8014802 <roundf+0x3a>
 80147d6:	2a00      	cmp	r2, #0
 80147d8:	da08      	bge.n	80147ec <roundf+0x24>
 80147da:	3201      	adds	r2, #1
 80147dc:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80147e0:	d101      	bne.n	80147e6 <roundf+0x1e>
 80147e2:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 80147e6:	ee00 3a10 	vmov	s0, r3
 80147ea:	4770      	bx	lr
 80147ec:	4907      	ldr	r1, [pc, #28]	; (801480c <roundf+0x44>)
 80147ee:	4111      	asrs	r1, r2
 80147f0:	4208      	tst	r0, r1
 80147f2:	d0fa      	beq.n	80147ea <roundf+0x22>
 80147f4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80147f8:	4113      	asrs	r3, r2
 80147fa:	4403      	add	r3, r0
 80147fc:	ea23 0301 	bic.w	r3, r3, r1
 8014800:	e7f1      	b.n	80147e6 <roundf+0x1e>
 8014802:	2a80      	cmp	r2, #128	; 0x80
 8014804:	d1f1      	bne.n	80147ea <roundf+0x22>
 8014806:	ee30 0a00 	vadd.f32	s0, s0, s0
 801480a:	4770      	bx	lr
 801480c:	007fffff 	.word	0x007fffff

08014810 <sinf>:
 8014810:	ee10 3a10 	vmov	r3, s0
 8014814:	b507      	push	{r0, r1, r2, lr}
 8014816:	4a1f      	ldr	r2, [pc, #124]	; (8014894 <sinf+0x84>)
 8014818:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801481c:	4293      	cmp	r3, r2
 801481e:	dc07      	bgt.n	8014830 <sinf+0x20>
 8014820:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8014898 <sinf+0x88>
 8014824:	2000      	movs	r0, #0
 8014826:	b003      	add	sp, #12
 8014828:	f85d eb04 	ldr.w	lr, [sp], #4
 801482c:	f001 bef6 	b.w	801661c <__kernel_sinf>
 8014830:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8014834:	db04      	blt.n	8014840 <sinf+0x30>
 8014836:	ee30 0a40 	vsub.f32	s0, s0, s0
 801483a:	b003      	add	sp, #12
 801483c:	f85d fb04 	ldr.w	pc, [sp], #4
 8014840:	4668      	mov	r0, sp
 8014842:	f001 fa65 	bl	8015d10 <__ieee754_rem_pio2f>
 8014846:	f000 0003 	and.w	r0, r0, #3
 801484a:	2801      	cmp	r0, #1
 801484c:	d00a      	beq.n	8014864 <sinf+0x54>
 801484e:	2802      	cmp	r0, #2
 8014850:	d00f      	beq.n	8014872 <sinf+0x62>
 8014852:	b9c0      	cbnz	r0, 8014886 <sinf+0x76>
 8014854:	eddd 0a01 	vldr	s1, [sp, #4]
 8014858:	ed9d 0a00 	vldr	s0, [sp]
 801485c:	2001      	movs	r0, #1
 801485e:	f001 fedd 	bl	801661c <__kernel_sinf>
 8014862:	e7ea      	b.n	801483a <sinf+0x2a>
 8014864:	eddd 0a01 	vldr	s1, [sp, #4]
 8014868:	ed9d 0a00 	vldr	s0, [sp]
 801486c:	f001 fc00 	bl	8016070 <__kernel_cosf>
 8014870:	e7e3      	b.n	801483a <sinf+0x2a>
 8014872:	eddd 0a01 	vldr	s1, [sp, #4]
 8014876:	ed9d 0a00 	vldr	s0, [sp]
 801487a:	2001      	movs	r0, #1
 801487c:	f001 fece 	bl	801661c <__kernel_sinf>
 8014880:	eeb1 0a40 	vneg.f32	s0, s0
 8014884:	e7d9      	b.n	801483a <sinf+0x2a>
 8014886:	eddd 0a01 	vldr	s1, [sp, #4]
 801488a:	ed9d 0a00 	vldr	s0, [sp]
 801488e:	f001 fbef 	bl	8016070 <__kernel_cosf>
 8014892:	e7f5      	b.n	8014880 <sinf+0x70>
 8014894:	3f490fd8 	.word	0x3f490fd8
 8014898:	00000000 	.word	0x00000000

0801489c <tanf>:
 801489c:	ee10 3a10 	vmov	r3, s0
 80148a0:	b507      	push	{r0, r1, r2, lr}
 80148a2:	4a12      	ldr	r2, [pc, #72]	; (80148ec <tanf+0x50>)
 80148a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80148a8:	4293      	cmp	r3, r2
 80148aa:	dc07      	bgt.n	80148bc <tanf+0x20>
 80148ac:	eddf 0a10 	vldr	s1, [pc, #64]	; 80148f0 <tanf+0x54>
 80148b0:	2001      	movs	r0, #1
 80148b2:	b003      	add	sp, #12
 80148b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80148b8:	f001 bef8 	b.w	80166ac <__kernel_tanf>
 80148bc:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80148c0:	db04      	blt.n	80148cc <tanf+0x30>
 80148c2:	ee30 0a40 	vsub.f32	s0, s0, s0
 80148c6:	b003      	add	sp, #12
 80148c8:	f85d fb04 	ldr.w	pc, [sp], #4
 80148cc:	4668      	mov	r0, sp
 80148ce:	f001 fa1f 	bl	8015d10 <__ieee754_rem_pio2f>
 80148d2:	0040      	lsls	r0, r0, #1
 80148d4:	f000 0002 	and.w	r0, r0, #2
 80148d8:	eddd 0a01 	vldr	s1, [sp, #4]
 80148dc:	ed9d 0a00 	vldr	s0, [sp]
 80148e0:	f1c0 0001 	rsb	r0, r0, #1
 80148e4:	f001 fee2 	bl	80166ac <__kernel_tanf>
 80148e8:	e7ed      	b.n	80148c6 <tanf+0x2a>
 80148ea:	bf00      	nop
 80148ec:	3f490fda 	.word	0x3f490fda
 80148f0:	00000000 	.word	0x00000000

080148f4 <tanhf>:
 80148f4:	b510      	push	{r4, lr}
 80148f6:	ee10 4a10 	vmov	r4, s0
 80148fa:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80148fe:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8014902:	ed2d 8b02 	vpush	{d8}
 8014906:	eeb0 7a40 	vmov.f32	s14, s0
 801490a:	db0c      	blt.n	8014926 <tanhf+0x32>
 801490c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8014910:	eec0 7a07 	vdiv.f32	s15, s0, s14
 8014914:	2c00      	cmp	r4, #0
 8014916:	bfac      	ite	ge
 8014918:	ee37 0a80 	vaddge.f32	s0, s15, s0
 801491c:	ee37 0ac0 	vsublt.f32	s0, s15, s0
 8014920:	ecbd 8b02 	vpop	{d8}
 8014924:	bd10      	pop	{r4, pc}
 8014926:	4a1b      	ldr	r2, [pc, #108]	; (8014994 <tanhf+0xa0>)
 8014928:	4293      	cmp	r3, r2
 801492a:	dc30      	bgt.n	801498e <tanhf+0x9a>
 801492c:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
 8014930:	da06      	bge.n	8014940 <tanhf+0x4c>
 8014932:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8014936:	ee70 7a27 	vadd.f32	s15, s0, s15
 801493a:	ee27 0a80 	vmul.f32	s0, s15, s0
 801493e:	e7ef      	b.n	8014920 <tanhf+0x2c>
 8014940:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8014944:	eeb0 8a00 	vmov.f32	s16, #0	; 0x40000000  2.0
 8014948:	db12      	blt.n	8014970 <tanhf+0x7c>
 801494a:	f7ff fdf5 	bl	8014538 <fabsf>
 801494e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8014952:	f001 ffcf 	bl	80168f4 <expm1f>
 8014956:	ee30 0a08 	vadd.f32	s0, s0, s16
 801495a:	eec8 7a00 	vdiv.f32	s15, s16, s0
 801495e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8014962:	ee30 0a67 	vsub.f32	s0, s0, s15
 8014966:	2c00      	cmp	r4, #0
 8014968:	bfb8      	it	lt
 801496a:	eeb1 0a40 	vneglt.f32	s0, s0
 801496e:	e7d7      	b.n	8014920 <tanhf+0x2c>
 8014970:	f7ff fde2 	bl	8014538 <fabsf>
 8014974:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
 8014978:	ee20 0a27 	vmul.f32	s0, s0, s15
 801497c:	f001 ffba 	bl	80168f4 <expm1f>
 8014980:	ee70 7a08 	vadd.f32	s15, s0, s16
 8014984:	eeb1 7a40 	vneg.f32	s14, s0
 8014988:	ee87 0a27 	vdiv.f32	s0, s14, s15
 801498c:	e7eb      	b.n	8014966 <tanhf+0x72>
 801498e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8014992:	e7e8      	b.n	8014966 <tanhf+0x72>
 8014994:	41afffff 	.word	0x41afffff

08014998 <acosf>:
 8014998:	b508      	push	{r3, lr}
 801499a:	ed2d 8b02 	vpush	{d8}
 801499e:	eeb0 8a40 	vmov.f32	s16, s0
 80149a2:	f000 f9cf 	bl	8014d44 <__ieee754_acosf>
 80149a6:	eeb4 8a48 	vcmp.f32	s16, s16
 80149aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80149ae:	eef0 8a40 	vmov.f32	s17, s0
 80149b2:	d615      	bvs.n	80149e0 <acosf+0x48>
 80149b4:	eeb0 0a48 	vmov.f32	s0, s16
 80149b8:	f7ff fdbe 	bl	8014538 <fabsf>
 80149bc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80149c0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80149c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80149c8:	dd0a      	ble.n	80149e0 <acosf+0x48>
 80149ca:	f7fc faf5 	bl	8010fb8 <__errno>
 80149ce:	ecbd 8b02 	vpop	{d8}
 80149d2:	2321      	movs	r3, #33	; 0x21
 80149d4:	6003      	str	r3, [r0, #0]
 80149d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80149da:	4804      	ldr	r0, [pc, #16]	; (80149ec <acosf+0x54>)
 80149dc:	f002 b8b4 	b.w	8016b48 <nanf>
 80149e0:	eeb0 0a68 	vmov.f32	s0, s17
 80149e4:	ecbd 8b02 	vpop	{d8}
 80149e8:	bd08      	pop	{r3, pc}
 80149ea:	bf00      	nop
 80149ec:	0807ccc7 	.word	0x0807ccc7

080149f0 <acoshf>:
 80149f0:	b508      	push	{r3, lr}
 80149f2:	ed2d 8b02 	vpush	{d8}
 80149f6:	eeb0 8a40 	vmov.f32	s16, s0
 80149fa:	f000 fa9b 	bl	8014f34 <__ieee754_acoshf>
 80149fe:	eeb4 8a48 	vcmp.f32	s16, s16
 8014a02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a06:	d60e      	bvs.n	8014a26 <acoshf+0x36>
 8014a08:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8014a0c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8014a10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a14:	d507      	bpl.n	8014a26 <acoshf+0x36>
 8014a16:	f7fc facf 	bl	8010fb8 <__errno>
 8014a1a:	eddf 7a04 	vldr	s15, [pc, #16]	; 8014a2c <acoshf+0x3c>
 8014a1e:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8014a22:	2321      	movs	r3, #33	; 0x21
 8014a24:	6003      	str	r3, [r0, #0]
 8014a26:	ecbd 8b02 	vpop	{d8}
 8014a2a:	bd08      	pop	{r3, pc}
 8014a2c:	00000000 	.word	0x00000000

08014a30 <asinf>:
 8014a30:	b508      	push	{r3, lr}
 8014a32:	ed2d 8b02 	vpush	{d8}
 8014a36:	eeb0 8a40 	vmov.f32	s16, s0
 8014a3a:	f000 facf 	bl	8014fdc <__ieee754_asinf>
 8014a3e:	eeb4 8a48 	vcmp.f32	s16, s16
 8014a42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a46:	eef0 8a40 	vmov.f32	s17, s0
 8014a4a:	d615      	bvs.n	8014a78 <asinf+0x48>
 8014a4c:	eeb0 0a48 	vmov.f32	s0, s16
 8014a50:	f7ff fd72 	bl	8014538 <fabsf>
 8014a54:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8014a58:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8014a5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a60:	dd0a      	ble.n	8014a78 <asinf+0x48>
 8014a62:	f7fc faa9 	bl	8010fb8 <__errno>
 8014a66:	ecbd 8b02 	vpop	{d8}
 8014a6a:	2321      	movs	r3, #33	; 0x21
 8014a6c:	6003      	str	r3, [r0, #0]
 8014a6e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8014a72:	4804      	ldr	r0, [pc, #16]	; (8014a84 <asinf+0x54>)
 8014a74:	f002 b868 	b.w	8016b48 <nanf>
 8014a78:	eeb0 0a68 	vmov.f32	s0, s17
 8014a7c:	ecbd 8b02 	vpop	{d8}
 8014a80:	bd08      	pop	{r3, pc}
 8014a82:	bf00      	nop
 8014a84:	0807ccc7 	.word	0x0807ccc7

08014a88 <atanhf>:
 8014a88:	b510      	push	{r4, lr}
 8014a8a:	ed2d 8b04 	vpush	{d8-d9}
 8014a8e:	eeb0 8a40 	vmov.f32	s16, s0
 8014a92:	f000 fb89 	bl	80151a8 <__ieee754_atanhf>
 8014a96:	eeb4 8a48 	vcmp.f32	s16, s16
 8014a9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a9e:	eef0 8a40 	vmov.f32	s17, s0
 8014aa2:	d614      	bvs.n	8014ace <atanhf+0x46>
 8014aa4:	eeb0 0a48 	vmov.f32	s0, s16
 8014aa8:	f7ff fd46 	bl	8014538 <fabsf>
 8014aac:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8014ab0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8014ab4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ab8:	db09      	blt.n	8014ace <atanhf+0x46>
 8014aba:	ed9f 9a0a 	vldr	s18, [pc, #40]	; 8014ae4 <atanhf+0x5c>
 8014abe:	f04f 0421 	mov.w	r4, #33	; 0x21
 8014ac2:	dd09      	ble.n	8014ad8 <atanhf+0x50>
 8014ac4:	f7fc fa78 	bl	8010fb8 <__errno>
 8014ac8:	eec9 8a09 	vdiv.f32	s17, s18, s18
 8014acc:	6004      	str	r4, [r0, #0]
 8014ace:	eeb0 0a68 	vmov.f32	s0, s17
 8014ad2:	ecbd 8b04 	vpop	{d8-d9}
 8014ad6:	bd10      	pop	{r4, pc}
 8014ad8:	f7fc fa6e 	bl	8010fb8 <__errno>
 8014adc:	eec8 8a09 	vdiv.f32	s17, s16, s18
 8014ae0:	6004      	str	r4, [r0, #0]
 8014ae2:	e7f4      	b.n	8014ace <atanhf+0x46>
 8014ae4:	00000000 	.word	0x00000000

08014ae8 <coshf>:
 8014ae8:	b508      	push	{r3, lr}
 8014aea:	ed2d 8b02 	vpush	{d8}
 8014aee:	eeb0 8a40 	vmov.f32	s16, s0
 8014af2:	f000 fb9f 	bl	8015234 <__ieee754_coshf>
 8014af6:	eeb4 8a48 	vcmp.f32	s16, s16
 8014afa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014afe:	eef0 8a40 	vmov.f32	s17, s0
 8014b02:	d610      	bvs.n	8014b26 <coshf+0x3e>
 8014b04:	eeb0 0a48 	vmov.f32	s0, s16
 8014b08:	f7ff fd16 	bl	8014538 <fabsf>
 8014b0c:	eddf 7a08 	vldr	s15, [pc, #32]	; 8014b30 <coshf+0x48>
 8014b10:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8014b14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b18:	dd05      	ble.n	8014b26 <coshf+0x3e>
 8014b1a:	f7fc fa4d 	bl	8010fb8 <__errno>
 8014b1e:	eddf 8a05 	vldr	s17, [pc, #20]	; 8014b34 <coshf+0x4c>
 8014b22:	2322      	movs	r3, #34	; 0x22
 8014b24:	6003      	str	r3, [r0, #0]
 8014b26:	eeb0 0a68 	vmov.f32	s0, s17
 8014b2a:	ecbd 8b02 	vpop	{d8}
 8014b2e:	bd08      	pop	{r3, pc}
 8014b30:	42b2d4fc 	.word	0x42b2d4fc
 8014b34:	7f800000 	.word	0x7f800000

08014b38 <expf>:
 8014b38:	b508      	push	{r3, lr}
 8014b3a:	ed2d 8b02 	vpush	{d8}
 8014b3e:	eef0 8a40 	vmov.f32	s17, s0
 8014b42:	f000 fbd7 	bl	80152f4 <__ieee754_expf>
 8014b46:	eeb0 8a40 	vmov.f32	s16, s0
 8014b4a:	eeb0 0a68 	vmov.f32	s0, s17
 8014b4e:	f001 ffed 	bl	8016b2c <finitef>
 8014b52:	b160      	cbz	r0, 8014b6e <expf+0x36>
 8014b54:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8014b94 <expf+0x5c>
 8014b58:	eef4 8ae7 	vcmpe.f32	s17, s15
 8014b5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b60:	dd0a      	ble.n	8014b78 <expf+0x40>
 8014b62:	f7fc fa29 	bl	8010fb8 <__errno>
 8014b66:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 8014b98 <expf+0x60>
 8014b6a:	2322      	movs	r3, #34	; 0x22
 8014b6c:	6003      	str	r3, [r0, #0]
 8014b6e:	eeb0 0a48 	vmov.f32	s0, s16
 8014b72:	ecbd 8b02 	vpop	{d8}
 8014b76:	bd08      	pop	{r3, pc}
 8014b78:	eddf 7a08 	vldr	s15, [pc, #32]	; 8014b9c <expf+0x64>
 8014b7c:	eef4 8ae7 	vcmpe.f32	s17, s15
 8014b80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b84:	d5f3      	bpl.n	8014b6e <expf+0x36>
 8014b86:	f7fc fa17 	bl	8010fb8 <__errno>
 8014b8a:	2322      	movs	r3, #34	; 0x22
 8014b8c:	ed9f 8a04 	vldr	s16, [pc, #16]	; 8014ba0 <expf+0x68>
 8014b90:	6003      	str	r3, [r0, #0]
 8014b92:	e7ec      	b.n	8014b6e <expf+0x36>
 8014b94:	42b17180 	.word	0x42b17180
 8014b98:	7f800000 	.word	0x7f800000
 8014b9c:	c2cff1b5 	.word	0xc2cff1b5
 8014ba0:	00000000 	.word	0x00000000

08014ba4 <fmodf>:
 8014ba4:	b508      	push	{r3, lr}
 8014ba6:	ed2d 8b02 	vpush	{d8}
 8014baa:	eef0 8a40 	vmov.f32	s17, s0
 8014bae:	eeb0 8a60 	vmov.f32	s16, s1
 8014bb2:	f000 fc6d 	bl	8015490 <__ieee754_fmodf>
 8014bb6:	eef4 8a48 	vcmp.f32	s17, s16
 8014bba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014bbe:	d60c      	bvs.n	8014bda <fmodf+0x36>
 8014bc0:	eddf 8a07 	vldr	s17, [pc, #28]	; 8014be0 <fmodf+0x3c>
 8014bc4:	eeb4 8a68 	vcmp.f32	s16, s17
 8014bc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014bcc:	d105      	bne.n	8014bda <fmodf+0x36>
 8014bce:	f7fc f9f3 	bl	8010fb8 <__errno>
 8014bd2:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8014bd6:	2321      	movs	r3, #33	; 0x21
 8014bd8:	6003      	str	r3, [r0, #0]
 8014bda:	ecbd 8b02 	vpop	{d8}
 8014bde:	bd08      	pop	{r3, pc}
 8014be0:	00000000 	.word	0x00000000

08014be4 <logf>:
 8014be4:	b508      	push	{r3, lr}
 8014be6:	ed2d 8b02 	vpush	{d8}
 8014bea:	eeb0 8a40 	vmov.f32	s16, s0
 8014bee:	f000 fcd1 	bl	8015594 <__ieee754_logf>
 8014bf2:	eeb4 8a48 	vcmp.f32	s16, s16
 8014bf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014bfa:	d60f      	bvs.n	8014c1c <logf+0x38>
 8014bfc:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8014c00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c04:	dc0a      	bgt.n	8014c1c <logf+0x38>
 8014c06:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8014c0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c0e:	d108      	bne.n	8014c22 <logf+0x3e>
 8014c10:	f7fc f9d2 	bl	8010fb8 <__errno>
 8014c14:	2322      	movs	r3, #34	; 0x22
 8014c16:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8014c38 <logf+0x54>
 8014c1a:	6003      	str	r3, [r0, #0]
 8014c1c:	ecbd 8b02 	vpop	{d8}
 8014c20:	bd08      	pop	{r3, pc}
 8014c22:	f7fc f9c9 	bl	8010fb8 <__errno>
 8014c26:	ecbd 8b02 	vpop	{d8}
 8014c2a:	2321      	movs	r3, #33	; 0x21
 8014c2c:	6003      	str	r3, [r0, #0]
 8014c2e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8014c32:	4802      	ldr	r0, [pc, #8]	; (8014c3c <logf+0x58>)
 8014c34:	f001 bf88 	b.w	8016b48 <nanf>
 8014c38:	ff800000 	.word	0xff800000
 8014c3c:	0807ccc7 	.word	0x0807ccc7

08014c40 <powf>:
 8014c40:	b508      	push	{r3, lr}
 8014c42:	ed2d 8b04 	vpush	{d8-d9}
 8014c46:	eeb0 8a60 	vmov.f32	s16, s1
 8014c4a:	eeb0 9a40 	vmov.f32	s18, s0
 8014c4e:	f000 fd91 	bl	8015774 <__ieee754_powf>
 8014c52:	eeb4 8a48 	vcmp.f32	s16, s16
 8014c56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c5a:	eef0 8a40 	vmov.f32	s17, s0
 8014c5e:	d63e      	bvs.n	8014cde <powf+0x9e>
 8014c60:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8014c64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c68:	d112      	bne.n	8014c90 <powf+0x50>
 8014c6a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8014c6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c72:	d039      	beq.n	8014ce8 <powf+0xa8>
 8014c74:	eeb0 0a48 	vmov.f32	s0, s16
 8014c78:	f001 ff58 	bl	8016b2c <finitef>
 8014c7c:	b378      	cbz	r0, 8014cde <powf+0x9e>
 8014c7e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8014c82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c86:	d52a      	bpl.n	8014cde <powf+0x9e>
 8014c88:	f7fc f996 	bl	8010fb8 <__errno>
 8014c8c:	2322      	movs	r3, #34	; 0x22
 8014c8e:	e014      	b.n	8014cba <powf+0x7a>
 8014c90:	f001 ff4c 	bl	8016b2c <finitef>
 8014c94:	b998      	cbnz	r0, 8014cbe <powf+0x7e>
 8014c96:	eeb0 0a49 	vmov.f32	s0, s18
 8014c9a:	f001 ff47 	bl	8016b2c <finitef>
 8014c9e:	b170      	cbz	r0, 8014cbe <powf+0x7e>
 8014ca0:	eeb0 0a48 	vmov.f32	s0, s16
 8014ca4:	f001 ff42 	bl	8016b2c <finitef>
 8014ca8:	b148      	cbz	r0, 8014cbe <powf+0x7e>
 8014caa:	eef4 8a68 	vcmp.f32	s17, s17
 8014cae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014cb2:	d7e9      	bvc.n	8014c88 <powf+0x48>
 8014cb4:	f7fc f980 	bl	8010fb8 <__errno>
 8014cb8:	2321      	movs	r3, #33	; 0x21
 8014cba:	6003      	str	r3, [r0, #0]
 8014cbc:	e00f      	b.n	8014cde <powf+0x9e>
 8014cbe:	eef5 8a40 	vcmp.f32	s17, #0.0
 8014cc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014cc6:	d10a      	bne.n	8014cde <powf+0x9e>
 8014cc8:	eeb0 0a49 	vmov.f32	s0, s18
 8014ccc:	f001 ff2e 	bl	8016b2c <finitef>
 8014cd0:	b128      	cbz	r0, 8014cde <powf+0x9e>
 8014cd2:	eeb0 0a48 	vmov.f32	s0, s16
 8014cd6:	f001 ff29 	bl	8016b2c <finitef>
 8014cda:	2800      	cmp	r0, #0
 8014cdc:	d1d4      	bne.n	8014c88 <powf+0x48>
 8014cde:	eeb0 0a68 	vmov.f32	s0, s17
 8014ce2:	ecbd 8b04 	vpop	{d8-d9}
 8014ce6:	bd08      	pop	{r3, pc}
 8014ce8:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8014cec:	e7f7      	b.n	8014cde <powf+0x9e>
	...

08014cf0 <sinhf>:
 8014cf0:	b508      	push	{r3, lr}
 8014cf2:	ed2d 8b02 	vpush	{d8}
 8014cf6:	eef0 8a40 	vmov.f32	s17, s0
 8014cfa:	f001 f945 	bl	8015f88 <__ieee754_sinhf>
 8014cfe:	eeb0 8a40 	vmov.f32	s16, s0
 8014d02:	f001 ff13 	bl	8016b2c <finitef>
 8014d06:	b998      	cbnz	r0, 8014d30 <sinhf+0x40>
 8014d08:	eeb0 0a68 	vmov.f32	s0, s17
 8014d0c:	f001 ff0e 	bl	8016b2c <finitef>
 8014d10:	b170      	cbz	r0, 8014d30 <sinhf+0x40>
 8014d12:	f7fc f951 	bl	8010fb8 <__errno>
 8014d16:	ed9f 8a09 	vldr	s16, [pc, #36]	; 8014d3c <sinhf+0x4c>
 8014d1a:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8014d40 <sinhf+0x50>
 8014d1e:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8014d22:	2322      	movs	r3, #34	; 0x22
 8014d24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d28:	6003      	str	r3, [r0, #0]
 8014d2a:	bfd8      	it	le
 8014d2c:	eeb0 8a40 	vmovle.f32	s16, s0
 8014d30:	eeb0 0a48 	vmov.f32	s0, s16
 8014d34:	ecbd 8b02 	vpop	{d8}
 8014d38:	bd08      	pop	{r3, pc}
 8014d3a:	bf00      	nop
 8014d3c:	7f800000 	.word	0x7f800000
 8014d40:	ff800000 	.word	0xff800000

08014d44 <__ieee754_acosf>:
 8014d44:	b508      	push	{r3, lr}
 8014d46:	ee10 3a10 	vmov	r3, s0
 8014d4a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8014d4e:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8014d52:	ed2d 8b0c 	vpush	{d8-d13}
 8014d56:	d10a      	bne.n	8014d6e <__ieee754_acosf+0x2a>
 8014d58:	ed9f 0a65 	vldr	s0, [pc, #404]	; 8014ef0 <__ieee754_acosf+0x1ac>
 8014d5c:	ed9f 8a65 	vldr	s16, [pc, #404]	; 8014ef4 <__ieee754_acosf+0x1b0>
 8014d60:	2b00      	cmp	r3, #0
 8014d62:	bfd8      	it	le
 8014d64:	eeb0 0a48 	vmovle.f32	s0, s16
 8014d68:	ecbd 8b0c 	vpop	{d8-d13}
 8014d6c:	bd08      	pop	{r3, pc}
 8014d6e:	dd04      	ble.n	8014d7a <__ieee754_acosf+0x36>
 8014d70:	ee30 8a40 	vsub.f32	s16, s0, s0
 8014d74:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8014d78:	e7f6      	b.n	8014d68 <__ieee754_acosf+0x24>
 8014d7a:	f1b2 5f7c 	cmp.w	r2, #1056964608	; 0x3f000000
 8014d7e:	da3c      	bge.n	8014dfa <__ieee754_acosf+0xb6>
 8014d80:	f1b2 5f0c 	cmp.w	r2, #587202560	; 0x23000000
 8014d84:	f340 80b1 	ble.w	8014eea <__ieee754_acosf+0x1a6>
 8014d88:	ee60 7a00 	vmul.f32	s15, s0, s0
 8014d8c:	eddf 6a5a 	vldr	s13, [pc, #360]	; 8014ef8 <__ieee754_acosf+0x1b4>
 8014d90:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8014efc <__ieee754_acosf+0x1b8>
 8014d94:	ed9f 6a5a 	vldr	s12, [pc, #360]	; 8014f00 <__ieee754_acosf+0x1bc>
 8014d98:	ed9f 8a5a 	vldr	s16, [pc, #360]	; 8014f04 <__ieee754_acosf+0x1c0>
 8014d9c:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8014da0:	eddf 6a59 	vldr	s13, [pc, #356]	; 8014f08 <__ieee754_acosf+0x1c4>
 8014da4:	eee7 6a27 	vfma.f32	s13, s14, s15
 8014da8:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8014f0c <__ieee754_acosf+0x1c8>
 8014dac:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8014db0:	eddf 6a57 	vldr	s13, [pc, #348]	; 8014f10 <__ieee754_acosf+0x1cc>
 8014db4:	eee7 6a27 	vfma.f32	s13, s14, s15
 8014db8:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8014f14 <__ieee754_acosf+0x1d0>
 8014dbc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8014dc0:	eddf 6a55 	vldr	s13, [pc, #340]	; 8014f18 <__ieee754_acosf+0x1d4>
 8014dc4:	eea7 6aa6 	vfma.f32	s12, s15, s13
 8014dc8:	eddf 6a54 	vldr	s13, [pc, #336]	; 8014f1c <__ieee754_acosf+0x1d8>
 8014dcc:	eee6 6a27 	vfma.f32	s13, s12, s15
 8014dd0:	ed9f 6a53 	vldr	s12, [pc, #332]	; 8014f20 <__ieee754_acosf+0x1dc>
 8014dd4:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8014dd8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8014ddc:	eee6 6a27 	vfma.f32	s13, s12, s15
 8014de0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8014de4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8014de8:	eea0 8a67 	vfms.f32	s16, s0, s15
 8014dec:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8014f24 <__ieee754_acosf+0x1e0>
 8014df0:	ee30 0a48 	vsub.f32	s0, s0, s16
 8014df4:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8014df8:	e7b6      	b.n	8014d68 <__ieee754_acosf+0x24>
 8014dfa:	2b00      	cmp	r3, #0
 8014dfc:	eddf da3e 	vldr	s27, [pc, #248]	; 8014ef8 <__ieee754_acosf+0x1b4>
 8014e00:	eddf ca3e 	vldr	s25, [pc, #248]	; 8014efc <__ieee754_acosf+0x1b8>
 8014e04:	ed9f ca40 	vldr	s24, [pc, #256]	; 8014f08 <__ieee754_acosf+0x1c4>
 8014e08:	eddf ba40 	vldr	s23, [pc, #256]	; 8014f0c <__ieee754_acosf+0x1c8>
 8014e0c:	ed9f ba40 	vldr	s22, [pc, #256]	; 8014f10 <__ieee754_acosf+0x1cc>
 8014e10:	eddf 8a40 	vldr	s17, [pc, #256]	; 8014f14 <__ieee754_acosf+0x1d0>
 8014e14:	ed9f da40 	vldr	s26, [pc, #256]	; 8014f18 <__ieee754_acosf+0x1d4>
 8014e18:	eddf aa39 	vldr	s21, [pc, #228]	; 8014f00 <__ieee754_acosf+0x1bc>
 8014e1c:	ed9f aa3f 	vldr	s20, [pc, #252]	; 8014f1c <__ieee754_acosf+0x1d8>
 8014e20:	eddf 9a3f 	vldr	s19, [pc, #252]	; 8014f20 <__ieee754_acosf+0x1dc>
 8014e24:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8014e28:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8014e2c:	da28      	bge.n	8014e80 <__ieee754_acosf+0x13c>
 8014e2e:	ee30 0a09 	vadd.f32	s0, s0, s18
 8014e32:	ee20 0a27 	vmul.f32	s0, s0, s15
 8014e36:	eee0 ca2d 	vfma.f32	s25, s0, s27
 8014e3a:	eee0 aa0d 	vfma.f32	s21, s0, s26
 8014e3e:	eeac ca80 	vfma.f32	s24, s25, s0
 8014e42:	eeaa aa80 	vfma.f32	s20, s21, s0
 8014e46:	eeec ba00 	vfma.f32	s23, s24, s0
 8014e4a:	eeea 9a00 	vfma.f32	s19, s20, s0
 8014e4e:	eeab ba80 	vfma.f32	s22, s23, s0
 8014e52:	eea9 9a80 	vfma.f32	s18, s19, s0
 8014e56:	eeeb 8a00 	vfma.f32	s17, s22, s0
 8014e5a:	ee68 8a80 	vmul.f32	s17, s17, s0
 8014e5e:	f001 f903 	bl	8016068 <__ieee754_sqrtf>
 8014e62:	ee88 7a89 	vdiv.f32	s14, s17, s18
 8014e66:	eddf 7a30 	vldr	s15, [pc, #192]	; 8014f28 <__ieee754_acosf+0x1e4>
 8014e6a:	eee0 7a07 	vfma.f32	s15, s0, s14
 8014e6e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8014e72:	ee77 7a80 	vadd.f32	s15, s15, s0
 8014e76:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 8014f2c <__ieee754_acosf+0x1e8>
 8014e7a:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8014e7e:	e773      	b.n	8014d68 <__ieee754_acosf+0x24>
 8014e80:	ee39 8a40 	vsub.f32	s16, s18, s0
 8014e84:	ee28 8a27 	vmul.f32	s16, s16, s15
 8014e88:	eeb0 0a48 	vmov.f32	s0, s16
 8014e8c:	f001 f8ec 	bl	8016068 <__ieee754_sqrtf>
 8014e90:	eee8 ca2d 	vfma.f32	s25, s16, s27
 8014e94:	eee8 aa0d 	vfma.f32	s21, s16, s26
 8014e98:	eeac ca88 	vfma.f32	s24, s25, s16
 8014e9c:	eeaa aa88 	vfma.f32	s20, s21, s16
 8014ea0:	eeec ba08 	vfma.f32	s23, s24, s16
 8014ea4:	ee10 3a10 	vmov	r3, s0
 8014ea8:	eeab ba88 	vfma.f32	s22, s23, s16
 8014eac:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8014eb0:	f023 030f 	bic.w	r3, r3, #15
 8014eb4:	eeea 9a08 	vfma.f32	s19, s20, s16
 8014eb8:	ee07 3a90 	vmov	s15, r3
 8014ebc:	eeeb 8a08 	vfma.f32	s17, s22, s16
 8014ec0:	eeb0 6a48 	vmov.f32	s12, s16
 8014ec4:	eea7 6ae7 	vfms.f32	s12, s15, s15
 8014ec8:	eea9 9a88 	vfma.f32	s18, s19, s16
 8014ecc:	ee70 6a27 	vadd.f32	s13, s0, s15
 8014ed0:	ee68 8a88 	vmul.f32	s17, s17, s16
 8014ed4:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8014ed8:	eec8 6a89 	vdiv.f32	s13, s17, s18
 8014edc:	eea0 7a26 	vfma.f32	s14, s0, s13
 8014ee0:	ee37 0a87 	vadd.f32	s0, s15, s14
 8014ee4:	ee30 0a00 	vadd.f32	s0, s0, s0
 8014ee8:	e73e      	b.n	8014d68 <__ieee754_acosf+0x24>
 8014eea:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8014f30 <__ieee754_acosf+0x1ec>
 8014eee:	e73b      	b.n	8014d68 <__ieee754_acosf+0x24>
 8014ef0:	00000000 	.word	0x00000000
 8014ef4:	40490fdb 	.word	0x40490fdb
 8014ef8:	3811ef08 	.word	0x3811ef08
 8014efc:	3a4f7f04 	.word	0x3a4f7f04
 8014f00:	bf303361 	.word	0xbf303361
 8014f04:	33a22168 	.word	0x33a22168
 8014f08:	bd241146 	.word	0xbd241146
 8014f0c:	3e4e0aa8 	.word	0x3e4e0aa8
 8014f10:	bea6b090 	.word	0xbea6b090
 8014f14:	3e2aaaab 	.word	0x3e2aaaab
 8014f18:	3d9dc62e 	.word	0x3d9dc62e
 8014f1c:	4001572d 	.word	0x4001572d
 8014f20:	c019d139 	.word	0xc019d139
 8014f24:	3fc90fda 	.word	0x3fc90fda
 8014f28:	b3a22168 	.word	0xb3a22168
 8014f2c:	40490fda 	.word	0x40490fda
 8014f30:	3fc90fdb 	.word	0x3fc90fdb

08014f34 <__ieee754_acoshf>:
 8014f34:	b508      	push	{r3, lr}
 8014f36:	ee10 3a10 	vmov	r3, s0
 8014f3a:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8014f3e:	ed2d 8b04 	vpush	{d8-d9}
 8014f42:	eeb0 8a40 	vmov.f32	s16, s0
 8014f46:	da06      	bge.n	8014f56 <__ieee754_acoshf+0x22>
 8014f48:	ee30 8a40 	vsub.f32	s16, s0, s0
 8014f4c:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8014f50:	ecbd 8b04 	vpop	{d8-d9}
 8014f54:	bd08      	pop	{r3, pc}
 8014f56:	f1b3 4f9b 	cmp.w	r3, #1300234240	; 0x4d800000
 8014f5a:	db0c      	blt.n	8014f76 <__ieee754_acoshf+0x42>
 8014f5c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8014f60:	db02      	blt.n	8014f68 <__ieee754_acoshf+0x34>
 8014f62:	ee30 0a00 	vadd.f32	s0, s0, s0
 8014f66:	e7f3      	b.n	8014f50 <__ieee754_acoshf+0x1c>
 8014f68:	f000 fb14 	bl	8015594 <__ieee754_logf>
 8014f6c:	ed9f 8a19 	vldr	s16, [pc, #100]	; 8014fd4 <__ieee754_acoshf+0xa0>
 8014f70:	ee30 0a08 	vadd.f32	s0, s0, s16
 8014f74:	e7ec      	b.n	8014f50 <__ieee754_acoshf+0x1c>
 8014f76:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8014f7a:	d028      	beq.n	8014fce <__ieee754_acoshf+0x9a>
 8014f7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014f80:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8014f84:	eef0 8a00 	vmov.f32	s17, #0	; 0x40000000  2.0
 8014f88:	dd11      	ble.n	8014fae <__ieee754_acoshf+0x7a>
 8014f8a:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8014f8e:	eea8 0a08 	vfma.f32	s0, s16, s16
 8014f92:	f001 f869 	bl	8016068 <__ieee754_sqrtf>
 8014f96:	ee70 7a08 	vadd.f32	s15, s0, s16
 8014f9a:	ee89 0a27 	vdiv.f32	s0, s18, s15
 8014f9e:	ee98 0a28 	vfnms.f32	s0, s16, s17
 8014fa2:	ecbd 8b04 	vpop	{d8-d9}
 8014fa6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8014faa:	f000 baf3 	b.w	8015594 <__ieee754_logf>
 8014fae:	ee30 8a49 	vsub.f32	s16, s0, s18
 8014fb2:	ee28 0a08 	vmul.f32	s0, s16, s16
 8014fb6:	eea8 0a28 	vfma.f32	s0, s16, s17
 8014fba:	f001 f855 	bl	8016068 <__ieee754_sqrtf>
 8014fbe:	ee30 0a08 	vadd.f32	s0, s0, s16
 8014fc2:	ecbd 8b04 	vpop	{d8-d9}
 8014fc6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8014fca:	f7ff baff 	b.w	80145cc <log1pf>
 8014fce:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8014fd8 <__ieee754_acoshf+0xa4>
 8014fd2:	e7bd      	b.n	8014f50 <__ieee754_acoshf+0x1c>
 8014fd4:	3f317218 	.word	0x3f317218
 8014fd8:	00000000 	.word	0x00000000

08014fdc <__ieee754_asinf>:
 8014fdc:	b538      	push	{r3, r4, r5, lr}
 8014fde:	ee10 5a10 	vmov	r5, s0
 8014fe2:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8014fe6:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8014fea:	ed2d 8b04 	vpush	{d8-d9}
 8014fee:	d10c      	bne.n	801500a <__ieee754_asinf+0x2e>
 8014ff0:	eddf 7a5d 	vldr	s15, [pc, #372]	; 8015168 <__ieee754_asinf+0x18c>
 8014ff4:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 801516c <__ieee754_asinf+0x190>
 8014ff8:	ee60 7a27 	vmul.f32	s15, s0, s15
 8014ffc:	eee0 7a07 	vfma.f32	s15, s0, s14
 8015000:	eeb0 0a67 	vmov.f32	s0, s15
 8015004:	ecbd 8b04 	vpop	{d8-d9}
 8015008:	bd38      	pop	{r3, r4, r5, pc}
 801500a:	dd04      	ble.n	8015016 <__ieee754_asinf+0x3a>
 801500c:	ee70 7a40 	vsub.f32	s15, s0, s0
 8015010:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8015014:	e7f6      	b.n	8015004 <__ieee754_asinf+0x28>
 8015016:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 801501a:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 801501e:	da0b      	bge.n	8015038 <__ieee754_asinf+0x5c>
 8015020:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 8015024:	da52      	bge.n	80150cc <__ieee754_asinf+0xf0>
 8015026:	eddf 7a52 	vldr	s15, [pc, #328]	; 8015170 <__ieee754_asinf+0x194>
 801502a:	ee70 7a27 	vadd.f32	s15, s0, s15
 801502e:	eef4 7ae8 	vcmpe.f32	s15, s17
 8015032:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015036:	dce5      	bgt.n	8015004 <__ieee754_asinf+0x28>
 8015038:	f7ff fa7e 	bl	8014538 <fabsf>
 801503c:	ee38 0ac0 	vsub.f32	s0, s17, s0
 8015040:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 8015044:	ee20 8a08 	vmul.f32	s16, s0, s16
 8015048:	eddf 7a4a 	vldr	s15, [pc, #296]	; 8015174 <__ieee754_asinf+0x198>
 801504c:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8015178 <__ieee754_asinf+0x19c>
 8015050:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 801517c <__ieee754_asinf+0x1a0>
 8015054:	eea8 7a27 	vfma.f32	s14, s16, s15
 8015058:	eddf 7a49 	vldr	s15, [pc, #292]	; 8015180 <__ieee754_asinf+0x1a4>
 801505c:	eee7 7a08 	vfma.f32	s15, s14, s16
 8015060:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8015184 <__ieee754_asinf+0x1a8>
 8015064:	eea7 7a88 	vfma.f32	s14, s15, s16
 8015068:	eddf 7a47 	vldr	s15, [pc, #284]	; 8015188 <__ieee754_asinf+0x1ac>
 801506c:	eee7 7a08 	vfma.f32	s15, s14, s16
 8015070:	ed9f 7a46 	vldr	s14, [pc, #280]	; 801518c <__ieee754_asinf+0x1b0>
 8015074:	eea7 9a88 	vfma.f32	s18, s15, s16
 8015078:	eddf 7a45 	vldr	s15, [pc, #276]	; 8015190 <__ieee754_asinf+0x1b4>
 801507c:	eee8 7a07 	vfma.f32	s15, s16, s14
 8015080:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8015194 <__ieee754_asinf+0x1b8>
 8015084:	eea7 7a88 	vfma.f32	s14, s15, s16
 8015088:	eddf 7a43 	vldr	s15, [pc, #268]	; 8015198 <__ieee754_asinf+0x1bc>
 801508c:	eee7 7a08 	vfma.f32	s15, s14, s16
 8015090:	eeb0 0a48 	vmov.f32	s0, s16
 8015094:	eee7 8a88 	vfma.f32	s17, s15, s16
 8015098:	f000 ffe6 	bl	8016068 <__ieee754_sqrtf>
 801509c:	4b3f      	ldr	r3, [pc, #252]	; (801519c <__ieee754_asinf+0x1c0>)
 801509e:	ee29 9a08 	vmul.f32	s18, s18, s16
 80150a2:	429c      	cmp	r4, r3
 80150a4:	ee89 6a28 	vdiv.f32	s12, s18, s17
 80150a8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80150ac:	dd3d      	ble.n	801512a <__ieee754_asinf+0x14e>
 80150ae:	eea0 0a06 	vfma.f32	s0, s0, s12
 80150b2:	eddf 7a3b 	vldr	s15, [pc, #236]	; 80151a0 <__ieee754_asinf+0x1c4>
 80150b6:	eee0 7a26 	vfma.f32	s15, s0, s13
 80150ba:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 801516c <__ieee754_asinf+0x190>
 80150be:	ee30 0a67 	vsub.f32	s0, s0, s15
 80150c2:	2d00      	cmp	r5, #0
 80150c4:	bfd8      	it	le
 80150c6:	eeb1 0a40 	vnegle.f32	s0, s0
 80150ca:	e79b      	b.n	8015004 <__ieee754_asinf+0x28>
 80150cc:	ee60 7a00 	vmul.f32	s15, s0, s0
 80150d0:	eddf 6a28 	vldr	s13, [pc, #160]	; 8015174 <__ieee754_asinf+0x198>
 80150d4:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8015178 <__ieee754_asinf+0x19c>
 80150d8:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 801518c <__ieee754_asinf+0x1b0>
 80150dc:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80150e0:	eddf 6a27 	vldr	s13, [pc, #156]	; 8015180 <__ieee754_asinf+0x1a4>
 80150e4:	eee7 6a27 	vfma.f32	s13, s14, s15
 80150e8:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8015184 <__ieee754_asinf+0x1a8>
 80150ec:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80150f0:	eddf 6a25 	vldr	s13, [pc, #148]	; 8015188 <__ieee754_asinf+0x1ac>
 80150f4:	eee7 6a27 	vfma.f32	s13, s14, s15
 80150f8:	ed9f 7a20 	vldr	s14, [pc, #128]	; 801517c <__ieee754_asinf+0x1a0>
 80150fc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8015100:	eddf 6a23 	vldr	s13, [pc, #140]	; 8015190 <__ieee754_asinf+0x1b4>
 8015104:	eee7 6a86 	vfma.f32	s13, s15, s12
 8015108:	ed9f 6a22 	vldr	s12, [pc, #136]	; 8015194 <__ieee754_asinf+0x1b8>
 801510c:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8015110:	eddf 6a21 	vldr	s13, [pc, #132]	; 8015198 <__ieee754_asinf+0x1bc>
 8015114:	eee6 6a27 	vfma.f32	s13, s12, s15
 8015118:	ee27 7a27 	vmul.f32	s14, s14, s15
 801511c:	eee6 8aa7 	vfma.f32	s17, s13, s15
 8015120:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8015124:	eea0 0a27 	vfma.f32	s0, s0, s15
 8015128:	e76c      	b.n	8015004 <__ieee754_asinf+0x28>
 801512a:	ee10 3a10 	vmov	r3, s0
 801512e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8015132:	f023 030f 	bic.w	r3, r3, #15
 8015136:	ee07 3a10 	vmov	s14, r3
 801513a:	eea7 8a47 	vfms.f32	s16, s14, s14
 801513e:	ee70 7a07 	vadd.f32	s15, s0, s14
 8015142:	ee30 0a00 	vadd.f32	s0, s0, s0
 8015146:	eec8 5a27 	vdiv.f32	s11, s16, s15
 801514a:	eddf 7a07 	vldr	s15, [pc, #28]	; 8015168 <__ieee754_asinf+0x18c>
 801514e:	eee5 7ae6 	vfms.f32	s15, s11, s13
 8015152:	eed0 7a06 	vfnms.f32	s15, s0, s12
 8015156:	ed9f 0a13 	vldr	s0, [pc, #76]	; 80151a4 <__ieee754_asinf+0x1c8>
 801515a:	eeb0 6a40 	vmov.f32	s12, s0
 801515e:	eea7 6a66 	vfms.f32	s12, s14, s13
 8015162:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8015166:	e7aa      	b.n	80150be <__ieee754_asinf+0xe2>
 8015168:	b33bbd2e 	.word	0xb33bbd2e
 801516c:	3fc90fdb 	.word	0x3fc90fdb
 8015170:	7149f2ca 	.word	0x7149f2ca
 8015174:	3811ef08 	.word	0x3811ef08
 8015178:	3a4f7f04 	.word	0x3a4f7f04
 801517c:	3e2aaaab 	.word	0x3e2aaaab
 8015180:	bd241146 	.word	0xbd241146
 8015184:	3e4e0aa8 	.word	0x3e4e0aa8
 8015188:	bea6b090 	.word	0xbea6b090
 801518c:	3d9dc62e 	.word	0x3d9dc62e
 8015190:	bf303361 	.word	0xbf303361
 8015194:	4001572d 	.word	0x4001572d
 8015198:	c019d139 	.word	0xc019d139
 801519c:	3f799999 	.word	0x3f799999
 80151a0:	333bbd2e 	.word	0x333bbd2e
 80151a4:	3f490fdb 	.word	0x3f490fdb

080151a8 <__ieee754_atanhf>:
 80151a8:	b510      	push	{r4, lr}
 80151aa:	ee10 4a10 	vmov	r4, s0
 80151ae:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80151b2:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 80151b6:	ed2d 8b02 	vpush	{d8}
 80151ba:	dd06      	ble.n	80151ca <__ieee754_atanhf+0x22>
 80151bc:	ee70 7a40 	vsub.f32	s15, s0, s0
 80151c0:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80151c4:	ecbd 8b02 	vpop	{d8}
 80151c8:	bd10      	pop	{r4, pc}
 80151ca:	d104      	bne.n	80151d6 <__ieee754_atanhf+0x2e>
 80151cc:	eddf 7a17 	vldr	s15, [pc, #92]	; 801522c <__ieee754_atanhf+0x84>
 80151d0:	ee80 0a27 	vdiv.f32	s0, s0, s15
 80151d4:	e7f6      	b.n	80151c4 <__ieee754_atanhf+0x1c>
 80151d6:	f1b3 5f46 	cmp.w	r3, #830472192	; 0x31800000
 80151da:	da08      	bge.n	80151ee <__ieee754_atanhf+0x46>
 80151dc:	eddf 7a14 	vldr	s15, [pc, #80]	; 8015230 <__ieee754_atanhf+0x88>
 80151e0:	ee70 7a27 	vadd.f32	s15, s0, s15
 80151e4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80151e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80151ec:	dcea      	bgt.n	80151c4 <__ieee754_atanhf+0x1c>
 80151ee:	ee07 3a90 	vmov	s15, r3
 80151f2:	ee37 0aa7 	vadd.f32	s0, s15, s15
 80151f6:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 80151fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80151fe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8015202:	bfb6      	itet	lt
 8015204:	ee67 7a80 	vmullt.f32	s15, s15, s0
 8015208:	ee80 0a07 	vdivge.f32	s0, s0, s14
 801520c:	eec7 6a87 	vdivlt.f32	s13, s15, s14
 8015210:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 8015214:	bfb8      	it	lt
 8015216:	ee36 0a80 	vaddlt.f32	s0, s13, s0
 801521a:	f7ff f9d7 	bl	80145cc <log1pf>
 801521e:	ee20 0a08 	vmul.f32	s0, s0, s16
 8015222:	2c00      	cmp	r4, #0
 8015224:	bfb8      	it	lt
 8015226:	eeb1 0a40 	vneglt.f32	s0, s0
 801522a:	e7cb      	b.n	80151c4 <__ieee754_atanhf+0x1c>
 801522c:	00000000 	.word	0x00000000
 8015230:	7149f2ca 	.word	0x7149f2ca

08015234 <__ieee754_coshf>:
 8015234:	b510      	push	{r4, lr}
 8015236:	ee10 4a10 	vmov	r4, s0
 801523a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 801523e:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8015242:	ed2d 8b02 	vpush	{d8}
 8015246:	db06      	blt.n	8015256 <__ieee754_coshf+0x22>
 8015248:	ee60 7a00 	vmul.f32	s15, s0, s0
 801524c:	ecbd 8b02 	vpop	{d8}
 8015250:	eeb0 0a67 	vmov.f32	s0, s15
 8015254:	bd10      	pop	{r4, pc}
 8015256:	4b23      	ldr	r3, [pc, #140]	; (80152e4 <__ieee754_coshf+0xb0>)
 8015258:	429c      	cmp	r4, r3
 801525a:	dc13      	bgt.n	8015284 <__ieee754_coshf+0x50>
 801525c:	f7ff f96c 	bl	8014538 <fabsf>
 8015260:	f001 fb48 	bl	80168f4 <expm1f>
 8015264:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8015268:	f1b4 5f10 	cmp.w	r4, #603979776	; 0x24000000
 801526c:	ee70 7a26 	vadd.f32	s15, s0, s13
 8015270:	dbec      	blt.n	801524c <__ieee754_coshf+0x18>
 8015272:	ee20 7a00 	vmul.f32	s14, s0, s0
 8015276:	ee37 0aa7 	vadd.f32	s0, s15, s15
 801527a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801527e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015282:	e7e3      	b.n	801524c <__ieee754_coshf+0x18>
 8015284:	4b18      	ldr	r3, [pc, #96]	; (80152e8 <__ieee754_coshf+0xb4>)
 8015286:	429c      	cmp	r4, r3
 8015288:	dc0a      	bgt.n	80152a0 <__ieee754_coshf+0x6c>
 801528a:	f7ff f955 	bl	8014538 <fabsf>
 801528e:	f000 f831 	bl	80152f4 <__ieee754_expf>
 8015292:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8015296:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801529a:	eee0 7a07 	vfma.f32	s15, s0, s14
 801529e:	e7d5      	b.n	801524c <__ieee754_coshf+0x18>
 80152a0:	4b12      	ldr	r3, [pc, #72]	; (80152ec <__ieee754_coshf+0xb8>)
 80152a2:	429c      	cmp	r4, r3
 80152a4:	dc08      	bgt.n	80152b8 <__ieee754_coshf+0x84>
 80152a6:	f7ff f947 	bl	8014538 <fabsf>
 80152aa:	f000 f823 	bl	80152f4 <__ieee754_expf>
 80152ae:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80152b2:	ee67 7a80 	vmul.f32	s15, s15, s0
 80152b6:	e7c9      	b.n	801524c <__ieee754_coshf+0x18>
 80152b8:	4b0d      	ldr	r3, [pc, #52]	; (80152f0 <__ieee754_coshf+0xbc>)
 80152ba:	429c      	cmp	r4, r3
 80152bc:	dc0a      	bgt.n	80152d4 <__ieee754_coshf+0xa0>
 80152be:	f7ff f93b 	bl	8014538 <fabsf>
 80152c2:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 80152c6:	ee20 0a08 	vmul.f32	s0, s0, s16
 80152ca:	f000 f813 	bl	80152f4 <__ieee754_expf>
 80152ce:	ee60 7a08 	vmul.f32	s15, s0, s16
 80152d2:	e7ee      	b.n	80152b2 <__ieee754_coshf+0x7e>
 80152d4:	ecbd 8b02 	vpop	{d8}
 80152d8:	2000      	movs	r0, #0
 80152da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80152de:	f001 bae1 	b.w	80168a4 <__math_oflowf>
 80152e2:	bf00      	nop
 80152e4:	3eb17217 	.word	0x3eb17217
 80152e8:	41afffff 	.word	0x41afffff
 80152ec:	42b17217 	.word	0x42b17217
 80152f0:	42b2d4fc 	.word	0x42b2d4fc

080152f4 <__ieee754_expf>:
 80152f4:	ee10 2a10 	vmov	r2, s0
 80152f8:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 80152fc:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8015300:	d902      	bls.n	8015308 <__ieee754_expf+0x14>
 8015302:	ee30 0a00 	vadd.f32	s0, s0, s0
 8015306:	4770      	bx	lr
 8015308:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 801530c:	d106      	bne.n	801531c <__ieee754_expf+0x28>
 801530e:	eddf 7a4e 	vldr	s15, [pc, #312]	; 8015448 <__ieee754_expf+0x154>
 8015312:	2b00      	cmp	r3, #0
 8015314:	bf18      	it	ne
 8015316:	eeb0 0a67 	vmovne.f32	s0, s15
 801531a:	4770      	bx	lr
 801531c:	484b      	ldr	r0, [pc, #300]	; (801544c <__ieee754_expf+0x158>)
 801531e:	4282      	cmp	r2, r0
 8015320:	dd02      	ble.n	8015328 <__ieee754_expf+0x34>
 8015322:	2000      	movs	r0, #0
 8015324:	f001 babe 	b.w	80168a4 <__math_oflowf>
 8015328:	2a00      	cmp	r2, #0
 801532a:	da05      	bge.n	8015338 <__ieee754_expf+0x44>
 801532c:	4a48      	ldr	r2, [pc, #288]	; (8015450 <__ieee754_expf+0x15c>)
 801532e:	4291      	cmp	r1, r2
 8015330:	d902      	bls.n	8015338 <__ieee754_expf+0x44>
 8015332:	2000      	movs	r0, #0
 8015334:	f001 bab0 	b.w	8016898 <__math_uflowf>
 8015338:	4a46      	ldr	r2, [pc, #280]	; (8015454 <__ieee754_expf+0x160>)
 801533a:	4291      	cmp	r1, r2
 801533c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8015340:	d952      	bls.n	80153e8 <__ieee754_expf+0xf4>
 8015342:	4a45      	ldr	r2, [pc, #276]	; (8015458 <__ieee754_expf+0x164>)
 8015344:	4291      	cmp	r1, r2
 8015346:	ea4f 0283 	mov.w	r2, r3, lsl #2
 801534a:	d834      	bhi.n	80153b6 <__ieee754_expf+0xc2>
 801534c:	4943      	ldr	r1, [pc, #268]	; (801545c <__ieee754_expf+0x168>)
 801534e:	4411      	add	r1, r2
 8015350:	ed91 7a00 	vldr	s14, [r1]
 8015354:	4942      	ldr	r1, [pc, #264]	; (8015460 <__ieee754_expf+0x16c>)
 8015356:	440a      	add	r2, r1
 8015358:	edd2 7a00 	vldr	s15, [r2]
 801535c:	ee30 7a47 	vsub.f32	s14, s0, s14
 8015360:	f1c3 0201 	rsb	r2, r3, #1
 8015364:	1ad2      	subs	r2, r2, r3
 8015366:	ee37 0a67 	vsub.f32	s0, s14, s15
 801536a:	ee20 6a00 	vmul.f32	s12, s0, s0
 801536e:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 8015464 <__ieee754_expf+0x170>
 8015372:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8015468 <__ieee754_expf+0x174>
 8015376:	eee6 6a05 	vfma.f32	s13, s12, s10
 801537a:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 801546c <__ieee754_expf+0x178>
 801537e:	eea6 5a86 	vfma.f32	s10, s13, s12
 8015382:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8015470 <__ieee754_expf+0x17c>
 8015386:	eee5 6a06 	vfma.f32	s13, s10, s12
 801538a:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 8015474 <__ieee754_expf+0x180>
 801538e:	eea6 5a86 	vfma.f32	s10, s13, s12
 8015392:	eef0 6a40 	vmov.f32	s13, s0
 8015396:	eee5 6a46 	vfms.f32	s13, s10, s12
 801539a:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 801539e:	ee20 5a26 	vmul.f32	s10, s0, s13
 80153a2:	bb92      	cbnz	r2, 801540a <__ieee754_expf+0x116>
 80153a4:	ee76 6ac6 	vsub.f32	s13, s13, s12
 80153a8:	eec5 7a26 	vdiv.f32	s15, s10, s13
 80153ac:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80153b0:	ee35 0ac0 	vsub.f32	s0, s11, s0
 80153b4:	4770      	bx	lr
 80153b6:	4b30      	ldr	r3, [pc, #192]	; (8015478 <__ieee754_expf+0x184>)
 80153b8:	ed9f 7a30 	vldr	s14, [pc, #192]	; 801547c <__ieee754_expf+0x188>
 80153bc:	eddf 6a30 	vldr	s13, [pc, #192]	; 8015480 <__ieee754_expf+0x18c>
 80153c0:	4413      	add	r3, r2
 80153c2:	edd3 7a00 	vldr	s15, [r3]
 80153c6:	eee0 7a07 	vfma.f32	s15, s0, s14
 80153ca:	eeb0 7a40 	vmov.f32	s14, s0
 80153ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80153d2:	ee17 2a90 	vmov	r2, s15
 80153d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80153da:	eea7 7ae6 	vfms.f32	s14, s15, s13
 80153de:	eddf 6a29 	vldr	s13, [pc, #164]	; 8015484 <__ieee754_expf+0x190>
 80153e2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80153e6:	e7be      	b.n	8015366 <__ieee754_expf+0x72>
 80153e8:	f1b1 5f50 	cmp.w	r1, #872415232	; 0x34000000
 80153ec:	d20b      	bcs.n	8015406 <__ieee754_expf+0x112>
 80153ee:	eddf 6a26 	vldr	s13, [pc, #152]	; 8015488 <__ieee754_expf+0x194>
 80153f2:	ee70 6a26 	vadd.f32	s13, s0, s13
 80153f6:	eef4 6ae5 	vcmpe.f32	s13, s11
 80153fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80153fe:	dd02      	ble.n	8015406 <__ieee754_expf+0x112>
 8015400:	ee30 0a25 	vadd.f32	s0, s0, s11
 8015404:	4770      	bx	lr
 8015406:	2200      	movs	r2, #0
 8015408:	e7af      	b.n	801536a <__ieee754_expf+0x76>
 801540a:	ee76 6a66 	vsub.f32	s13, s12, s13
 801540e:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 8015412:	ee85 0a26 	vdiv.f32	s0, s10, s13
 8015416:	bfb8      	it	lt
 8015418:	3264      	addlt	r2, #100	; 0x64
 801541a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801541e:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8015422:	ee75 7ac0 	vsub.f32	s15, s11, s0
 8015426:	ee17 3a90 	vmov	r3, s15
 801542a:	bfab      	itete	ge
 801542c:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 8015430:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8015434:	ee00 3a10 	vmovge	s0, r3
 8015438:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 801548c <__ieee754_expf+0x198>
 801543c:	bfbc      	itt	lt
 801543e:	ee00 3a10 	vmovlt	s0, r3
 8015442:	ee20 0a27 	vmullt.f32	s0, s0, s15
 8015446:	4770      	bx	lr
 8015448:	00000000 	.word	0x00000000
 801544c:	42b17217 	.word	0x42b17217
 8015450:	42cff1b5 	.word	0x42cff1b5
 8015454:	3eb17218 	.word	0x3eb17218
 8015458:	3f851591 	.word	0x3f851591
 801545c:	0807d05c 	.word	0x0807d05c
 8015460:	0807d064 	.word	0x0807d064
 8015464:	3331bb4c 	.word	0x3331bb4c
 8015468:	b5ddea0e 	.word	0xb5ddea0e
 801546c:	388ab355 	.word	0x388ab355
 8015470:	bb360b61 	.word	0xbb360b61
 8015474:	3e2aaaab 	.word	0x3e2aaaab
 8015478:	0807d054 	.word	0x0807d054
 801547c:	3fb8aa3b 	.word	0x3fb8aa3b
 8015480:	3f317180 	.word	0x3f317180
 8015484:	3717f7d1 	.word	0x3717f7d1
 8015488:	7149f2ca 	.word	0x7149f2ca
 801548c:	0d800000 	.word	0x0d800000

08015490 <__ieee754_fmodf>:
 8015490:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015492:	ee10 5a90 	vmov	r5, s1
 8015496:	f035 4400 	bics.w	r4, r5, #2147483648	; 0x80000000
 801549a:	d009      	beq.n	80154b0 <__ieee754_fmodf+0x20>
 801549c:	ee10 2a10 	vmov	r2, s0
 80154a0:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 80154a4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80154a8:	da02      	bge.n	80154b0 <__ieee754_fmodf+0x20>
 80154aa:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80154ae:	dd04      	ble.n	80154ba <__ieee754_fmodf+0x2a>
 80154b0:	ee60 0a20 	vmul.f32	s1, s0, s1
 80154b4:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 80154b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80154ba:	42a3      	cmp	r3, r4
 80154bc:	dbfc      	blt.n	80154b8 <__ieee754_fmodf+0x28>
 80154be:	f002 4600 	and.w	r6, r2, #2147483648	; 0x80000000
 80154c2:	d105      	bne.n	80154d0 <__ieee754_fmodf+0x40>
 80154c4:	4b32      	ldr	r3, [pc, #200]	; (8015590 <__ieee754_fmodf+0x100>)
 80154c6:	eb03 7356 	add.w	r3, r3, r6, lsr #29
 80154ca:	ed93 0a00 	vldr	s0, [r3]
 80154ce:	e7f3      	b.n	80154b8 <__ieee754_fmodf+0x28>
 80154d0:	f012 4fff 	tst.w	r2, #2139095040	; 0x7f800000
 80154d4:	d13f      	bne.n	8015556 <__ieee754_fmodf+0xc6>
 80154d6:	0219      	lsls	r1, r3, #8
 80154d8:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 80154dc:	2900      	cmp	r1, #0
 80154de:	dc37      	bgt.n	8015550 <__ieee754_fmodf+0xc0>
 80154e0:	f015 4fff 	tst.w	r5, #2139095040	; 0x7f800000
 80154e4:	d13d      	bne.n	8015562 <__ieee754_fmodf+0xd2>
 80154e6:	0227      	lsls	r7, r4, #8
 80154e8:	f06f 017d 	mvn.w	r1, #125	; 0x7d
 80154ec:	2f00      	cmp	r7, #0
 80154ee:	da35      	bge.n	801555c <__ieee754_fmodf+0xcc>
 80154f0:	f110 0f7e 	cmn.w	r0, #126	; 0x7e
 80154f4:	bfbb      	ittet	lt
 80154f6:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 80154fa:	1a12      	sublt	r2, r2, r0
 80154fc:	f3c2 0316 	ubfxge	r3, r2, #0, #23
 8015500:	4093      	lsllt	r3, r2
 8015502:	bfa8      	it	ge
 8015504:	f443 0300 	orrge.w	r3, r3, #8388608	; 0x800000
 8015508:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 801550c:	bfb5      	itete	lt
 801550e:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 8015512:	f3c5 0416 	ubfxge	r4, r5, #0, #23
 8015516:	1a52      	sublt	r2, r2, r1
 8015518:	f444 0400 	orrge.w	r4, r4, #8388608	; 0x800000
 801551c:	bfb8      	it	lt
 801551e:	4094      	lsllt	r4, r2
 8015520:	1a40      	subs	r0, r0, r1
 8015522:	1b1a      	subs	r2, r3, r4
 8015524:	bb00      	cbnz	r0, 8015568 <__ieee754_fmodf+0xd8>
 8015526:	ea13 0322 	ands.w	r3, r3, r2, asr #32
 801552a:	bf38      	it	cc
 801552c:	4613      	movcc	r3, r2
 801552e:	2b00      	cmp	r3, #0
 8015530:	d0c8      	beq.n	80154c4 <__ieee754_fmodf+0x34>
 8015532:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8015536:	db1f      	blt.n	8015578 <__ieee754_fmodf+0xe8>
 8015538:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 801553c:	db1f      	blt.n	801557e <__ieee754_fmodf+0xee>
 801553e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8015542:	317f      	adds	r1, #127	; 0x7f
 8015544:	4333      	orrs	r3, r6
 8015546:	ea43 53c1 	orr.w	r3, r3, r1, lsl #23
 801554a:	ee00 3a10 	vmov	s0, r3
 801554e:	e7b3      	b.n	80154b8 <__ieee754_fmodf+0x28>
 8015550:	3801      	subs	r0, #1
 8015552:	0049      	lsls	r1, r1, #1
 8015554:	e7c2      	b.n	80154dc <__ieee754_fmodf+0x4c>
 8015556:	15d8      	asrs	r0, r3, #23
 8015558:	387f      	subs	r0, #127	; 0x7f
 801555a:	e7c1      	b.n	80154e0 <__ieee754_fmodf+0x50>
 801555c:	3901      	subs	r1, #1
 801555e:	007f      	lsls	r7, r7, #1
 8015560:	e7c4      	b.n	80154ec <__ieee754_fmodf+0x5c>
 8015562:	15e1      	asrs	r1, r4, #23
 8015564:	397f      	subs	r1, #127	; 0x7f
 8015566:	e7c3      	b.n	80154f0 <__ieee754_fmodf+0x60>
 8015568:	2a00      	cmp	r2, #0
 801556a:	da02      	bge.n	8015572 <__ieee754_fmodf+0xe2>
 801556c:	005b      	lsls	r3, r3, #1
 801556e:	3801      	subs	r0, #1
 8015570:	e7d7      	b.n	8015522 <__ieee754_fmodf+0x92>
 8015572:	d0a7      	beq.n	80154c4 <__ieee754_fmodf+0x34>
 8015574:	0053      	lsls	r3, r2, #1
 8015576:	e7fa      	b.n	801556e <__ieee754_fmodf+0xde>
 8015578:	005b      	lsls	r3, r3, #1
 801557a:	3901      	subs	r1, #1
 801557c:	e7d9      	b.n	8015532 <__ieee754_fmodf+0xa2>
 801557e:	f1c1 21ff 	rsb	r1, r1, #4278255360	; 0xff00ff00
 8015582:	f501 017f 	add.w	r1, r1, #16711680	; 0xff0000
 8015586:	3182      	adds	r1, #130	; 0x82
 8015588:	410b      	asrs	r3, r1
 801558a:	4333      	orrs	r3, r6
 801558c:	e7dd      	b.n	801554a <__ieee754_fmodf+0xba>
 801558e:	bf00      	nop
 8015590:	0807d06c 	.word	0x0807d06c

08015594 <__ieee754_logf>:
 8015594:	ee10 3a10 	vmov	r3, s0
 8015598:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 801559c:	d106      	bne.n	80155ac <__ieee754_logf+0x18>
 801559e:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8015734 <__ieee754_logf+0x1a0>
 80155a2:	eddf 7a65 	vldr	s15, [pc, #404]	; 8015738 <__ieee754_logf+0x1a4>
 80155a6:	ee87 0a27 	vdiv.f32	s0, s14, s15
 80155aa:	4770      	bx	lr
 80155ac:	2b00      	cmp	r3, #0
 80155ae:	da02      	bge.n	80155b6 <__ieee754_logf+0x22>
 80155b0:	ee30 7a40 	vsub.f32	s14, s0, s0
 80155b4:	e7f5      	b.n	80155a2 <__ieee754_logf+0xe>
 80155b6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80155ba:	db02      	blt.n	80155c2 <__ieee754_logf+0x2e>
 80155bc:	ee30 0a00 	vadd.f32	s0, s0, s0
 80155c0:	4770      	bx	lr
 80155c2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80155c6:	bfb8      	it	lt
 80155c8:	eddf 7a5c 	vldrlt	s15, [pc, #368]	; 801573c <__ieee754_logf+0x1a8>
 80155cc:	485c      	ldr	r0, [pc, #368]	; (8015740 <__ieee754_logf+0x1ac>)
 80155ce:	bfbe      	ittt	lt
 80155d0:	ee60 7a27 	vmullt.f32	s15, s0, s15
 80155d4:	f06f 0118 	mvnlt.w	r1, #24
 80155d8:	ee17 3a90 	vmovlt	r3, s15
 80155dc:	ea4f 52e3 	mov.w	r2, r3, asr #23
 80155e0:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80155e4:	4418      	add	r0, r3
 80155e6:	bfa8      	it	ge
 80155e8:	2100      	movge	r1, #0
 80155ea:	3a7f      	subs	r2, #127	; 0x7f
 80155ec:	440a      	add	r2, r1
 80155ee:	f400 0100 	and.w	r1, r0, #8388608	; 0x800000
 80155f2:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 80155f6:	4319      	orrs	r1, r3
 80155f8:	ee00 1a10 	vmov	s0, r1
 80155fc:	4951      	ldr	r1, [pc, #324]	; (8015744 <__ieee754_logf+0x1b0>)
 80155fe:	eb02 52d0 	add.w	r2, r2, r0, lsr #23
 8015602:	f103 000f 	add.w	r0, r3, #15
 8015606:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801560a:	4001      	ands	r1, r0
 801560c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8015610:	bb89      	cbnz	r1, 8015676 <__ieee754_logf+0xe2>
 8015612:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8015616:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801561a:	d10f      	bne.n	801563c <__ieee754_logf+0xa8>
 801561c:	2a00      	cmp	r2, #0
 801561e:	f000 8085 	beq.w	801572c <__ieee754_logf+0x198>
 8015622:	ee07 2a90 	vmov	s15, r2
 8015626:	ed9f 0a48 	vldr	s0, [pc, #288]	; 8015748 <__ieee754_logf+0x1b4>
 801562a:	ed9f 7a48 	vldr	s14, [pc, #288]	; 801574c <__ieee754_logf+0x1b8>
 801562e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015632:	ee27 0a80 	vmul.f32	s0, s15, s0
 8015636:	eea7 0a87 	vfma.f32	s0, s15, s14
 801563a:	4770      	bx	lr
 801563c:	eddf 6a44 	vldr	s13, [pc, #272]	; 8015750 <__ieee754_logf+0x1bc>
 8015640:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8015644:	eee0 7a66 	vfms.f32	s15, s0, s13
 8015648:	ee20 7a00 	vmul.f32	s14, s0, s0
 801564c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8015650:	b912      	cbnz	r2, 8015658 <__ieee754_logf+0xc4>
 8015652:	ee30 0a47 	vsub.f32	s0, s0, s14
 8015656:	4770      	bx	lr
 8015658:	ee07 2a90 	vmov	s15, r2
 801565c:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8015748 <__ieee754_logf+0x1b4>
 8015660:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015664:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8015668:	ee37 0a40 	vsub.f32	s0, s14, s0
 801566c:	ed9f 7a37 	vldr	s14, [pc, #220]	; 801574c <__ieee754_logf+0x1b8>
 8015670:	ee97 0a87 	vfnms.f32	s0, s15, s14
 8015674:	4770      	bx	lr
 8015676:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 801567a:	ee70 7a27 	vadd.f32	s15, s0, s15
 801567e:	eddf 5a35 	vldr	s11, [pc, #212]	; 8015754 <__ieee754_logf+0x1c0>
 8015682:	eddf 4a35 	vldr	s9, [pc, #212]	; 8015758 <__ieee754_logf+0x1c4>
 8015686:	4935      	ldr	r1, [pc, #212]	; (801575c <__ieee754_logf+0x1c8>)
 8015688:	ee80 6a27 	vdiv.f32	s12, s0, s15
 801568c:	4419      	add	r1, r3
 801568e:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 8015692:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8015696:	430b      	orrs	r3, r1
 8015698:	2b00      	cmp	r3, #0
 801569a:	ee07 2a90 	vmov	s15, r2
 801569e:	ee26 5a06 	vmul.f32	s10, s12, s12
 80156a2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80156a6:	ee25 7a05 	vmul.f32	s14, s10, s10
 80156aa:	eddf 7a2d 	vldr	s15, [pc, #180]	; 8015760 <__ieee754_logf+0x1cc>
 80156ae:	eee7 7a25 	vfma.f32	s15, s14, s11
 80156b2:	eddf 5a2c 	vldr	s11, [pc, #176]	; 8015764 <__ieee754_logf+0x1d0>
 80156b6:	eee7 5a87 	vfma.f32	s11, s15, s14
 80156ba:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8015768 <__ieee754_logf+0x1d4>
 80156be:	eee7 7a24 	vfma.f32	s15, s14, s9
 80156c2:	eddf 4a2a 	vldr	s9, [pc, #168]	; 801576c <__ieee754_logf+0x1d8>
 80156c6:	eee7 4a87 	vfma.f32	s9, s15, s14
 80156ca:	eddf 7a29 	vldr	s15, [pc, #164]	; 8015770 <__ieee754_logf+0x1dc>
 80156ce:	eee4 7a87 	vfma.f32	s15, s9, s14
 80156d2:	ee67 7a85 	vmul.f32	s15, s15, s10
 80156d6:	eee5 7a87 	vfma.f32	s15, s11, s14
 80156da:	dd1c      	ble.n	8015716 <__ieee754_logf+0x182>
 80156dc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80156e0:	ee20 7a07 	vmul.f32	s14, s0, s14
 80156e4:	ee27 7a00 	vmul.f32	s14, s14, s0
 80156e8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80156ec:	ee67 7a86 	vmul.f32	s15, s15, s12
 80156f0:	b922      	cbnz	r2, 80156fc <__ieee754_logf+0x168>
 80156f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80156f6:	ee30 0a67 	vsub.f32	s0, s0, s15
 80156fa:	4770      	bx	lr
 80156fc:	ed9f 6a12 	vldr	s12, [pc, #72]	; 8015748 <__ieee754_logf+0x1b4>
 8015700:	eee6 7a86 	vfma.f32	s15, s13, s12
 8015704:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015708:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801570c:	eddf 7a0f 	vldr	s15, [pc, #60]	; 801574c <__ieee754_logf+0x1b8>
 8015710:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 8015714:	4770      	bx	lr
 8015716:	ee70 7a67 	vsub.f32	s15, s0, s15
 801571a:	ee67 7a86 	vmul.f32	s15, s15, s12
 801571e:	2a00      	cmp	r2, #0
 8015720:	d0e9      	beq.n	80156f6 <__ieee754_logf+0x162>
 8015722:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8015748 <__ieee754_logf+0x1b4>
 8015726:	eee6 7ac7 	vfms.f32	s15, s13, s14
 801572a:	e7ed      	b.n	8015708 <__ieee754_logf+0x174>
 801572c:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8015738 <__ieee754_logf+0x1a4>
 8015730:	4770      	bx	lr
 8015732:	bf00      	nop
 8015734:	cc000000 	.word	0xcc000000
 8015738:	00000000 	.word	0x00000000
 801573c:	4c000000 	.word	0x4c000000
 8015740:	004afb20 	.word	0x004afb20
 8015744:	007ffff0 	.word	0x007ffff0
 8015748:	3717f7d1 	.word	0x3717f7d1
 801574c:	3f317180 	.word	0x3f317180
 8015750:	3eaaaaab 	.word	0x3eaaaaab
 8015754:	3e1cd04f 	.word	0x3e1cd04f
 8015758:	3e178897 	.word	0x3e178897
 801575c:	ffcf5c30 	.word	0xffcf5c30
 8015760:	3e638e29 	.word	0x3e638e29
 8015764:	3ecccccd 	.word	0x3ecccccd
 8015768:	3e3a3325 	.word	0x3e3a3325
 801576c:	3e924925 	.word	0x3e924925
 8015770:	3f2aaaab 	.word	0x3f2aaaab

08015774 <__ieee754_powf>:
 8015774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015778:	ee10 4a90 	vmov	r4, s1
 801577c:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 8015780:	ed2d 8b02 	vpush	{d8}
 8015784:	ee10 6a10 	vmov	r6, s0
 8015788:	eeb0 8a40 	vmov.f32	s16, s0
 801578c:	eef0 8a60 	vmov.f32	s17, s1
 8015790:	d10c      	bne.n	80157ac <__ieee754_powf+0x38>
 8015792:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 8015796:	0076      	lsls	r6, r6, #1
 8015798:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 801579c:	f240 8296 	bls.w	8015ccc <__ieee754_powf+0x558>
 80157a0:	ee38 0a28 	vadd.f32	s0, s16, s17
 80157a4:	ecbd 8b02 	vpop	{d8}
 80157a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80157ac:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 80157b0:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 80157b4:	dcf4      	bgt.n	80157a0 <__ieee754_powf+0x2c>
 80157b6:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 80157ba:	dd08      	ble.n	80157ce <__ieee754_powf+0x5a>
 80157bc:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 80157c0:	d1ee      	bne.n	80157a0 <__ieee754_powf+0x2c>
 80157c2:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 80157c6:	0064      	lsls	r4, r4, #1
 80157c8:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 80157cc:	e7e6      	b.n	801579c <__ieee754_powf+0x28>
 80157ce:	2e00      	cmp	r6, #0
 80157d0:	da20      	bge.n	8015814 <__ieee754_powf+0xa0>
 80157d2:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 80157d6:	da2d      	bge.n	8015834 <__ieee754_powf+0xc0>
 80157d8:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 80157dc:	f2c0 827f 	blt.w	8015cde <__ieee754_powf+0x56a>
 80157e0:	ea4f 53e8 	mov.w	r3, r8, asr #23
 80157e4:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 80157e8:	fa48 f703 	asr.w	r7, r8, r3
 80157ec:	fa07 f303 	lsl.w	r3, r7, r3
 80157f0:	4543      	cmp	r3, r8
 80157f2:	f040 8274 	bne.w	8015cde <__ieee754_powf+0x56a>
 80157f6:	f007 0701 	and.w	r7, r7, #1
 80157fa:	f1c7 0702 	rsb	r7, r7, #2
 80157fe:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8015802:	d11f      	bne.n	8015844 <__ieee754_powf+0xd0>
 8015804:	2c00      	cmp	r4, #0
 8015806:	f280 8267 	bge.w	8015cd8 <__ieee754_powf+0x564>
 801580a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801580e:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8015812:	e7c7      	b.n	80157a4 <__ieee754_powf+0x30>
 8015814:	2700      	movs	r7, #0
 8015816:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 801581a:	d1f0      	bne.n	80157fe <__ieee754_powf+0x8a>
 801581c:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 8015820:	f000 8254 	beq.w	8015ccc <__ieee754_powf+0x558>
 8015824:	dd08      	ble.n	8015838 <__ieee754_powf+0xc4>
 8015826:	ed9f 0ac2 	vldr	s0, [pc, #776]	; 8015b30 <__ieee754_powf+0x3bc>
 801582a:	2c00      	cmp	r4, #0
 801582c:	bfa8      	it	ge
 801582e:	eeb0 0a68 	vmovge.f32	s0, s17
 8015832:	e7b7      	b.n	80157a4 <__ieee754_powf+0x30>
 8015834:	2702      	movs	r7, #2
 8015836:	e7ee      	b.n	8015816 <__ieee754_powf+0xa2>
 8015838:	2c00      	cmp	r4, #0
 801583a:	f280 824a 	bge.w	8015cd2 <__ieee754_powf+0x55e>
 801583e:	eeb1 0a68 	vneg.f32	s0, s17
 8015842:	e7af      	b.n	80157a4 <__ieee754_powf+0x30>
 8015844:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 8015848:	d102      	bne.n	8015850 <__ieee754_powf+0xdc>
 801584a:	ee28 0a08 	vmul.f32	s0, s16, s16
 801584e:	e7a9      	b.n	80157a4 <__ieee754_powf+0x30>
 8015850:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8015854:	eeb0 0a48 	vmov.f32	s0, s16
 8015858:	d107      	bne.n	801586a <__ieee754_powf+0xf6>
 801585a:	2e00      	cmp	r6, #0
 801585c:	db05      	blt.n	801586a <__ieee754_powf+0xf6>
 801585e:	ecbd 8b02 	vpop	{d8}
 8015862:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015866:	f000 bbff 	b.w	8016068 <__ieee754_sqrtf>
 801586a:	f7fe fe65 	bl	8014538 <fabsf>
 801586e:	b125      	cbz	r5, 801587a <__ieee754_powf+0x106>
 8015870:	f026 4340 	bic.w	r3, r6, #3221225472	; 0xc0000000
 8015874:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8015878:	d116      	bne.n	80158a8 <__ieee754_powf+0x134>
 801587a:	2c00      	cmp	r4, #0
 801587c:	bfbc      	itt	lt
 801587e:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8015882:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8015886:	2e00      	cmp	r6, #0
 8015888:	da8c      	bge.n	80157a4 <__ieee754_powf+0x30>
 801588a:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 801588e:	ea55 0307 	orrs.w	r3, r5, r7
 8015892:	d104      	bne.n	801589e <__ieee754_powf+0x12a>
 8015894:	ee70 7a40 	vsub.f32	s15, s0, s0
 8015898:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 801589c:	e782      	b.n	80157a4 <__ieee754_powf+0x30>
 801589e:	2f01      	cmp	r7, #1
 80158a0:	d180      	bne.n	80157a4 <__ieee754_powf+0x30>
 80158a2:	eeb1 0a40 	vneg.f32	s0, s0
 80158a6:	e77d      	b.n	80157a4 <__ieee754_powf+0x30>
 80158a8:	0ff0      	lsrs	r0, r6, #31
 80158aa:	3801      	subs	r0, #1
 80158ac:	ea57 0300 	orrs.w	r3, r7, r0
 80158b0:	d104      	bne.n	80158bc <__ieee754_powf+0x148>
 80158b2:	ee38 8a48 	vsub.f32	s16, s16, s16
 80158b6:	ee88 0a08 	vdiv.f32	s0, s16, s16
 80158ba:	e773      	b.n	80157a4 <__ieee754_powf+0x30>
 80158bc:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 80158c0:	dd74      	ble.n	80159ac <__ieee754_powf+0x238>
 80158c2:	4b9c      	ldr	r3, [pc, #624]	; (8015b34 <__ieee754_powf+0x3c0>)
 80158c4:	429d      	cmp	r5, r3
 80158c6:	dc08      	bgt.n	80158da <__ieee754_powf+0x166>
 80158c8:	2c00      	cmp	r4, #0
 80158ca:	da0b      	bge.n	80158e4 <__ieee754_powf+0x170>
 80158cc:	2000      	movs	r0, #0
 80158ce:	ecbd 8b02 	vpop	{d8}
 80158d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80158d6:	f000 bfe5 	b.w	80168a4 <__math_oflowf>
 80158da:	4b97      	ldr	r3, [pc, #604]	; (8015b38 <__ieee754_powf+0x3c4>)
 80158dc:	429d      	cmp	r5, r3
 80158de:	dd08      	ble.n	80158f2 <__ieee754_powf+0x17e>
 80158e0:	2c00      	cmp	r4, #0
 80158e2:	dcf3      	bgt.n	80158cc <__ieee754_powf+0x158>
 80158e4:	2000      	movs	r0, #0
 80158e6:	ecbd 8b02 	vpop	{d8}
 80158ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80158ee:	f000 bfd3 	b.w	8016898 <__math_uflowf>
 80158f2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80158f6:	ee30 0a67 	vsub.f32	s0, s0, s15
 80158fa:	eddf 6a90 	vldr	s13, [pc, #576]	; 8015b3c <__ieee754_powf+0x3c8>
 80158fe:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8015902:	eee0 6a67 	vfms.f32	s13, s0, s15
 8015906:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801590a:	eee6 7ac0 	vfms.f32	s15, s13, s0
 801590e:	ee20 7a00 	vmul.f32	s14, s0, s0
 8015912:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015916:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8015b40 <__ieee754_powf+0x3cc>
 801591a:	ee67 7a67 	vnmul.f32	s15, s14, s15
 801591e:	ed9f 7a89 	vldr	s14, [pc, #548]	; 8015b44 <__ieee754_powf+0x3d0>
 8015922:	eee0 7a07 	vfma.f32	s15, s0, s14
 8015926:	ed9f 7a88 	vldr	s14, [pc, #544]	; 8015b48 <__ieee754_powf+0x3d4>
 801592a:	eef0 6a67 	vmov.f32	s13, s15
 801592e:	eee0 6a07 	vfma.f32	s13, s0, s14
 8015932:	ee16 3a90 	vmov	r3, s13
 8015936:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 801593a:	f023 030f 	bic.w	r3, r3, #15
 801593e:	ee00 3a90 	vmov	s1, r3
 8015942:	eee0 0a47 	vfms.f32	s1, s0, s14
 8015946:	ee77 7ae0 	vsub.f32	s15, s15, s1
 801594a:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 801594e:	f024 040f 	bic.w	r4, r4, #15
 8015952:	ee07 4a10 	vmov	s14, r4
 8015956:	ee67 0aa8 	vmul.f32	s1, s15, s17
 801595a:	ee38 7ac7 	vsub.f32	s14, s17, s14
 801595e:	ee07 3a90 	vmov	s15, r3
 8015962:	eee7 0a27 	vfma.f32	s1, s14, s15
 8015966:	3f01      	subs	r7, #1
 8015968:	ea57 0200 	orrs.w	r2, r7, r0
 801596c:	ee07 4a10 	vmov	s14, r4
 8015970:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015974:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8015978:	ee30 7aa7 	vadd.f32	s14, s1, s15
 801597c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8015980:	ee17 4a10 	vmov	r4, s14
 8015984:	bf08      	it	eq
 8015986:	eeb0 8a40 	vmoveq.f32	s16, s0
 801598a:	2c00      	cmp	r4, #0
 801598c:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8015990:	f340 817e 	ble.w	8015c90 <__ieee754_powf+0x51c>
 8015994:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8015998:	f340 80f8 	ble.w	8015b8c <__ieee754_powf+0x418>
 801599c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80159a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80159a4:	bf4c      	ite	mi
 80159a6:	2001      	movmi	r0, #1
 80159a8:	2000      	movpl	r0, #0
 80159aa:	e790      	b.n	80158ce <__ieee754_powf+0x15a>
 80159ac:	f016 4fff 	tst.w	r6, #2139095040	; 0x7f800000
 80159b0:	bf01      	itttt	eq
 80159b2:	eddf 7a66 	vldreq	s15, [pc, #408]	; 8015b4c <__ieee754_powf+0x3d8>
 80159b6:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 80159ba:	f06f 0217 	mvneq.w	r2, #23
 80159be:	ee17 5a90 	vmoveq	r5, s15
 80159c2:	ea4f 53e5 	mov.w	r3, r5, asr #23
 80159c6:	bf18      	it	ne
 80159c8:	2200      	movne	r2, #0
 80159ca:	3b7f      	subs	r3, #127	; 0x7f
 80159cc:	4413      	add	r3, r2
 80159ce:	4a60      	ldr	r2, [pc, #384]	; (8015b50 <__ieee754_powf+0x3dc>)
 80159d0:	f3c5 0516 	ubfx	r5, r5, #0, #23
 80159d4:	4295      	cmp	r5, r2
 80159d6:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 80159da:	dd06      	ble.n	80159ea <__ieee754_powf+0x276>
 80159dc:	4a5d      	ldr	r2, [pc, #372]	; (8015b54 <__ieee754_powf+0x3e0>)
 80159de:	4295      	cmp	r5, r2
 80159e0:	f340 80a4 	ble.w	8015b2c <__ieee754_powf+0x3b8>
 80159e4:	3301      	adds	r3, #1
 80159e6:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 80159ea:	2500      	movs	r5, #0
 80159ec:	4a5a      	ldr	r2, [pc, #360]	; (8015b58 <__ieee754_powf+0x3e4>)
 80159ee:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 80159f2:	ee07 1a90 	vmov	s15, r1
 80159f6:	ed92 7a00 	vldr	s14, [r2]
 80159fa:	4a58      	ldr	r2, [pc, #352]	; (8015b5c <__ieee754_powf+0x3e8>)
 80159fc:	ee37 6a27 	vadd.f32	s12, s14, s15
 8015a00:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8015a04:	eec5 6a86 	vdiv.f32	s13, s11, s12
 8015a08:	1049      	asrs	r1, r1, #1
 8015a0a:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8015a0e:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8015a12:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 8015a16:	ee37 5ac7 	vsub.f32	s10, s15, s14
 8015a1a:	ee06 1a10 	vmov	s12, r1
 8015a1e:	ee65 4a26 	vmul.f32	s9, s10, s13
 8015a22:	ee36 7a47 	vsub.f32	s14, s12, s14
 8015a26:	ee14 6a90 	vmov	r6, s9
 8015a2a:	4016      	ands	r6, r2
 8015a2c:	ee05 6a90 	vmov	s11, r6
 8015a30:	eea5 5ac6 	vfms.f32	s10, s11, s12
 8015a34:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015a38:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8015b60 <__ieee754_powf+0x3ec>
 8015a3c:	eea5 5ae7 	vfms.f32	s10, s11, s15
 8015a40:	ee64 7aa4 	vmul.f32	s15, s9, s9
 8015a44:	ee25 6a26 	vmul.f32	s12, s10, s13
 8015a48:	eddf 6a46 	vldr	s13, [pc, #280]	; 8015b64 <__ieee754_powf+0x3f0>
 8015a4c:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8015a50:	eddf 6a45 	vldr	s13, [pc, #276]	; 8015b68 <__ieee754_powf+0x3f4>
 8015a54:	eee7 6a27 	vfma.f32	s13, s14, s15
 8015a58:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8015b3c <__ieee754_powf+0x3c8>
 8015a5c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8015a60:	eddf 6a42 	vldr	s13, [pc, #264]	; 8015b6c <__ieee754_powf+0x3f8>
 8015a64:	eee7 6a27 	vfma.f32	s13, s14, s15
 8015a68:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8015b70 <__ieee754_powf+0x3fc>
 8015a6c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8015a70:	ee74 6aa5 	vadd.f32	s13, s9, s11
 8015a74:	ee27 5aa7 	vmul.f32	s10, s15, s15
 8015a78:	ee66 6a86 	vmul.f32	s13, s13, s12
 8015a7c:	eee5 6a07 	vfma.f32	s13, s10, s14
 8015a80:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 8015a84:	eef0 7a45 	vmov.f32	s15, s10
 8015a88:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8015a8c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015a90:	ee17 1a90 	vmov	r1, s15
 8015a94:	4011      	ands	r1, r2
 8015a96:	ee07 1a90 	vmov	s15, r1
 8015a9a:	ee37 7ac5 	vsub.f32	s14, s15, s10
 8015a9e:	eea5 7ae5 	vfms.f32	s14, s11, s11
 8015aa2:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8015aa6:	ee27 7a24 	vmul.f32	s14, s14, s9
 8015aaa:	eea6 7a27 	vfma.f32	s14, s12, s15
 8015aae:	eeb0 6a47 	vmov.f32	s12, s14
 8015ab2:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8015ab6:	ee16 1a10 	vmov	r1, s12
 8015aba:	4011      	ands	r1, r2
 8015abc:	ee06 1a90 	vmov	s13, r1
 8015ac0:	eee5 6ae7 	vfms.f32	s13, s11, s15
 8015ac4:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8015b74 <__ieee754_powf+0x400>
 8015ac8:	eddf 5a2b 	vldr	s11, [pc, #172]	; 8015b78 <__ieee754_powf+0x404>
 8015acc:	ee37 7a66 	vsub.f32	s14, s14, s13
 8015ad0:	ee06 1a10 	vmov	s12, r1
 8015ad4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8015ad8:	eddf 7a28 	vldr	s15, [pc, #160]	; 8015b7c <__ieee754_powf+0x408>
 8015adc:	4928      	ldr	r1, [pc, #160]	; (8015b80 <__ieee754_powf+0x40c>)
 8015ade:	eea6 7a27 	vfma.f32	s14, s12, s15
 8015ae2:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8015ae6:	edd1 7a00 	vldr	s15, [r1]
 8015aea:	ee37 7a27 	vadd.f32	s14, s14, s15
 8015aee:	ee07 3a90 	vmov	s15, r3
 8015af2:	4b24      	ldr	r3, [pc, #144]	; (8015b84 <__ieee754_powf+0x410>)
 8015af4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8015af8:	eef0 7a47 	vmov.f32	s15, s14
 8015afc:	eee6 7a25 	vfma.f32	s15, s12, s11
 8015b00:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8015b04:	edd5 0a00 	vldr	s1, [r5]
 8015b08:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8015b0c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015b10:	ee17 3a90 	vmov	r3, s15
 8015b14:	4013      	ands	r3, r2
 8015b16:	ee07 3a90 	vmov	s15, r3
 8015b1a:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8015b1e:	ee76 6ae0 	vsub.f32	s13, s13, s1
 8015b22:	eee6 6a65 	vfms.f32	s13, s12, s11
 8015b26:	ee77 7a66 	vsub.f32	s15, s14, s13
 8015b2a:	e70e      	b.n	801594a <__ieee754_powf+0x1d6>
 8015b2c:	2501      	movs	r5, #1
 8015b2e:	e75d      	b.n	80159ec <__ieee754_powf+0x278>
 8015b30:	00000000 	.word	0x00000000
 8015b34:	3f7ffff3 	.word	0x3f7ffff3
 8015b38:	3f800007 	.word	0x3f800007
 8015b3c:	3eaaaaab 	.word	0x3eaaaaab
 8015b40:	3fb8aa3b 	.word	0x3fb8aa3b
 8015b44:	36eca570 	.word	0x36eca570
 8015b48:	3fb8aa00 	.word	0x3fb8aa00
 8015b4c:	4b800000 	.word	0x4b800000
 8015b50:	001cc471 	.word	0x001cc471
 8015b54:	005db3d6 	.word	0x005db3d6
 8015b58:	0807d074 	.word	0x0807d074
 8015b5c:	fffff000 	.word	0xfffff000
 8015b60:	3e6c3255 	.word	0x3e6c3255
 8015b64:	3e53f142 	.word	0x3e53f142
 8015b68:	3e8ba305 	.word	0x3e8ba305
 8015b6c:	3edb6db7 	.word	0x3edb6db7
 8015b70:	3f19999a 	.word	0x3f19999a
 8015b74:	3f76384f 	.word	0x3f76384f
 8015b78:	3f763800 	.word	0x3f763800
 8015b7c:	369dc3a0 	.word	0x369dc3a0
 8015b80:	0807d084 	.word	0x0807d084
 8015b84:	0807d07c 	.word	0x0807d07c
 8015b88:	3338aa3c 	.word	0x3338aa3c
 8015b8c:	f040 8095 	bne.w	8015cba <__ieee754_powf+0x546>
 8015b90:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8015b88 <__ieee754_powf+0x414>
 8015b94:	ee37 7a67 	vsub.f32	s14, s14, s15
 8015b98:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8015b9c:	eef4 6ac7 	vcmpe.f32	s13, s14
 8015ba0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ba4:	f73f aefa 	bgt.w	801599c <__ieee754_powf+0x228>
 8015ba8:	15db      	asrs	r3, r3, #23
 8015baa:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 8015bae:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8015bb2:	4103      	asrs	r3, r0
 8015bb4:	4423      	add	r3, r4
 8015bb6:	494b      	ldr	r1, [pc, #300]	; (8015ce4 <__ieee754_powf+0x570>)
 8015bb8:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8015bbc:	3a7f      	subs	r2, #127	; 0x7f
 8015bbe:	4111      	asrs	r1, r2
 8015bc0:	ea23 0101 	bic.w	r1, r3, r1
 8015bc4:	ee07 1a10 	vmov	s14, r1
 8015bc8:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8015bcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8015bd0:	f1c2 0217 	rsb	r2, r2, #23
 8015bd4:	4110      	asrs	r0, r2
 8015bd6:	2c00      	cmp	r4, #0
 8015bd8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015bdc:	bfb8      	it	lt
 8015bde:	4240      	neglt	r0, r0
 8015be0:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8015be4:	ed9f 0a40 	vldr	s0, [pc, #256]	; 8015ce8 <__ieee754_powf+0x574>
 8015be8:	eddf 6a40 	vldr	s13, [pc, #256]	; 8015cec <__ieee754_powf+0x578>
 8015bec:	ee17 3a10 	vmov	r3, s14
 8015bf0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8015bf4:	f023 030f 	bic.w	r3, r3, #15
 8015bf8:	ee07 3a10 	vmov	s14, r3
 8015bfc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015c00:	ee27 0a00 	vmul.f32	s0, s14, s0
 8015c04:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8015c08:	eddf 7a39 	vldr	s15, [pc, #228]	; 8015cf0 <__ieee754_powf+0x57c>
 8015c0c:	eea0 0aa7 	vfma.f32	s0, s1, s15
 8015c10:	eef0 7a40 	vmov.f32	s15, s0
 8015c14:	eee7 7a26 	vfma.f32	s15, s14, s13
 8015c18:	eeb0 6a67 	vmov.f32	s12, s15
 8015c1c:	eea7 6a66 	vfms.f32	s12, s14, s13
 8015c20:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8015c24:	ee30 0a46 	vsub.f32	s0, s0, s12
 8015c28:	eddf 6a32 	vldr	s13, [pc, #200]	; 8015cf4 <__ieee754_powf+0x580>
 8015c2c:	ed9f 6a32 	vldr	s12, [pc, #200]	; 8015cf8 <__ieee754_powf+0x584>
 8015c30:	eee7 6a06 	vfma.f32	s13, s14, s12
 8015c34:	ed9f 6a31 	vldr	s12, [pc, #196]	; 8015cfc <__ieee754_powf+0x588>
 8015c38:	eea6 6a87 	vfma.f32	s12, s13, s14
 8015c3c:	eddf 6a30 	vldr	s13, [pc, #192]	; 8015d00 <__ieee754_powf+0x58c>
 8015c40:	eee6 6a07 	vfma.f32	s13, s12, s14
 8015c44:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 8015d04 <__ieee754_powf+0x590>
 8015c48:	eea6 6a87 	vfma.f32	s12, s13, s14
 8015c4c:	eef0 6a67 	vmov.f32	s13, s15
 8015c50:	eee6 6a47 	vfms.f32	s13, s12, s14
 8015c54:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8015c58:	ee27 6aa6 	vmul.f32	s12, s15, s13
 8015c5c:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8015c60:	eea7 0a80 	vfma.f32	s0, s15, s0
 8015c64:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8015c68:	ee37 0a40 	vsub.f32	s0, s14, s0
 8015c6c:	ee70 7a67 	vsub.f32	s15, s0, s15
 8015c70:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8015c74:	ee30 0a67 	vsub.f32	s0, s0, s15
 8015c78:	ee10 3a10 	vmov	r3, s0
 8015c7c:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8015c80:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8015c84:	da1f      	bge.n	8015cc6 <__ieee754_powf+0x552>
 8015c86:	f000 ff65 	bl	8016b54 <scalbnf>
 8015c8a:	ee20 0a08 	vmul.f32	s0, s0, s16
 8015c8e:	e589      	b.n	80157a4 <__ieee754_powf+0x30>
 8015c90:	4a1d      	ldr	r2, [pc, #116]	; (8015d08 <__ieee754_powf+0x594>)
 8015c92:	4293      	cmp	r3, r2
 8015c94:	dd07      	ble.n	8015ca6 <__ieee754_powf+0x532>
 8015c96:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8015c9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015c9e:	bf4c      	ite	mi
 8015ca0:	2001      	movmi	r0, #1
 8015ca2:	2000      	movpl	r0, #0
 8015ca4:	e61f      	b.n	80158e6 <__ieee754_powf+0x172>
 8015ca6:	d108      	bne.n	8015cba <__ieee754_powf+0x546>
 8015ca8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8015cac:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8015cb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015cb4:	f6ff af78 	blt.w	8015ba8 <__ieee754_powf+0x434>
 8015cb8:	e7ed      	b.n	8015c96 <__ieee754_powf+0x522>
 8015cba:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8015cbe:	f73f af73 	bgt.w	8015ba8 <__ieee754_powf+0x434>
 8015cc2:	2000      	movs	r0, #0
 8015cc4:	e78c      	b.n	8015be0 <__ieee754_powf+0x46c>
 8015cc6:	ee00 3a10 	vmov	s0, r3
 8015cca:	e7de      	b.n	8015c8a <__ieee754_powf+0x516>
 8015ccc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8015cd0:	e568      	b.n	80157a4 <__ieee754_powf+0x30>
 8015cd2:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8015d0c <__ieee754_powf+0x598>
 8015cd6:	e565      	b.n	80157a4 <__ieee754_powf+0x30>
 8015cd8:	eeb0 0a48 	vmov.f32	s0, s16
 8015cdc:	e562      	b.n	80157a4 <__ieee754_powf+0x30>
 8015cde:	2700      	movs	r7, #0
 8015ce0:	e58d      	b.n	80157fe <__ieee754_powf+0x8a>
 8015ce2:	bf00      	nop
 8015ce4:	007fffff 	.word	0x007fffff
 8015ce8:	35bfbe8c 	.word	0x35bfbe8c
 8015cec:	3f317200 	.word	0x3f317200
 8015cf0:	3f317218 	.word	0x3f317218
 8015cf4:	b5ddea0e 	.word	0xb5ddea0e
 8015cf8:	3331bb4c 	.word	0x3331bb4c
 8015cfc:	388ab355 	.word	0x388ab355
 8015d00:	bb360b61 	.word	0xbb360b61
 8015d04:	3e2aaaab 	.word	0x3e2aaaab
 8015d08:	43160000 	.word	0x43160000
 8015d0c:	00000000 	.word	0x00000000

08015d10 <__ieee754_rem_pio2f>:
 8015d10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015d12:	ee10 6a10 	vmov	r6, s0
 8015d16:	4b8e      	ldr	r3, [pc, #568]	; (8015f50 <__ieee754_rem_pio2f+0x240>)
 8015d18:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8015d1c:	429d      	cmp	r5, r3
 8015d1e:	b087      	sub	sp, #28
 8015d20:	eef0 7a40 	vmov.f32	s15, s0
 8015d24:	4604      	mov	r4, r0
 8015d26:	dc05      	bgt.n	8015d34 <__ieee754_rem_pio2f+0x24>
 8015d28:	2300      	movs	r3, #0
 8015d2a:	ed80 0a00 	vstr	s0, [r0]
 8015d2e:	6043      	str	r3, [r0, #4]
 8015d30:	2000      	movs	r0, #0
 8015d32:	e01a      	b.n	8015d6a <__ieee754_rem_pio2f+0x5a>
 8015d34:	4b87      	ldr	r3, [pc, #540]	; (8015f54 <__ieee754_rem_pio2f+0x244>)
 8015d36:	429d      	cmp	r5, r3
 8015d38:	dc46      	bgt.n	8015dc8 <__ieee754_rem_pio2f+0xb8>
 8015d3a:	2e00      	cmp	r6, #0
 8015d3c:	ed9f 0a86 	vldr	s0, [pc, #536]	; 8015f58 <__ieee754_rem_pio2f+0x248>
 8015d40:	4b86      	ldr	r3, [pc, #536]	; (8015f5c <__ieee754_rem_pio2f+0x24c>)
 8015d42:	f025 050f 	bic.w	r5, r5, #15
 8015d46:	dd1f      	ble.n	8015d88 <__ieee754_rem_pio2f+0x78>
 8015d48:	429d      	cmp	r5, r3
 8015d4a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8015d4e:	d00e      	beq.n	8015d6e <__ieee754_rem_pio2f+0x5e>
 8015d50:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8015f60 <__ieee754_rem_pio2f+0x250>
 8015d54:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8015d58:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8015d5c:	ed80 0a00 	vstr	s0, [r0]
 8015d60:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015d64:	2001      	movs	r0, #1
 8015d66:	edc4 7a01 	vstr	s15, [r4, #4]
 8015d6a:	b007      	add	sp, #28
 8015d6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015d6e:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 8015f64 <__ieee754_rem_pio2f+0x254>
 8015d72:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8015f68 <__ieee754_rem_pio2f+0x258>
 8015d76:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8015d7a:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8015d7e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8015d82:	edc0 6a00 	vstr	s13, [r0]
 8015d86:	e7eb      	b.n	8015d60 <__ieee754_rem_pio2f+0x50>
 8015d88:	429d      	cmp	r5, r3
 8015d8a:	ee77 7a80 	vadd.f32	s15, s15, s0
 8015d8e:	d00e      	beq.n	8015dae <__ieee754_rem_pio2f+0x9e>
 8015d90:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8015f60 <__ieee754_rem_pio2f+0x250>
 8015d94:	ee37 0a87 	vadd.f32	s0, s15, s14
 8015d98:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8015d9c:	ed80 0a00 	vstr	s0, [r0]
 8015da0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8015da4:	f04f 30ff 	mov.w	r0, #4294967295
 8015da8:	edc4 7a01 	vstr	s15, [r4, #4]
 8015dac:	e7dd      	b.n	8015d6a <__ieee754_rem_pio2f+0x5a>
 8015dae:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8015f64 <__ieee754_rem_pio2f+0x254>
 8015db2:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8015f68 <__ieee754_rem_pio2f+0x258>
 8015db6:	ee77 7a80 	vadd.f32	s15, s15, s0
 8015dba:	ee77 6a87 	vadd.f32	s13, s15, s14
 8015dbe:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8015dc2:	edc0 6a00 	vstr	s13, [r0]
 8015dc6:	e7eb      	b.n	8015da0 <__ieee754_rem_pio2f+0x90>
 8015dc8:	4b68      	ldr	r3, [pc, #416]	; (8015f6c <__ieee754_rem_pio2f+0x25c>)
 8015dca:	429d      	cmp	r5, r3
 8015dcc:	dc72      	bgt.n	8015eb4 <__ieee754_rem_pio2f+0x1a4>
 8015dce:	f7fe fbb3 	bl	8014538 <fabsf>
 8015dd2:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8015f70 <__ieee754_rem_pio2f+0x260>
 8015dd6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8015dda:	eee0 7a07 	vfma.f32	s15, s0, s14
 8015dde:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015de2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8015de6:	ee17 0a90 	vmov	r0, s15
 8015dea:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8015f58 <__ieee754_rem_pio2f+0x248>
 8015dee:	eea7 0a67 	vfms.f32	s0, s14, s15
 8015df2:	281f      	cmp	r0, #31
 8015df4:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8015f60 <__ieee754_rem_pio2f+0x250>
 8015df8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015dfc:	eeb1 6a47 	vneg.f32	s12, s14
 8015e00:	ee70 6a67 	vsub.f32	s13, s0, s15
 8015e04:	ee16 2a90 	vmov	r2, s13
 8015e08:	dc1c      	bgt.n	8015e44 <__ieee754_rem_pio2f+0x134>
 8015e0a:	495a      	ldr	r1, [pc, #360]	; (8015f74 <__ieee754_rem_pio2f+0x264>)
 8015e0c:	1e47      	subs	r7, r0, #1
 8015e0e:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 8015e12:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8015e16:	428b      	cmp	r3, r1
 8015e18:	d014      	beq.n	8015e44 <__ieee754_rem_pio2f+0x134>
 8015e1a:	6022      	str	r2, [r4, #0]
 8015e1c:	ed94 7a00 	vldr	s14, [r4]
 8015e20:	ee30 0a47 	vsub.f32	s0, s0, s14
 8015e24:	2e00      	cmp	r6, #0
 8015e26:	ee30 0a67 	vsub.f32	s0, s0, s15
 8015e2a:	ed84 0a01 	vstr	s0, [r4, #4]
 8015e2e:	da9c      	bge.n	8015d6a <__ieee754_rem_pio2f+0x5a>
 8015e30:	eeb1 7a47 	vneg.f32	s14, s14
 8015e34:	eeb1 0a40 	vneg.f32	s0, s0
 8015e38:	ed84 7a00 	vstr	s14, [r4]
 8015e3c:	ed84 0a01 	vstr	s0, [r4, #4]
 8015e40:	4240      	negs	r0, r0
 8015e42:	e792      	b.n	8015d6a <__ieee754_rem_pio2f+0x5a>
 8015e44:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8015e48:	15eb      	asrs	r3, r5, #23
 8015e4a:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 8015e4e:	2d08      	cmp	r5, #8
 8015e50:	dde3      	ble.n	8015e1a <__ieee754_rem_pio2f+0x10a>
 8015e52:	eddf 7a44 	vldr	s15, [pc, #272]	; 8015f64 <__ieee754_rem_pio2f+0x254>
 8015e56:	eddf 5a44 	vldr	s11, [pc, #272]	; 8015f68 <__ieee754_rem_pio2f+0x258>
 8015e5a:	eef0 6a40 	vmov.f32	s13, s0
 8015e5e:	eee6 6a27 	vfma.f32	s13, s12, s15
 8015e62:	ee30 0a66 	vsub.f32	s0, s0, s13
 8015e66:	eea6 0a27 	vfma.f32	s0, s12, s15
 8015e6a:	eef0 7a40 	vmov.f32	s15, s0
 8015e6e:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8015e72:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8015e76:	ee15 2a90 	vmov	r2, s11
 8015e7a:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8015e7e:	1a5b      	subs	r3, r3, r1
 8015e80:	2b19      	cmp	r3, #25
 8015e82:	dc04      	bgt.n	8015e8e <__ieee754_rem_pio2f+0x17e>
 8015e84:	edc4 5a00 	vstr	s11, [r4]
 8015e88:	eeb0 0a66 	vmov.f32	s0, s13
 8015e8c:	e7c6      	b.n	8015e1c <__ieee754_rem_pio2f+0x10c>
 8015e8e:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8015f78 <__ieee754_rem_pio2f+0x268>
 8015e92:	eeb0 0a66 	vmov.f32	s0, s13
 8015e96:	eea6 0a25 	vfma.f32	s0, s12, s11
 8015e9a:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8015e9e:	eddf 6a37 	vldr	s13, [pc, #220]	; 8015f7c <__ieee754_rem_pio2f+0x26c>
 8015ea2:	eee6 7a25 	vfma.f32	s15, s12, s11
 8015ea6:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8015eaa:	ee30 7a67 	vsub.f32	s14, s0, s15
 8015eae:	ed84 7a00 	vstr	s14, [r4]
 8015eb2:	e7b3      	b.n	8015e1c <__ieee754_rem_pio2f+0x10c>
 8015eb4:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8015eb8:	db06      	blt.n	8015ec8 <__ieee754_rem_pio2f+0x1b8>
 8015eba:	ee70 7a40 	vsub.f32	s15, s0, s0
 8015ebe:	edc0 7a01 	vstr	s15, [r0, #4]
 8015ec2:	edc0 7a00 	vstr	s15, [r0]
 8015ec6:	e733      	b.n	8015d30 <__ieee754_rem_pio2f+0x20>
 8015ec8:	15ea      	asrs	r2, r5, #23
 8015eca:	3a86      	subs	r2, #134	; 0x86
 8015ecc:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8015ed0:	ee07 3a90 	vmov	s15, r3
 8015ed4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8015ed8:	eddf 6a29 	vldr	s13, [pc, #164]	; 8015f80 <__ieee754_rem_pio2f+0x270>
 8015edc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015ee0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015ee4:	ed8d 7a03 	vstr	s14, [sp, #12]
 8015ee8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8015eec:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8015ef0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015ef4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015ef8:	ed8d 7a04 	vstr	s14, [sp, #16]
 8015efc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8015f00:	eef5 7a40 	vcmp.f32	s15, #0.0
 8015f04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f08:	edcd 7a05 	vstr	s15, [sp, #20]
 8015f0c:	d11e      	bne.n	8015f4c <__ieee754_rem_pio2f+0x23c>
 8015f0e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8015f12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f16:	bf14      	ite	ne
 8015f18:	2302      	movne	r3, #2
 8015f1a:	2301      	moveq	r3, #1
 8015f1c:	4919      	ldr	r1, [pc, #100]	; (8015f84 <__ieee754_rem_pio2f+0x274>)
 8015f1e:	9101      	str	r1, [sp, #4]
 8015f20:	2102      	movs	r1, #2
 8015f22:	9100      	str	r1, [sp, #0]
 8015f24:	a803      	add	r0, sp, #12
 8015f26:	4621      	mov	r1, r4
 8015f28:	f000 f902 	bl	8016130 <__kernel_rem_pio2f>
 8015f2c:	2e00      	cmp	r6, #0
 8015f2e:	f6bf af1c 	bge.w	8015d6a <__ieee754_rem_pio2f+0x5a>
 8015f32:	edd4 7a00 	vldr	s15, [r4]
 8015f36:	eef1 7a67 	vneg.f32	s15, s15
 8015f3a:	edc4 7a00 	vstr	s15, [r4]
 8015f3e:	edd4 7a01 	vldr	s15, [r4, #4]
 8015f42:	eef1 7a67 	vneg.f32	s15, s15
 8015f46:	edc4 7a01 	vstr	s15, [r4, #4]
 8015f4a:	e779      	b.n	8015e40 <__ieee754_rem_pio2f+0x130>
 8015f4c:	2303      	movs	r3, #3
 8015f4e:	e7e5      	b.n	8015f1c <__ieee754_rem_pio2f+0x20c>
 8015f50:	3f490fd8 	.word	0x3f490fd8
 8015f54:	4016cbe3 	.word	0x4016cbe3
 8015f58:	3fc90f80 	.word	0x3fc90f80
 8015f5c:	3fc90fd0 	.word	0x3fc90fd0
 8015f60:	37354443 	.word	0x37354443
 8015f64:	37354400 	.word	0x37354400
 8015f68:	2e85a308 	.word	0x2e85a308
 8015f6c:	43490f80 	.word	0x43490f80
 8015f70:	3f22f984 	.word	0x3f22f984
 8015f74:	0807d08c 	.word	0x0807d08c
 8015f78:	2e85a300 	.word	0x2e85a300
 8015f7c:	248d3132 	.word	0x248d3132
 8015f80:	43800000 	.word	0x43800000
 8015f84:	0807d10c 	.word	0x0807d10c

08015f88 <__ieee754_sinhf>:
 8015f88:	b510      	push	{r4, lr}
 8015f8a:	ee10 3a10 	vmov	r3, s0
 8015f8e:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8015f92:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8015f96:	ed2d 8b02 	vpush	{d8}
 8015f9a:	eef0 7a40 	vmov.f32	s15, s0
 8015f9e:	db06      	blt.n	8015fae <__ieee754_sinhf+0x26>
 8015fa0:	ee70 7a00 	vadd.f32	s15, s0, s0
 8015fa4:	ecbd 8b02 	vpop	{d8}
 8015fa8:	eeb0 0a67 	vmov.f32	s0, s15
 8015fac:	bd10      	pop	{r4, pc}
 8015fae:	2b00      	cmp	r3, #0
 8015fb0:	4b29      	ldr	r3, [pc, #164]	; (8016058 <__ieee754_sinhf+0xd0>)
 8015fb2:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
 8015fb6:	eebe 8a00 	vmov.f32	s16, #224	; 0xbf000000 -0.5
 8015fba:	bfa8      	it	ge
 8015fbc:	eeb0 8a68 	vmovge.f32	s16, s17
 8015fc0:	429c      	cmp	r4, r3
 8015fc2:	dc2c      	bgt.n	801601e <__ieee754_sinhf+0x96>
 8015fc4:	f1b4 5f46 	cmp.w	r4, #830472192	; 0x31800000
 8015fc8:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8015fcc:	da08      	bge.n	8015fe0 <__ieee754_sinhf+0x58>
 8015fce:	ed9f 7a23 	vldr	s14, [pc, #140]	; 801605c <__ieee754_sinhf+0xd4>
 8015fd2:	ee30 7a07 	vadd.f32	s14, s0, s14
 8015fd6:	eeb4 7ae8 	vcmpe.f32	s14, s17
 8015fda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015fde:	dce1      	bgt.n	8015fa4 <__ieee754_sinhf+0x1c>
 8015fe0:	eeb0 0a67 	vmov.f32	s0, s15
 8015fe4:	f7fe faa8 	bl	8014538 <fabsf>
 8015fe8:	f000 fc84 	bl	80168f4 <expm1f>
 8015fec:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8015ff0:	da0c      	bge.n	801600c <__ieee754_sinhf+0x84>
 8015ff2:	ee60 7a00 	vmul.f32	s15, s0, s0
 8015ff6:	ee70 8a28 	vadd.f32	s17, s0, s17
 8015ffa:	ee87 7aa8 	vdiv.f32	s14, s15, s17
 8015ffe:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8016002:	ee90 7a27 	vfnms.f32	s14, s0, s15
 8016006:	ee67 7a08 	vmul.f32	s15, s14, s16
 801600a:	e7cb      	b.n	8015fa4 <__ieee754_sinhf+0x1c>
 801600c:	ee70 8a28 	vadd.f32	s17, s0, s17
 8016010:	ee80 7a28 	vdiv.f32	s14, s0, s17
 8016014:	ee77 7a00 	vadd.f32	s15, s14, s0
 8016018:	ee67 7a88 	vmul.f32	s15, s15, s16
 801601c:	e7c2      	b.n	8015fa4 <__ieee754_sinhf+0x1c>
 801601e:	4b10      	ldr	r3, [pc, #64]	; (8016060 <__ieee754_sinhf+0xd8>)
 8016020:	429c      	cmp	r4, r3
 8016022:	dc06      	bgt.n	8016032 <__ieee754_sinhf+0xaa>
 8016024:	f7fe fa88 	bl	8014538 <fabsf>
 8016028:	f7ff f964 	bl	80152f4 <__ieee754_expf>
 801602c:	ee60 7a08 	vmul.f32	s15, s0, s16
 8016030:	e7b8      	b.n	8015fa4 <__ieee754_sinhf+0x1c>
 8016032:	4b0c      	ldr	r3, [pc, #48]	; (8016064 <__ieee754_sinhf+0xdc>)
 8016034:	429c      	cmp	r4, r3
 8016036:	dc0a      	bgt.n	801604e <__ieee754_sinhf+0xc6>
 8016038:	f7fe fa7e 	bl	8014538 <fabsf>
 801603c:	ee20 0a28 	vmul.f32	s0, s0, s17
 8016040:	f7ff f958 	bl	80152f4 <__ieee754_expf>
 8016044:	ee68 7a00 	vmul.f32	s15, s16, s0
 8016048:	ee67 7a80 	vmul.f32	s15, s15, s0
 801604c:	e7aa      	b.n	8015fa4 <__ieee754_sinhf+0x1c>
 801604e:	ed9f 7a03 	vldr	s14, [pc, #12]	; 801605c <__ieee754_sinhf+0xd4>
 8016052:	ee60 7a07 	vmul.f32	s15, s0, s14
 8016056:	e7a5      	b.n	8015fa4 <__ieee754_sinhf+0x1c>
 8016058:	41afffff 	.word	0x41afffff
 801605c:	7cf0bdc2 	.word	0x7cf0bdc2
 8016060:	42b17217 	.word	0x42b17217
 8016064:	42b2d4fc 	.word	0x42b2d4fc

08016068 <__ieee754_sqrtf>:
 8016068:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801606c:	4770      	bx	lr
	...

08016070 <__kernel_cosf>:
 8016070:	ee10 3a10 	vmov	r3, s0
 8016074:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8016078:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 801607c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8016080:	da05      	bge.n	801608e <__kernel_cosf+0x1e>
 8016082:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8016086:	ee17 2a90 	vmov	r2, s15
 801608a:	2a00      	cmp	r2, #0
 801608c:	d03d      	beq.n	801610a <__kernel_cosf+0x9a>
 801608e:	ee60 5a00 	vmul.f32	s11, s0, s0
 8016092:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8016110 <__kernel_cosf+0xa0>
 8016096:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8016114 <__kernel_cosf+0xa4>
 801609a:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8016118 <__kernel_cosf+0xa8>
 801609e:	4a1f      	ldr	r2, [pc, #124]	; (801611c <__kernel_cosf+0xac>)
 80160a0:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80160a4:	4293      	cmp	r3, r2
 80160a6:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8016120 <__kernel_cosf+0xb0>
 80160aa:	eee7 7a25 	vfma.f32	s15, s14, s11
 80160ae:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8016124 <__kernel_cosf+0xb4>
 80160b2:	eea7 7aa5 	vfma.f32	s14, s15, s11
 80160b6:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8016128 <__kernel_cosf+0xb8>
 80160ba:	eee7 7a25 	vfma.f32	s15, s14, s11
 80160be:	eeb0 7a66 	vmov.f32	s14, s13
 80160c2:	eea7 7aa5 	vfma.f32	s14, s15, s11
 80160c6:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80160ca:	ee65 7aa6 	vmul.f32	s15, s11, s13
 80160ce:	ee67 6a25 	vmul.f32	s13, s14, s11
 80160d2:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 80160d6:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80160da:	dc04      	bgt.n	80160e6 <__kernel_cosf+0x76>
 80160dc:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80160e0:	ee36 0a47 	vsub.f32	s0, s12, s14
 80160e4:	4770      	bx	lr
 80160e6:	4a11      	ldr	r2, [pc, #68]	; (801612c <__kernel_cosf+0xbc>)
 80160e8:	4293      	cmp	r3, r2
 80160ea:	bfda      	itte	le
 80160ec:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 80160f0:	ee06 3a90 	vmovle	s13, r3
 80160f4:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 80160f8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80160fc:	ee36 0a66 	vsub.f32	s0, s12, s13
 8016100:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016104:	ee30 0a67 	vsub.f32	s0, s0, s15
 8016108:	4770      	bx	lr
 801610a:	eeb0 0a46 	vmov.f32	s0, s12
 801610e:	4770      	bx	lr
 8016110:	ad47d74e 	.word	0xad47d74e
 8016114:	310f74f6 	.word	0x310f74f6
 8016118:	3d2aaaab 	.word	0x3d2aaaab
 801611c:	3e999999 	.word	0x3e999999
 8016120:	b493f27c 	.word	0xb493f27c
 8016124:	37d00d01 	.word	0x37d00d01
 8016128:	bab60b61 	.word	0xbab60b61
 801612c:	3f480000 	.word	0x3f480000

08016130 <__kernel_rem_pio2f>:
 8016130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016134:	ed2d 8b04 	vpush	{d8-d9}
 8016138:	b0d9      	sub	sp, #356	; 0x164
 801613a:	4688      	mov	r8, r1
 801613c:	9002      	str	r0, [sp, #8]
 801613e:	49bb      	ldr	r1, [pc, #748]	; (801642c <__kernel_rem_pio2f+0x2fc>)
 8016140:	9866      	ldr	r0, [sp, #408]	; 0x198
 8016142:	9301      	str	r3, [sp, #4]
 8016144:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 8016148:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 801614c:	1e59      	subs	r1, r3, #1
 801614e:	1d13      	adds	r3, r2, #4
 8016150:	db27      	blt.n	80161a2 <__kernel_rem_pio2f+0x72>
 8016152:	f1b2 0b03 	subs.w	fp, r2, #3
 8016156:	bf48      	it	mi
 8016158:	f102 0b04 	addmi.w	fp, r2, #4
 801615c:	ea4f 00eb 	mov.w	r0, fp, asr #3
 8016160:	1c45      	adds	r5, r0, #1
 8016162:	00ec      	lsls	r4, r5, #3
 8016164:	1a47      	subs	r7, r0, r1
 8016166:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 801643c <__kernel_rem_pio2f+0x30c>
 801616a:	9403      	str	r4, [sp, #12]
 801616c:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 8016170:	eb0a 0c01 	add.w	ip, sl, r1
 8016174:	ae1c      	add	r6, sp, #112	; 0x70
 8016176:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 801617a:	2400      	movs	r4, #0
 801617c:	4564      	cmp	r4, ip
 801617e:	dd12      	ble.n	80161a6 <__kernel_rem_pio2f+0x76>
 8016180:	9b01      	ldr	r3, [sp, #4]
 8016182:	ac1c      	add	r4, sp, #112	; 0x70
 8016184:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8016188:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 801618c:	f04f 0c00 	mov.w	ip, #0
 8016190:	45d4      	cmp	ip, sl
 8016192:	dc27      	bgt.n	80161e4 <__kernel_rem_pio2f+0xb4>
 8016194:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8016198:	eddf 7aa8 	vldr	s15, [pc, #672]	; 801643c <__kernel_rem_pio2f+0x30c>
 801619c:	4627      	mov	r7, r4
 801619e:	2600      	movs	r6, #0
 80161a0:	e016      	b.n	80161d0 <__kernel_rem_pio2f+0xa0>
 80161a2:	2000      	movs	r0, #0
 80161a4:	e7dc      	b.n	8016160 <__kernel_rem_pio2f+0x30>
 80161a6:	42e7      	cmn	r7, r4
 80161a8:	bf5d      	ittte	pl
 80161aa:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 80161ae:	ee07 3a90 	vmovpl	s15, r3
 80161b2:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 80161b6:	eef0 7a47 	vmovmi.f32	s15, s14
 80161ba:	ece6 7a01 	vstmia	r6!, {s15}
 80161be:	3401      	adds	r4, #1
 80161c0:	e7dc      	b.n	801617c <__kernel_rem_pio2f+0x4c>
 80161c2:	ecf9 6a01 	vldmia	r9!, {s13}
 80161c6:	ed97 7a00 	vldr	s14, [r7]
 80161ca:	eee6 7a87 	vfma.f32	s15, s13, s14
 80161ce:	3601      	adds	r6, #1
 80161d0:	428e      	cmp	r6, r1
 80161d2:	f1a7 0704 	sub.w	r7, r7, #4
 80161d6:	ddf4      	ble.n	80161c2 <__kernel_rem_pio2f+0x92>
 80161d8:	eceb 7a01 	vstmia	fp!, {s15}
 80161dc:	f10c 0c01 	add.w	ip, ip, #1
 80161e0:	3404      	adds	r4, #4
 80161e2:	e7d5      	b.n	8016190 <__kernel_rem_pio2f+0x60>
 80161e4:	ab08      	add	r3, sp, #32
 80161e6:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 80161ea:	eddf 8a93 	vldr	s17, [pc, #588]	; 8016438 <__kernel_rem_pio2f+0x308>
 80161ee:	ed9f 9a91 	vldr	s18, [pc, #580]	; 8016434 <__kernel_rem_pio2f+0x304>
 80161f2:	9304      	str	r3, [sp, #16]
 80161f4:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 80161f8:	4656      	mov	r6, sl
 80161fa:	00b3      	lsls	r3, r6, #2
 80161fc:	9305      	str	r3, [sp, #20]
 80161fe:	ab58      	add	r3, sp, #352	; 0x160
 8016200:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8016204:	ac08      	add	r4, sp, #32
 8016206:	ab44      	add	r3, sp, #272	; 0x110
 8016208:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 801620c:	46a4      	mov	ip, r4
 801620e:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8016212:	4637      	mov	r7, r6
 8016214:	2f00      	cmp	r7, #0
 8016216:	f1a0 0004 	sub.w	r0, r0, #4
 801621a:	dc4f      	bgt.n	80162bc <__kernel_rem_pio2f+0x18c>
 801621c:	4628      	mov	r0, r5
 801621e:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8016222:	f000 fc97 	bl	8016b54 <scalbnf>
 8016226:	eeb0 8a40 	vmov.f32	s16, s0
 801622a:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 801622e:	ee28 0a00 	vmul.f32	s0, s16, s0
 8016232:	f7fe f989 	bl	8014548 <floorf>
 8016236:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 801623a:	eea0 8a67 	vfms.f32	s16, s0, s15
 801623e:	2d00      	cmp	r5, #0
 8016240:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8016244:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8016248:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 801624c:	ee17 9a90 	vmov	r9, s15
 8016250:	ee38 8a40 	vsub.f32	s16, s16, s0
 8016254:	dd44      	ble.n	80162e0 <__kernel_rem_pio2f+0x1b0>
 8016256:	f106 3cff 	add.w	ip, r6, #4294967295
 801625a:	ab08      	add	r3, sp, #32
 801625c:	f1c5 0e08 	rsb	lr, r5, #8
 8016260:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 8016264:	fa47 f00e 	asr.w	r0, r7, lr
 8016268:	4481      	add	r9, r0
 801626a:	fa00 f00e 	lsl.w	r0, r0, lr
 801626e:	1a3f      	subs	r7, r7, r0
 8016270:	f1c5 0007 	rsb	r0, r5, #7
 8016274:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 8016278:	4107      	asrs	r7, r0
 801627a:	2f00      	cmp	r7, #0
 801627c:	dd3f      	ble.n	80162fe <__kernel_rem_pio2f+0x1ce>
 801627e:	f04f 0e00 	mov.w	lr, #0
 8016282:	f109 0901 	add.w	r9, r9, #1
 8016286:	4673      	mov	r3, lr
 8016288:	4576      	cmp	r6, lr
 801628a:	dc6b      	bgt.n	8016364 <__kernel_rem_pio2f+0x234>
 801628c:	2d00      	cmp	r5, #0
 801628e:	dd04      	ble.n	801629a <__kernel_rem_pio2f+0x16a>
 8016290:	2d01      	cmp	r5, #1
 8016292:	d078      	beq.n	8016386 <__kernel_rem_pio2f+0x256>
 8016294:	2d02      	cmp	r5, #2
 8016296:	f000 8081 	beq.w	801639c <__kernel_rem_pio2f+0x26c>
 801629a:	2f02      	cmp	r7, #2
 801629c:	d12f      	bne.n	80162fe <__kernel_rem_pio2f+0x1ce>
 801629e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80162a2:	ee30 8a48 	vsub.f32	s16, s0, s16
 80162a6:	b353      	cbz	r3, 80162fe <__kernel_rem_pio2f+0x1ce>
 80162a8:	4628      	mov	r0, r5
 80162aa:	e9cd 1206 	strd	r1, r2, [sp, #24]
 80162ae:	f000 fc51 	bl	8016b54 <scalbnf>
 80162b2:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 80162b6:	ee38 8a40 	vsub.f32	s16, s16, s0
 80162ba:	e020      	b.n	80162fe <__kernel_rem_pio2f+0x1ce>
 80162bc:	ee60 7a28 	vmul.f32	s15, s0, s17
 80162c0:	3f01      	subs	r7, #1
 80162c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80162c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80162ca:	eea7 0ac9 	vfms.f32	s0, s15, s18
 80162ce:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80162d2:	ecac 0a01 	vstmia	ip!, {s0}
 80162d6:	ed90 0a00 	vldr	s0, [r0]
 80162da:	ee37 0a80 	vadd.f32	s0, s15, s0
 80162de:	e799      	b.n	8016214 <__kernel_rem_pio2f+0xe4>
 80162e0:	d105      	bne.n	80162ee <__kernel_rem_pio2f+0x1be>
 80162e2:	1e70      	subs	r0, r6, #1
 80162e4:	ab08      	add	r3, sp, #32
 80162e6:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 80162ea:	11ff      	asrs	r7, r7, #7
 80162ec:	e7c5      	b.n	801627a <__kernel_rem_pio2f+0x14a>
 80162ee:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80162f2:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80162f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80162fa:	da31      	bge.n	8016360 <__kernel_rem_pio2f+0x230>
 80162fc:	2700      	movs	r7, #0
 80162fe:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8016302:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016306:	f040 809b 	bne.w	8016440 <__kernel_rem_pio2f+0x310>
 801630a:	1e74      	subs	r4, r6, #1
 801630c:	46a4      	mov	ip, r4
 801630e:	2000      	movs	r0, #0
 8016310:	45d4      	cmp	ip, sl
 8016312:	da4a      	bge.n	80163aa <__kernel_rem_pio2f+0x27a>
 8016314:	2800      	cmp	r0, #0
 8016316:	d07a      	beq.n	801640e <__kernel_rem_pio2f+0x2de>
 8016318:	ab08      	add	r3, sp, #32
 801631a:	3d08      	subs	r5, #8
 801631c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8016320:	2b00      	cmp	r3, #0
 8016322:	f000 8081 	beq.w	8016428 <__kernel_rem_pio2f+0x2f8>
 8016326:	4628      	mov	r0, r5
 8016328:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801632c:	00a5      	lsls	r5, r4, #2
 801632e:	f000 fc11 	bl	8016b54 <scalbnf>
 8016332:	aa44      	add	r2, sp, #272	; 0x110
 8016334:	1d2b      	adds	r3, r5, #4
 8016336:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8016438 <__kernel_rem_pio2f+0x308>
 801633a:	18d1      	adds	r1, r2, r3
 801633c:	4622      	mov	r2, r4
 801633e:	2a00      	cmp	r2, #0
 8016340:	f280 80ae 	bge.w	80164a0 <__kernel_rem_pio2f+0x370>
 8016344:	4622      	mov	r2, r4
 8016346:	2a00      	cmp	r2, #0
 8016348:	f2c0 80cc 	blt.w	80164e4 <__kernel_rem_pio2f+0x3b4>
 801634c:	a944      	add	r1, sp, #272	; 0x110
 801634e:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 8016352:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 8016430 <__kernel_rem_pio2f+0x300>
 8016356:	eddf 7a39 	vldr	s15, [pc, #228]	; 801643c <__kernel_rem_pio2f+0x30c>
 801635a:	2000      	movs	r0, #0
 801635c:	1aa1      	subs	r1, r4, r2
 801635e:	e0b6      	b.n	80164ce <__kernel_rem_pio2f+0x39e>
 8016360:	2702      	movs	r7, #2
 8016362:	e78c      	b.n	801627e <__kernel_rem_pio2f+0x14e>
 8016364:	6820      	ldr	r0, [r4, #0]
 8016366:	b94b      	cbnz	r3, 801637c <__kernel_rem_pio2f+0x24c>
 8016368:	b118      	cbz	r0, 8016372 <__kernel_rem_pio2f+0x242>
 801636a:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 801636e:	6020      	str	r0, [r4, #0]
 8016370:	2001      	movs	r0, #1
 8016372:	f10e 0e01 	add.w	lr, lr, #1
 8016376:	3404      	adds	r4, #4
 8016378:	4603      	mov	r3, r0
 801637a:	e785      	b.n	8016288 <__kernel_rem_pio2f+0x158>
 801637c:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 8016380:	6020      	str	r0, [r4, #0]
 8016382:	4618      	mov	r0, r3
 8016384:	e7f5      	b.n	8016372 <__kernel_rem_pio2f+0x242>
 8016386:	1e74      	subs	r4, r6, #1
 8016388:	a808      	add	r0, sp, #32
 801638a:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 801638e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8016392:	f10d 0c20 	add.w	ip, sp, #32
 8016396:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 801639a:	e77e      	b.n	801629a <__kernel_rem_pio2f+0x16a>
 801639c:	1e74      	subs	r4, r6, #1
 801639e:	a808      	add	r0, sp, #32
 80163a0:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 80163a4:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 80163a8:	e7f3      	b.n	8016392 <__kernel_rem_pio2f+0x262>
 80163aa:	ab08      	add	r3, sp, #32
 80163ac:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 80163b0:	f10c 3cff 	add.w	ip, ip, #4294967295
 80163b4:	4318      	orrs	r0, r3
 80163b6:	e7ab      	b.n	8016310 <__kernel_rem_pio2f+0x1e0>
 80163b8:	f10c 0c01 	add.w	ip, ip, #1
 80163bc:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 80163c0:	2c00      	cmp	r4, #0
 80163c2:	d0f9      	beq.n	80163b8 <__kernel_rem_pio2f+0x288>
 80163c4:	9b05      	ldr	r3, [sp, #20]
 80163c6:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 80163ca:	eb0d 0003 	add.w	r0, sp, r3
 80163ce:	9b01      	ldr	r3, [sp, #4]
 80163d0:	18f4      	adds	r4, r6, r3
 80163d2:	ab1c      	add	r3, sp, #112	; 0x70
 80163d4:	1c77      	adds	r7, r6, #1
 80163d6:	384c      	subs	r0, #76	; 0x4c
 80163d8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80163dc:	4466      	add	r6, ip
 80163de:	42be      	cmp	r6, r7
 80163e0:	f6ff af0b 	blt.w	80161fa <__kernel_rem_pio2f+0xca>
 80163e4:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 80163e8:	f8dd e008 	ldr.w	lr, [sp, #8]
 80163ec:	ee07 3a90 	vmov	s15, r3
 80163f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80163f4:	f04f 0c00 	mov.w	ip, #0
 80163f8:	ece4 7a01 	vstmia	r4!, {s15}
 80163fc:	eddf 7a0f 	vldr	s15, [pc, #60]	; 801643c <__kernel_rem_pio2f+0x30c>
 8016400:	46a1      	mov	r9, r4
 8016402:	458c      	cmp	ip, r1
 8016404:	dd07      	ble.n	8016416 <__kernel_rem_pio2f+0x2e6>
 8016406:	ece0 7a01 	vstmia	r0!, {s15}
 801640a:	3701      	adds	r7, #1
 801640c:	e7e7      	b.n	80163de <__kernel_rem_pio2f+0x2ae>
 801640e:	9804      	ldr	r0, [sp, #16]
 8016410:	f04f 0c01 	mov.w	ip, #1
 8016414:	e7d2      	b.n	80163bc <__kernel_rem_pio2f+0x28c>
 8016416:	ecfe 6a01 	vldmia	lr!, {s13}
 801641a:	ed39 7a01 	vldmdb	r9!, {s14}
 801641e:	f10c 0c01 	add.w	ip, ip, #1
 8016422:	eee6 7a87 	vfma.f32	s15, s13, s14
 8016426:	e7ec      	b.n	8016402 <__kernel_rem_pio2f+0x2d2>
 8016428:	3c01      	subs	r4, #1
 801642a:	e775      	b.n	8016318 <__kernel_rem_pio2f+0x1e8>
 801642c:	0807d450 	.word	0x0807d450
 8016430:	0807d424 	.word	0x0807d424
 8016434:	43800000 	.word	0x43800000
 8016438:	3b800000 	.word	0x3b800000
 801643c:	00000000 	.word	0x00000000
 8016440:	9b03      	ldr	r3, [sp, #12]
 8016442:	eeb0 0a48 	vmov.f32	s0, s16
 8016446:	1a98      	subs	r0, r3, r2
 8016448:	f000 fb84 	bl	8016b54 <scalbnf>
 801644c:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8016434 <__kernel_rem_pio2f+0x304>
 8016450:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8016454:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016458:	db19      	blt.n	801648e <__kernel_rem_pio2f+0x35e>
 801645a:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8016438 <__kernel_rem_pio2f+0x308>
 801645e:	ee60 7a27 	vmul.f32	s15, s0, s15
 8016462:	aa08      	add	r2, sp, #32
 8016464:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8016468:	1c74      	adds	r4, r6, #1
 801646a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801646e:	3508      	adds	r5, #8
 8016470:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8016474:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8016478:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801647c:	ee10 3a10 	vmov	r3, s0
 8016480:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8016484:	ee17 3a90 	vmov	r3, s15
 8016488:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801648c:	e74b      	b.n	8016326 <__kernel_rem_pio2f+0x1f6>
 801648e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8016492:	aa08      	add	r2, sp, #32
 8016494:	ee10 3a10 	vmov	r3, s0
 8016498:	4634      	mov	r4, r6
 801649a:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 801649e:	e742      	b.n	8016326 <__kernel_rem_pio2f+0x1f6>
 80164a0:	a808      	add	r0, sp, #32
 80164a2:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 80164a6:	9001      	str	r0, [sp, #4]
 80164a8:	ee07 0a90 	vmov	s15, r0
 80164ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80164b0:	3a01      	subs	r2, #1
 80164b2:	ee67 7a80 	vmul.f32	s15, s15, s0
 80164b6:	ee20 0a07 	vmul.f32	s0, s0, s14
 80164ba:	ed61 7a01 	vstmdb	r1!, {s15}
 80164be:	e73e      	b.n	801633e <__kernel_rem_pio2f+0x20e>
 80164c0:	ecfc 6a01 	vldmia	ip!, {s13}
 80164c4:	ecb6 7a01 	vldmia	r6!, {s14}
 80164c8:	eee6 7a87 	vfma.f32	s15, s13, s14
 80164cc:	3001      	adds	r0, #1
 80164ce:	4550      	cmp	r0, sl
 80164d0:	dc01      	bgt.n	80164d6 <__kernel_rem_pio2f+0x3a6>
 80164d2:	4288      	cmp	r0, r1
 80164d4:	ddf4      	ble.n	80164c0 <__kernel_rem_pio2f+0x390>
 80164d6:	a858      	add	r0, sp, #352	; 0x160
 80164d8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80164dc:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 80164e0:	3a01      	subs	r2, #1
 80164e2:	e730      	b.n	8016346 <__kernel_rem_pio2f+0x216>
 80164e4:	9a66      	ldr	r2, [sp, #408]	; 0x198
 80164e6:	2a02      	cmp	r2, #2
 80164e8:	dc09      	bgt.n	80164fe <__kernel_rem_pio2f+0x3ce>
 80164ea:	2a00      	cmp	r2, #0
 80164ec:	dc2a      	bgt.n	8016544 <__kernel_rem_pio2f+0x414>
 80164ee:	d043      	beq.n	8016578 <__kernel_rem_pio2f+0x448>
 80164f0:	f009 0007 	and.w	r0, r9, #7
 80164f4:	b059      	add	sp, #356	; 0x164
 80164f6:	ecbd 8b04 	vpop	{d8-d9}
 80164fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80164fe:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8016500:	2b03      	cmp	r3, #3
 8016502:	d1f5      	bne.n	80164f0 <__kernel_rem_pio2f+0x3c0>
 8016504:	ab30      	add	r3, sp, #192	; 0xc0
 8016506:	442b      	add	r3, r5
 8016508:	461a      	mov	r2, r3
 801650a:	4619      	mov	r1, r3
 801650c:	4620      	mov	r0, r4
 801650e:	2800      	cmp	r0, #0
 8016510:	f1a1 0104 	sub.w	r1, r1, #4
 8016514:	dc51      	bgt.n	80165ba <__kernel_rem_pio2f+0x48a>
 8016516:	4621      	mov	r1, r4
 8016518:	2901      	cmp	r1, #1
 801651a:	f1a2 0204 	sub.w	r2, r2, #4
 801651e:	dc5c      	bgt.n	80165da <__kernel_rem_pio2f+0x4aa>
 8016520:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 801643c <__kernel_rem_pio2f+0x30c>
 8016524:	3304      	adds	r3, #4
 8016526:	2c01      	cmp	r4, #1
 8016528:	dc67      	bgt.n	80165fa <__kernel_rem_pio2f+0x4ca>
 801652a:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 801652e:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 8016532:	2f00      	cmp	r7, #0
 8016534:	d167      	bne.n	8016606 <__kernel_rem_pio2f+0x4d6>
 8016536:	edc8 6a00 	vstr	s13, [r8]
 801653a:	ed88 7a01 	vstr	s14, [r8, #4]
 801653e:	edc8 7a02 	vstr	s15, [r8, #8]
 8016542:	e7d5      	b.n	80164f0 <__kernel_rem_pio2f+0x3c0>
 8016544:	aa30      	add	r2, sp, #192	; 0xc0
 8016546:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 801643c <__kernel_rem_pio2f+0x30c>
 801654a:	4413      	add	r3, r2
 801654c:	4622      	mov	r2, r4
 801654e:	2a00      	cmp	r2, #0
 8016550:	da24      	bge.n	801659c <__kernel_rem_pio2f+0x46c>
 8016552:	b34f      	cbz	r7, 80165a8 <__kernel_rem_pio2f+0x478>
 8016554:	eef1 7a47 	vneg.f32	s15, s14
 8016558:	edc8 7a00 	vstr	s15, [r8]
 801655c:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 8016560:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016564:	aa31      	add	r2, sp, #196	; 0xc4
 8016566:	2301      	movs	r3, #1
 8016568:	429c      	cmp	r4, r3
 801656a:	da20      	bge.n	80165ae <__kernel_rem_pio2f+0x47e>
 801656c:	b10f      	cbz	r7, 8016572 <__kernel_rem_pio2f+0x442>
 801656e:	eef1 7a67 	vneg.f32	s15, s15
 8016572:	edc8 7a01 	vstr	s15, [r8, #4]
 8016576:	e7bb      	b.n	80164f0 <__kernel_rem_pio2f+0x3c0>
 8016578:	aa30      	add	r2, sp, #192	; 0xc0
 801657a:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 801643c <__kernel_rem_pio2f+0x30c>
 801657e:	4413      	add	r3, r2
 8016580:	2c00      	cmp	r4, #0
 8016582:	da05      	bge.n	8016590 <__kernel_rem_pio2f+0x460>
 8016584:	b10f      	cbz	r7, 801658a <__kernel_rem_pio2f+0x45a>
 8016586:	eef1 7a67 	vneg.f32	s15, s15
 801658a:	edc8 7a00 	vstr	s15, [r8]
 801658e:	e7af      	b.n	80164f0 <__kernel_rem_pio2f+0x3c0>
 8016590:	ed33 7a01 	vldmdb	r3!, {s14}
 8016594:	3c01      	subs	r4, #1
 8016596:	ee77 7a87 	vadd.f32	s15, s15, s14
 801659a:	e7f1      	b.n	8016580 <__kernel_rem_pio2f+0x450>
 801659c:	ed73 7a01 	vldmdb	r3!, {s15}
 80165a0:	3a01      	subs	r2, #1
 80165a2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80165a6:	e7d2      	b.n	801654e <__kernel_rem_pio2f+0x41e>
 80165a8:	eef0 7a47 	vmov.f32	s15, s14
 80165ac:	e7d4      	b.n	8016558 <__kernel_rem_pio2f+0x428>
 80165ae:	ecb2 7a01 	vldmia	r2!, {s14}
 80165b2:	3301      	adds	r3, #1
 80165b4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80165b8:	e7d6      	b.n	8016568 <__kernel_rem_pio2f+0x438>
 80165ba:	edd1 7a00 	vldr	s15, [r1]
 80165be:	edd1 6a01 	vldr	s13, [r1, #4]
 80165c2:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80165c6:	3801      	subs	r0, #1
 80165c8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80165cc:	ed81 7a00 	vstr	s14, [r1]
 80165d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80165d4:	edc1 7a01 	vstr	s15, [r1, #4]
 80165d8:	e799      	b.n	801650e <__kernel_rem_pio2f+0x3de>
 80165da:	edd2 7a00 	vldr	s15, [r2]
 80165de:	edd2 6a01 	vldr	s13, [r2, #4]
 80165e2:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80165e6:	3901      	subs	r1, #1
 80165e8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80165ec:	ed82 7a00 	vstr	s14, [r2]
 80165f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80165f4:	edc2 7a01 	vstr	s15, [r2, #4]
 80165f8:	e78e      	b.n	8016518 <__kernel_rem_pio2f+0x3e8>
 80165fa:	ed33 7a01 	vldmdb	r3!, {s14}
 80165fe:	3c01      	subs	r4, #1
 8016600:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016604:	e78f      	b.n	8016526 <__kernel_rem_pio2f+0x3f6>
 8016606:	eef1 6a66 	vneg.f32	s13, s13
 801660a:	eeb1 7a47 	vneg.f32	s14, s14
 801660e:	edc8 6a00 	vstr	s13, [r8]
 8016612:	ed88 7a01 	vstr	s14, [r8, #4]
 8016616:	eef1 7a67 	vneg.f32	s15, s15
 801661a:	e790      	b.n	801653e <__kernel_rem_pio2f+0x40e>

0801661c <__kernel_sinf>:
 801661c:	ee10 3a10 	vmov	r3, s0
 8016620:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8016624:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8016628:	da04      	bge.n	8016634 <__kernel_sinf+0x18>
 801662a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801662e:	ee17 3a90 	vmov	r3, s15
 8016632:	b35b      	cbz	r3, 801668c <__kernel_sinf+0x70>
 8016634:	ee20 7a00 	vmul.f32	s14, s0, s0
 8016638:	eddf 7a15 	vldr	s15, [pc, #84]	; 8016690 <__kernel_sinf+0x74>
 801663c:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8016694 <__kernel_sinf+0x78>
 8016640:	eea7 6a27 	vfma.f32	s12, s14, s15
 8016644:	eddf 7a14 	vldr	s15, [pc, #80]	; 8016698 <__kernel_sinf+0x7c>
 8016648:	eee6 7a07 	vfma.f32	s15, s12, s14
 801664c:	ed9f 6a13 	vldr	s12, [pc, #76]	; 801669c <__kernel_sinf+0x80>
 8016650:	eea7 6a87 	vfma.f32	s12, s15, s14
 8016654:	eddf 7a12 	vldr	s15, [pc, #72]	; 80166a0 <__kernel_sinf+0x84>
 8016658:	ee60 6a07 	vmul.f32	s13, s0, s14
 801665c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8016660:	b930      	cbnz	r0, 8016670 <__kernel_sinf+0x54>
 8016662:	ed9f 6a10 	vldr	s12, [pc, #64]	; 80166a4 <__kernel_sinf+0x88>
 8016666:	eea7 6a27 	vfma.f32	s12, s14, s15
 801666a:	eea6 0a26 	vfma.f32	s0, s12, s13
 801666e:	4770      	bx	lr
 8016670:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8016674:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8016678:	eee0 7a86 	vfma.f32	s15, s1, s12
 801667c:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8016680:	eddf 7a09 	vldr	s15, [pc, #36]	; 80166a8 <__kernel_sinf+0x8c>
 8016684:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8016688:	ee30 0a60 	vsub.f32	s0, s0, s1
 801668c:	4770      	bx	lr
 801668e:	bf00      	nop
 8016690:	2f2ec9d3 	.word	0x2f2ec9d3
 8016694:	b2d72f34 	.word	0xb2d72f34
 8016698:	3638ef1b 	.word	0x3638ef1b
 801669c:	b9500d01 	.word	0xb9500d01
 80166a0:	3c088889 	.word	0x3c088889
 80166a4:	be2aaaab 	.word	0xbe2aaaab
 80166a8:	3e2aaaab 	.word	0x3e2aaaab

080166ac <__kernel_tanf>:
 80166ac:	b508      	push	{r3, lr}
 80166ae:	ee10 3a10 	vmov	r3, s0
 80166b2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80166b6:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
 80166ba:	eef0 7a40 	vmov.f32	s15, s0
 80166be:	da17      	bge.n	80166f0 <__kernel_tanf+0x44>
 80166c0:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 80166c4:	ee17 1a10 	vmov	r1, s14
 80166c8:	bb41      	cbnz	r1, 801671c <__kernel_tanf+0x70>
 80166ca:	1c43      	adds	r3, r0, #1
 80166cc:	4313      	orrs	r3, r2
 80166ce:	d108      	bne.n	80166e2 <__kernel_tanf+0x36>
 80166d0:	f7fd ff32 	bl	8014538 <fabsf>
 80166d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80166d8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80166dc:	eeb0 0a67 	vmov.f32	s0, s15
 80166e0:	bd08      	pop	{r3, pc}
 80166e2:	2801      	cmp	r0, #1
 80166e4:	d0fa      	beq.n	80166dc <__kernel_tanf+0x30>
 80166e6:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80166ea:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80166ee:	e7f5      	b.n	80166dc <__kernel_tanf+0x30>
 80166f0:	494c      	ldr	r1, [pc, #304]	; (8016824 <__kernel_tanf+0x178>)
 80166f2:	428a      	cmp	r2, r1
 80166f4:	db12      	blt.n	801671c <__kernel_tanf+0x70>
 80166f6:	2b00      	cmp	r3, #0
 80166f8:	bfb8      	it	lt
 80166fa:	eef1 7a40 	vneglt.f32	s15, s0
 80166fe:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 8016828 <__kernel_tanf+0x17c>
 8016702:	ee70 7a67 	vsub.f32	s15, s0, s15
 8016706:	ed9f 0a49 	vldr	s0, [pc, #292]	; 801682c <__kernel_tanf+0x180>
 801670a:	bfb8      	it	lt
 801670c:	eef1 0a60 	vneglt.f32	s1, s1
 8016710:	ee70 0a60 	vsub.f32	s1, s0, s1
 8016714:	ee70 7aa7 	vadd.f32	s15, s1, s15
 8016718:	eddf 0a45 	vldr	s1, [pc, #276]	; 8016830 <__kernel_tanf+0x184>
 801671c:	eddf 5a45 	vldr	s11, [pc, #276]	; 8016834 <__kernel_tanf+0x188>
 8016720:	ed9f 6a45 	vldr	s12, [pc, #276]	; 8016838 <__kernel_tanf+0x18c>
 8016724:	ed9f 5a45 	vldr	s10, [pc, #276]	; 801683c <__kernel_tanf+0x190>
 8016728:	493e      	ldr	r1, [pc, #248]	; (8016824 <__kernel_tanf+0x178>)
 801672a:	ee67 6aa7 	vmul.f32	s13, s15, s15
 801672e:	428a      	cmp	r2, r1
 8016730:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8016734:	eea7 6a25 	vfma.f32	s12, s14, s11
 8016738:	eddf 5a41 	vldr	s11, [pc, #260]	; 8016840 <__kernel_tanf+0x194>
 801673c:	eee6 5a07 	vfma.f32	s11, s12, s14
 8016740:	ed9f 6a40 	vldr	s12, [pc, #256]	; 8016844 <__kernel_tanf+0x198>
 8016744:	eea5 6a87 	vfma.f32	s12, s11, s14
 8016748:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8016848 <__kernel_tanf+0x19c>
 801674c:	eee6 5a07 	vfma.f32	s11, s12, s14
 8016750:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 801684c <__kernel_tanf+0x1a0>
 8016754:	eea5 6a87 	vfma.f32	s12, s11, s14
 8016758:	eddf 5a3d 	vldr	s11, [pc, #244]	; 8016850 <__kernel_tanf+0x1a4>
 801675c:	eee7 5a05 	vfma.f32	s11, s14, s10
 8016760:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 8016854 <__kernel_tanf+0x1a8>
 8016764:	eea5 5a87 	vfma.f32	s10, s11, s14
 8016768:	eddf 5a3b 	vldr	s11, [pc, #236]	; 8016858 <__kernel_tanf+0x1ac>
 801676c:	eee5 5a07 	vfma.f32	s11, s10, s14
 8016770:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 801685c <__kernel_tanf+0x1b0>
 8016774:	eea5 5a87 	vfma.f32	s10, s11, s14
 8016778:	eddf 5a39 	vldr	s11, [pc, #228]	; 8016860 <__kernel_tanf+0x1b4>
 801677c:	eee5 5a07 	vfma.f32	s11, s10, s14
 8016780:	eeb0 7a46 	vmov.f32	s14, s12
 8016784:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8016788:	ee27 5aa6 	vmul.f32	s10, s15, s13
 801678c:	eeb0 6a60 	vmov.f32	s12, s1
 8016790:	eea7 6a05 	vfma.f32	s12, s14, s10
 8016794:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8016864 <__kernel_tanf+0x1b8>
 8016798:	eee6 0a26 	vfma.f32	s1, s12, s13
 801679c:	eee5 0a07 	vfma.f32	s1, s10, s14
 80167a0:	ee37 7aa0 	vadd.f32	s14, s15, s1
 80167a4:	db1d      	blt.n	80167e2 <__kernel_tanf+0x136>
 80167a6:	ee06 0a90 	vmov	s13, r0
 80167aa:	eeb8 0ae6 	vcvt.f32.s32	s0, s13
 80167ae:	ee27 6a07 	vmul.f32	s12, s14, s14
 80167b2:	ee37 7a00 	vadd.f32	s14, s14, s0
 80167b6:	179b      	asrs	r3, r3, #30
 80167b8:	eec6 6a07 	vdiv.f32	s13, s12, s14
 80167bc:	f003 0302 	and.w	r3, r3, #2
 80167c0:	f1c3 0301 	rsb	r3, r3, #1
 80167c4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80167c8:	ee76 0ae0 	vsub.f32	s1, s13, s1
 80167cc:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80167d0:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80167d4:	ee07 3a90 	vmov	s15, r3
 80167d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80167dc:	ee67 7a80 	vmul.f32	s15, s15, s0
 80167e0:	e77c      	b.n	80166dc <__kernel_tanf+0x30>
 80167e2:	2801      	cmp	r0, #1
 80167e4:	d01b      	beq.n	801681e <__kernel_tanf+0x172>
 80167e6:	4b20      	ldr	r3, [pc, #128]	; (8016868 <__kernel_tanf+0x1bc>)
 80167e8:	ee17 2a10 	vmov	r2, s14
 80167ec:	401a      	ands	r2, r3
 80167ee:	ee06 2a10 	vmov	s12, r2
 80167f2:	ee76 7a67 	vsub.f32	s15, s12, s15
 80167f6:	ee70 0ae7 	vsub.f32	s1, s1, s15
 80167fa:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 80167fe:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8016802:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8016806:	ee16 2a90 	vmov	r2, s13
 801680a:	4013      	ands	r3, r2
 801680c:	ee07 3a90 	vmov	s15, r3
 8016810:	eea6 7a27 	vfma.f32	s14, s12, s15
 8016814:	eea0 7aa7 	vfma.f32	s14, s1, s15
 8016818:	eee7 7a26 	vfma.f32	s15, s14, s13
 801681c:	e75e      	b.n	80166dc <__kernel_tanf+0x30>
 801681e:	eef0 7a47 	vmov.f32	s15, s14
 8016822:	e75b      	b.n	80166dc <__kernel_tanf+0x30>
 8016824:	3f2ca140 	.word	0x3f2ca140
 8016828:	3f490fda 	.word	0x3f490fda
 801682c:	33222168 	.word	0x33222168
 8016830:	00000000 	.word	0x00000000
 8016834:	b79bae5f 	.word	0xb79bae5f
 8016838:	38a3f445 	.word	0x38a3f445
 801683c:	37d95384 	.word	0x37d95384
 8016840:	3a1a26c8 	.word	0x3a1a26c8
 8016844:	3b6b6916 	.word	0x3b6b6916
 8016848:	3cb327a4 	.word	0x3cb327a4
 801684c:	3e088889 	.word	0x3e088889
 8016850:	3895c07a 	.word	0x3895c07a
 8016854:	398137b9 	.word	0x398137b9
 8016858:	3abede48 	.word	0x3abede48
 801685c:	3c11371f 	.word	0x3c11371f
 8016860:	3d5d0dd1 	.word	0x3d5d0dd1
 8016864:	3eaaaaab 	.word	0x3eaaaaab
 8016868:	fffff000 	.word	0xfffff000

0801686c <with_errnof>:
 801686c:	b513      	push	{r0, r1, r4, lr}
 801686e:	4604      	mov	r4, r0
 8016870:	ed8d 0a01 	vstr	s0, [sp, #4]
 8016874:	f7fa fba0 	bl	8010fb8 <__errno>
 8016878:	ed9d 0a01 	vldr	s0, [sp, #4]
 801687c:	6004      	str	r4, [r0, #0]
 801687e:	b002      	add	sp, #8
 8016880:	bd10      	pop	{r4, pc}

08016882 <xflowf>:
 8016882:	b130      	cbz	r0, 8016892 <xflowf+0x10>
 8016884:	eef1 7a40 	vneg.f32	s15, s0
 8016888:	ee27 0a80 	vmul.f32	s0, s15, s0
 801688c:	2022      	movs	r0, #34	; 0x22
 801688e:	f7ff bfed 	b.w	801686c <with_errnof>
 8016892:	eef0 7a40 	vmov.f32	s15, s0
 8016896:	e7f7      	b.n	8016888 <xflowf+0x6>

08016898 <__math_uflowf>:
 8016898:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80168a0 <__math_uflowf+0x8>
 801689c:	f7ff bff1 	b.w	8016882 <xflowf>
 80168a0:	10000000 	.word	0x10000000

080168a4 <__math_oflowf>:
 80168a4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80168ac <__math_oflowf+0x8>
 80168a8:	f7ff bfeb 	b.w	8016882 <xflowf>
 80168ac:	70000000 	.word	0x70000000

080168b0 <__math_divzerof>:
 80168b0:	2800      	cmp	r0, #0
 80168b2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80168b6:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 80168ba:	bf08      	it	eq
 80168bc:	eef0 7a40 	vmoveq.f32	s15, s0
 80168c0:	ed9f 0a03 	vldr	s0, [pc, #12]	; 80168d0 <__math_divzerof+0x20>
 80168c4:	2022      	movs	r0, #34	; 0x22
 80168c6:	ee87 0a80 	vdiv.f32	s0, s15, s0
 80168ca:	f7ff bfcf 	b.w	801686c <with_errnof>
 80168ce:	bf00      	nop
 80168d0:	00000000 	.word	0x00000000

080168d4 <__math_invalidf>:
 80168d4:	eef0 7a40 	vmov.f32	s15, s0
 80168d8:	ee30 7a40 	vsub.f32	s14, s0, s0
 80168dc:	eef4 7a67 	vcmp.f32	s15, s15
 80168e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80168e4:	ee87 0a07 	vdiv.f32	s0, s14, s14
 80168e8:	d602      	bvs.n	80168f0 <__math_invalidf+0x1c>
 80168ea:	2021      	movs	r0, #33	; 0x21
 80168ec:	f7ff bfbe 	b.w	801686c <with_errnof>
 80168f0:	4770      	bx	lr
	...

080168f4 <expm1f>:
 80168f4:	ee10 2a10 	vmov	r2, s0
 80168f8:	497d      	ldr	r1, [pc, #500]	; (8016af0 <expm1f+0x1fc>)
 80168fa:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 80168fe:	428b      	cmp	r3, r1
 8016900:	d921      	bls.n	8016946 <expm1f+0x52>
 8016902:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8016906:	d902      	bls.n	801690e <expm1f+0x1a>
 8016908:	ee30 0a00 	vadd.f32	s0, s0, s0
 801690c:	4770      	bx	lr
 801690e:	d106      	bne.n	801691e <expm1f+0x2a>
 8016910:	2a00      	cmp	r2, #0
 8016912:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8016916:	bfb8      	it	lt
 8016918:	eeb0 0a67 	vmovlt.f32	s0, s15
 801691c:	4770      	bx	lr
 801691e:	2a00      	cmp	r2, #0
 8016920:	db05      	blt.n	801692e <expm1f+0x3a>
 8016922:	4974      	ldr	r1, [pc, #464]	; (8016af4 <expm1f+0x200>)
 8016924:	428b      	cmp	r3, r1
 8016926:	d95c      	bls.n	80169e2 <expm1f+0xee>
 8016928:	2000      	movs	r0, #0
 801692a:	f7ff bfbb 	b.w	80168a4 <__math_oflowf>
 801692e:	eddf 7a72 	vldr	s15, [pc, #456]	; 8016af8 <expm1f+0x204>
 8016932:	ee70 7a27 	vadd.f32	s15, s0, s15
 8016936:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801693a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801693e:	d550      	bpl.n	80169e2 <expm1f+0xee>
 8016940:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8016944:	4770      	bx	lr
 8016946:	496d      	ldr	r1, [pc, #436]	; (8016afc <expm1f+0x208>)
 8016948:	428b      	cmp	r3, r1
 801694a:	d967      	bls.n	8016a1c <expm1f+0x128>
 801694c:	496c      	ldr	r1, [pc, #432]	; (8016b00 <expm1f+0x20c>)
 801694e:	428b      	cmp	r3, r1
 8016950:	d847      	bhi.n	80169e2 <expm1f+0xee>
 8016952:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8016b04 <expm1f+0x210>
 8016956:	2a00      	cmp	r2, #0
 8016958:	bfa7      	ittee	ge
 801695a:	ee30 7a47 	vsubge.f32	s14, s0, s14
 801695e:	eddf 7a6a 	vldrge	s15, [pc, #424]	; 8016b08 <expm1f+0x214>
 8016962:	eddf 7a6a 	vldrlt	s15, [pc, #424]	; 8016b0c <expm1f+0x218>
 8016966:	ee30 7a07 	vaddlt.f32	s14, s0, s14
 801696a:	bfac      	ite	ge
 801696c:	2301      	movge	r3, #1
 801696e:	f04f 33ff 	movlt.w	r3, #4294967295
 8016972:	ee37 0a67 	vsub.f32	s0, s14, s15
 8016976:	ee37 7a40 	vsub.f32	s14, s14, s0
 801697a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801697e:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8016982:	ee20 4a25 	vmul.f32	s8, s0, s11
 8016986:	ed9f 6a62 	vldr	s12, [pc, #392]	; 8016b10 <expm1f+0x21c>
 801698a:	eddf 6a62 	vldr	s13, [pc, #392]	; 8016b14 <expm1f+0x220>
 801698e:	ed9f 5a62 	vldr	s10, [pc, #392]	; 8016b18 <expm1f+0x224>
 8016992:	ee20 7a04 	vmul.f32	s14, s0, s8
 8016996:	eef0 4a08 	vmov.f32	s9, #8	; 0x40400000  3.0
 801699a:	eee7 6a06 	vfma.f32	s13, s14, s12
 801699e:	ed9f 6a5f 	vldr	s12, [pc, #380]	; 8016b1c <expm1f+0x228>
 80169a2:	eea6 6a87 	vfma.f32	s12, s13, s14
 80169a6:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8016b20 <expm1f+0x22c>
 80169aa:	eee6 6a07 	vfma.f32	s13, s12, s14
 80169ae:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80169b2:	eea6 5a87 	vfma.f32	s10, s13, s14
 80169b6:	eef0 6a46 	vmov.f32	s13, s12
 80169ba:	eee5 6a07 	vfma.f32	s13, s10, s14
 80169be:	eee4 4a66 	vfms.f32	s9, s8, s13
 80169c2:	eeb1 4a08 	vmov.f32	s8, #24	; 0x40c00000  6.0
 80169c6:	eea0 4a64 	vfms.f32	s8, s0, s9
 80169ca:	ee36 5ae4 	vsub.f32	s10, s13, s9
 80169ce:	eec5 6a04 	vdiv.f32	s13, s10, s8
 80169d2:	ee66 6a87 	vmul.f32	s13, s13, s14
 80169d6:	bb7b      	cbnz	r3, 8016a38 <expm1f+0x144>
 80169d8:	eef0 7a47 	vmov.f32	s15, s14
 80169dc:	eed0 7a26 	vfnms.f32	s15, s0, s13
 80169e0:	e025      	b.n	8016a2e <expm1f+0x13a>
 80169e2:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 80169e6:	2a00      	cmp	r2, #0
 80169e8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80169ec:	bfb8      	it	lt
 80169ee:	eef0 7a47 	vmovlt.f32	s15, s14
 80169f2:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8016b24 <expm1f+0x230>
 80169f6:	eddf 6a43 	vldr	s13, [pc, #268]	; 8016b04 <expm1f+0x210>
 80169fa:	ee40 7a07 	vmla.f32	s15, s0, s14
 80169fe:	eeb0 7a40 	vmov.f32	s14, s0
 8016a02:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8016a06:	ee17 3a90 	vmov	r3, s15
 8016a0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016a0e:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8016a12:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8016b08 <expm1f+0x214>
 8016a16:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8016a1a:	e7aa      	b.n	8016972 <expm1f+0x7e>
 8016a1c:	f1b3 5f4c 	cmp.w	r3, #855638016	; 0x33000000
 8016a20:	d208      	bcs.n	8016a34 <expm1f+0x140>
 8016a22:	eddf 7a41 	vldr	s15, [pc, #260]	; 8016b28 <expm1f+0x234>
 8016a26:	ee70 7a27 	vadd.f32	s15, s0, s15
 8016a2a:	ee77 7ae7 	vsub.f32	s15, s15, s15
 8016a2e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8016a32:	4770      	bx	lr
 8016a34:	2300      	movs	r3, #0
 8016a36:	e7a2      	b.n	801697e <expm1f+0x8a>
 8016a38:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8016a3c:	1c5a      	adds	r2, r3, #1
 8016a3e:	eed6 7a80 	vfnms.f32	s15, s13, s0
 8016a42:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016a46:	d106      	bne.n	8016a56 <expm1f+0x162>
 8016a48:	ee70 7a67 	vsub.f32	s15, s0, s15
 8016a4c:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 8016a50:	eea7 0aa5 	vfma.f32	s0, s15, s11
 8016a54:	4770      	bx	lr
 8016a56:	2b01      	cmp	r3, #1
 8016a58:	d118      	bne.n	8016a8c <expm1f+0x198>
 8016a5a:	eebd 7a00 	vmov.f32	s14, #208	; 0xbe800000 -0.250
 8016a5e:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8016a62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a66:	bf5b      	ittet	pl
 8016a68:	ee70 7a67 	vsubpl.f32	s15, s0, s15
 8016a6c:	eeb0 7a00 	vmovpl.f32	s14, #0	; 0x40000000  2.0
 8016a70:	ee30 0a25 	vaddmi.f32	s0, s0, s11
 8016a74:	eea7 6a87 	vfmapl.f32	s12, s15, s14
 8016a78:	bf43      	ittte	mi
 8016a7a:	ee77 7ac0 	vsubmi.f32	s15, s15, s0
 8016a7e:	eeb8 0a00 	vmovmi.f32	s0, #128	; 0xc0000000 -2.0
 8016a82:	ee27 0a80 	vmulmi.f32	s0, s15, s0
 8016a86:	eeb0 0a46 	vmovpl.f32	s0, s12
 8016a8a:	4770      	bx	lr
 8016a8c:	1c5a      	adds	r2, r3, #1
 8016a8e:	2a39      	cmp	r2, #57	; 0x39
 8016a90:	ea4f 51c3 	mov.w	r1, r3, lsl #23
 8016a94:	d90b      	bls.n	8016aae <expm1f+0x1ba>
 8016a96:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8016a9a:	ee36 0a40 	vsub.f32	s0, s12, s0
 8016a9e:	ee10 3a10 	vmov	r3, s0
 8016aa2:	440b      	add	r3, r1
 8016aa4:	ee00 3a10 	vmov	s0, r3
 8016aa8:	ee30 0a46 	vsub.f32	s0, s0, s12
 8016aac:	4770      	bx	lr
 8016aae:	2b16      	cmp	r3, #22
 8016ab0:	dc11      	bgt.n	8016ad6 <expm1f+0x1e2>
 8016ab2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8016ab6:	fa42 f303 	asr.w	r3, r2, r3
 8016aba:	f1c3 537e 	rsb	r3, r3, #1065353216	; 0x3f800000
 8016abe:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8016ac2:	ee07 3a90 	vmov	s15, r3
 8016ac6:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8016aca:	ee10 3a10 	vmov	r3, s0
 8016ace:	440b      	add	r3, r1
 8016ad0:	ee00 3a10 	vmov	s0, r3
 8016ad4:	4770      	bx	lr
 8016ad6:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8016ada:	05db      	lsls	r3, r3, #23
 8016adc:	ee07 3a10 	vmov	s14, r3
 8016ae0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016ae4:	ee70 7a67 	vsub.f32	s15, s0, s15
 8016ae8:	ee37 0a86 	vadd.f32	s0, s15, s12
 8016aec:	e7ed      	b.n	8016aca <expm1f+0x1d6>
 8016aee:	bf00      	nop
 8016af0:	4195b843 	.word	0x4195b843
 8016af4:	42b17217 	.word	0x42b17217
 8016af8:	0da24260 	.word	0x0da24260
 8016afc:	3eb17218 	.word	0x3eb17218
 8016b00:	3f851591 	.word	0x3f851591
 8016b04:	3f317180 	.word	0x3f317180
 8016b08:	3717f7d1 	.word	0x3717f7d1
 8016b0c:	b717f7d1 	.word	0xb717f7d1
 8016b10:	b457edbb 	.word	0xb457edbb
 8016b14:	36867e54 	.word	0x36867e54
 8016b18:	bd088889 	.word	0xbd088889
 8016b1c:	b8a670cd 	.word	0xb8a670cd
 8016b20:	3ad00d01 	.word	0x3ad00d01
 8016b24:	3fb8aa3b 	.word	0x3fb8aa3b
 8016b28:	7149f2ca 	.word	0x7149f2ca

08016b2c <finitef>:
 8016b2c:	b082      	sub	sp, #8
 8016b2e:	ed8d 0a01 	vstr	s0, [sp, #4]
 8016b32:	9801      	ldr	r0, [sp, #4]
 8016b34:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8016b38:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8016b3c:	bfac      	ite	ge
 8016b3e:	2000      	movge	r0, #0
 8016b40:	2001      	movlt	r0, #1
 8016b42:	b002      	add	sp, #8
 8016b44:	4770      	bx	lr
	...

08016b48 <nanf>:
 8016b48:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8016b50 <nanf+0x8>
 8016b4c:	4770      	bx	lr
 8016b4e:	bf00      	nop
 8016b50:	7fc00000 	.word	0x7fc00000

08016b54 <scalbnf>:
 8016b54:	ee10 3a10 	vmov	r3, s0
 8016b58:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8016b5c:	d025      	beq.n	8016baa <scalbnf+0x56>
 8016b5e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8016b62:	d302      	bcc.n	8016b6a <scalbnf+0x16>
 8016b64:	ee30 0a00 	vadd.f32	s0, s0, s0
 8016b68:	4770      	bx	lr
 8016b6a:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8016b6e:	d122      	bne.n	8016bb6 <scalbnf+0x62>
 8016b70:	4b2a      	ldr	r3, [pc, #168]	; (8016c1c <scalbnf+0xc8>)
 8016b72:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8016c20 <scalbnf+0xcc>
 8016b76:	4298      	cmp	r0, r3
 8016b78:	ee20 0a27 	vmul.f32	s0, s0, s15
 8016b7c:	db16      	blt.n	8016bac <scalbnf+0x58>
 8016b7e:	ee10 3a10 	vmov	r3, s0
 8016b82:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8016b86:	3a19      	subs	r2, #25
 8016b88:	4402      	add	r2, r0
 8016b8a:	2afe      	cmp	r2, #254	; 0xfe
 8016b8c:	dd15      	ble.n	8016bba <scalbnf+0x66>
 8016b8e:	ee10 3a10 	vmov	r3, s0
 8016b92:	eddf 7a24 	vldr	s15, [pc, #144]	; 8016c24 <scalbnf+0xd0>
 8016b96:	eddf 6a24 	vldr	s13, [pc, #144]	; 8016c28 <scalbnf+0xd4>
 8016b9a:	2b00      	cmp	r3, #0
 8016b9c:	eeb0 7a67 	vmov.f32	s14, s15
 8016ba0:	bfb8      	it	lt
 8016ba2:	eef0 7a66 	vmovlt.f32	s15, s13
 8016ba6:	ee27 0a27 	vmul.f32	s0, s14, s15
 8016baa:	4770      	bx	lr
 8016bac:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8016c2c <scalbnf+0xd8>
 8016bb0:	ee20 0a27 	vmul.f32	s0, s0, s15
 8016bb4:	4770      	bx	lr
 8016bb6:	0dd2      	lsrs	r2, r2, #23
 8016bb8:	e7e6      	b.n	8016b88 <scalbnf+0x34>
 8016bba:	2a00      	cmp	r2, #0
 8016bbc:	dd06      	ble.n	8016bcc <scalbnf+0x78>
 8016bbe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8016bc2:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8016bc6:	ee00 3a10 	vmov	s0, r3
 8016bca:	4770      	bx	lr
 8016bcc:	f112 0f16 	cmn.w	r2, #22
 8016bd0:	da1a      	bge.n	8016c08 <scalbnf+0xb4>
 8016bd2:	f24c 3350 	movw	r3, #50000	; 0xc350
 8016bd6:	4298      	cmp	r0, r3
 8016bd8:	ee10 3a10 	vmov	r3, s0
 8016bdc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8016be0:	dd0a      	ble.n	8016bf8 <scalbnf+0xa4>
 8016be2:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8016c24 <scalbnf+0xd0>
 8016be6:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8016c28 <scalbnf+0xd4>
 8016bea:	eef0 7a40 	vmov.f32	s15, s0
 8016bee:	2b00      	cmp	r3, #0
 8016bf0:	bf18      	it	ne
 8016bf2:	eeb0 0a47 	vmovne.f32	s0, s14
 8016bf6:	e7db      	b.n	8016bb0 <scalbnf+0x5c>
 8016bf8:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8016c2c <scalbnf+0xd8>
 8016bfc:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8016c30 <scalbnf+0xdc>
 8016c00:	eef0 7a40 	vmov.f32	s15, s0
 8016c04:	2b00      	cmp	r3, #0
 8016c06:	e7f3      	b.n	8016bf0 <scalbnf+0x9c>
 8016c08:	3219      	adds	r2, #25
 8016c0a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8016c0e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8016c12:	eddf 7a08 	vldr	s15, [pc, #32]	; 8016c34 <scalbnf+0xe0>
 8016c16:	ee07 3a10 	vmov	s14, r3
 8016c1a:	e7c4      	b.n	8016ba6 <scalbnf+0x52>
 8016c1c:	ffff3cb0 	.word	0xffff3cb0
 8016c20:	4c000000 	.word	0x4c000000
 8016c24:	7149f2ca 	.word	0x7149f2ca
 8016c28:	f149f2ca 	.word	0xf149f2ca
 8016c2c:	0da24260 	.word	0x0da24260
 8016c30:	8da24260 	.word	0x8da24260
 8016c34:	33000000 	.word	0x33000000

08016c38 <_init>:
 8016c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016c3a:	bf00      	nop
 8016c3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016c3e:	bc08      	pop	{r3}
 8016c40:	469e      	mov	lr, r3
 8016c42:	4770      	bx	lr

08016c44 <_fini>:
 8016c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016c46:	bf00      	nop
 8016c48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016c4a:	bc08      	pop	{r3}
 8016c4c:	469e      	mov	lr, r3
 8016c4e:	4770      	bx	lr
